/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(1);
	
	var bootstrap = __webpack_require__(142);
	var init = __webpack_require__(149);
	var config = __webpack_require__(150);
	var adverts = __webpack_require__(264);
	var analytics = __webpack_require__(208);
	var analyticsHelper = __webpack_require__(171);
	var Utils = __webpack_require__(143);
	var sections = __webpack_require__(152);
	var locale = __webpack_require__(153);
	var currencyProviders = __webpack_require__(280);
	var addLoadEvent = __webpack_require__(262);
	var api = __webpack_require__(281);
	var objects = __webpack_require__(172);
	var classes = __webpack_require__(155);
	var pubsub = __webpack_require__(202);
	var lotame = __webpack_require__(156);
	var Predicate = __webpack_require__(197);
	var Stats = __webpack_require__(261);
	var Survey = __webpack_require__(154);
	var logger = __webpack_require__(144);
	var stickyAdvert = __webpack_require__(284);
	var idcta = __webpack_require__(263);
	
	// grr webpack and comscore.streaming.min module implmentation don't work together
	var comscoreStreaming = __webpack_require__(285);
	
	var log = logger('index');
	log.info('Using Webpack');
	
	Object.assign(window.bbcdotcom, {
	    objects: objects,
	    domLoaded: false,
	    addLoadEvent: addLoadEvent,
	    classes: classes,
	    config: config,
	    currencyProviders: currencyProviders,
	    utils: Utils,
	    adverts: adverts,
	    analytics: analytics,
	    analyticsHelper: analyticsHelper,
	    sections: sections,
	    locale: locale,
	    lotame: lotame,
	    pubsub: pubsub,
	    Predicate: Predicate,
	    stats: Stats,
	    survey: Survey,
	    Logger: logger,
	    stickyAdvert: stickyAdvert,
	    idcta: idcta
	});
	
	bootstrap();
	
	window.bbcdotcom.init = init.bind(window.bbcdotcom);
	
	Object.assign(window.bbcdotcom, api);
	
	module.exports = window.bbcdotcom;
	window.ns_ = comscoreStreaming;
	window.google_ad_request_done = window.bbcdotcom.adverts.adsenseRenderer.google_ad_request_done;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(2);
	__webpack_require__(101);
	__webpack_require__(53);
	__webpack_require__(104);
	__webpack_require__(108);
	__webpack_require__(109);
	__webpack_require__(129);
	__webpack_require__(131);
	__webpack_require__(137);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(3);
	__webpack_require__(40);
	__webpack_require__(41);
	__webpack_require__(42);
	__webpack_require__(46);
	__webpack_require__(49);
	__webpack_require__(50);
	__webpack_require__(53);
	__webpack_require__(55);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);
	__webpack_require__(59);
	__webpack_require__(60);
	__webpack_require__(63);
	__webpack_require__(65);
	__webpack_require__(67);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(74);
	__webpack_require__(75);
	__webpack_require__(76);
	__webpack_require__(77);
	__webpack_require__(78);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(83);
	__webpack_require__(86);
	__webpack_require__(87);
	__webpack_require__(88);
	__webpack_require__(90);
	__webpack_require__(91);
	__webpack_require__(95);
	__webpack_require__(97);
	__webpack_require__(98);
	module.exports = __webpack_require__(6);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(25) });


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5);
	var core = __webpack_require__(6);
	var hide = __webpack_require__(7);
	var redefine = __webpack_require__(17);
	var ctx = __webpack_require__(23);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
	  var key, own, out, exp;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if (target) redefine(target, key, out, type & $export.U);
	    // export
	    if (exports[key] != out) hide(exports, key, exp);
	    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 5 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 6 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.11' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(8);
	var createDesc = __webpack_require__(16);
	module.exports = __webpack_require__(12) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(9);
	var IE8_DOM_DEFINE = __webpack_require__(11);
	var toPrimitive = __webpack_require__(15);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(12) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 10 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(12) && !__webpack_require__(13)(function () {
	  return Object.defineProperty(__webpack_require__(14)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(13)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	var document = __webpack_require__(5).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(10);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5);
	var hide = __webpack_require__(7);
	var has = __webpack_require__(18);
	var SRC = __webpack_require__(19)('src');
	var $toString = __webpack_require__(20);
	var TO_STRING = 'toString';
	var TPL = ('' + $toString).split(TO_STRING);
	
	__webpack_require__(6).inspectSource = function (it) {
	  return $toString.call(it);
	};
	
	(module.exports = function (O, key, val, safe) {
	  var isFunction = typeof val == 'function';
	  if (isFunction) has(val, 'name') || hide(val, 'name', key);
	  if (O[key] === val) return;
	  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if (O === global) {
	    O[key] = val;
	  } else if (!safe) {
	    delete O[key];
	    hide(O, key, val);
	  } else if (O[key]) {
	    O[key] = val;
	  } else {
	    hide(O, key, val);
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString() {
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});


/***/ }),
/* 18 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(21)('native-function-to-string', Function.toString);


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(6);
	var global = __webpack_require__(5);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(22) ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	module.exports = false;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(24);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(9);
	var dPs = __webpack_require__(26);
	var enumBugKeys = __webpack_require__(38);
	var IE_PROTO = __webpack_require__(37)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(14)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(39).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(8);
	var anObject = __webpack_require__(9);
	var getKeys = __webpack_require__(27);
	
	module.exports = __webpack_require__(12) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(28);
	var enumBugKeys = __webpack_require__(38);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(18);
	var toIObject = __webpack_require__(29);
	var arrayIndexOf = __webpack_require__(33)(false);
	var IE_PROTO = __webpack_require__(37)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(30);
	var defined = __webpack_require__(32);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(31);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 31 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(29);
	var toLength = __webpack_require__(34);
	var toAbsoluteIndex = __webpack_require__(36);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(35);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(35);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(21)('keys');
	var uid = __webpack_require__(19);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(5).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(12), 'Object', { defineProperty: __webpack_require__(8).f });


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	$export($export.S + $export.F * !__webpack_require__(12), 'Object', { defineProperties: __webpack_require__(26) });


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(29);
	var $getOwnPropertyDescriptor = __webpack_require__(43).f;
	
	__webpack_require__(45)('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(44);
	var createDesc = __webpack_require__(16);
	var toIObject = __webpack_require__(29);
	var toPrimitive = __webpack_require__(15);
	var has = __webpack_require__(18);
	var IE8_DOM_DEFINE = __webpack_require__(11);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(12) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(4);
	var core = __webpack_require__(6);
	var fails = __webpack_require__(13);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(47);
	var $getPrototypeOf = __webpack_require__(48);
	
	__webpack_require__(45)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(32);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(18);
	var toObject = __webpack_require__(47);
	var IE_PROTO = __webpack_require__(37)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(47);
	var $keys = __webpack_require__(27);
	
	__webpack_require__(45)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(45)('getOwnPropertyNames', function () {
	  return __webpack_require__(51).f;
	});


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(29);
	var gOPN = __webpack_require__(52).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(28);
	var hiddenKeys = __webpack_require__(38).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.5 Object.freeze(O)
	var isObject = __webpack_require__(10);
	var meta = __webpack_require__(54).onFreeze;
	
	__webpack_require__(45)('freeze', function ($freeze) {
	  return function freeze(it) {
	    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
	  };
	});


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(19)('meta');
	var isObject = __webpack_require__(10);
	var has = __webpack_require__(18);
	var setDesc = __webpack_require__(8).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(13)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.17 Object.seal(O)
	var isObject = __webpack_require__(10);
	var meta = __webpack_require__(54).onFreeze;
	
	__webpack_require__(45)('seal', function ($seal) {
	  return function seal(it) {
	    return $seal && isObject(it) ? $seal(meta(it)) : it;
	  };
	});


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.15 Object.preventExtensions(O)
	var isObject = __webpack_require__(10);
	var meta = __webpack_require__(54).onFreeze;
	
	__webpack_require__(45)('preventExtensions', function ($preventExtensions) {
	  return function preventExtensions(it) {
	    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
	  };
	});


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.12 Object.isFrozen(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(45)('isFrozen', function ($isFrozen) {
	  return function isFrozen(it) {
	    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
	  };
	});


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.13 Object.isSealed(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(45)('isSealed', function ($isSealed) {
	  return function isSealed(it) {
	    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
	  };
	});


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.11 Object.isExtensible(O)
	var isObject = __webpack_require__(10);
	
	__webpack_require__(45)('isExtensible', function ($isExtensible) {
	  return function isExtensible(it) {
	    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
	  };
	});


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	var $export = __webpack_require__(4);
	
	$export($export.P, 'Function', { bind: __webpack_require__(61) });


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var aFunction = __webpack_require__(24);
	var isObject = __webpack_require__(10);
	var invoke = __webpack_require__(62);
	var arraySlice = [].slice;
	var factories = {};
	
	var construct = function (F, len, args) {
	  if (!(len in factories)) {
	    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
	  } return factories[len](F, args);
	};
	
	module.exports = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = arraySlice.call(arguments, 1);
	  var bound = function (/* args... */) {
	    var args = partArgs.concat(arraySlice.call(arguments));
	    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
	  };
	  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
	  return bound;
	};


/***/ }),
/* 62 */
/***/ (function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	var $export = __webpack_require__(4);
	
	$export($export.S, 'Array', { isArray: __webpack_require__(64) });


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(31);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.13 Array.prototype.join(separator)
	var $export = __webpack_require__(4);
	var toIObject = __webpack_require__(29);
	var arrayJoin = [].join;
	
	// fallback for not array-like strings
	$export($export.P + $export.F * (__webpack_require__(30) != Object || !__webpack_require__(66)(arrayJoin)), 'Array', {
	  join: function join(separator) {
	    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
	  }
	});


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var fails = __webpack_require__(13);
	
	module.exports = function (method, arg) {
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call
	    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
	  });
	};


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var html = __webpack_require__(39);
	var cof = __webpack_require__(31);
	var toAbsoluteIndex = __webpack_require__(36);
	var toLength = __webpack_require__(34);
	var arraySlice = [].slice;
	
	// fallback for not array-like ES3 strings and DOM objects
	$export($export.P + $export.F * __webpack_require__(13)(function () {
	  if (html) arraySlice.call(html);
	}), 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length);
	    var klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return arraySlice.call(this, begin, end);
	    var start = toAbsoluteIndex(begin, len);
	    var upTo = toAbsoluteIndex(end, len);
	    var size = toLength(upTo - start);
	    var cloned = new Array(size);
	    var i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var aFunction = __webpack_require__(24);
	var toObject = __webpack_require__(47);
	var fails = __webpack_require__(13);
	var $sort = [].sort;
	var test = [1, 2, 3];
	
	$export($export.P + $export.F * (fails(function () {
	  // IE8-
	  test.sort(undefined);
	}) || !fails(function () {
	  // V8 bug
	  test.sort(null);
	  // Old WebKit
	}) || !__webpack_require__(66)($sort)), 'Array', {
	  // 22.1.3.25 Array.prototype.sort(comparefn)
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? $sort.call(toObject(this))
	      : $sort.call(toObject(this), aFunction(comparefn));
	  }
	});


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $forEach = __webpack_require__(70)(0);
	var STRICT = __webpack_require__(66)([].forEach, true);
	
	$export($export.P + $export.F * !STRICT, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: function forEach(callbackfn /* , thisArg */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx = __webpack_require__(23);
	var IObject = __webpack_require__(30);
	var toObject = __webpack_require__(47);
	var toLength = __webpack_require__(34);
	var asc = __webpack_require__(71);
	module.exports = function (TYPE, $create) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  var create = $create || asc;
	  return function ($this, callbackfn, that) {
	    var O = toObject($this);
	    var self = IObject(O);
	    var f = ctx(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var val, res;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res;   // map
	        else if (res) switch (TYPE) {
	          case 3: return true;             // some
	          case 5: return val;              // find
	          case 6: return index;            // findIndex
	          case 2: result.push(val);        // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(72);
	
	module.exports = function (original, length) {
	  return new (speciesConstructor(original))(length);
	};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	var isArray = __webpack_require__(64);
	var SPECIES = __webpack_require__(73)('species');
	
	module.exports = function (original) {
	  var C;
	  if (isArray(original)) {
	    C = original.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(21)('wks');
	var uid = __webpack_require__(19);
	var Symbol = __webpack_require__(5).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $map = __webpack_require__(70)(1);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].map, true), 'Array', {
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $filter = __webpack_require__(70)(2);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].filter, true), 'Array', {
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $some = __webpack_require__(70)(3);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].some, true), 'Array', {
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $every = __webpack_require__(70)(4);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].every, true), 'Array', {
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments[1]);
	  }
	});


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $reduce = __webpack_require__(79);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].reduce, true), 'Array', {
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
	  }
	});


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var aFunction = __webpack_require__(24);
	var toObject = __webpack_require__(47);
	var IObject = __webpack_require__(30);
	var toLength = __webpack_require__(34);
	
	module.exports = function (that, callbackfn, aLen, memo, isRight) {
	  aFunction(callbackfn);
	  var O = toObject(that);
	  var self = IObject(O);
	  var length = toLength(O.length);
	  var index = isRight ? length - 1 : 0;
	  var i = isRight ? -1 : 1;
	  if (aLen < 2) for (;;) {
	    if (index in self) {
	      memo = self[index];
	      index += i;
	      break;
	    }
	    index += i;
	    if (isRight ? index < 0 : length <= index) {
	      throw TypeError('Reduce of empty array with no initial value');
	    }
	  }
	  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
	    memo = callbackfn(memo, self[index], index, O);
	  }
	  return memo;
	};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $reduce = __webpack_require__(79);
	
	$export($export.P + $export.F * !__webpack_require__(66)([].reduceRight, true), 'Array', {
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
	  }
	});


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $indexOf = __webpack_require__(33)(false);
	var $native = [].indexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(66)($native)), 'Array', {
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? $native.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments[1]);
	  }
	});


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var toIObject = __webpack_require__(29);
	var toInteger = __webpack_require__(35);
	var toLength = __webpack_require__(34);
	var $native = [].lastIndexOf;
	var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;
	
	$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(66)($native)), 'Array', {
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
	    // convert -0 to +0
	    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
	    var O = toIObject(this);
	    var length = toLength(O.length);
	    var index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
	    if (index < 0) index = length + index;
	    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
	    return -1;
	  }
	});


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var toInteger = __webpack_require__(35);
	var aNumberValue = __webpack_require__(84);
	var repeat = __webpack_require__(85);
	var $toFixed = 1.0.toFixed;
	var floor = Math.floor;
	var data = [0, 0, 0, 0, 0, 0];
	var ERROR = 'Number.toFixed: incorrect invocation!';
	var ZERO = '0';
	
	var multiply = function (n, c) {
	  var i = -1;
	  var c2 = c;
	  while (++i < 6) {
	    c2 += n * data[i];
	    data[i] = c2 % 1e7;
	    c2 = floor(c2 / 1e7);
	  }
	};
	var divide = function (n) {
	  var i = 6;
	  var c = 0;
	  while (--i >= 0) {
	    c += data[i];
	    data[i] = floor(c / n);
	    c = (c % n) * 1e7;
	  }
	};
	var numToString = function () {
	  var i = 6;
	  var s = '';
	  while (--i >= 0) {
	    if (s !== '' || i === 0 || data[i] !== 0) {
	      var t = String(data[i]);
	      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
	    }
	  } return s;
	};
	var pow = function (x, n, acc) {
	  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
	};
	var log = function (x) {
	  var n = 0;
	  var x2 = x;
	  while (x2 >= 4096) {
	    n += 12;
	    x2 /= 4096;
	  }
	  while (x2 >= 2) {
	    n += 1;
	    x2 /= 2;
	  } return n;
	};
	
	$export($export.P + $export.F * (!!$toFixed && (
	  0.00008.toFixed(3) !== '0.000' ||
	  0.9.toFixed(0) !== '1' ||
	  1.255.toFixed(2) !== '1.25' ||
	  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
	) || !__webpack_require__(13)(function () {
	  // V8 ~ Android 4.3-
	  $toFixed.call({});
	})), 'Number', {
	  toFixed: function toFixed(fractionDigits) {
	    var x = aNumberValue(this, ERROR);
	    var f = toInteger(fractionDigits);
	    var s = '';
	    var m = ZERO;
	    var e, z, j, k;
	    if (f < 0 || f > 20) throw RangeError(ERROR);
	    // eslint-disable-next-line no-self-compare
	    if (x != x) return 'NaN';
	    if (x <= -1e21 || x >= 1e21) return String(x);
	    if (x < 0) {
	      s = '-';
	      x = -x;
	    }
	    if (x > 1e-21) {
	      e = log(x * pow(2, 69, 1)) - 69;
	      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
	      z *= 0x10000000000000;
	      e = 52 - e;
	      if (e > 0) {
	        multiply(0, z);
	        j = f;
	        while (j >= 7) {
	          multiply(1e7, 0);
	          j -= 7;
	        }
	        multiply(pow(10, j, 1), 0);
	        j = e - 1;
	        while (j >= 23) {
	          divide(1 << 23);
	          j -= 23;
	        }
	        divide(1 << j);
	        multiply(1, 1);
	        divide(2);
	        m = numToString();
	      } else {
	        multiply(0, z);
	        multiply(1 << -e, 0);
	        m = numToString() + repeat.call(ZERO, f);
	      }
	    }
	    if (f > 0) {
	      k = m.length;
	      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
	    } else {
	      m = s + m;
	    } return m;
	  }
	});


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	var cof = __webpack_require__(31);
	module.exports = function (it, msg) {
	  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
	  return +it;
	};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var toInteger = __webpack_require__(35);
	var defined = __webpack_require__(32);
	
	module.exports = function repeat(count) {
	  var str = String(defined(this));
	  var res = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var $fails = __webpack_require__(13);
	var aNumberValue = __webpack_require__(84);
	var $toPrecision = 1.0.toPrecision;
	
	$export($export.P + $export.F * ($fails(function () {
	  // IE7-
	  return $toPrecision.call(1, undefined) !== '1';
	}) || !$fails(function () {
	  // V8 ~ Android 4.3-
	  $toPrecision.call({});
	})), 'Number', {
	  toPrecision: function toPrecision(precision) {
	    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
	    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
	  }
	});


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.3.1 / 15.9.4.4 Date.now()
	var $export = __webpack_require__(4);
	
	$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var $export = __webpack_require__(4);
	var toISOString = __webpack_require__(89);
	
	// PhantomJS / old WebKit has a broken implementations
	$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
	  toISOString: toISOString
	});


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	var fails = __webpack_require__(13);
	var getTime = Date.prototype.getTime;
	var $toISOString = Date.prototype.toISOString;
	
	var lz = function (num) {
	  return num > 9 ? num : '0' + num;
	};
	
	// PhantomJS / old WebKit has a broken implementations
	module.exports = (fails(function () {
	  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
	}) || !fails(function () {
	  $toISOString.call(new Date(NaN));
	})) ? function toISOString() {
	  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
	  var d = this;
	  var y = d.getUTCFullYear();
	  var m = d.getUTCMilliseconds();
	  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	} : $toISOString;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $export = __webpack_require__(4);
	var toObject = __webpack_require__(47);
	var toPrimitive = __webpack_require__(15);
	
	$export($export.P + $export.F * __webpack_require__(13)(function () {
	  return new Date(NaN).toJSON() !== null
	    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
	}), 'Date', {
	  // eslint-disable-next-line no-unused-vars
	  toJSON: function toJSON(key) {
	    var O = toObject(this);
	    var pv = toPrimitive(O);
	    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
	  }
	});


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	var $parseInt = __webpack_require__(92);
	// 18.2.5 parseInt(string, radix)
	$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseInt = __webpack_require__(5).parseInt;
	var $trim = __webpack_require__(93).trim;
	var ws = __webpack_require__(94);
	var hex = /^[-+]?0[xX]/;
	
	module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
	  var string = $trim(String(str), 3);
	  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
	} : $parseInt;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	var defined = __webpack_require__(32);
	var fails = __webpack_require__(13);
	var spaces = __webpack_require__(94);
	var space = '[' + spaces + ']';
	var non = '\u200b\u0085';
	var ltrim = RegExp('^' + space + space + '*');
	var rtrim = RegExp(space + space + '*$');
	
	var exporter = function (KEY, exec, ALIAS) {
	  var exp = {};
	  var FORCE = fails(function () {
	    return !!spaces[KEY]() || non[KEY]() != non;
	  });
	  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
	  if (ALIAS) exp[ALIAS] = fn;
	  $export($export.P + $export.F * FORCE, 'String', exp);
	};
	
	// 1 -> String#trimLeft
	// 2 -> String#trimRight
	// 3 -> String#trim
	var trim = exporter.trim = function (string, TYPE) {
	  string = String(defined(string));
	  if (TYPE & 1) string = string.replace(ltrim, '');
	  if (TYPE & 2) string = string.replace(rtrim, '');
	  return string;
	};
	
	module.exports = exporter;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

	module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(4);
	var $parseFloat = __webpack_require__(96);
	// 18.2.4 parseFloat(string)
	$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	var $parseFloat = __webpack_require__(5).parseFloat;
	var $trim = __webpack_require__(93).trim;
	
	module.exports = 1 / $parseFloat(__webpack_require__(94) + '-0') !== -Infinity ? function parseFloat(str) {
	  var string = $trim(String(str), 3);
	  var result = $parseFloat(string);
	  return result === 0 && string.charAt(0) == '-' ? -0 : result;
	} : $parseFloat;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.1.3.25 String.prototype.trim()
	__webpack_require__(93)('trim', function ($trim) {
	  return function trim() {
	    return $trim(this, 3);
	  };
	});


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	__webpack_require__(99);
	var anObject = __webpack_require__(9);
	var $flags = __webpack_require__(100);
	var DESCRIPTORS = __webpack_require__(12);
	var TO_STRING = 'toString';
	var $toString = /./[TO_STRING];
	
	var define = function (fn) {
	  __webpack_require__(17)(RegExp.prototype, TO_STRING, fn, true);
	};
	
	// 21.2.5.14 RegExp.prototype.toString()
	if (__webpack_require__(13)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
	  define(function toString() {
	    var R = anObject(this);
	    return '/'.concat(R.source, '/',
	      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
	  });
	// FF44- RegExp#toString has a wrong name
	} else if ($toString.name != TO_STRING) {
	  define(function toString() {
	    return $toString.call(this);
	  });
	}


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.2.5.3 get RegExp.prototype.flags()
	if (__webpack_require__(12) && /./g.flags != 'g') __webpack_require__(8).f(RegExp.prototype, 'flags', {
	  configurable: true,
	  get: __webpack_require__(100)
	});


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 21.2.5.3 get RegExp.prototype.flags
	var anObject = __webpack_require__(9);
	module.exports = function () {
	  var that = anObject(this);
	  var result = '';
	  if (that.global) result += 'g';
	  if (that.ignoreCase) result += 'i';
	  if (that.multiline) result += 'm';
	  if (that.unicode) result += 'u';
	  if (that.sticky) result += 'y';
	  return result;
	};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(4);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(102) });


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var DESCRIPTORS = __webpack_require__(12);
	var getKeys = __webpack_require__(27);
	var gOPS = __webpack_require__(103);
	var pIE = __webpack_require__(44);
	var toObject = __webpack_require__(47);
	var IObject = __webpack_require__(30);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(13)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;


/***/ }),
/* 103 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	'use strict';
	var $export = __webpack_require__(4);
	var toLength = __webpack_require__(34);
	var context = __webpack_require__(105);
	var ENDS_WITH = 'endsWith';
	var $endsWith = ''[ENDS_WITH];
	
	$export($export.P + $export.F * __webpack_require__(107)(ENDS_WITH), 'String', {
	  endsWith: function endsWith(searchString /* , endPosition = @length */) {
	    var that = context(this, searchString, ENDS_WITH);
	    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
	    var len = toLength(that.length);
	    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    var search = String(searchString);
	    return $endsWith
	      ? $endsWith.call(that, search, end)
	      : that.slice(end - search.length, end) === search;
	  }
	});


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	// helper for String#{startsWith, endsWith, includes}
	var isRegExp = __webpack_require__(106);
	var defined = __webpack_require__(32);
	
	module.exports = function (that, searchString, NAME) {
	  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
	  return String(defined(that));
	};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.8 IsRegExp(argument)
	var isObject = __webpack_require__(10);
	var cof = __webpack_require__(31);
	var MATCH = __webpack_require__(73)('match');
	module.exports = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
	};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	var MATCH = __webpack_require__(73)('match');
	module.exports = function (KEY) {
	  var re = /./;
	  try {
	    '/./'[KEY](re);
	  } catch (e) {
	    try {
	      re[MATCH] = false;
	      return !'/./'[KEY](re);
	    } catch (f) { /* empty */ }
	  } return true;
	};


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	// 21.1.3.7 String.prototype.includes(searchString, position = 0)
	'use strict';
	var $export = __webpack_require__(4);
	var context = __webpack_require__(105);
	var INCLUDES = 'includes';
	
	$export($export.P + $export.F * __webpack_require__(107)(INCLUDES), 'String', {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~context(this, searchString, INCLUDES)
	      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(110);
	var validate = __webpack_require__(124);
	var MAP = 'Map';
	
	// 23.1 Map Objects
	module.exports = __webpack_require__(125)(MAP, function (get) {
	  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(validate(this, MAP), key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
	  }
	}, strong, true);


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var dP = __webpack_require__(8).f;
	var create = __webpack_require__(25);
	var redefineAll = __webpack_require__(111);
	var ctx = __webpack_require__(23);
	var anInstance = __webpack_require__(112);
	var forOf = __webpack_require__(113);
	var $iterDefine = __webpack_require__(119);
	var step = __webpack_require__(122);
	var setSpecies = __webpack_require__(123);
	var DESCRIPTORS = __webpack_require__(12);
	var fastKey = __webpack_require__(54).fastKey;
	var validate = __webpack_require__(124);
	var SIZE = DESCRIPTORS ? '_s' : 'size';
	
	var getEntry = function (that, key) {
	  // fast case
	  var index = fastKey(key);
	  var entry;
	  if (index !== 'F') return that._i[index];
	  // frozen object case
	  for (entry = that._f; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	};
	
	module.exports = {
	  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, NAME, '_i');
	      that._t = NAME;         // collection type
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = validate(this, NAME);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n;
	          var prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that._f == entry) that._f = next;
	          if (that._l == entry) that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        validate(this, NAME);
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.n : this._f) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(validate(this, NAME), key);
	      }
	    });
	    if (DESCRIPTORS) dP(C.prototype, 'size', {
	      get: function () {
	        return validate(this, NAME)[SIZE];
	      }
	    });
	    return C;
	  },
	  def: function (that, key, value) {
	    var entry = getEntry(that, key);
	    var prev, index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if (!that._f) that._f = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function (C, NAME, IS_MAP) {
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function (iterated, kind) {
	      this._t = validate(iterated, NAME); // target
	      this._k = kind;                     // kind
	      this._l = undefined;                // previous
	    }, function () {
	      var that = this;
	      var kind = that._k;
	      var entry = that._l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	
	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(17);
	module.exports = function (target, src, safe) {
	  for (var key in src) redefine(target, key, src[key], safe);
	  return target;
	};


/***/ }),
/* 112 */
/***/ (function(module, exports) {

	module.exports = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(23);
	var call = __webpack_require__(114);
	var isArrayIter = __webpack_require__(115);
	var anObject = __webpack_require__(9);
	var toLength = __webpack_require__(34);
	var getIterFn = __webpack_require__(117);
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
	  var f = ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = call(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(9);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(116);
	var ITERATOR = __webpack_require__(73)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 116 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(118);
	var ITERATOR = __webpack_require__(73)('iterator');
	var Iterators = __webpack_require__(116);
	module.exports = __webpack_require__(6).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(31);
	var TAG = __webpack_require__(73)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(22);
	var $export = __webpack_require__(4);
	var redefine = __webpack_require__(17);
	var hide = __webpack_require__(7);
	var Iterators = __webpack_require__(116);
	var $iterCreate = __webpack_require__(120);
	var setToStringTag = __webpack_require__(121);
	var getPrototypeOf = __webpack_require__(48);
	var ITERATOR = __webpack_require__(73)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(25);
	var descriptor = __webpack_require__(16);
	var setToStringTag = __webpack_require__(121);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(7)(IteratorPrototype, __webpack_require__(73)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(8).f;
	var has = __webpack_require__(18);
	var TAG = __webpack_require__(73)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 122 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(5);
	var dP = __webpack_require__(8);
	var DESCRIPTORS = __webpack_require__(12);
	var SPECIES = __webpack_require__(73)('species');
	
	module.exports = function (KEY) {
	  var C = global[KEY];
	  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	module.exports = function (it, TYPE) {
	  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
	  return it;
	};


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var global = __webpack_require__(5);
	var $export = __webpack_require__(4);
	var redefine = __webpack_require__(17);
	var redefineAll = __webpack_require__(111);
	var meta = __webpack_require__(54);
	var forOf = __webpack_require__(113);
	var anInstance = __webpack_require__(112);
	var isObject = __webpack_require__(10);
	var fails = __webpack_require__(13);
	var $iterDetect = __webpack_require__(126);
	var setToStringTag = __webpack_require__(121);
	var inheritIfRequired = __webpack_require__(127);
	
	module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
	  var Base = global[NAME];
	  var C = Base;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var proto = C && C.prototype;
	  var O = {};
	  var fixMethod = function (KEY) {
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function (a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a) {
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a) {
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
	    new C().entries().next();
	  }))) {
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance = new C();
	    // early implementations not supports chaining
	    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
	    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
	    // most early implementations doesn't supports iterables, most modern - not close it correctly
	    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
	    // for early implementations -0 and +0 not the same
	    var BUGGY_ZERO = !IS_WEAK && fails(function () {
	      // V8 ~ Chromium 42- fails only with 5+ elements
	      var $instance = new C();
	      var index = 5;
	      while (index--) $instance[ADDER](index, index);
	      return !$instance.has(-0);
	    });
	    if (!ACCEPT_ITERABLES) {
	      C = wrapper(function (target, iterable) {
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base(), target, C);
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if (IS_WEAK && proto.clear) delete proto.clear;
	  }
	
	  setToStringTag(C, NAME);
	
	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);
	
	  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
	
	  return C;
	};


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(73)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(10);
	var setPrototypeOf = __webpack_require__(128).set;
	module.exports = function (that, target, C) {
	  var S = target.constructor;
	  var P;
	  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
	    setPrototypeOf(that, P);
	  } return that;
	};


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(10);
	var anObject = __webpack_require__(9);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(23)(Function.call, __webpack_require__(43).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// https://github.com/tc39/Array.prototype.includes
	var $export = __webpack_require__(4);
	var $includes = __webpack_require__(33)(true);
	
	$export($export.P, 'Array', {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});
	
	__webpack_require__(130)('includes');


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var UNSCOPABLES = __webpack_require__(73)('unscopables');
	var ArrayProto = Array.prototype;
	if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(7)(ArrayProto, UNSCOPABLES, {});
	module.exports = function (key) {
	  ArrayProto[UNSCOPABLES][key] = true;
	};


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(132);
	__webpack_require__(136);
	module.exports = __webpack_require__(6).Symbol;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(5);
	var has = __webpack_require__(18);
	var DESCRIPTORS = __webpack_require__(12);
	var $export = __webpack_require__(4);
	var redefine = __webpack_require__(17);
	var META = __webpack_require__(54).KEY;
	var $fails = __webpack_require__(13);
	var shared = __webpack_require__(21);
	var setToStringTag = __webpack_require__(121);
	var uid = __webpack_require__(19);
	var wks = __webpack_require__(73);
	var wksExt = __webpack_require__(133);
	var wksDefine = __webpack_require__(134);
	var enumKeys = __webpack_require__(135);
	var isArray = __webpack_require__(64);
	var anObject = __webpack_require__(9);
	var isObject = __webpack_require__(10);
	var toObject = __webpack_require__(47);
	var toIObject = __webpack_require__(29);
	var toPrimitive = __webpack_require__(15);
	var createDesc = __webpack_require__(16);
	var _create = __webpack_require__(25);
	var gOPNExt = __webpack_require__(51);
	var $GOPD = __webpack_require__(43);
	var $GOPS = __webpack_require__(103);
	var $DP = __webpack_require__(8);
	var $keys = __webpack_require__(27);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(52).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(44).f = $propertyIsEnumerable;
	  $GOPS.f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(22)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });
	
	$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return $GOPS.f(toObject(it));
	  }
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(73);


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5);
	var core = __webpack_require__(6);
	var LIBRARY = __webpack_require__(22);
	var wksExt = __webpack_require__(133);
	var defineProperty = __webpack_require__(8).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(27);
	var gOPS = __webpack_require__(103);
	var pIE = __webpack_require__(44);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var classof = __webpack_require__(118);
	var test = {};
	test[__webpack_require__(73)('toStringTag')] = 'z';
	if (test + '' != '[object z]') {
	  __webpack_require__(17)(Object.prototype, 'toString', function toString() {
	    return '[object ' + classof(this) + ']';
	  }, true);
	}


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(138);
	__webpack_require__(140);
	module.exports = __webpack_require__(133).f('iterator');


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(139)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(119)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(35);
	var defined = __webpack_require__(32);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	var $iterators = __webpack_require__(141);
	var getKeys = __webpack_require__(27);
	var redefine = __webpack_require__(17);
	var global = __webpack_require__(5);
	var hide = __webpack_require__(7);
	var Iterators = __webpack_require__(116);
	var wks = __webpack_require__(73);
	var ITERATOR = wks('iterator');
	var TO_STRING_TAG = wks('toStringTag');
	var ArrayValues = Iterators.Array;
	
	var DOMIterables = {
	  CSSRuleList: true, // TODO: Not spec compliant, should be false.
	  CSSStyleDeclaration: false,
	  CSSValueList: false,
	  ClientRectList: false,
	  DOMRectList: false,
	  DOMStringList: false,
	  DOMTokenList: true,
	  DataTransferItemList: false,
	  FileList: false,
	  HTMLAllCollection: false,
	  HTMLCollection: false,
	  HTMLFormElement: false,
	  HTMLSelectElement: false,
	  MediaList: true, // TODO: Not spec compliant, should be false.
	  MimeTypeArray: false,
	  NamedNodeMap: false,
	  NodeList: true,
	  PaintRequestList: false,
	  Plugin: false,
	  PluginArray: false,
	  SVGLengthList: false,
	  SVGNumberList: false,
	  SVGPathSegList: false,
	  SVGPointList: false,
	  SVGStringList: false,
	  SVGTransformList: false,
	  SourceBufferList: false,
	  StyleSheetList: true, // TODO: Not spec compliant, should be false.
	  TextTrackCueList: false,
	  TextTrackList: false,
	  TouchList: false
	};
	
	for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
	  var NAME = collections[i];
	  var explicit = DOMIterables[NAME];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  var key;
	  if (proto) {
	    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
	    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	    Iterators[NAME] = ArrayValues;
	    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
	  }
	}


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(130);
	var step = __webpack_require__(122);
	var Iterators = __webpack_require__(116);
	var toIObject = __webpack_require__(29);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(119)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Utils = __webpack_require__(143);
	
	var Bootstrap = function Bootstrap() {
	    Utils.addHtmlTagClass('bbcdotcom');
	};
	
	module.exports = Bootstrap;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*jslint bitwise: true */
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 */
	
	var _log = __webpack_require__(144)('utils');
	
	var trackCookie = []; // hack to make unit testing easier as no easy way to DI in other objects yet :(
	
	
	/**
	 * Standard methods to check the classes on an element
	 * @param DOMElement element
	 * @param string className
	 * @return bool;
	 */
	var hasAtrribute = function hasAtrribute(element, attributeKey, attributeValue) {
	    if (typeof element !== 'undefined' && element !== '' && element !== null) {
	        var regex = new RegExp('(\\s|^)' + attributeValue + '(\\s|$)');
	        return element[attributeKey].match(regex);
	    }
	};
	
	var hasTagId = function hasTagId(tagName, idName) {
	    var attributeMatch,
	        tag = document.getElementsByTagName(tagName)[0];
	    if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof idName === 'string') {
	        attributeMatch = hasAtrribute(tag, 'id', idName);
	        return attributeMatch !== null;
	    }
	    return false;
	};
	
	/**
	 * Given a DOM node, search up the tree and find the nearest ancestor
	 * node which passes the matcher function. The matcher function should
	 * return zero, a negative value or a positive value.
	 *  - zero: match failed, keep searching
	 *  - negative: match failed, stop searching
	 *  - positive: match succeeded, return current node
	 *
	 * @param node The starting DOM node
	 * @param matcher The matcher function, see above for return values
	 * @param [includeSelf] Whether or not to include current node in search
	 * @param [limit] The search limit (defaults to 10)
	 * @returns {boolean}
	 */
	var searchTreeUpwards = function searchTreeUpwards(node, matcher, includeSelf, limit) {
	    var current,
	        result = false,
	        iteration = 0;
	
	    if (!node) {
	        return false;
	    }
	
	    limit = typeof limit === 'number' ? limit : 10;
	    includeSelf = includeSelf === true ? true : false;
	    current = includeSelf ? node : node.parentNode;
	
	    while (current && iteration < limit) {
	        var matcherResult = matcher(current);
	        if (matcherResult > 0) {
	            result = current;
	            break;
	        } else if (matcherResult < 0) {
	            break;
	        }
	        current = current.parentNode;
	        iteration++;
	    }
	    return result;
	};
	
	var getCookieDomain = function getCookieDomain() {
	    return window.location.hostname.indexOf('.bbc.com') !== -1 ? 'bbc.com' : window.location.hostname.indexOf('.bbc.co.uk') !== -1 ? 'bbc.co.uk' : window.location.hostname;
	};
	
	module.exports = {
	    debounce: function debounce(func, wait, immediate) {
	        var timeout;
	        return function () {
	            var context = this,
	                args = arguments;
	            var later = function later() {
	                timeout = null;
	                if (!immediate) {
	                    func.apply(context, args);
	                }
	            };
	            var callNow = immediate && !timeout;
	            clearTimeout(timeout);
	            timeout = setTimeout(later, wait);
	            if (callNow) {
	                func.apply(context, args);
	            }
	        };
	    },
	    appendLinkToHead: function appendLinkToHead(url) {
	        var head = document.head || document.getElementsByTagName('head')[0],
	            link = document.createElement('link');
	
	        link.type = 'text/css';
	        link.rel = 'stylesheet';
	        link.href = url;
	
	        head.appendChild(link);
	    },
	    capitalize: function capitalize(string) {
	        if (typeof string !== 'undefined') {
	            var i,
	                n,
	                pieces = string.split(" ");
	            for (i = 0; i < pieces.length; i++) {
	                if (pieces[i].length > 2) {
	                    n = pieces[i].charAt(0).toUpperCase();
	                    pieces[i] = n + pieces[i].substr(1);
	                }
	            }
	            return pieces.join(" ");
	        }
	    },
	    /**
	     * @deprecated Please use require('logger')
	     */
	    log: function log() {
	        _log.warn('utils.log is deprecated', arguments);
	    },
	    addTagClass: function addTagClass(tag, className) {
	        if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof className === 'string' && className !== '') {
	            if (!hasAtrribute(tag, 'className', className)) {
	                tag.className = tag.className + ' ' + className;
	            }
	            return tag.className;
	        }
	    },
	    removeTagClass: function removeTagClass(tag, className) {
	        var regx;
	        if (typeof tag !== 'undefined' && tag !== '' && tag !== null && typeof className === 'string' && className !== '') {
	            if (hasAtrribute(tag, 'className', className)) {
	                regx = RegExp(className + '\\b');
	                tag.className = tag.className.replace(regx, '').replace('  ', ' ');
	            }
	            return tag.className;
	        }
	    },
	    addBodyTagClass: function addBodyTagClass(className) {
	        var tag = document.getElementsByTagName('body')[0];
	        return this.addTagClass(tag, className);
	    },
	    removeBodyTagClass: function removeBodyTagClass(className) {
	        var tag = document.getElementsByTagName('body')[0];
	        return this.removeTagClass(tag, className);
	    },
	    addHtmlTagClass: function addHtmlTagClass(className) {
	        var tag = document.getElementsByTagName('html')[0];
	        return this.addTagClass(tag, className);
	    },
	    removeHtmlTagClass: function removeHtmlTagClass(className) {
	        var tag = document.getElementsByTagName('html')[0];
	        return this.removeTagClass(tag, className);
	    },
	    hasBodyTagId: function hasBodyTagId(idName) {
	        return hasTagId('body', idName);
	    },
	
	    getUriParamByName: function getUriParamByName(name, sanitizeResult) {
	        sanitizeResult = sanitizeResult !== false;
	
	        if (typeof name === 'undefined') {
	            return '';
	        }
	
	        name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
	        var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
	            results = regex.exec(bbcdotcom.config.getWindowLocation().search);
	
	        if (results === null) {
	            return '';
	        }
	
	        return decodeURIComponent(sanitizeResult ? results[1].replace(/[^a-zA-Z0-9\-_]/g, '') : results[1]);
	    },
	    isDebug: function isDebug() {
	        return (/[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1
	        );
	    },
	    isDebugTrace: function isDebugTrace() {
	        return (/[?|&]ads-debug-trace/.test(window.location.href) || document.cookie.indexOf('ads-debug-trace=') !== -1
	        );
	    },
	    getEnv: function getEnv() {
	        var location = bbcdotcom.config.getWindowLocation();
	        if (/[a-z]+\-test[0-9]+\.bbc.*\.com/.test(location.href)) {
	            return 'test';
	        }
	        var matches = location.href.match(/(sandbox|int|test|stage)(.dev)*.bbc.co*/);
	        return matches === null ? 'live' : matches[1];
	    },
	    isLiveEnv: function isLiveEnv() {
	        return this.getEnv() === 'live';
	    },
	    isTestEnv: function isTestEnv() {
	        return this.getEnv() !== 'live' && this.getEnv() !== 'stage';
	    },
	    stackTrace: function stackTrace() {
	        var err = new Error();
	        window.console.log(err.stack);
	    },
	    /**
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation');
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation', 10);
	     * eg getParentElementByClass(document.getElementById('foo'), 'navigation', 10, true);
	     *
	     * @param object node Element object
	     * @param string className Class name looking for in parent elements
	     * @param integer depth How far up the DOM tree should we search.  Smaller number is more performant.
	     * @param boolean ignoreBody Whether this utility should crawl up to <body> and <html> or stop below <body>
	     * @return boolean Returns element
	     */
	    getParentElementByClass: function getParentElementByClass(node, className, depth, ignoreBody) {
	        ignoreBody = typeof ignoreBody !== 'undefined' && ignoreBody === true ? true : false;
	
	        var limit = typeof depth === 'undefined' || depth === 0 ? 5 : depth,
	            matcher = function matcher(node) {
	            if (!node || typeof node.className === 'undefined' || typeof node.tagName === 'undefined' || ignoreBody && node.tagName.toLowerCase() === 'body') {
	                return -1;
	            } else if (node.className.indexOf(className) !== -1) {
	                return 1;
	            }
	        };
	
	        return searchTreeUpwards(node, matcher, false, limit);
	    },
	
	    /**
	     * Given an element and a tag name, traverses up the DOM tree looking
	     * for the nearest ancestor element with that tag name
	     *
	     * @param node The starting node
	     * @param tagName The tag name to search for
	     * @param [includeSelf] Include self in search
	     * @param [limit] How far up the tree to search
	     * @returns {}
	     */
	    getClosestElementByTagName: function getClosestElementByTagName(node, tagName, includeSelf, limit) {
	        return searchTreeUpwards(node, function (node) {
	            return node && node.tagName && node.tagName.toLowerCase() === tagName ? 1 : 0;
	        }, includeSelf, limit);
	    },
	
	    /**
	     * @param object node Element object
	     * @param string attributeName Name of the attribute we're looking for in parent elements
	     * @param integer depth How far up the DOM tree should we search.
	     * @return boolean Returns element
	     */
	    getParentElementByAttribute: function getParentElementByAttribute(node, attributeName, depth) {
	        return searchTreeUpwards(node, function (node) {
	            return node && node.getAttribute(attributeName) !== null ? 1 : 0;
	        }, depth);
	    },
	
	    /**
	     * eg parentHasClass(document.getElementById('foo'), 'navigation');
	     * eg parentHasClass(document.getElementById('foo'), 'navigation', 10);
	     * eg parentHasClass(document.getElementById('foo'), 'navigation', 10, true);
	     *
	     * @param object node Element object
	     * @param string className Class name looking for in parent elements
	     * @param integer depth How far up the DOM tree should we search.  Smaller number is more performant.
	     * @param boolean ignoreBody Whether this utility should crawl up to <body> and <html> or stop below <body>
	     * @return boolean Returns true if class was found in the nested parent tags
	     */
	    parentHasClass: function parentHasClass(node, className, depth, ignoreBody) {
	        return this.getParentElementByClass(node, className, depth, ignoreBody) === false ? false : true;
	    },
	
	    /**
	     * Used to work out where a link is within a module so editorial know whether the link was the first link,
	     * second link etc
	     * eg getAnchorPositionWithinElement(document.getElementById('business-module'), '/news/business-12345678');
	     *
	     * @param object parent Element object
	     * @param string href eg /news/business-1234567
	     * @returns number 0-20
	     */
	    getAnchorPositionWithinElement: function getAnchorPositionWithinElement(parent, href) {
	        var i, tags, hrefRegex;
	        if (parent && href) {
	            tags = parent.getElementsByTagName('a');
	            hrefRegex = new RegExp(href + '$');
	            for (i = 0; i < tags.length; i++) {
	                if (typeof tags[i].href !== 'undefined' && href !== '' && tags[i].href.match(hrefRegex) !== null) {
	                    return i + 1;
	                }
	            }
	        }
	        return 0;
	    },
	
	    /**
	     * Used to work out where a link is within a module so editorial know whether the link was the first link,
	     * second link etc
	     * eg getAnchorPositionWithinElement(document.getElementById('business-module'), '/news/business-12345678');
	     *
	     * @param object parent Element object
	     * @param string href eg /news/business-1234567
	     * @returns number 0-20
	     */
	    getClosestElementWithAttribute: function getClosestElementWithAttribute(parent, attribute) {
	        var i, tags, hrefRegex;
	        if (parent && href) {
	            tags = parent.getElementsByTagName('a');
	            hrefRegex = new RegExp(href + '$');
	            for (i = 0; i < tags.length; i++) {
	                if (typeof tags[i].href !== 'undefined' && href !== '' && tags[i].href.match(hrefRegex) !== null) {
	                    return i + 1;
	                }
	            }
	        }
	        return 0;
	    },
	
	    /**
	     * eg addEvent(document.getElementById('foo'), 'click', function(){});
	     * source: http://ejohn.org/projects/flexible-javascript-events
	     */
	    addEvent: function addEvent(obj, type, fn) {
	        if (obj.attachEvent) {
	            obj['e' + type + fn] = fn;
	            obj[type + fn] = function () {
	                obj['e' + type + fn](window.event);
	            };
	            obj.attachEvent('on' + type, obj[type + fn]);
	        } else {
	            obj.addEventListener(type, fn, false);
	        }
	    },
	    /**
	     * eg removeEvent(document.getElementById('foo'), 'click', function(){});
	     * source: http://ejohn.org/projects/flexible-javascript-events
	     */
	    removeEvent: function removeEvent(obj, type, fn) {
	        if (typeof obj === 'undefined' || obj === null) {
	            return;
	        }
	        if (obj.detachEvent) {
	            obj.detachEvent('on' + type, obj[type + fn]);
	            obj[type + fn] = null;
	        } else {
	            obj.removeEventListener(type, fn, false);
	        }
	    },
	    /**
	     * Trigger event listener
	     * eg triggerEvent(document.getElementById('foo'), 'click');
	     * source: https://developer.mozilla.org/samples/domref/dispatchEvent.html
	     */
	    triggerEvent: function triggerEvent(obj, type, preventDefault) {
	        preventDefault = preventDefault === undefined ? true : preventDefault;
	        var event = document.createEvent("MouseEvents");
	        event.initMouseEvent(type, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
	        if (preventDefault) {
	            event.preventDefault();
	        }
	        obj.dispatchEvent(event);
	        return event;
	    },
	
	    cancelEvent: function cancelEvent(event) {
	        if (!event) {
	            return false;
	        }
	
	        if (typeof event.preventDefault === 'function') {
	            event.preventDefault();
	        } else {
	            event.returnValue = false;
	        }
	    },
	
	    isEventDefaultPrevented: function isEventDefaultPrevented(event) {
	        if (!event) {
	            return false;
	        }
	
	        return event.defaultPrevented || event.returnValue === false;
	    },
	
	    trim: function trim(str) {
	        if (typeof str === 'string') {
	            return str.replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '');
	        }
	        return str;
	    },
	
	    navigateTo: function navigateTo(uri) {
	        window.location.href = uri;
	    },
	
	    /**
	     * Get <meta> tag name value, for example:
	     * Html:   <meta name="DCTERMS.created" content="2015-01-06T12:00:00" />
	     * Method: bbcdotcom.utils.getMetaNameContent('DCTERMS.created');
	     */
	    getMetaNameContent: function getMetaNameContent(name) {
	        var metas = document.getElementsByTagName('meta'),
	            i;
	        for (i = 0; i < metas.length; i++) {
	            if (metas[i].getAttribute("name") === name) {
	                return metas[i].getAttribute("content");
	            }
	        }
	        return '';
	    },
	    /**
	     * Get <meta> tag property value, for example:
	     * Html:   <meta property="wwhp-edition" content="international" />
	     * Method: bbcdotcom.utils.getMetaPropertyContent('wwhp-edition');
	     */
	    getMetaPropertyContent: function getMetaPropertyContent(property) {
	        var metas = document.getElementsByTagName('meta'),
	            i;
	        for (i = 0; i < metas.length; i++) {
	            if (metas[i].getAttribute("property") === property) {
	                return metas[i].getAttribute("content");
	            }
	        }
	        return '';
	    },
	    setCookie: function setCookie(name, value, seconds) {
	        var date;
	        if (typeof name !== 'undefined' && name !== '' && typeof value !== 'undefined' && value !== '') {
	            if (typeof seconds === 'undefined' || seconds === null || seconds === 0) {
	                // Default to 365 days (60 * 60 * 24 = 1 day)
	                seconds = 60 * 60 * 24 * 365;
	            }
	            date = new Date();
	            date.setTime(date.getTime() + seconds * 1000); // eg 120s * 1000 = 120,000ms
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + '; expires=' + date.toGMTString() + '; domain=.' + getCookieDomain() + '; path=/';
	            trackCookie.push(['set', name, value, seconds]);
	        }
	    },
	    getCookie: function getCookie(name) {
	        var cookie = '; ' + document.cookie,
	            parts = cookie.split('; ' + encodeURIComponent(name) + '='),
	            value;
	        if (parts.length === 2) {
	            value = decodeURIComponent(parts.pop().split(';').shift());
	        }
	        trackCookie.push(['get', name, value]);
	        return value;
	    },
	    deleteCookie: function deleteCookie(name) {
	        document.cookie = encodeURIComponent(name) + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; domain=.' + getCookieDomain() + '; path=/';
	        trackCookie.push(['delete', name]);
	    },
	    generateUuidV4: function generateUuidV4() {
	        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	            var r = Math.floor(Math.random() * 16),
	                v = c === 'x' ? r : r & 0x3 | 0x8;
	            return v.toString(16);
	        });
	    },
	    /**
	     * @param string Uri eg http://www.test.bbc.com/news/world?hello=world#help
	     */
	    createWindowLocation: function createWindowLocation(uri) {
	        var windowLocation,
	            withoutProtocol,
	            withoutQueryParam = uri;
	        if (typeof uri === 'undefined' || uri === null || uri === '') {
	            windowLocation = {
	                href: '',
	                protocol: '',
	                host: '',
	                hostname: '',
	                port: '',
	                pathname: '',
	                search: '',
	                hash: ''
	            };
	        } else {
	            if (uri.indexOf('?') !== -1) {
	                withoutQueryParam = uri.substr(0, uri.indexOf('?'));
	            }
	            withoutProtocol = withoutQueryParam.substr(withoutQueryParam.indexOf(':') + 3);
	            windowLocation = {
	                href: uri, // http://www.test.bbc.com/news/world?hello=world#help
	                protocol: uri.substr(0, uri.indexOf(':') + 1), // http:
	                host: withoutProtocol.substr(0, withoutProtocol.indexOf('/')), // www.test.bbc.com:8888
	                hostname: withoutProtocol.substr(0, withoutProtocol.indexOf('/')), // www.test.bbc.com
	                port: '',
	                pathname: withoutProtocol.substr(withoutProtocol.indexOf('/')),
	                search: uri.substr(uri.indexOf('?')),
	                hash: ''
	            };
	        }
	        return windowLocation;
	    },
	    secondsToMilliSeconds: function secondsToMilliSeconds(seconds) {
	        return Math.floor(parseFloat(seconds, 10) * 1000);
	    },
	    /**
	     * For testing only
	     */
	    r: function r() {
	        trackCookie = [];
	    },
	    getTrackCookieValues: function getTrackCookieValues(cookiesArr) {
	        if (typeof cookiesArr === 'undefined') {
	            return trackCookie;
	        }
	        var out = [],
	            t;
	        for (t = 0; t < trackCookie.length; t++) {
	            if (cookiesArr.indexOf(trackCookie[t][1]) !== -1) {
	                out.push(trackCookie[t]);
	            }
	        }
	        return out;
	    },
	
	    isString: function isString(val) {
	        return typeof val === 'string' || val instanceof String;
	    },
	
	    cleanArray: function cleanArray(actual) {
	        var newArray = [];
	        var i;
	        for (i = 0; i < actual.length; i++) {
	            if (actual[i] || actual[i] === 0) {
	                newArray.push(actual[i]);
	            }
	        }
	        return newArray;
	    },
	
	    outerHTML: function outerHTML(node) {
	        if (node === undefined) {
	            return;
	        }
	        // if IE, Chrome take the internal method otherwise build one
	        return node.outerHTML || function (n) {
	            var div = document.createElement('div'),
	                h;
	            div.appendChild(n.cloneNode(true));
	            h = div.innerHTML;
	            div = null;
	            return h;
	        }(node);
	    }
	};

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * @module LogFactory
	 *
	 * Use:
	 *
	 * var log = bbcdotcom.Logger('my:namespace');
	 *
	 * log('same as log.log')
	 * log.log('same as log()');
	 * log.info('info')
	 * log.debug('debug', object);
	 * log.warn('warning');
	 * log.error('error', Error);
	 *
	 * Enabling:
	 *
	 * window.bbcdotcom.Logger.enable('*'); // First argument is the namespace to enable
	 *
	 * Disabling:
	 *
	 * window.bbcdotcom.Logger.disable(); // Disables all namespaces
	 */
	
	var debug = __webpack_require__(145);
	
	function LogFactory(namespace) {
	
	    var prefixedNamespace = 'bbcdotcom:' + namespace;
	
	    var logLevels = ['log', 'info', 'warn', 'error', 'debug'];
	
	    var defaultLogger = debug(prefixedNamespace);
	
	    function Logger() {
	        return defaultLogger.apply(undefined, arguments);
	    }
	
	    function createLogLevel(level) {
	        Logger[level] = debug(prefixedNamespace);
	        Logger[level].log = function log() {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            return _typeof(window.console) === 'object' && window.console[level] && Function.prototype.apply.call(window.console[level], window.console, args);
	        };
	    }
	
	    var _iteratorNormalCompletion = true;
	    var _didIteratorError = false;
	    var _iteratorError = undefined;
	
	    try {
	        for (var _iterator = logLevels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	            var logLevel = _step.value;
	
	            createLogLevel(logLevel);
	        }
	    } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	    } finally {
	        try {
	            if (!_iteratorNormalCompletion && _iterator['return']) {
	                _iterator['return']();
	            }
	        } finally {
	            if (_didIteratorError) {
	                throw _iteratorError;
	            }
	        }
	    }
	
	    return Logger;
	}
	
	LogFactory.enable = function enable() {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	    }
	
	    debug.enable.apply(debug, args);
	    debug('bbcdotcom')('Debugging enabled', args);
	};
	LogFactory.disable = function disable() {
	    debug('bbcdotcom')('Debugging disabled');
	    debug.disable.apply(debug, arguments);
	};
	
	if (/[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	    LogFactory.enable('bbcdotcom*');
	} else if (debug.enabled('bbcdotcom*')) {
	    debug('bbcdotcom')('To disable debugging: `bbcdotcom.Logger.disable()`');
	}
	
	module.exports = LogFactory;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(147);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // NB: In an Electron preload script, document will be defined but not fully
	  // initialized. Since we know we're in Chrome, we'll just detect this case
	  // explicitly
	  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
	    return true;
	  }
	
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
	    // double check webkit in userAgent just in case we are in a worker
	    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function(v) {
	  try {
	    return JSON.stringify(v);
	  } catch (err) {
	    return '[UnexpectedJSONParseError]: ' + err.message;
	  }
	};
	
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs(args) {
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return;
	
	  var c = 'color: ' + this.color;
	  args.splice(1, 0, c, 'color: inherit')
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-zA-Z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	
	  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	  if (!r && typeof process !== 'undefined' && 'env' in process) {
	    r = process.env.DEBUG;
	  }
	
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(146)))

/***/ }),
/* 146 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(148);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 * @param {String} namespace
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor(namespace) {
	  var hash = 0, i;
	
	  for (i in namespace) {
	    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
	    hash |= 0; // Convert to 32bit integer
	  }
	
	  return exports.colors[Math.abs(hash) % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function createDebug(namespace) {
	
	  function debug() {
	    // disabled?
	    if (!debug.enabled) return;
	
	    var self = debug;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // turn the `arguments` into a proper Array
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %O
	      args.unshift('%O');
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    // apply env-specific formatting (colors, etc.)
	    exports.formatArgs.call(self, args);
	
	    var logFn = debug.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	
	  debug.namespace = namespace;
	  debug.enabled = exports.enabled(namespace);
	  debug.useColors = exports.useColors();
	  debug.color = selectColor(namespace);
	
	  // env-specific initialization logic for debug instances
	  if ('function' === typeof exports.init) {
	    exports.init(debug);
	  }
	
	  return debug;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  exports.names = [];
	  exports.skips = [];
	
	  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ }),
/* 148 */
/***/ (function(module, exports) {

	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(150);
	var utils = __webpack_require__(143);
	var sections = __webpack_require__(152);
	var locale = __webpack_require__(153);
	var survey = __webpack_require__(154);
	var classes = __webpack_require__(155);
	var lotame = __webpack_require__(156);
	
	var Predicate = __webpack_require__(197);
	
	var analytics = __webpack_require__(208);
	
	var layout = __webpack_require__(199);
	var breakpoints = __webpack_require__(207);
	var adRegister = __webpack_require__(200);
	var adUnit = __webpack_require__(203);
	var adFilter = __webpack_require__(206);
	var keyValues = __webpack_require__(176);
	var adSuites = __webpack_require__(260);
	var dfppRequest = __webpack_require__(198);
	var pubsub = __webpack_require__(202);
	var Stats = __webpack_require__(261);
	var AnalyticsHelper = __webpack_require__(171);
	
	var addLoadEvent = __webpack_require__(262);
	var log = __webpack_require__(144)('init');
	
	var idcta = __webpack_require__(263);
	
	/**
	 * Initialise bbcdotcom. Called in the scope of the main bbcdotcom object
	 *
	 * @param params
	 */
	module.exports = function init(params) {
	    'use strict';
	
	    try {
	        var x,
	            i,
	            len,
	            windowLocation = config.getWindowLocation(),
	            windowDocument = config.getWindowDocument(),
	            adsToDisplay;
	
	        log.info('bbcdotcom.init() with params: ', params);
	
	        utils.addHtmlTagClass(classes.classNames('init', 'responsive'));
	        Stats.init();
	
	        if (config.isAdsEnabled() && (!config.isSportApp() || config.isSportApp() && config.isAdsportappEnabled())) {
	
	            if (bbcdotcom.initCalled) {
	                if (params.adsToDisplay) {
	                    adsToDisplay = adFilter.build(params.adsToDisplay);
	                    if (adsToDisplay) {
	                        window.bbcdotcom.adsToDisplay = adsToDisplay;
	                        for (i = 0, len = adsToDisplay.length; i < len; i++) {
	                            adRegister.registerAd(adsToDisplay[i]);
	                        }
	                    }
	                }
	                return;
	            }
	            config.init(params);
	
	            utils.addHtmlTagClass(classes.fromConfig(config, window));
	
	            /**
	             * Load stylesheets
	             */
	            if (config.isAsync()) {
	                if (/(sandbox|int)(.dev)*.bbc.co*/.test(window.location.href) || /[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom-async.dev.css');
	                } else {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom-async.css');
	                }
	            }
	            if (!config.isAsync() && config.isIE7()) {
	                if (/(sandbox|int)(.dev)*.bbc.co*/.test(window.location.href) || /[?|&]ads-debug/.test(window.location.href) || document.cookie.indexOf('ads-debug=') !== -1) {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom.dev.css');
	                } else {
	                    utils.appendLinkToHead(config.getAssetPrefix() + 'style/dist/bbcdotcom.css');
	                }
	                layout.disableReset();
	            }
	
	            /**
	             * Disable resize in older IE browsers
	             */
	            if (config.isIE8()) {
	                layout.disableReset();
	            }
	
	            /**
	             * Sections
	             */
	            sections.build(true);
	            if (sections.getSection(0) === 'sport') {
	                breakpoints.setGroupStart(4, 900);
	            }
	
	            if (params.layout === 'group5') {
	                var copy = Object.assign({}, breakpoints.getGroup(4));
	                breakpoints.setGroup(5, copy);
	                breakpoints.setGroupFinish(4, 1279);
	            }
	
	            /**
	             * Layout
	             */
	            layout.init(breakpoints.getGroups());
	            if (params.clientWidth) {
	                // A hack to allow us to specify the clientWidth in unit testing
	                layout.setClientWidth(params.clientWidth);
	            }
	
	            /**
	             * Breakpoint overrides
	             */
	            if (params.customBreakpoints) {
	                breakpoints.setGroups(params.customBreakpoints);
	            }
	
	            lotame.init();
	
	            if (params.adsToDisplay) {
	                adsToDisplay = adFilter.build(params.adsToDisplay);
	            }
	
	            /**
	             * DFPP Register ads
	             */
	            if (adsToDisplay) {
	                window.bbcdotcom.adsToDisplay = adsToDisplay;
	                for (i = 0, len = adsToDisplay.length; i < len; i++) {
	                    adRegister.registerAd(adsToDisplay[i]);
	                }
	            }
	
	            /**
	             * Locale
	             */
	            if (params.localeData) {
	                for (x in params.localeData) {
	                    if (params.localeData.hasOwnProperty(x)) {
	                        locale.set(x, params.localeData[x]);
	                    }
	                }
	            } else {
	                locale.setLocale(document.documentElement.lang);
	            }
	
	            /**
	             * Ad Exclusions
	             */
	            new Predicate().set(windowDocument.title + ' ' + utils.getMetaNameContent('description'));
	
	            /**
	             * Ad Unit
	             */
	            adUnit.init(layout.getClientWidth(), this.serversideAdUnits2to9, sections.getSections('advert'), sections.getSections());
	
	            /**
	             * Key Values
	             */
	            keyValues.init(windowLocation, windowDocument, config.getType());
	            if (typeof params.keyValues !== 'undefined') {
	                for (x in params.keyValues) {
	                    if (params.keyValues.hasOwnProperty(x)) {
	                        keyValues.set(x, params.keyValues[x]);
	                    }
	                }
	            }
	
	            /**
	             * Ad Suites - used to display a certain set of ads all the time using ?ads=big
	             */
	            adSuites.init(windowLocation.href);
	
	            /**
	             * DFPP Requests
	             */
	            bbcdotcom.checkThirdPartyFirst(dfppRequest.init, dfppRequest);
	
	            if (config.isLotameEnabled() && config.isLotameActive()) {
	                bbcdotcom.checkThirdPartyFirst(lotame.consentCallback, lotame);
	            }
	
	            if (config.isLotameEnabled() && config.isLotameActive()) {
	                ['userPlay', 'startProgramme', 'endProgramme'].forEach(function (event) {
	                    bbcdotcom.pubsub.on(event, function (data) {
	                        data.event = event;
	                        lotame.sendData(data);
	                    });
	                });
	            }
	
	            if (window.addEventListener) {
	                window.addEventListener("message", this.receiveMessage, false);
	            } else {
	                // IE8 or earlier
	                window.attachEvent('onmessage', this.receiveMessage);
	            }
	        }
	
	        /**+
	          * Survey
	        */
	        survey.init();
	
	        analytics.init();
	
	        // Piano tags
	        if (config.isSherlockActive() && config.isSherlockEnabled() && window.tp) {
	            if (window._comscoreKeyValues && _comscoreKeyValues.b_page_type) {
	                tp.push(["setTags", [_comscoreKeyValues.b_page_type]]);
	            } else {
	                tp.push(["setTags", [AnalyticsHelper.getPageType()]]);
	            }
	        }
	
	        // Trigger an init event with useful information
	        pubsub.trigger('bbcdotcom:init:complete', {
	            params: params,
	            // Stats is used to update bbcdotcom.stats.data for JS variable collection by mPulse
	            stats: {
	                pageType: AnalyticsHelper.getPageType(),
	                primaryAdUnit: adUnit.getAdUnit1(),
	                secondaryAdUnit: adUnit.getAdUnits2to9(),
	                adsEnabled: config.isAdsEnabled(),
	                isAsync: config.isAsync()
	            }
	        });
	
	        idcta.init();
	    } catch (e) {
	        if (log && log.error) {
	            log.error(e);
	        } else {
	            window.console.log(e);
	        }
	    }
	
	    addLoadEvent(function () {
	        try {
	            var x,
	                ads = adRegister.getAds();
	            this.domLoaded = true;
	            if (!config.isAsync()) {
	                for (x in ads) {
	                    if (ads.hasOwnProperty(x)) {
	                        ads[x].disableScreenReaderForAdContent();
	                    }
	                }
	            } else {
	                this.reset();
	            }
	        } catch (e) {
	            utils.log(e);
	        }
	    }.bind(this));
	
	    bbcdotcom.initCalled = true;
	};

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
	for analytics.js, irrespective of ads being enabled
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */
	
	
	var _consts = __webpack_require__(151);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = __webpack_require__(144)('config');
	
	var ADS_ENABLED_HTML_CLASS = 'ads-enabled';
	var ANALYTICS = {
	    COMSCORE: {
	        HTTPS: 'https://sb.scorecardresearch.com/b',
	        WEBSITE_SUITE_LIVE: 'bbc',
	        WEBSITE_SUITE_TEST: 'bbc-global-test',
	        APP_SUITE_LIVE: 'bbc',
	        APP_SUITE_TEST: 'bbc-global-test',
	        CUSTOMER_ID_LIVE: 19293874,
	        CUSTOMER_ID_TEST: 18897612
	    },
	    SSC: {
	        HTTPS: 'https://ssc.api.bbc.com'
	    }
	};
	var WSSITES = new RegExp('^\/(afaanoromoo|afrique|amharic|arabic|azeri|bengali|burmese|gahuza|gujarati' + '|hausa|hindi|igbo|indonesia|korean|kyrgyz|japanese|marathi|mundo|naidheachdan|nepali|pashto|persian' + '|pidgin|portuguese|punjabi|russian|serbian|sinhala|somali|swahili|tajik|tamil|telugu|thai|tigrinya' + '|turkce|ukchina|ukrainian|urdu|uzbek|vietnamese|yoruba|zhongwen)');
	var SHERLOCKSITES = new RegExp('^\/($|wwhp|news|sport|weather' + '|reel|culture|capital|future|travel|autos|earth)');
	var LOTAMEWSSITES = new RegExp('^\/(afrique|arabic|azeri|bengali|burmese|gahuza|hausa|hindi|indonesia|kyrgyz' + '|mundo|nepali|pashto|persian|portuguese|russian|sinhala|somali|swahili|tamil|turkce|ukchina|ukrainian' + '|urdu|uzbek|vietnamese)');
	
	/**
	 * Initial Default Config
	 * @private
	 */
	var _config = {
	    referrer: '',
	    windowLocation: getWinLoc(),
	    windowDocument: getWinDoc(),
	    settings: {
	        ads: true,
	        analytics: true, // Global Currency Providers
	        comScore: true // ComScore only
	    },
	    sections: [],
	    pageType: '',
	    headline: '',
	    async: false,
	    disableAdsInitialLoad: false,
	    daxEnvironments: ['bbc-global'],
	    outbrainEnabled: true,
	    lotameEnabled: true,
	    lotameActive: false,
	    grapeshotEnabled: true,
	    adsenseEnabled: true,
	    adsportappEnabled: false,
	    percentActive: 0,
	    platinumEnabled: false,
	    tlSportIndexEnabled: false,
	    tlSportStoryEnabled: false,
	    tlSportFpEnabled: false,
	    thirdPartyDisabled: false,
	    optimizelyEnabled: false,
	    sherlockEnabled: false,
	    sherlockActive: false,
	    continuousPlayPage: false,
	    stickyPlayerPage: false,
	    isWorldService: false,
	    isEU: undefined,
	    isNPA: false,
	    ieVersion: {
	        ie7: false,
	        ie8: false,
	        ie9: false
	    },
	    version: '',
	    prefixes: {
	        assetPrefix: '',
	        jsPrefix: '',
	        swfPrefix: '',
	        cssPrefix: ''
	    },
	    features: {},
	    palEnv: _consts.PAL_ENV_LIVE,
	    appName: null
	};
	
	var Config = function () {
	    function Config() {
	        _classCallCheck(this, Config);
	    }
	
	    _createClass(Config, [{
	        key: 'init',
	        value: function init(serverConf, data, location, document) {
	
	            if (/^\/news\/election\/us2016/.test(_config.windowLocation.pathname)) {
	                bbcdotcom.utils.addHtmlTagClass(bbcdotcom.classes.classNames('news-election-us2016'));
	            }
	            if (typeof serverConf !== 'undefined') {
	                this.rehydrate(serverConf);
	            }
	
	            this.setData(data);
	
	            /* No ads/analytics in amp embed iframe (GNLADAPPS-1493) */
	            if (window.self !== window.top && new RegExp('\/embed\/.*\?.*amp=1').test(_config.windowLocation.href)) {
	                this.setAdsEnabled(false);
	                this.setAnalyticsEnabled(false);
	                log("disabling ads/analytics, amp-iframe ", window.self.location.href);
	            }
	
	            if (typeof location !== 'undefined') {
	                this.setWindowLocation(location);
	            }
	            if (typeof document !== 'undefined') {
	                this.setWindowDocument(document);
	            }
	            if (this.isAdsEnabled()) {
	                bbcdotcom.utils.addHtmlTagClass(ADS_ENABLED_HTML_CLASS);
	            }
	            if (/tlsportstory/i.test(_config.windowLocation.href)) {
	                this.setTlSportStoryEnabled(true);
	            }
	            if (/tlsportindex/i.test(_config.windowLocation.href)) {
	                this.setTlSportIndexEnabled(true);
	            }
	            if (/tlsportfp/i.test(_config.windowLocation.href)) {
	                this.setTlSportFpEnabled(true);
	            }
	
	            if (WSSITES.test(_config.windowLocation.pathname) || window.SEARCHBOX && window.SEARCHBOX.variant && window.SEARCHBOX.variant === 'worldservice') {
	                this.setIsWorldService(true);
	            }
	
	            // GNLADAPPS-1087
	            if (SHERLOCKSITES.test(_config.windowLocation.pathname) && data && data.ads === 1) {
	                this.setSherlockActive(true);
	            }
	
	            if (LOTAMEWSSITES.test(_config.windowLocation.pathname) || data && data.stats === 1) {
	                this.setLotameActive(true);
	            }
	
	            var referrer = typeof window.orb !== 'undefined' && typeof window.orb.referrer !== 'undefined' ? window.orb.referrer : _config.windowDocument.referrer;
	            this.setReferrer(referrer);
	        }
	
	        /**
	         * Populates the client-side config with config provided by the server.
	         * Called from bbcdotcom.api.setConfig
	         *
	         * @param {Object} conf - Server-side provided config
	         */
	
	    }, {
	        key: 'rehydrate',
	        value: function rehydrate(conf) {
	            if (typeof conf === 'undefined') {
	                return;
	            }
	            // Sections
	            if (typeof conf.sections !== 'undefined') {
	                this.setSections(conf.sections);
	            }
	            // Page Type
	            if (typeof conf.type !== 'undefined') {
	                this.setType(conf.type);
	            }
	            // Story Headline
	            if (typeof conf.headline !== 'undefined') {
	                this.setHeadline(conf.headline);
	            }
	            // Third Party Disabled
	            if (typeof conf.thirdPartyDisabled !== 'undefined') {
	                this.setThirdPartyDisabled(conf.thirdPartyDisabled);
	            }
	            // Ads Enabled
	            if (typeof conf.adsEnabled !== 'undefined') {
	                this.setAdsEnabled(conf.adsEnabled);
	            }
	            // Allow Advertising - variable name used in Candy is allowAdvertising
	            if (typeof conf.allowAdvertising !== 'undefined') {
	                this.setAdsEnabled(conf.allowAdvertising);
	            }
	            // Analytics Enabled
	            if (typeof conf.analyticsEnabled !== 'undefined') {
	                this.setAnalyticsEnabled(conf.analyticsEnabled);
	            }
	            // comScore Enabled
	            if (typeof conf.comScoreEnabled !== 'undefined') {
	                this.setComScoreEnabled(conf.comScoreEnabled);
	            }
	            // Async Enabled
	            if (typeof conf.asyncEnabled !== 'undefined') {
	                this.setAsync(conf.asyncEnabled);
	            }
	            // Optimizely Enabled
	            if (typeof conf.optimizelyEnabled !== 'undefined') {
	                this.setOptimizelyEnabled(conf.optimizelyEnabled);
	            }
	            // Sherlock Enabled
	            if (typeof conf.sherlockEnabled !== 'undefined') {
	                this.setSherlockEnabled(conf.sherlockEnabled);
	            }
	            // Load ads initially disabled, used only in async mode
	            if (typeof conf.disableInitialLoad !== 'undefined') {
	                this.setDisableInitialLoad(conf.disableInitialLoad);
	            }
	            // Ad Keyword - variable name used in Candy is adCampaignKeyword
	            var keyword = typeof conf.adKeyword !== 'undefined' ? conf.adKeyword : conf.adCampaignKeyword;
	            if (typeof keyword !== 'undefined') {
	                bbcdotcom.adverts.keyValues.set('keyword', keyword);
	            }
	            // Window Location
	            if (typeof conf.url !== 'undefined') {
	                this.setWindowLocation(bbcdotcom.utils.createWindowLocation(conf.url));
	            }
	            // Features
	            if (typeof conf.features !== 'undefined') {
	                this.setFeatures(conf.features);
	            }
	            // PAL ENV
	            if (typeof conf.palEnv !== 'undefined') {
	                this.setPalEnv(conf.palEnv);
	            }
	            // Locale
	            if (bbcdotcom.locale) {
	                if (typeof conf.advertisementText !== 'undefined') {
	                    bbcdotcom.locale.set('advertisementText', conf.advertisementText);
	                }
	                if (typeof conf.advertInfoPageUrl !== 'undefined') {
	                    bbcdotcom.locale.set('advertInfoPageUrl', conf.advertInfoPageUrl);
	                }
	                if (typeof conf.inAssociationWithText !== 'undefined') {
	                    bbcdotcom.locale.set('inAssociationWithText', conf.inAssociationWithText);
	                }
	                if (typeof conf.sponsoredByText !== 'undefined') {
	                    bbcdotcom.locale.set('sponsoredByText', conf.sponsoredByText);
	                }
	                if (typeof conf.adsByGoogleText !== 'undefined') {
	                    bbcdotcom.locale.set('adsByGoogleText', conf.adsByGoogleText);
	                }
	            }
	            // Is Continuous Play Page (webapp/product provides)
	            if (typeof conf.isContinuousPlayPage !== 'undefined') {
	                this.setContinuousPlayPage(conf.isContinuousPlayPage);
	            }
	            // Is Sticky Player Page (webapp/product provides)
	            if (typeof conf.isStickyPlayerPage !== 'undefined') {
	                this.setStickyPlayerPage(conf.isStickyPlayerPage);
	            }
	        }
	    }, {
	        key: 'getConfig',
	        value: function getConfig() {
	            return _config;
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            if (typeof data !== 'undefined' && typeof data.ads !== 'undefined' && typeof data.stats !== 'undefined' && typeof data.statsProvider !== 'undefined') {
	                var numProviders = 5,
	                    providers = parseInt(data.statsProvider, 10).toString(2);
	                if (providers.length !== numProviders) {
	                    // Pad binary list of providers
	                    // eg decimal = 3, therefore in binary = 11, not 00011 which we need below for substring
	                    while (providers.length < numProviders) {
	                        providers = '0' + providers;
	                    }
	                }
	
	                /**
	                 * Stats Provider Values:
	                 * - 1  AGOF
	                 * - 2  Sitestat    Removed (BBCCOM-5674)
	                 * - 4  Nielsen US
	                 * - 8  Nielsen NZ
	                 * - 16 Nielsen AU
	                 */
	                _config.settings = {
	                    'ads': data.ads === 1 && _config.settings.ads !== false,
	                    'analytics': data.stats === 1 && _config.settings.analytics !== false,
	                    // Instructions: when adding new, increase numProviders above, update the "var settings" defaults at top of page and add to wwscripts.ini in the same order
	                    'nielsen-au': data.stats === 1 && parseInt(providers.substr(0, 1), 10),
	                    'nielsen-nz': data.stats === 1 && parseInt(providers.substr(1, 1), 10),
	                    'nielsen-us': data.stats === 1 && parseInt(providers.substr(2, 1), 10),
	                    'sitestat': 0, // removed (BBCCOM-5674)
	                    'agof': 0, // remove (BBCCOM-7046)
	                    // Instructions: when adding new, increase numProviders above, update the "var settings" defaults at top of page and add to wwscripts.ini in the same order
	                    'comScore': _config.settings.comScore
	                };
	            }
	        }
	    }, {
	        key: 'setFlagpoles',
	        value: function setFlagpoles(flag) {
	            // Third Party Disabled
	            if (typeof flag.tp !== 'undefined') {
	                this.setThirdPartyDisabled(flag.tp);
	            }
	            // Outbrain
	            if (typeof flag.o !== 'undefined') {
	                this.setOutbrainEnabled(flag.o);
	            }
	            // Adsense Enabled
	            if (typeof flag.d !== 'undefined') {
	                this.setAdsenseEnabled(flag.d);
	            }
	            // Adsportapp Enabled
	            if (typeof flag.asa !== 'undefined') {
	                this.setAdsportappEnabled(flag.asa);
	            }
	            // Lotame Enabled
	            if (typeof flag.l !== 'undefined') {
	                this.setLotameEnabled(flag.l);
	            }
	            // Platinum Enabled
	            if (typeof flag.p !== 'undefined') {
	                this.setPlatinumEnabled(flag.p);
	            }
	            // Optimizely Enabled
	            if (typeof flag.z !== 'undefined') {
	                this.setOptimizelyEnabled(flag.z);
	            }
	            // Grapeshot Enabled
	            if (typeof flag.g !== 'undefined') {
	                this.setGrapeshotEnabled(flag.g);
	            }
	            // Sherlock Enabled
	            if (typeof flag.sh !== 'undefined') {
	                this.setSherlockEnabled(flag.sh);
	            }
	        }
	
	        /**
	         * Offers the ability for a product to specify what sections should be and for us not
	         * to derive the sections from the page Uri.  This information is used within bbcdotcom.sections object
	         */
	
	    }, {
	        key: 'setSections',
	        value: function setSections(sects) {
	            if (typeof sects !== 'undefined') {
	                if (sects instanceof Array) {
	                    _config.sections = sects;
	                } else {
	                    _config.sections = sects.split('/');
	                }
	            } else {
	                _config.sections = [];
	            }
	        }
	    }, {
	        key: 'getSections',
	        value: function getSections() {
	            return _config.sections;
	        }
	
	        /**
	         * Page Type eg STORY, INDEX, VIDEO
	         */
	
	    }, {
	        key: 'setType',
	        value: function setType(type) {
	            _config.pageType = type.toUpperCase();
	        }
	    }, {
	        key: 'getType',
	        value: function getType() {
	            return _config.pageType;
	        }
	
	        /**
	         * Feature Switch
	         */
	
	    }, {
	        key: 'setFeatures',
	        value: function setFeatures(features) {
	            _config.features = features;
	            return this;
	        }
	    }, {
	        key: 'getFeatures',
	        value: function getFeatures() {
	            return _config.features;
	        }
	
	        /**
	         * PAL ENV
	         */
	
	    }, {
	        key: 'setPalEnv',
	        value: function setPalEnv(palEnv) {
	            _config.palEnv = palEnv;
	            return this;
	        }
	    }, {
	        key: 'getPalEnv',
	        value: function getPalEnv() {
	            return _config.palEnv;
	        }
	
	        /**
	         * Story Headline
	         */
	
	    }, {
	        key: 'setHeadline',
	        value: function setHeadline(str) {
	            _config.headline = str;
	        }
	    }, {
	        key: 'getHeadline',
	        value: function getHeadline() {
	            return _config.headline;
	        }
	
	        /**
	         * Used to set the loading of ads in DFP to be done Asynchronously
	         * @param isAsync
	         */
	
	    }, {
	        key: 'setAsync',
	        value: function setAsync(isAsync) {
	            _config.async = isAsync;
	        }
	    }, {
	        key: 'isAsync',
	        value: function isAsync() {
	            return _config.async;
	        }
	
	        /**
	         * Used to disable ads loading initially in DFP until the refresh method is called (Only available in Async Mode)
	         * @param isDisableAdsInitialLoad
	         */
	
	    }, {
	        key: 'setDisableInitialLoad',
	        value: function setDisableInitialLoad(isDisableAdsInitialLoad) {
	            _config.disableAdsInitialLoad = isDisableAdsInitialLoad;
	        }
	    }, {
	        key: 'isDisableInitialLoad',
	        value: function isDisableInitialLoad() {
	            return _config.disableAdsInitialLoad;
	        }
	    }, {
	        key: 'isTopLevelSite',
	        value: function isTopLevelSite(site) {
	            var pathname = _config.windowLocation.pathname;
	            return typeof pathname !== 'undefined' && pathname.indexOf('/' + site) === 0;
	        }
	    }, {
	        key: 'isSportApp',
	        value: function isSportApp() {
	            var pathname = _config.windowLocation.pathname,
	                href = _config.windowLocation.href;
	            return typeof pathname !== 'undefined' && (pathname.indexOf('.app') !== -1 || typeof href !== 'undefined' && href.indexOf('.app') !== -1) && (pathname.indexOf('/sport') === 0 || typeof href !== 'undefined' && href.indexOf('analytics-debug') !== -1);
	        }
	    }, {
	        key: 'isReel',
	        value: function isReel() {
	            var pathname = _config.windowLocation.pathname;
	            return typeof pathname !== 'undefined' && pathname.indexOf('/reel') === 0;
	        }
	    }, {
	        key: 'isActive',
	        value: function isActive(key) {
	            return typeof _config.settings[key] !== 'undefined' ? _config.settings[key] : false;
	        }
	    }, {
	        key: 'isAdsEnabled',
	        value: function isAdsEnabled() {
	            return this.isActive('ads') && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setAdsEnabled',
	        value: function setAdsEnabled(enabled) {
	            _config.settings.ads = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'setAnalyticsEnabled',
	        value: function setAnalyticsEnabled(enabled) {
	            /* Once it has been disable to not allow it to be enabled */
	            _config.settings.analytics = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isAnalyticsEnabled',
	        value: function isAnalyticsEnabled() {
	            return this.isActive('analytics') && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setComScoreEnabled',
	        value: function setComScoreEnabled(enabled) {
	            /* Once it has been disable to not allow it to be enabled */
	            _config.settings.comScore = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isComScoreEnabled',
	        value: function isComScoreEnabled() {
	            return this.isActive('comScore') && this.isActive('analytics') && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setOutbrainEnabled',
	        value: function setOutbrainEnabled(enabled) {
	            _config.outbrainEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isOutbrainEnabled',
	        value: function isOutbrainEnabled() {
	            return _config.outbrainEnabled && !this.isThirdPartyDisabledEU() && window.bbccookies && bbccookies.readPolicy && bbccookies.readPolicy('performance');
	        }
	    }, {
	        key: 'setAdsenseEnabled',
	        value: function setAdsenseEnabled(enabled) {
	            _config.adsenseEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isAdsenseEnabled',
	        value: function isAdsenseEnabled() {
	            return _config.adsenseEnabled && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setAdsportappEnabled',
	        value: function setAdsportappEnabled(enabled) {
	            _config.adsportappEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isAdsportappEnabled',
	        value: function isAdsportappEnabled() {
	            return _config.adsportappEnabled;
	        }
	    }, {
	        key: 'setLotameEnabled',
	        value: function setLotameEnabled(enabled) {
	            _config.lotameEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isLotameEnabled',
	        value: function isLotameEnabled() {
	            return _config.lotameEnabled && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setLotameActive',
	        value: function setLotameActive(bool) {
	            _config.lotameActive = bool !== 0 && bool !== false ? true : false;
	        }
	    }, {
	        key: 'isLotameActive',
	        value: function isLotameActive() {
	            return _config.lotameActive;
	        }
	    }, {
	        key: 'setContinuousPlayPage',
	        value: function setContinuousPlayPage(value) {
	            _config.continuousPlayPage = value === true;
	        }
	    }, {
	        key: 'isContinuousPlayPage',
	        value: function isContinuousPlayPage() {
	            return _config.continuousPlayPage;
	        }
	    }, {
	        key: 'setPlatinumEnabled',
	        value: function setPlatinumEnabled(enabled) {
	            _config.platinumEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isPlatinumEnabled',
	        value: function isPlatinumEnabled() {
	            return _config.platinumEnabled;
	        }
	    }, {
	        key: 'setTlSportIndexEnabled',
	        value: function setTlSportIndexEnabled(enabled) {
	            _config.tlSportIndexEnabled = enabled;
	        }
	    }, {
	        key: 'isTlSportIndexEnabled',
	        value: function isTlSportIndexEnabled() {
	            return _config.tlSportIndexEnabled;
	        }
	    }, {
	        key: 'setTlSportStoryEnabled',
	        value: function setTlSportStoryEnabled(enabled) {
	            _config.tlSportStoryEnabled = enabled;
	        }
	    }, {
	        key: 'isTlSportStoryEnabled',
	        value: function isTlSportStoryEnabled() {
	            return _config.tlSportStoryEnabled;
	        }
	    }, {
	        key: 'setTlSportFpEnabled',
	        value: function setTlSportFpEnabled(enabled) {
	            _config.tlSportFpEnabled = enabled;
	        }
	    }, {
	        key: 'isTlSportFpEnabled',
	        value: function isTlSportFpEnabled() {
	            return _config.tlSportFpEnabled;
	        }
	    }, {
	        key: 'setOptimizelyEnabled',
	        value: function setOptimizelyEnabled(enabled) {
	            _config.optimizelyEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isOptimizelyEnabled',
	        value: function isOptimizelyEnabled() {
	            return _config.optimizelyEnabled;
	        }
	    }, {
	        key: 'setGrapeshotEnabled',
	        value: function setGrapeshotEnabled(enabled) {
	            _config.grapeshotEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isGrapeshotEnabled',
	        value: function isGrapeshotEnabled() {
	            return _config.grapeshotEnabled && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setSherlockEnabled',
	        value: function setSherlockEnabled(enabled) {
	            _config.sherlockEnabled = enabled !== 0 && enabled !== false ? true : false;
	        }
	    }, {
	        key: 'isSherlockEnabled',
	        value: function isSherlockEnabled() {
	            return _config.sherlockEnabled && !this.isThirdPartyDisabledEU();
	        }
	    }, {
	        key: 'setSherlockActive',
	        value: function setSherlockActive(bool) {
	            _config.sherlockActive = bool !== 0 && bool !== false ? true : false;
	        }
	    }, {
	        key: 'isSherlockActive',
	        value: function isSherlockActive() {
	            return _config.sherlockActive;
	        }
	    }, {
	        key: 'setIsWorldService',
	        value: function setIsWorldService(bool) {
	            _config.isWorldService = bool;
	        }
	    }, {
	        key: 'isWorldService',
	        value: function isWorldService() {
	            return _config.isWorldService;
	        }
	    }, {
	        key: 'setThirdPartyDisabled',
	        value: function setThirdPartyDisabled(disabled) {
	            _config.thirdPartyDisabled = disabled !== 1 && disabled !== true && _config.thirdPartyDisabled !== true ? false : true;
	        }
	    }, {
	        key: 'isThirdPartyDisabled',
	        value: function isThirdPartyDisabled() {
	            return _config.thirdPartyDisabled;
	        }
	    }, {
	        key: 'isThirdPartyDisabledEU',
	        value: function isThirdPartyDisabledEU() {
	            return _config.thirdPartyDisabled && _config.isEU;
	        }
	    }, {
	        key: 'setStickyPlayerPage',
	        value: function setStickyPlayerPage(value) {
	            _config.stickyPlayerPage = value === true;
	        }
	    }, {
	        key: 'isStickyPlayerPage',
	        value: function isStickyPlayerPage() {
	            return _config.stickyPlayerPage;
	        }
	    }, {
	        key: 'setIE7',
	        value: function setIE7(value) {
	            _config.ieVersion.ie7 = value;
	        }
	    }, {
	        key: 'isIE7',
	        value: function isIE7() {
	            return _config.ieVersion.ie7;
	        }
	    }, {
	        key: 'setIE8',
	        value: function setIE8(value) {
	            _config.ieVersion.ie8 = value;
	        }
	    }, {
	        key: 'isIE8',
	        value: function isIE8() {
	            return _config.ieVersion.ie8;
	        }
	    }, {
	        key: 'setIE9',
	        value: function setIE9(value) {
	            _config.ieVersion.ie9 = value;
	        }
	    }, {
	        key: 'isIE9',
	        value: function isIE9() {
	            return _config.ieVersion.ie9;
	        }
	    }, {
	        key: 'setEU',
	        value: function setEU(bool) {
	            _config.isEU = bool !== 0 && bool !== false ? true : false;
	            this.updateNPA();
	        }
	    }, {
	        key: 'isEU',
	        value: function isEU() {
	            return _config.isEU;
	        }
	    }, {
	        key: 'updateNPA',
	        value: function updateNPA() {
	            if (_config.isEU) {
	                _config.isNPA = window.bbccookies && bbccookies.readPolicy && bbccookies.readPolicy('performance');
	            }
	        }
	    }, {
	        key: 'isNPA',
	        value: function isNPA() {
	            return _config.isNPA;
	        }
	
	        // TODO - KB 140225 Investigate where these prefix are set and remove when appropriate.
	
	    }, {
	        key: 'setAssetPrefix',
	        value: function setAssetPrefix(prefix) {
	            _config.prefixes.assetPrefix = prefix;
	        }
	    }, {
	        key: 'getAssetPrefix',
	        value: function getAssetPrefix() {
	            return _config.prefixes.assetPrefix;
	        }
	    }, {
	        key: 'setAppName',
	        value: function setAppName(appName) {
	            _config.appName = appName;
	            return this;
	        }
	    }, {
	        key: 'getAppName',
	        value: function getAppName() {
	            return _config.appName;
	        }
	
	        /**
	         * TODO - KB 150629 Deprecate the following and just use get/setAssetPrefix(), having one for each folder is redundant
	         * N&K uses these as files are uploaded to different directories
	         */
	
	    }, {
	        key: 'setJsPrefix',
	        value: function setJsPrefix(prefix) {
	            _config.prefixes.jsPrefix = prefix;
	        }
	    }, {
	        key: 'getJsPrefix',
	        value: function getJsPrefix() {
	            return _config.prefixes.jsPrefix !== '' ? _config.prefixes.jsPrefix : this.getAssetPrefix() + 'script';
	        }
	    }, {
	        key: 'setSwfPrefix',
	        value: function setSwfPrefix(prefix) {
	            _config.prefixes.swfPrefix = prefix;
	        }
	    }, {
	        key: 'getSwfPrefix',
	        value: function getSwfPrefix() {
	            return _config.prefixes.swfPrefix !== '' ? _config.prefixes.swfPrefix : this.getAssetPrefix() + 'swf';
	        }
	    }, {
	        key: 'setCssPrefix',
	        value: function setCssPrefix(prefix) {
	            _config.prefixes.cssPrefix = prefix;
	        }
	    }, {
	        key: 'getCssPrefix',
	        value: function getCssPrefix() {
	            return _config.prefixes.cssPrefix !== '' ? _config.prefixes.cssPrefix : this.getAssetPrefix() + 'style';
	        }
	
	        /**
	         * TODO END - Deprecate the following and just use get/setAssetPrefix(), having one for each folder is redundant
	         */
	
	    }, {
	        key: 'setVersion',
	        value: function setVersion(v) {
	            _config.version = v;
	            return this;
	        }
	    }, {
	        key: 'getVersion',
	        value: function getVersion() {
	            return _config.version;
	        }
	    }, {
	        key: 'setWindowLocation',
	        value: function setWindowLocation(location) {
	            _config.windowLocation = location;
	            return this;
	        }
	    }, {
	        key: 'getWindowLocation',
	        value: function getWindowLocation() {
	            return _config.windowLocation;
	        }
	    }, {
	        key: 'setWindowDocument',
	        value: function setWindowDocument(document) {
	            _config.windowDocument = document;
	            return this;
	        }
	    }, {
	        key: 'getWindowDocument',
	        value: function getWindowDocument() {
	            return _config.windowDocument;
	        }
	    }, {
	        key: 'setReferrer',
	        value: function setReferrer(ref) {
	            _config.referrer = ref;
	            return this;
	        }
	    }, {
	        key: 'getReferrer',
	        value: function getReferrer() {
	            return _config.referrer;
	        }
	    }, {
	        key: 'getAnalyticsConfig',
	        value: function getAnalyticsConfig() {
	            return ANALYTICS;
	        }
	    }, {
	        key: 'getAnalyticsUri',
	        value: function getAnalyticsUri(vendor) {
	            return bbcdotcom.analytics.comScore.sscHelper.getAnalyticsLocation();
	        }
	    }, {
	        key: 'setDaxEnvironments',
	        value: function setDaxEnvironments() {
	            var daxEnvironments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	
	            _config.daxEnvironments = daxEnvironments;
	            return this;
	        }
	    }, {
	        key: 'getDaxEnvironments',
	        value: function getDaxEnvironments() {
	            return _config.daxEnvironments;
	        }
	    }, {
	        key: 'getAnalyticsSuite',
	        value: function getAnalyticsSuite(vendor) {
	            var testEnv = isTestEnv(_config.windowLocation.href);
	            if (this.isSportApp()) {
	                return testEnv ? ANALYTICS.COMSCORE.APP_SUITE_TEST : ANALYTICS.COMSCORE.APP_SUITE_LIVE;
	            }
	            return testEnv ? ANALYTICS.COMSCORE.WEBSITE_SUITE_TEST : ANALYTICS.COMSCORE.WEBSITE_SUITE_LIVE;
	        }
	    }, {
	        key: 'getAnalyticsAcctId',
	        value: function getAnalyticsAcctId() {
	            return isTestEnv(_config.windowLocation.href) ? ANALYTICS.COMSCORE.CUSTOMER_ID_TEST : ANALYTICS.COMSCORE.CUSTOMER_ID_LIVE;
	        }
	
	        /**
	         * Testing only
	         */
	
	    }, {
	        key: 'r',
	        value: function r() {
	            this.setWindowLocation(getWinLoc());
	            this.setWindowDocument(getWinDoc());
	            this.setReferrer('');
	            this.setSections([]);
	            _config.settings = {
	                ads: true,
	                analytics: true,
	                comScore: true
	            };
	            this.setIE7(false);
	            this.setIE8(false);
	            this.setAssetPrefix('');
	            this.setOutbrainEnabled(true);
	            this.setAdsenseEnabled(true);
	            this.setAdsportappEnabled(false);
	            this.setStickyPlayerPage(false);
	            this.setContinuousPlayPage(false);
	            this.setLotameActive(false);
	            this.setHeadline('');
	            this.setType('');
	        }
	    }]);
	
	    return Config;
	}();
	
	exports['default'] = new Config();
	
	
	function getWinLoc() {
	    return window.location;
	}
	
	function getWinDoc() {
	    return window.document;
	}
	
	function isTestEnv(href) {
	    return (/(sandbox|int|test|stage)(.dev)*.bbc.co*/.test(href)
	    );
	}
	module.exports = exports['default'];

/***/ }),
/* 151 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var PAL_ENV_LIVE = exports.PAL_ENV_LIVE = 'live';
	var PAL_ENV_STAGE = exports.PAL_ENV_STAGE = 'stage';
	var PAL_ENV_TEST = exports.PAL_ENV_TEST = 'test';
	var PAL_ENV_INT = exports.PAL_ENV_INT = 'int';
	var PAL_ENV_SANDBOX = exports.PAL_ENV_SANDBOX = 'sandbox';

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 */
	
	/**
	 * There are subtle differences of section/subsection classifications between advertising and analytics
	 * based on Doubleclick targetting and Analytics tracking requirements.
	 */
	
	var config = __webpack_require__(150);
	var sections = [];
	var advertSections = [];
	var analyticsSections = [];
	
	/**
	 * Standardise Uri inconsistencies
	 */
	var cleanupPath = function cleanupPath(path) {
	    var wsLang = new RegExp('^(afaanoromoo|afrique|amharic|arabic|azeri|bengali|burmese|gahuza|gujarati' + '|hausa|hindi|igbo|indonesia|korean|kyrgyz|japanese|marathi|mundo|naidheachdan|nepali|newyddion|pashto' + '|persian|pidgin|portuguese|punjabi|russian|serbian|sinhala|somali|swahili|tajik|tamil|telugu|thai' + '|tigrinya|turkce|ukchina|ukrainian|urdu|uzbek|vietnamese|yoruba|zhongwen)');
	
	    return path.replace(/\?.*$/, '') // remove everything after ? in url
	    .replace(/\#.*$/, '') // remove everything after # in url
	    .replace(/^news\/0/, 'news') // remove /0/
	    .replace(/^weather\/0/, 'weather') // remove /0/
	    .replace(/^news\/(uk|world|us|asia)\/(health)(?!-)/, "news/$2") // convert /news/uk/health to /news/health (rem edition, only on index, not on story)
	    .replace(/^(news\/av\/)(.*)\/[^\/]+$/, '$1$2') // convert /news/av/*/title to /news/av/* (rem story title after last slash)
	    .replace(/^news\/av\//, "news/") // convert /news/av/* to /news/* (rem 'av')
	    .replace(/(_|\-|\/)?[A-Z0-9]{7,8}$/, '') // remove story Id /12345678, _12345678 or -12345678
	    .replace(/\/[a-z0-9]+\.stm/, '') // remove from old CPS pages eg /default.stm
	    .replace(/_and_/, '-') // convert entertainment_and_arts to entertainment-arts
	    .replace(/_/g, '-') // want consistency between desktop and responsive
	    .replace(/^news\/(england|northern-ireland|scotland|wales)($|-|\/)/, "news/uk/$1$2") // add '/uk/'
	    .replace(/^news\/uk-([a-z]+)(-([a-z]+))?/, "news/uk/$1/$3") // convert /news/uk-wales-south-east-wales to /news/uk/wales/south-east-wales
	    .replace(/^news\/(world)-(africa|asia|europe)(-([a-z]+))?/, "news/$1/$2/$4") // convert /news/world-asia to /news/world/asia  (no hyphen in name)
	    .replace(/^news\/(world)-([a-z\-]+)/, "news/$1/$2/") // convert /news/world-latin-america to /news/world/latin-america (hyphen in name)
	    .replace(/^(newsbeat)($|-|\/)/, "news/$1$2") // convert /newsbeat/12345 to /news/newsbeat/12345
	    .replace(/^sport\/0/, 'sport') // remove /0/
	    .replace(/^sport\/beta/, 'sport') // remove /beta/
	    .replace(/^sport\/av\//, "sport/") // convert /sport/av/* to /sport/* (rem 'av')
	    .replace(/^sport\/(world|uk)/, 'sport') // GNLADAPPS-755 -- remove /world/ and /uk/ from sport paths
	    .replace(/^sport\/(.*)\/sports($|\/)/, "sport/$1$2") // replace /sport/___/sports/ with /sport/___/
	    .replace(/market-data\/overview/, 'market-data') // market data front-page is '/overview'
	    .replace(/^(programmes)/, "news/$1") // convert /programmes/click to /news/programmes/click
	    .replace(wsLang, "worldservice/$1") // convert /arabic to /worldservice/arabic
	    .replace(/^wwhp/, '') // convert /wwhp to /
	    .replace(/\.app$/, '') // remove '.app' eg /sport/football.app for PhoneGap
	    .replace(/:\d+(?=\/)/, '') // remove any port numbers
	    .replace(/\/+$/, ''); // remove trailing slash
	};
	
	/**
	 * Section exceptions for advert
	 */
	var buildAdvertSections = function buildAdvertSections(path) {
	    path = path.replace(/^news\/world\/([a-z]+)(-([a-z]+))?/, "news/world$1$3") // /news/world/us-canada/ -> /news/worlduscanada/
	    .replace(/programmes\/asiabusinessreport/, 'asiabusiness') // /programmes/asiabusinessreport -> /asiabusiness
	    .replace(/programmes\/click$/, "clickonline") // /programmes/click -> /clickonline
	    .replace(/worldservice\//, ""); // /worldservice/arabic -> /arabic
	    return path.split('/');
	};
	
	/**
	 * Section exceptions for analytics
	 */
	var buildAnalyticsSections = function buildAnalyticsSections(path) {
	    path = path.replace(/^specialfeatures/, "news/specialfeatures") // /specialfeatures/ -> /news/specialfeatures/
	    .replace(/^sport\/(.*)\/(20[0-9]{2})($|\/)/, "sport/$1-$2$3"); // replace /sport/blah/2014/ with /sport/blah-2014/
	    return path.split('/');
	};
	
	/**
	 * Build up an array of sections
	 */
	var build = function build(isCurrentUri, href) {
	    var path = '',
	        _sections = [],
	        _advertSections = [],
	        _analyticsSections = [],
	        UNKNOWN = 'unknown',
	        result;
	    if (typeof href !== 'undefined') {
	        result = href.match(/http(|s):\/\/[a-z0-9\-.]+(.com|.co.uk|.net)(\/)?(.*)?/);
	        if (result) {
	            // eg http://www.bbc.com/hello/world => hello/world
	            path = result[result.length - 1];
	        } else {
	            result = href.match(/^\/(.*)?/);
	            if (result) {
	                // eg / => ''
	                // eg /hello/world => hello/world
	                path = result[result.length - 1];
	            } else {
	                path = UNKNOWN;
	            }
	        }
	    } else if (config.getSections().length === 0) {
	        // Determine sections from Uri
	        var uri = bbcdotcom.analyticsHelper.getUriForSections();
	        if (typeof uri === 'undefined' || uri === '' || uri === null || uri.indexOf('http') !== 0) {
	            // Unknown window.location
	            path = UNKNOWN;
	        } else {
	            result = uri.match(/http(|s):\/\/[a-z0-9\-.]+(.com|.co.uk|.net)(\/)?(.*)?/);
	            if (result) {
	                path = result[result.length - 1];
	            } else {
	                path = UNKNOWN;
	            }
	        }
	    } else {
	        // Use sections defined in the Html page (likely injected with server-side values)
	        // Convert array eg ["news", "world", "asia", "india"] to uri path eg "/news/world/asia/india"
	        path = config.getSections().join('/');
	    }
	    path = path || '';
	    path = cleanupPath(path);
	    if (path === '') {
	        // Homepage
	        _sections = _advertSections = _analyticsSections = ['homepage'];
	    } else {
	        _sections = path.split('/');
	        _advertSections = buildAdvertSections(path);
	        _analyticsSections = buildAnalyticsSections(path);
	    }
	    if (isCurrentUri) {
	        // Persist current page's sections as globals
	        sections = _sections;
	        advertSections = _advertSections;
	        analyticsSections = _analyticsSections;
	    }
	    return [_sections, _advertSections, _analyticsSections];
	};
	
	/**
	 * Load correct array eg 'sections', 'advertSections', 'analyticsSections'
	 */
	var getArray = function getArray(type) {
	    type = typeof type === 'undefined' ? '' : type;
	    return type === 'advert' ? advertSections : type === 'analytics' ? analyticsSections : sections;
	};
	
	module.exports = {
	    build: build,
	    /**
	     * Returns a section of the hierarchy
	     *
	     * With a heirarchy of "news>world>asia":
	     * eg getSection(0)                  => 'news'
	     * eg getSection(1, 'analytics');    => 'worldasia'
	     * eg getSection(1, 'advert', true); => 'world'
	     *
	     * @param integer offset Which section
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @param boolean reloadData (optional) Rebuild sections data based on new/current window.location
	     * @return mixed string|boolean Returns false if offset does not exist
	     */
	    getSection: function getSection(offset, type, reloadData) {
	        if (typeof offset !== 'undefined') {
	            if (typeof reloadData !== 'undefined' && reloadData === true) {
	                build(true);
	            }
	            offset = parseInt(offset, 10);
	            if (typeof getArray(type) !== 'undefined' && typeof getArray(type)[offset] !== 'undefined' && getArray(type)[offset] !== '') {
	                return getArray(type)[offset];
	            }
	        }
	        return false;
	    },
	    /**
	     * Returns the hierarchy in a sections array
	     *
	     * With a hierarchy of "news>world>asia":
	     * eg getSections()                  => array('news', 'world', 'asia')
	     * eg getSections('analytics');      => array('news', 'worldasia')
	     * eg getSections('advert', true);   => array('news', 'world', 'asia')
	     * eg getSections()[2]               => 'asia'
	     *
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @param boolean reloadData (optional) Rebuild sections data based on new/current window.location
	     * @return array Section(s) for given link
	     */
	    getSections: function getSections(type, reloadData) {
	        if (typeof reloadData !== 'undefined' && reloadData === true) {
	            build(true);
	        }
	        return getArray(type);
	    },
	    /**
	     * Return the hierarchy in a sections array for a given Uri.  Sometimes used for translating a link's href
	     * into sections.
	     *
	     * @param string uri eg http://www.bbc.com/hello/world or /hello/world
	     * @param string type (optional) Whether to grab section for 'advert' or 'analytics'
	     * @return array Section(s) for given link
	     */
	    getSectionsForUri: function getSectionsForUri(uri, type) {
	        uri = typeof uri === 'undefined' || uri === null ? '' : uri;
	        type = typeof type === 'undefined' ? '' : type;
	        var data = build(false, uri);
	        return type === 'advert' ? data[1] : type === 'analytics' ? data[2] : data[0];
	    },
	    /**
	     * For testing only.
	     */
	    r: function r() {
	        sections = [];
	        advertSections = [];
	        analyticsSections = [];
	    }
	};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var log = __webpack_require__(144)('locale');
	var data = {
	    advertisementText: "Advertisement",
	    inAssociationWithText: "in association with",
	    sponsoredByText: "is sponsored by",
	    advertisingPartnersText: "Advertising Partners",
	    adsByGoogleText: "Ads by Google",
	    advertInfoPageUrl: "https://www.bbc.com/privacy/cookies/international/",
	    associationInfoPageUrl: "https://advertising.bbcworldwide.com/bbc-storyworks-content-definitions/",
	    googleAdsPageUrl: "https://www.bbc.co.uk/bbc.com/faq/ads_by_google.shtml"
	};
	
	var localeData = {
	    "am": {
	        "advertisementText": "ማስታወቂያ",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "ጋር በመተባበር",
	        "sponsoredByText": "ሰፖንሰር ያደረገዉ/ችዉ/ጉት",
	        "advertisingPartnersText": "አጋሮች",
	        "adsByGoogleText": "የጉግል ማስታወቂያዎች"
	    },
	    "ar": {
	        "advertisementText": "إعلان",
	        "advertInfoPageUrl": "/arabic/institutional/2012/06/120410_faq_help_bbc_arabic",
	        "inAssociationWithText": "بالتعاون مع",
	        "sponsoredByText": "برعاية",
	        "advertisingPartnersText": "شركاء الإعلان",
	        "adsByGoogleText": "إعلانات من غوغل"
	    },
	    "az": {
	        "advertisementText": "Reklam",
	        "advertInfoPageUrl": "/azeri/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "ilə birgə",
	        "sponsoredByText": "Sponsor: ",
	        "advertisingPartnersText": "Reklam partnyorları",
	        "adsByGoogleText": "Google reklamı"
	    },
	    "bn": {
	        "advertisementText": "বিজ্ঞাপন",
	        "advertInfoPageUrl": "/bengali/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "এর সহযোগিতায়",
	        "sponsoredByText": "এর সৌজন্যে",
	        "advertisingPartnersText": "বিজ্ঞাপন সহযোগী",
	        "adsByGoogleText": "গুগল-এর বিজ্ঞাপন"
	    },
	    "es": {
	        "advertisementText": "Publicidad",
	        "advertInfoPageUrl": "/mundo/institucional/2012/06/000000_ayuda_sobre_publicidad",
	        "inAssociationWithText": "En asociación con",
	        "sponsoredByText": "Patrocinado por",
	        "advertisingPartnersText": "Anunciantes",
	        "adsByGoogleText": "Avisos de Google"
	    },
	    "fa": {
	        "advertisementText": "آگهی",
	        "advertInfoPageUrl": "http://www.bbc.com/persian/institutional/2015/08/000000_advertising_faq",
	        "inAssociationWithText": "inAssociationWith",
	        "sponsoredByText": "sponsoredBy",
	        "advertisingPartnersText": "advertisingPartners",
	        "adsByGoogleText": "adsByGoogle"
	    },
	    "fr": {
	        "advertisementText": "Publicités",
	        "advertInfoPageUrl": "/afrique/institutionelles/2015/08/000000_advertising_faq.shtml",
	        "inAssociationWithText": "inAssociationWith",
	        "sponsoredByText": "sponsoredBy",
	        "advertisingPartnersText": "advertisingPartners",
	        "adsByGoogleText": "adsByGoogle"
	    },
	    "gu": {
	        "advertisementText": "જાહેરાત",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "ના સહયોગથી",
	        "sponsoredByText": "પ્રાયોજક",
	        "advertisingPartnersText": "પાર્ટનર્સ",
	        "adsByGoogleText": "Google દ્વારાજાહેરાતો"
	    },
	    "ha": {
	        "advertisementText": "Talla",
	        "advertInfoPageUrl": "http://www.bbc.co.uk/hausa/institutional/2015/01/000000_advertising_faqs",
	        "inAssociationWithText": "Da hadin gwiwar",
	        "sponsoredByText": "Wanda ya dauki nauyi",
	        "advertisingPartnersText": "Abokan hulda",
	        "adsByGoogleText": "Tallace-tallace daga Google"
	    },
	    "hi": {
	        "advertisementText": "विज्ञापन",
	        "advertInfoPageUrl": "http://www.bbc.co.uk/hindi/institutional/2015/01/000000_advertising_faqs",
	        "inAssociationWithText": "के साथ",
	        "sponsoredByText": "प्रायोजक",
	        "advertisingPartnersText": "पार्टनर",
	        "adsByGoogleText": "गूगल के विज्ञापन"
	    },
	    "id": {
	        "advertisementText": "Iklan",
	        "advertInfoPageUrl": "http://www.bbc.com/indonesia/institutional/2015/08/000000_advertising_faq",
	        "adsByGoogleText": "adsByGoogle"
	    },
	    "ig": {
	        "advertisementText": "Mgbasa ozi",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "Na njikọta nke",
	        "sponsoredByText": "Akwadoro site n'aka",
	        "advertisingPartnersText": "Ndị mmekọ",
	        "adsByGoogleText": "Mgbasa ozi nke Google"
	    },
	    "ja": {
	        "advertisementText": "広告",
	        "advertInfoPageUrl": "/japanese/help-34287354",
	        "inAssociationWithText": "提携:",
	        "sponsoredByText": "提供:",
	        "advertisingPartnersText": "パートナー:",
	        "adsByGoogleText": "Ads by Google"
	    },
	    "ko": {
	        "advertisementText": "광고",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "관련 내용",
	        "sponsoredByText": "후원사",
	        "advertisingPartnersText": "협력사",
	        "adsByGoogleText": "Google 광고"
	    },
	    "ky": {
	        "advertisementText": "Жарнама",
	        "advertInfoPageUrl": "/kyrgyz/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "менен кызматташтыкта ",
	        "sponsoredByText": "Спонсор",
	        "advertisingPartnersText": "Жарнама партнёрлору",
	        "adsByGoogleText": "Google жарнамасы"
	    },
	    "mr": {
	        "advertisementText": "जाहिरात",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "च्या संयुक्त विद्यमाने",
	        "sponsoredByText": "च्या सौजन्याने",
	        "advertisingPartnersText": "भागीदार",
	        "adsByGoogleText": "Google द्वारे जाहिराती"
	    },
	    "my": {
	        "advertisementText": "ကြော်ငြာ",
	        "advertInfoPageUrl": "/burmese/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "နှင့် ပူးတွဲဝန်ဆောင်၍",
	        "sponsoredByText": "ကမကထပြုသူ",
	        "advertisingPartnersText": "ပူးတွဲဝန်ဆောင်သူများ",
	        "adsByGoogleText": "ဂူဂဲလ် ကြော်ငြာ"
	    },
	    "ne": {
	        "advertisementText": "विज्ञापन",
	        "advertInfoPageUrl": "/nepali/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "साथमा",
	        "sponsoredByText": "प्रायोजक",
	        "advertisingPartnersText": "प्रायोजक",
	        "adsByGoogleText": "गुगलको विज्ञापन"
	    },
	    "om": {
	        "advertisementText": "Beeksiisa",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "...Waliin ta'uun.",
	        "sponsoredByText": "Ispoonsara kan godhe...",
	        "advertisingPartnersText": "Waahillan",
	        "adsByGoogleText": "Beeksia Google'n"
	    },
	    "pa": {
	        "advertisementText": "ਇਸ਼ਤਿਹਾਰ",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "ਇਸ ਦੇ ਸਹਿਯੋਗ ਨਾਲ",
	        "sponsoredByText": "ਇਸ ਦੁਆਰਾ ਪ੍ਰਾਯੋਜਿਤ",
	        "advertisingPartnersText": "ਭਾਈਵਾਲ",
	        "adsByGoogleText": "Google ਦੁਆਰਾ ਇਸ਼ਤਿਹਾਰ"
	    },
	    "pcm": {
	        "advertisementText": "Tori we dem pay for",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "E join hand with",
	        "sponsoredByText": "De person we sponsor am",
	        "advertisingPartnersText": "Partner dem",
	        "adsByGoogleText": "Ads we Google do"
	    },
	    "ps": {
	        "advertisementText": "اعلان",
	        "advertInfoPageUrl": "/pashto/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "په ګډه",
	        "sponsoredByText": "په ملاتړ",
	        "advertisingPartnersText": "ملګري",
	        "adsByGoogleText": "د ګوګل اعلانونه"
	    },
	    "pt": {
	        "advertisementText": "Publicidade",
	        "advertInfoPageUrl": "http://www.bbc.co.uk/portuguese/institutional/2015/01/000000_advertising_faqs",
	        "inAssociationWithText": "Em parceria com",
	        "sponsoredByText": "Com patrocínio de",
	        "advertisingPartnersText": "Parceiros",
	        "adsByGoogleText": "Anúncios do Google"
	    },
	    "ru": {
	        "advertisementText": "Реклама",
	        "advertInfoPageUrl": "/russian/institutional/2012/12/000000_advert_uk_faq",
	        "inAssociationWithText": "В сотрудничестве с",
	        "sponsoredByText": "Спонсор:",
	        "advertisingPartnersText": "Рекламные партнеры",
	        "adsByGoogleText": "Реклама Google"
	    },
	    "ru-UK": {
	        "advertisementText": "Реклама",
	        "advertInfoPageUrl": "",
	        "inAssociationWithText": "В сотрудничестве с",
	        "sponsoredByText": "Спонсор:",
	        "advertisingPartnersText": "Рекламные партнеры",
	        "adsByGoogleText": "Реклама Google"
	    },
	    "rw": {
	        "advertisementText": "Kwamamaza",
	        "advertInfoPageUrl": "/gahuza/ibindi_wifashisha/2015/08/000000_advertising_faq.shtml"
	    },
	    "si": {
	        "advertisementText": "වෙළෙඳ දැන්වීමක් ",
	        "advertInfoPageUrl": "/sinhala/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "සහභාගිත්වය ඇතිව ",
	        "sponsoredByText": "අනුග්‍රාහකත්වය ",
	        "advertisingPartnersText": "දැන්වීම් අනුග්‍රාහකයෝ",
	        "adsByGoogleText": "ගූගල් වෙළෙඳ දැන්වීම්"
	    },
	    "so": {
	        "advertisementText": "Xayeysiin",
	        "advertInfoPageUrl": "/somali/hayadeed/2015/08/000000_advertising_faq.shtml"
	    },
	    "sw": {
	        "advertisementText": "Matangazo",
	        "advertInfoPageUrl": "http://www.bbc.co.uk/swahili/taasisi/2015/01/000000_advertising_faqs",
	        "inAssociationWithText": "Kwa ushirikiano na",
	        "sponsoredByText": "Imedhaminiwa na",
	        "advertisingPartnersText": "Washirika",
	        "adsByGoogleText": "Matangazo ya biashara ya Google"
	    },
	    "ta": {
	        "advertisementText": "விளம்பரம்",
	        "advertInfoPageUrl": "/tamil/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "உடன் இணைந்து",
	        "sponsoredByText": "உதவியுடன்",
	        "advertisingPartnersText": "கூட்டாளிகள்",
	        "adsByGoogleText": "கூகிள் விளம்பரங்கள்"
	    },
	    "te": {
	        "advertisementText": "వ్యాపార ప్రకటన",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "వీరి సహకారంతో",
	        "sponsoredByText": "ప్రాయోజితులు",
	        "advertisingPartnersText": "భాగస్వాములు",
	        "adsByGoogleText": "గూగుల్ సమర్పిత ప్రకటనలు"
	    },
	    "th": {
	        "advertisementText": "โฆษณา",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "ด้วยความร่วมมือกับ",
	        "sponsoredByText": "สนับสนุนโดย",
	        "advertisingPartnersText": "ภาคีของเรา",
	        "adsByGoogleText": "โฆษณาโดยกูเกิล"
	    },
	    "ti": {
	        "advertisementText": "መላለዪ",
	        "advertInfoPageUrl": "http://faq.external.bbc.co.uk/questions/bbc_online/adverts_general",
	        "inAssociationWithText": "ብምትሕግጋዝ",
	        "sponsoredByText": "መዋሊ",
	        "advertisingPartnersText": "መላፍንትና",
	        "adsByGoogleText": "ኣብ ጎግል ዝወፀ መቓልሕ"
	    },
	    "tr": {
	        "advertisementText": "Reklam",
	        "advertInfoPageUrl": "http://www.bbc.co.uk/turkce/kurumsal/2015/01/000000_advertising_faqs",
	        "inAssociationWithText": "In association with",
	        "sponsoredByText": "Sponsor",
	        "advertisingPartnersText": "Ortakla",
	        "adsByGoogleText": "Google reklamlar"
	    },
	    "uk": {
	        "advertisementText": "Реклама",
	        "advertInfoPageUrl": "/ukrainian/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "У партнерстві з",
	        "sponsoredByText": "Спонсор: ",
	        "advertisingPartnersText": "Партнери",
	        "adsByGoogleText": "Реклама Google"
	    },
	    "ur": {
	        "advertisementText": "اشتہار",
	        "advertInfoPageUrl": "http://www.bbc.com/urdu/institutional/2015/08/000000_advertising_faq"
	    },
	    "uz": {
	        "advertisementText": "Реклама",
	        "advertInfoPageUrl": "/uzbek/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "билан ҳамкорликда",
	        "sponsoredByText": "Ҳомий",
	        "advertisingPartnersText": "Реклама бўйича шериклар",
	        "adsByGoogleText": "Google рекламаси"
	    },
	    "uz-latin": {
	        "advertisementText": "Reklama",
	        "advertInfoPageUrl": "/uzbek/institutional/2015/10/000000_advertising_faq.shtml",
	        "inAssociationWithText": "bilan hamkorlikda",
	        "sponsoredByText": "Homiy",
	        "advertisingPartnersText": "Reklama bo'yicha sheriklar",
	        "adsByGoogleText": "Google reklamasi"
	    },
	    "vi": {
	        "advertisementText": "Quảng cáo",
	        "advertInfoPageUrl": "http://www.bbc.com/vietnamese/institutional/2015/08/000000_advertising_faq"
	    },
	    "zh-Hans": {
	        "advertisementText": "广告",
	        "advertInfoPageUrl": "http://www.bbc.com/zhongwen/simp/institutional/2015/08/000000_advertising_faq"
	    },
	    "zh-Hans-UKCN": {
	        "advertisementText": "广告",
	        "advertInfoPageUrl": "http://www.bbc.com/ukchina/simp/institutional/2015/08/000000_advertising_faq"
	    },
	    "zh-Hant": {
	        "advertisementText": "廣告",
	        "advertInfoPageUrl": "http://www.bbc.com/zhongwen/trad/institutional/2015/08/000000_advertising_faq"
	    },
	    "zh-Hant-UKCN": {
	        "advertisementText": "廣告",
	        "advertInfoPageUrl": "http://www.bbc.com/ukchina/trad/institutional/2015/08/000000_advertising_faq"
	    }
	};
	
	module.exports = {
	    get: function get(field) {
	        return data[field];
	    },
	    set: function set(field, text) {
	        data[field] = text;
	    },
	    getData: function getData() {
	        return data;
	    },
	    setLocale: function setLocale(lang) {
	        var locale = lang && localeData[lang],
	            x;
	        if (locale) {
	            log.info('setting ad text to locale : ', lang);
	            for (x in locale) {
	                if (locale.hasOwnProperty(x)) {
	                    this.set(x, locale[x]);
	                }
	            }
	        }
	    }
	};

/***/ }),
/* 154 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	    providers: {
	        eDigitalResearch: {
	            key: 'INS-vt29-666188954',
	            url: bbcdotcom.assetPrefix + 'script/vendor/edr/edr.min.js'
	        }
	    },
	    adsEnabled: function adsEnabled() {
	        return bbcdotcom.data !== undefined && (bbcdotcom.data.a !== undefined && bbcdotcom.data.a === 1 || bbcdotcom.data.ads !== undefined && bbcdotcom.data.ads === 1);
	    },
	    surveyEnabled: function surveyEnabled() {
	        return bbcdotcom.flag !== undefined && bbcdotcom.flag.s === 1;
	    },
	    init: function init() {
	        if (bbcdotcom.survey.adsEnabled() && bbcdotcom.survey.surveyEnabled()) {
	            if (typeof window.EDRSurvey === 'undefined') {
	                bbcdotcom.survey.loadScript(document, bbcdotcom.survey.providers.eDigitalResearch.url);
	            }
	        }
	    },
	    loadScript: function loadScript(doc, path, callback) {
	        var s = doc.createElement('script'),
	            a = 'async',
	            b = 'defer';
	        s.setAttribute(a, a);
	        s.setAttribute(b, b);
	        s.type = 'text/javascript';
	        s.src = path;
	        if (typeof callback === 'function') {
	            s.onload = callback;
	        }
	        doc.getElementsByTagName('head')[0].appendChild(s);
	    }
	};

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module Classes
	 *
	 */
	
	var CLASS_BASE = 'bbcdotcom';
	var CLASS_SEP = '-';
	
	var utils = __webpack_require__(143);
	
	/**
	 * Given an arbitrary number of string arguments, return a class name containing all of the arguments
	 * prefixed with CLASS_BASE and concatenated using CLASS_SEP
	 *
	 * @returns {string}
	 */
	function className() {
	    return [CLASS_BASE].concat(Array.prototype.slice.call(arguments)).join(CLASS_SEP);
	}
	
	/**
	 * Given an arbitrary number of string or array arguments, return a space-concatenated list of classes
	 * created by passing each argument through className()
	 *
	 * @returns {string}
	 */
	function classNames() {
	    var i,
	        classes = [],
	        arr = Array.prototype.slice.call(arguments);
	    for (i = 0; i < arr.length; i++) {
	        classes.push(className.apply(null, utils.isString(arr[i]) ? [arr[i]] : arr[i]));
	    }
	    return classes.join(' ');
	}
	
	module.exports = {
	    className: className,
	
	    classNames: classNames,
	
	    /**
	     * Given the bbcdotcom.config object and optionally the current root context (window)
	     * return a space-concatenated list of classes which should be added to some top level DOM element
	     *
	     * @param config
	     * @param rootOverride
	     * @returns {string}
	     */
	    fromConfig: function fromConfig(config, rootOverride) {
	        var finalRoot = rootOverride || window;
	        var classes = [];
	
	        if (config.isAsync()) {
	            classes.push('async');
	        }
	
	        if (config.isAdsEnabled()) {
	            classes.push('ads-enabled');
	        }
	
	        if (finalRoot.config && finalRoot.config.service) {
	            classes.push(['service', finalRoot.config.service]);
	        }
	
	        return classNames.apply(null, classes);
	    }
	};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(150);
	var sections = __webpack_require__(152);
	var comScoreHelpers = __webpack_require__(157);
	var log = __webpack_require__(144)('lotame');
	
	var Lotame = function Lotame() {
	    this.clientId = '10816';
	    this.consentClientId = '10815';
	    this.consentObject = 'LOTCC';
	    this.lotameObject = 'LOTCC_' + this.clientId;
	    this.noConsent = { analytics: false, crossdevice: false, datasharing: false, targeting: false };
	    this.allConsent = { analytics: true, crossdevice: true, datasharing: true, targeting: true };
	};
	
	Lotame.prototype.init = function () {
	    if (config.isWorldService() || sections.getSection(0) === 'worldservice') {
	        this.clientId = '10826';
	        this.lotameObject = 'LOTCC_' + this.clientId;
	    }
	};
	
	Lotame.prototype.callback = function () {
	    // deprecated
	};
	
	Lotame.prototype.consentCallback = function () {
	    if (config.isSportApp() || !config.isLotameEnabled() || !config.isLotameActive()) {
	        return;
	    }
	
	    function consentCallback() {
	        if (typeof window[this.consentObject] !== 'undefined' && window[this.consentObject].setConsent && document.body && document.body.appendChild) {
	            if (config.isNPA()) {
	                window[this.consentObject].setConsent(this.sendDefaultData.bind(this), this.consentClientId, this.noConsent);
	            } else {
	                window[this.consentObject].setConsent(this.sendDefaultData.bind(this), this.consentClientId, this.allConsent);
	            }
	            clearInterval(window.isLotameLoadedInterval);
	        }
	    }
	
	    window.isLotameLoadedInterval = setInterval(consentCallback.bind(this), 500);
	};
	
	Lotame.prototype.sendDefaultData = function (data) {
	    if (config.isSportApp() || !config.isLotameEnabled() || !config.isLotameActive()) {
	        return;
	    }
	    log("Lotame Consent Callback: ", data);
	    var analyticsKeyValues = Object.assign({}, comScoreHelpers.appendPageCoreKeyValues(comScoreHelpers.getCoreKeyValues())); //dax key values
	    var advertsKeyValues = Object.assign({}, bbcdotcom.adverts.keyValues.getAll());
	
	    advertsKeyValues['slot'] = bbcdotcom.adsToDisplay;
	    advertsKeyValues['ad-unit-1'] = bbcdotcom.adverts.adUnit.getAdUnit1();
	    advertsKeyValues['ad-unit-2'] = bbcdotcom.adverts.adUnit.getAdUnits2to9();
	
	    this.sendData(analyticsKeyValues);
	    this.sendData(advertsKeyValues);
	};
	
	Lotame.prototype.loadExtra = function (data, key) {
	    this.sendData(data, key);
	};
	
	Lotame.prototype.sendData = function (data, key) {
	    if (config.isSportApp() || !config.isLotameEnabled() || !config.isLotameActive()) {
	        return;
	    }
	    var genProp = data || []; //extra data
	
	    if (window[this.lotameObject]) {
	        window[this.lotameObject].bcp();
	        if (typeof genProp === "string") {
	            window[this.lotameObject].add("genp", (typeof key !== "undefined" ? key : "") + ':' + encodeURIComponent(genProp));
	        } else {
	            for (var e in genProp) {
	                window[this.lotameObject].add("genp", (typeof key !== "undefined" ? key : e) + ':' + encodeURIComponent(genProp[e]));
	            }
	        }
	        return true;
	    }
	    return false;
	};
	
	module.exports = new Lotame();

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getCoreKeyValues = getCoreKeyValues;
	exports.appendPageCoreKeyValues = appendPageCoreKeyValues;
	exports.appendNonPageCoreKeyValues = appendNonPageCoreKeyValues;
	
	var _metricsBuilder = __webpack_require__(158);
	
	var _metricsBuilder2 = _interopRequireDefault(_metricsBuilder);
	
	var _getUserTrackingCookie = __webpack_require__(196);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	var _getSectionStrings = __webpack_require__(184);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getPageType = __webpack_require__(182);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _getSyndicatedVideoSource = __webpack_require__(190);
	
	var _getSyndicatedVideoSource2 = _interopRequireDefault(_getSyndicatedVideoSource);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getCoreKeyValues() {
	    var keyValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	
	    // Statics (set values)
	    metricsBuilder['with']('b_imp_src', { value: 'gnl' })['with']('b_vs_un', { value: 'bc' })['with']('ns_c', { value: 'UTF-8' });
	
	    // Use Helpers
	    metricsBuilder['with']('daxCorp', { mapName: 'b_daxcorp' })['with']('adsEnabled', { mapName: 'b_ad_enabled' })['with']('appType', { mapName: ['b_app_type', 'app_type'] })['with']('isApp', { mapName: 'b_is_app' })['with']('referrer', { mapName: 'b_c9' })['with']('collection', { mapName: 'b_collection' })['with']('edition', { mapName: 'b_edition' })['with']('version', { mapName: 'b_imp_ver' })['with']('siteCatalystCookieValue', { mapName: 'b_s_vi' })['with']('pageName', { mapName: ['name', 'b_article_title'] })['with']('analyticsAccountID', { mapName: 'c2' })['with']('analyticsSuite', { mapName: ['ns_site'] })['with']('appName', { mapName: ['ns_ap_an', 'app_name'] })['with']('partner', { mapName: 'b_article_partner' })['with']('license', { mapName: 'b_article_license' });
	
	    // Use Helpers & pass args
	    var sectionStrings = (0, _getSectionStrings2['default'])();
	    metricsBuilder['with']('b_app_name', { value: sectionStrings[0] + '|web' })['with']('siteChannel', { mapName: ['b_site_channel', 'bbc_site', 'prod_name'], args: [sectionStrings] })['with']('siteSection', { mapName: 'b_site_section', args: [sectionStrings] })['with']('siteSubsection1', { mapName: 'b_site_subsec1', args: [sectionStrings] })['with']('siteSubsection2', { mapName: 'b_site_subsec2', args: [sectionStrings] });
	
	    // Conditional metrics
	    var userTrackingCookie = (0, _getUserTrackingCookie2['default'])();
	    metricsBuilder['with']('ns_alias', {
	        preRequisite: function preRequisite() {
	            return userTrackingCookie !== false && cookiesEnabledIEFix();
	        },
	        value: userTrackingCookie
	    });
	
	    var syndicatedVideoSource = (0, _getSyndicatedVideoSource2['default'])();
	    metricsBuilder['with']('v37', {
	        preRequisite: function preRequisite() {
	            return syndicatedVideoSource;
	        },
	        value: syndicatedVideoSource
	    });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	}
	
	function appendPageCoreKeyValues() {
	    var keyValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	    var pageType = (0, _getPageType2['default'])();
	    var isIndex = pageType.includes('idx');
	    var isLive = pageType.includes('liv');
	
	    metricsBuilder['with']('pageType', { mapName: 'b_page_type', value: pageType });
	
	    // Conditional
	    metricsBuilder['with']('articleID', { mapName: 'b_article_id', preRequisite: function preRequisite() {
	            return !isIndex;
	        } })['with']('articleTitle', { mapName: 'b_article_title', preRequisite: function preRequisite() {
	            return !isIndex && !isLive;
	        } })['with']('articleUpdatedDate', { mapName: 'b_article_update', preRequisite: function preRequisite() {
	            return !isIndex;
	        }, args: [true] })['with']('articlePublishedDate', { mapName: 'b_article_date', preRequisite: function preRequisite() {
	            return !isIndex;
	        }, args: [true] })['with']('articleLength', { mapName: 'b_article_length', preRequisite: function preRequisite() {
	            return !isIndex;
	        } })['with']('topicNames', { mapName: 'b_topic_names', preRequisite: function preRequisite() {
	            return !isIndex && !isLive;
	        } });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	}
	
	function appendNonPageCoreKeyValues() {
	    var keyValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	    var metricsBuilder = new _metricsBuilder2['default']();
	
	    metricsBuilder['with']('timestamp', { mapName: 'ns__t' })['with']('ns_type', { value: 'hidden' });
	
	    return Object.assign({}, keyValues, metricsBuilder.build());
	};
	
	/**
	 * =================================================================================================================
	 * PRIVATE METHODS
	 * =================================================================================================================
	 */
	
	function cookiesEnabledIEFix() {
	    var nCE = navigator.cookieEnabled,
	        testCookie;
	    if (nCE === false) {
	        return nCE;
	    }
	
	    // stolen from modernizr
	    document.cookie = "cookietest=1"; // set experimental cookie
	    testCookie = document.cookie.indexOf("cookietest=") !== -1;
	    document.cookie = "cookietest=1; expires=Thu, 01-Jan-1970 00:00:01 GMT"; // ...and delete it again
	    return testCookie;
	};

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _isArray2 = __webpack_require__(159);
	
	var _isArray3 = _interopRequireDefault(_isArray2);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _index = __webpack_require__(160);
	
	var _index2 = _interopRequireDefault(_index);
	
	var _logger = __webpack_require__(144);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = (0, _logger2['default'])('analytics:metrics:metricsBuilder');
	
	var MetricsBuilder = function () {
	    function MetricsBuilder() {
	        _classCallCheck(this, MetricsBuilder);
	
	        this.metrics = new Map();
	    }
	
	    _createClass(MetricsBuilder, [{
	        key: 'with',
	        value: function _with() {
	            var metric = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	            var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	                _ref$mapName = _ref.mapName,
	                mapName = _ref$mapName === undefined ? null : _ref$mapName,
	                _ref$postProcess = _ref.postProcess,
	                postProcess = _ref$postProcess === undefined ? null : _ref$postProcess,
	                _ref$preRequisite = _ref.preRequisite,
	                preRequisite = _ref$preRequisite === undefined ? null : _ref$preRequisite,
	                _ref$args = _ref.args,
	                args = _ref$args === undefined ? [] : _ref$args,
	                _ref$value = _ref.value,
	                value = _ref$value === undefined ? undefined : _ref$value;
	
	            if (metric) {
	                this.metrics.set(metric, { mapName: mapName, postProcess: postProcess, args: args, preRequisite: preRequisite, value: value });
	            }
	            return this;
	        }
	    }, {
	        key: 'getMetric',
	        value: function getMetric(metric) {
	            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	
	            var getMetricHelper = 'get' + (metric.charAt(0).toUpperCase() + metric.slice(1));
	            if (_index2['default'].hasOwnProperty(getMetricHelper)) {
	                return _index2['default'][getMetricHelper].apply(_index2['default'], _toConsumableArray(args));
	            }
	            throw new Error('No metric helper for ' + metric + ' (' + getMetricHelper + ')');
	        }
	    }, {
	        key: 'build',
	        value: function build() {
	            var output = {};
	
	            this.metrics.forEach(function (options, metric) {
	                try {
	                    if (options.preRequisite) {
	                        if (!options.preRequisite()) {
	                            return;
	                        }
	                    }
	
	                    var result = void 0;
	                    if (typeof options.value !== 'undefined') {
	                        result = options.value;
	                    } else {
	                        result = this.getMetric(metric, options.args);
	                    }
	
	                    if (options.postProcess) {
	                        result = options.postProcess(result);
	                    }
	
	                    if (options.mapName) {
	                        var mapNames = options.mapName;
	                        if (!(0, _isArray3['default'])(mapNames)) {
	                            mapNames = [mapNames];
	                        }
	
	                        mapNames.forEach(function (mapName) {
	                            output[mapName] = result;
	                        });
	                    } else {
	                        output[metric] = result;
	                    }
	                } catch (err) {
	                    log.warn('Unable to build metric ' + metric, err);
	                }
	            }.bind(this));
	
	            return output;
	        }
	    }]);
	
	    return MetricsBuilder;
	}();
	
	exports['default'] = MetricsBuilder;
	module.exports = exports['default'];

/***/ }),
/* 159 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _utils = __webpack_require__(161);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var getAdsEnabled = _utils2['default'].getAdsEnabled,
	    getAnalyticsAccountID = _utils2['default'].getAnalyticsAccountID,
	    getAnalyticsSuite = _utils2['default'].getAnalyticsSuite,
	    getAppName = _utils2['default'].getAppName,
	    getAppType = _utils2['default'].getAppType,
	    getArticleID = _utils2['default'].getArticleID,
	    getArticleLength = _utils2['default'].getArticleLength,
	    getArticlePublishedDate = _utils2['default'].getArticlePublishedDate,
	    getArticleTitle = _utils2['default'].getArticleTitle,
	    getArticleUpdatedDate = _utils2['default'].getArticleUpdatedDate,
	    getCollection = _utils2['default'].getCollection,
	    getDaxCorp = _utils2['default'].getDaxCorp,
	    getDomainFromUrl = _utils2['default'].getDomainFromUrl,
	    getEdition = _utils2['default'].getEdition,
	    getIsApp = _utils2['default'].getIsApp,
	    getPageName = _utils2['default'].getPageName,
	    getPageType = _utils2['default'].getPageType,
	    getReferrer = _utils2['default'].getReferrer,
	    getSiteCatalystCookieValue = _utils2['default'].getSiteCatalystCookieValue,
	    getSiteChannel = _utils2['default'].getSiteChannel,
	    getSiteSection = _utils2['default'].getSiteSection,
	    getSiteSubsection1 = _utils2['default'].getSiteSubsection1,
	    getSiteSubsection2 = _utils2['default'].getSiteSubsection2,
	    getTimestamp = _utils2['default'].getTimestamp,
	    getTopicNames = _utils2['default'].getTopicNames,
	    getVersion = _utils2['default'].getVersion,
	    getPartner = _utils2['default'].getPartner,
	    getLicense = _utils2['default'].getLicense;
	exports['default'] = {
	    getAdsEnabled: getAdsEnabled,
	    getAnalyticsAccountID: getAnalyticsAccountID,
	    getAnalyticsSuite: getAnalyticsSuite,
	    getAppName: getAppName,
	    getAppType: getAppType,
	    getArticleID: getArticleID,
	    getArticleLength: getArticleLength,
	    getArticlePublishedDate: getArticlePublishedDate,
	    getArticleTitle: getArticleTitle,
	    getArticleUpdatedDate: getArticleUpdatedDate,
	    getCollection: getCollection,
	    getDaxCorp: getDaxCorp,
	    getDomainFromUrl: getDomainFromUrl,
	    getEdition: getEdition,
	    getIsApp: getIsApp,
	    getPageName: getPageName,
	    getPageType: getPageType,
	    getReferrer: getReferrer,
	    getSiteCatalystCookieValue: getSiteCatalystCookieValue,
	    getSiteChannel: getSiteChannel,
	    getSiteSection: getSiteSection,
	    getSiteSubsection1: getSiteSubsection1,
	    getSiteSubsection2: getSiteSubsection2,
	    getTimestamp: getTimestamp,
	    getTopicNames: getTopicNames,
	    getVersion: getVersion,
	    getPartner: getPartner,
	    getLicense: getLicense
	};
	module.exports = exports['default'];

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _getAdsEnabled = __webpack_require__(162);
	
	var _getAdsEnabled2 = _interopRequireDefault(_getAdsEnabled);
	
	var _getAnalyticsAccountID = __webpack_require__(163);
	
	var _getAnalyticsAccountID2 = _interopRequireDefault(_getAnalyticsAccountID);
	
	var _getAnalyticsSuite = __webpack_require__(164);
	
	var _getAnalyticsSuite2 = _interopRequireDefault(_getAnalyticsSuite);
	
	var _getAppName = __webpack_require__(165);
	
	var _getAppName2 = _interopRequireDefault(_getAppName);
	
	var _getAppType = __webpack_require__(166);
	
	var _getAppType2 = _interopRequireDefault(_getAppType);
	
	var _getArticleID = __webpack_require__(167);
	
	var _getArticleID2 = _interopRequireDefault(_getArticleID);
	
	var _getArticleLength = __webpack_require__(168);
	
	var _getArticleLength2 = _interopRequireDefault(_getArticleLength);
	
	var _getArticlePublishedDate = __webpack_require__(169);
	
	var _getArticlePublishedDate2 = _interopRequireDefault(_getArticlePublishedDate);
	
	var _getArticleTitle = __webpack_require__(170);
	
	var _getArticleTitle2 = _interopRequireDefault(_getArticleTitle);
	
	var _getArticleUpdatedDate = __webpack_require__(174);
	
	var _getArticleUpdatedDate2 = _interopRequireDefault(_getArticleUpdatedDate);
	
	var _getCollection = __webpack_require__(175);
	
	var _getCollection2 = _interopRequireDefault(_getCollection);
	
	var _getDaxCorp = __webpack_require__(177);
	
	var _getDaxCorp2 = _interopRequireDefault(_getDaxCorp);
	
	var _getDomainFromUrl = __webpack_require__(178);
	
	var _getDomainFromUrl2 = _interopRequireDefault(_getDomainFromUrl);
	
	var _getEdition = __webpack_require__(179);
	
	var _getEdition2 = _interopRequireDefault(_getEdition);
	
	var _getIsApp = __webpack_require__(180);
	
	var _getIsApp2 = _interopRequireDefault(_getIsApp);
	
	var _getPageName = __webpack_require__(181);
	
	var _getPageName2 = _interopRequireDefault(_getPageName);
	
	var _getPageType = __webpack_require__(182);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _getReferrer = __webpack_require__(183);
	
	var _getReferrer2 = _interopRequireDefault(_getReferrer);
	
	var _getSectionStrings = __webpack_require__(184);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getSiteCatalystCookieValue = __webpack_require__(185);
	
	var _getSiteCatalystCookieValue2 = _interopRequireDefault(_getSiteCatalystCookieValue);
	
	var _getSiteChannel = __webpack_require__(186);
	
	var _getSiteChannel2 = _interopRequireDefault(_getSiteChannel);
	
	var _getSiteSection = __webpack_require__(187);
	
	var _getSiteSection2 = _interopRequireDefault(_getSiteSection);
	
	var _getSiteSubsection = __webpack_require__(188);
	
	var _getSiteSubsection2 = _interopRequireDefault(_getSiteSubsection);
	
	var _getSiteSubsection3 = __webpack_require__(189);
	
	var _getSiteSubsection4 = _interopRequireDefault(_getSiteSubsection3);
	
	var _getSyndicatedVideoSource = __webpack_require__(190);
	
	var _getSyndicatedVideoSource2 = _interopRequireDefault(_getSyndicatedVideoSource);
	
	var _getTimestamp = __webpack_require__(191);
	
	var _getTimestamp2 = _interopRequireDefault(_getTimestamp);
	
	var _getTopicNames = __webpack_require__(192);
	
	var _getTopicNames2 = _interopRequireDefault(_getTopicNames);
	
	var _getVersion = __webpack_require__(193);
	
	var _getVersion2 = _interopRequireDefault(_getVersion);
	
	var _getPartner = __webpack_require__(194);
	
	var _getPartner2 = _interopRequireDefault(_getPartner);
	
	var _getLicense = __webpack_require__(195);
	
	var _getLicense2 = _interopRequireDefault(_getLicense);
	
	var _sanitiseValues = __webpack_require__(173);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	    getAdsEnabled: _getAdsEnabled2['default'],
	    getAnalyticsAccountID: _getAnalyticsAccountID2['default'],
	    getAnalyticsSuite: _getAnalyticsSuite2['default'],
	    getAppName: _getAppName2['default'],
	    getAppType: _getAppType2['default'],
	    getArticleID: _getArticleID2['default'],
	    getArticleLength: _getArticleLength2['default'],
	    getArticlePublishedDate: _getArticlePublishedDate2['default'],
	    getArticleTitle: _getArticleTitle2['default'],
	    getArticleUpdatedDate: _getArticleUpdatedDate2['default'],
	    getCollection: _getCollection2['default'],
	    getDaxCorp: _getDaxCorp2['default'],
	    getDomainFromUrl: _getDomainFromUrl2['default'],
	    getEdition: _getEdition2['default'],
	    getIsApp: _getIsApp2['default'],
	    getPageName: _getPageName2['default'],
	    getPageType: _getPageType2['default'],
	    getReferrer: _getReferrer2['default'],
	    getSectionStrings: _getSectionStrings2['default'],
	    getSiteCatalystCookieValue: _getSiteCatalystCookieValue2['default'],
	    getSiteChannel: _getSiteChannel2['default'],
	    getSiteSection: _getSiteSection2['default'],
	    getSiteSubsection1: _getSiteSubsection2['default'],
	    getSiteSubsection2: _getSiteSubsection4['default'],
	    getSyndicatedVideoSource: _getSyndicatedVideoSource2['default'],
	    getTimestamp: _getTimestamp2['default'],
	    getTopicNames: _getTopicNames2['default'],
	    getVersion: _getVersion2['default'],
	    sanitiseKeyValues: _sanitiseValues.sanitiseKeyValues,
	    sanitiseLabelValue: _sanitiseValues.sanitiseLabelValue,
	    sanitisePageName: _sanitiseValues.sanitisePageName,
	    getPartner: _getPartner2['default'],
	    getLicense: _getLicense2['default']
	};
	module.exports = exports['default'];

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAdsEnabled;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAdsEnabled() {
	    return _config2['default'].isAdsEnabled() ? 1 : 0;
	}
	module.exports = exports['default'];

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAnalyticsAccountID;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAnalyticsAccountID() {
	    return _config2['default'].getAnalyticsAcctId();
	}
	module.exports = exports['default'];

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAnalyticsSuite;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAnalyticsSuite() {
	    return _config2['default'].getAnalyticsSuite();
	}
	module.exports = exports['default'];

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAppName;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAppName() {
	    return _config2['default'].getAppName();
	}
	module.exports = exports['default'];

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getAppType;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getAppType() {
	    if (_config2['default'].isSportApp() || bbcdotcom.analytics.isScwHandlerUsed) {
	        return 'mobile-app';
	    } else if (typeof orb !== 'undefined' && typeof orb.fig === 'function' && orb.fig('mb') === 1 || _config2['default'].getWindowLocation().hostname.search(/m.*.bbc.co/) === 0) {
	        return 'mobile-web';
	    } else {
	        return 'web';
	    }
	}
	module.exports = exports['default'];

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleID;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var NUL = 'na';
	
	function getArticleID(href) {
	    if (typeof href === 'undefined' || href === '') {
	        href = _config2['default'].getWindowLocation().href;
	    }
	    if (/.*[\-\/](\d{7,9})($|(\/[a-z]*))/.test(href)) {
	        return RegExp.$1;
	    }
	    return NUL;
	}
	module.exports = exports['default'];

/***/ }),
/* 168 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleLength;
	function getArticleLength() {
	
	    /** Responsive News */
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.length !== 'undefined' && window.config.asset.length !== null) {
	        // Responsive News
	        return window.config.asset.length;
	    }
	
	    /** OneSport */
	    var storyBody = document.getElementById('story-body');
	    if (typeof storyBody !== 'undefined' && storyBody !== null) {
	        return getElementTextLength(storyBody);
	    }
	
	    /** Old Sport */
	    var article = document.getElementsByClassName('article');
	    if (typeof article !== 'undefined' && article !== null && article.length === 1) {
	        var articleElement = article[0];
	        return getElementTextLength(articleElement);
	    }
	
	    /** Old Sport Map */
	    var empContent = document.getElementById('emp-content');
	    if (typeof empContent !== 'undefined' && empContent !== null) {
	        return getElementTextLength(empContent);
	    }
	
	    /** Old Weather */
	    var layoutA = document.getElementsByClassName('layout-block-a');
	    if (typeof layoutA !== 'undefined' && layoutA !== null && layoutA.length === 1) {
	        var layoutAElement = layoutA[0];
	        return getElementTextLength(layoutAElement);
	    }
	
	    return null;
	};
	
	function getElementTextLength(element) {
	
	    // Check the element
	    if (typeof element === 'undefined' || element === null) {
	        return null;
	    }
	
	    try {
	
	        if (typeof element.innerText !== 'undefined' && element.innerText !== null && typeof element.innerText.length !== 'undefined' && element.innerText.length !== null) {
	            // Use innerText as we need to take into consideration layout, discounting hidden elements etc
	            return element.innerText.length;
	        }
	
	        if (typeof element.textContent !== 'undefined' && element.textContent !== null && typeof element.textContent.length !== 'undefined' && element.textContent.length !== null) {
	            // innerText is not supported in Firefox, so use textContent
	            return element.textContent.length;
	        }
	    } catch (e) {
	        return null;
	    }
	
	    return null;
	};
	module.exports = exports['default'];

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticlePublishedDate;
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * @returns {*} Human-readable (eg "2011/12/12 11:56:10") OR second timestamp
	 */
	function getArticlePublishedDate(asTimestamp) {
	    var date = null,
	        sportDesktopDate = _utils2['default'].getMetaNameContent('DCTERMS.created'),
	        sportResponsiveDate = _utils2['default'].getMetaPropertyContent('rnews:datePublished');
	
	    if (window.config && window.config.asset && window.config.asset.first_created && window.config.asset.first_created.date) {
	        // Responsive News
	        // eg 2015-01-08 03:44:31
	        date = window.config.asset.first_created.date;
	    } else if (sportDesktopDate !== '') {
	        // Sport Desktop
	        // eg 2011/12/12T11:56:10+00:00
	        date = sportDesktopDate.replace('T', ' ').replace('+00:00', '');
	    } else if (sportResponsiveDate !== '') {
	        // Sport Responsive
	        // eg 2015/09/23 9:45:36
	        date = sportResponsiveDate;
	    }
	
	    if (date === null || date.length === 0) {
	        return null;
	    }
	
	    date = date.replace(/-/g, '/');
	
	    if (typeof asTimestamp !== 'undefined' && asTimestamp === true) {
	        try {
	            return Date.parse(date) / 1000;
	        } catch (e) {
	            return null;
	        }
	    }
	    return date;
	};
	module.exports = exports['default'];

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleTitle;
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _sanitiseValues = __webpack_require__(173);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getArticleTitle() {
	    return (0, _sanitiseValues.sanitiseLabelValue)(_helper2['default'].getPageName()).replace(/[\s]/g, '_').replace(/_{2,}/g, '_');
	}
	module.exports = exports['default'];

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/* global window, document, bbcdotcom, orb, screen */
	var utils = __webpack_require__(143);
	var config = __webpack_require__(150);
	var sections = __webpack_require__(152);
	var log = __webpack_require__(144)('analytics:helper');
	var objects = __webpack_require__(172);
	var getArticleID = __webpack_require__(167);
	
	var sectionStrings = ['', '', '', ''],
	    alreadyLinked = false,
	    clickListener,
	    // remove me, I dare you :-o
	verticalsRegexp = /^(autos|capital|culture|earth|future|travel)$/,
	    LINK_TRACKING_SECTIONS = ['homepage', 'news', 'sport', 'wwscripts', 'reel'],
	    // TLDs on website permitted to have link-tracking
	TRACKING_TIMEOUT = 500,
	    NUL = 'na';
	
	var isBBCUri = function isBBCUri(uri) {
	    return (/^http(|s):\/\/[a-z0-9\-.]+.bbc.co(m|.uk)(\/)?(.*)?/.test(uri)
	    );
	};
	
	var isLiveEvent = function isLiveEvent() {
	    // This is bad, we should be getting the sites to report this instead of inspecting the URI.
	    var re = /(news|sport)\/live\//;
	    return re.exec(sections.getSections().join("/")) !== null;
	};
	
	/**
	 * Outbrain links to traffic.outbrain.com but comes back to the bbc.com (therefore use the link tracking "cookie drop"
	 * method of tracking)
	 * eg <a href="http://traffic.outbrain.com/redirect?=http://www.bbc.com/news/story-12345">
	 */
	var isExternalRedirectToBBCUri = function isExternalRedirectToBBCUri(uri) {
	    return (/^http(|s):\/\/traffic\.outbrain\.com/.test(uri)
	    );
	};
	
	/**
	 * Uses window.location or config.setSections([]) to derive v6, v7 and v8 section values
	 */
	var determineSections = function determineSections(separator) {
	    if (typeof separator === 'undefined') {
	        separator = '>';
	    }
	    var sects = sections.getSections('analytics', true);
	    sectionStrings = ['', '', '', ''];
	    // eg v6=news for http://www.bbc.com/news
	    sectionStrings[0] = sects[0];
	    if (typeof sects[1] !== 'undefined' && sects[1]) {
	        if (sects[0] === 'news' && (sects[1].indexOf('world') === 0 || sects[1] === 'specialfeatures')) {
	            // Goes up to 4 deep eg /news/world/asia/india
	            // Only /news/world/* & /news/specialfeatures/*
	            if (typeof sects[3] !== 'undefined' && sects[3] && sects[2]) {
	                // eg v7=news>world>asia       for http://www.bbc.com/news/world/asia/india
	                // eg v8=news>world>asia>india for http://www.bbc.com/news/world/asia/india
	                sectionStrings[1] = sects[0] + separator + sects[1] + separator + sects[2];
	                sectionStrings[2] = sectionStrings[1] + separator + sects[3];
	            } else if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v7=news>world>asia for http://www.bbc.com/news/world/asia
	                // eg v8=news>world>asia for http://www.bbc.com/news/world/asia
	                sectionStrings[1] = sects[0] + separator + sects[1] + separator + sects[2];
	            } else {
	                // eg v7=news>world for http://www.bbc.com/news/world
	                // eg v8=news>world for http://www.bbc.com/news/world
	                sectionStrings[1] = sects[0] + separator + sects[1];
	            }
	        } else if (sects[0] === 'sport') {
	            // Goes up to 5 deep - TRY TO KEEP THIS GENERIC PLEASE - NO EVENT SPECIFIC RULES!!
	            // eg /sport/commonwealth-games/2014/results/sports/boxing/mens-heavy-91kg
	
	            // eg v7=sport>football for http://www.bbc.com/sport/football/teams/XYZ
	            // eg v7=sport>commonwealth-games-2014
	            sectionStrings[1] = sects[0] + separator + sects[1];
	            if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v8=sport>football>teams for http://www.bbc.com/sport/football/teams/XYZ
	                // eg v8=sport>commonwealth-games-2014>results
	                sectionStrings[2] = sectionStrings[1] + separator + sects[2];
	                if (typeof sects[4] !== 'undefined' && sects[4] && sects[3] && sects[2]) {
	                    // eg v9=sport>commonwealth-games-2014>results>boxing>mens-heavy-91kg
	                    sectionStrings[3] = sectionStrings[2] + separator + sects[3] + separator + sects[4];
	                } else if (typeof sects[3] !== 'undefined' && sects[3] && sects[2]) {
	                    // eg v9=sport>football>teams>XYZ
	                    // eg v9=sport>commonwealth-games-2014>results>boxing>mens-heavy-91kg
	                    sectionStrings[3] = sectionStrings[2] + separator + sects[3];
	                }
	            }
	        } else {
	            // Standard, don't go as deep - only 3 deep
	            if (typeof sects[2] !== 'undefined' && sects[2]) {
	                // eg v7=news>business             for http://www.bbc.com/news/business/market_data/overview/
	                // eg v8=news>business>market_data for http://www.bbc.com/news/business/market_data/overview/
	                sectionStrings[1] = sects[0] + separator + sects[1];
	                sectionStrings[2] = sectionStrings[1] + separator + sects[2];
	            } else {
	                // eg v7=news>business for http://www.bbc.com/news/business/
	                // eg v8=news>business for http://www.bbc.com/news/business/
	                sectionStrings[1] = sects[0] + separator + sects[1];
	            }
	        }
	    }
	    if (sectionStrings[1] === '') {
	        sectionStrings[1] = sectionStrings[0];
	    }
	    if (sectionStrings[2] === '') {
	        sectionStrings[2] = sectionStrings[1];
	    }
	    return sectionStrings;
	};
	
	var getStoryHeadline = function getStoryHeadline() {
	    var cpsHeadline,
	        headline = config.getHeadline();
	    if (headline !== '') {
	        // Populated by webservice or via "config.setHeadline('The story headline')"
	        return headline;
	    }
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.headline !== 'undefined' && window.config.asset.headline !== '') {
	        // Responsive News
	        return window.config.asset.headline;
	    }
	    cpsHeadline = utils.getMetaNameContent('Headline');
	    if (cpsHeadline !== '') {
	        // Desktop News & Sport (CPS stack)
	        return cpsHeadline;
	    }
	    return 'na';
	};
	
	var getPageEdition = function getPageEdition() {
	    var edition = void 0;
	
	    // Do not return edition for japanese [BBCCOM-7842]
	    if (getVertical() === 'japanese') {
	        return NUL;
	    }
	
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.edition !== 'undefined' && window.config.asset.edition !== '') {
	        // Responsive News
	        return window.config.asset.edition;
	    }
	    edition = utils.getMetaNameContent('CPS_AUDIENCE');
	    if (edition !== '') {
	        // Desktop News & Desktop Sport (CPS stack)  ALSO Responsive News
	        return edition;
	    }
	    edition = utils.getMetaPropertyContent('wwhp-edition');
	    if (edition !== '') {
	        // International homepage edition
	        return edition;
	    }
	    return NUL;
	};
	
	/**
	 * Returns the page type
	 * @returns {String} eg story, index, video, story-video
	 */
	var getPageType = function getPageType(href) {
	    href = href || config.getWindowLocation().href;
	    var s = sections.getSectionsForUri(href, 'analytics');
	    var type = config.getType();
	
	    if (s[0] === 'homepage') {
	        type = 'INDEX';
	    } else if (s[0] === 'reel' && s.length > 1) {
	        type = 'MAP';
	    } else if (isLiveEvent()) {
	        type = 'LIVE-EVENT';
	    } else if (config.isStickyPlayerPage()) {
	        type = 'VIDEO-STICKY';
	    } else if (type === '') {
	        if (window.config && window.config.asset && window.config.asset.type) {
	            // Responsive News
	            type = window.config.asset.type;
	        } else if (window.onesport && window.onesport.config && window.onesport.config.omnitureAssetType) {
	            // Responsive Sport (onesport)
	            type = window.onesport.config.omnitureAssetType; // eg STORY, INDEX, MAP
	        } else if (window.bbc && bbc.fmtj && bbc.fmtj.page && bbc.fmtj.page.assetType) {
	            // Old N&K/CPS News & Sport desktop
	            type = bbc.fmtj.page.assetType;
	        } else if (s[0] === 'sport' && s[1] === 'av' || s[0] === 'sport' && href.indexOf('/sport/av') > 0) {
	            // Sport pages missing onesport var
	            type = 'AV';
	        }
	    }
	
	    // If type is not a string at this point, make sure it is and convert it to upper case
	    type = utils.isString(type) ? type.toUpperCase() : '';
	
	    switch (type) {
	        case 'AV':
	        case 'MAP':
	        case 'MEDIA_ASSET':
	            type = 'VIDEO';
	            break;
	        case 'STY':
	            type = 'STORY';
	            break;
	        case 'IDX':
	            type = 'INDEX';
	            break;
	        case 'LEP':
	            type = 'LIVE-EVENT';
	            break;
	        case 'LIVE_EVENT':
	            type = 'LIVE-EVENT';
	            break;
	        default:
	            break;
	    }
	
	    if (type === 'STORY' && config.isContinuousPlayPage()) {
	        type = 'STORY-VIDEO';
	    }
	
	    return type || (/.*(-|\/)(\d{7,9})$/.test(href) ? 'STORY' : 'INDEX');
	};
	
	/**
	 * Returns the page type
	 * @returns {String} eg story, index, video, story-video
	 */
	var getEmbedPageName = function getEmbedPageName(href) {
	    href = href || config.getWindowLocation().href;
	    href = href.split(/[?#]/)[0];
	    var s = sections.getSectionsForUri(href, 'analytics'),
	        pageType = getPageType().toLowerCase(),
	        articleId = getArticleID(href),
	        embedPageName = s.join("."),
	        ind,
	        overrides = {
	        ".live": "",
	        "world-africa": "world.africa",
	        "entertainment-arts": "entertainment_and_arts",
	        "us-canada": "us_and_canada",
	        "video-audio": "video_and_audio",
	        "world.radio-tv": "world_radio_and_tv",
	        "blogs-the-papers": "blogs.the-papers",
	        "worldservice.": ""
	    };
	
	    switch (pageType) {
	        case 'corr_story':
	            pageType = ".correspondent_story";
	            break;
	        case 'index':
	            pageType = "";
	            break;
	        case 'live-event':
	            pageType = ".live_coverage";
	            break;
	        default:
	            pageType = "." + pageType;
	            break;
	    }
	    for (ind in overrides) {
	        embedPageName = embedPageName.replace(ind, overrides[ind]);
	    }
	    return embedPageName.replace(/-/g, '_') + pageType + (articleId !== NUL ? "." + articleId : '') + "." + "page";
	};
	
	var sanitisePageName = function sanitisePageName(pageName) {
	    pageName = pageName.replace(/"/g, "'"); // remove double quotes
	    pageName = pageName.replace(/(^bbc (news|sport) \- )/i, ''); // Remove 'bbc news - title' etc
	    pageName = pageName.replace(/( \- bbc (news|sport)$)/i, ''); // Remove 'title - bbc news' etc
	    pageName = pageName.replace(/( \- BBCニュース$)/i, ''); // Remove Japanese title
	    // pageName = pageName.replace(/^weather\/0/, 'weather'); // Treat /0 pages like normal pages
	    return pageName.toLowerCase();
	};
	
	/**
	 * Use document.title to get title of page
	 */
	var getPageName = function getPageName() {
	    if (typeof config.getWindowDocument().title === 'undefined') {
	        return '';
	    } else {
	        return sanitisePageName(config.getWindowDocument().title);
	    }
	};
	
	/**
	 * Use url to get page parameter used by comScore
	 */
	var getPageNameComScore = function getPageNameComScore() {
	    var path = config.getWindowLocation().pathname.replace(/\.app$/, '').replace(/news\/av\//, "news/").replace(/^\/weather\/0/, '/weather').replace(/^\/sport\/(uk|world)/, '/sport'),
	        // window.location.pathname
	    pathSlashes = path.toLowerCase().slice(1); // trim leading slash
	
	    if (pathSlashes.slice(-1) === '/') {
	        // trim trailing slash
	        pathSlashes = pathSlashes.slice(0, -1);
	    }
	
	    var pathBits = pathSlashes.split('/');
	    var response = void 0;
	
	    var vertical = getVertical();
	    if (pathBits.length === 1) {
	        if (vertical === '' || vertical === 'wwhp') {
	            // homepage
	            response = 'homepage.home';
	        } else if (vertical === 'news' || vertical === 'weather' || vertical === 'sport' || vertical === 'japanese' || vertical === 'reel') {
	            response = vertical + '.home';
	        } else {
	            response = getPageName();
	        }
	    } else {
	        if (vertical === 'sport' && pathBits.length > 1 && pathBits[1] === '0') {
	            // trim /0
	            if (pathBits.length === 2) {
	                response = pathBits[0] + '.home';
	            } else {
	                response = pathBits[0] + '.' + pathBits.slice(2).join('.');
	            }
	        } else if (vertical === 'weather' || vertical === 'sport') {
	            response = pathBits.join('.').replace(/^news\.(uk|world|us|asia)\.(health)(?!-)/, "news.$2");
	        } else if (vertical === 'news' || vertical === 'japanese') {
	            response = getEmbedPageName();
	        } else if (vertical === 'reel') {
	            response = pathBits.join('.');
	        } else {
	            // not GNL, use old value based on title
	            response = getPageName();
	        }
	    }
	
	    return response;
	};
	
	var getVertical = function getVertical() {
	    var path = config.getWindowLocation().pathname.replace(/\.app$/, ''); // window.location.pathname
	    var pathSlashes = path.toLowerCase().slice(1); // trim leading slash
	
	    if (pathSlashes.slice(-1) === '/') {
	        // trim trailing slash
	        pathSlashes = pathSlashes.slice(0, -1);
	    }
	
	    var pathBits = pathSlashes.split('/');
	    return pathBits.length > 0 ? pathBits[0] : '';
	};
	
	/**
	 * Uri encode values - All values are encoded except those which are replaceable eg "{events}"
	 */
	var encodeValue = function encodeValue(str) {
	    if (/^\{[a-zA-Z0-9\-_]+\}$/.test(str)) {
	        return str;
	    }
	    return encodeURIComponent(str);
	};
	
	/**
	 * Determining what type of link was clicked and what event and linkTrackingName should be used
	 *
	 * @param object linkObj The element clicked
	 */
	var getLinkTrackingProperties = function getLinkTrackingProperties(linkObj) {
	    var text = '',
	        linkSections = sections.getSectionsForUri(linkObj.href, 'analytics');
	    if (typeof linkObj.text !== 'undefined') {
	        text = linkObj.text;
	    } else if (typeof linkObj.innerText !== 'undefined') {
	        text = linkObj.innerText;
	    }
	    var promoted = linkSections[0]; // eg /sport/blah => 'sport'
	    promoted = promoted === 'unknown' ? 'external' : promoted;
	    // Ensures that if the name contains 4x hyphens, trim the rest of the title
	    var sanitiseLinkName = function sanitiseLinkName(str) {
	        str = utils.trim(str).toLowerCase().replace(/[^a-zA-Z0-9]/g, '-');
	        return str.indexOf('----') === -1 ? str : str.substr(0, str.indexOf('----'));
	    };
	    var getLinkNameFromUrlForVerticals = function getLinkNameFromUrlForVerticals(href) {
	        var matched = href.match(/.*\/[0-9]+\-([^\/]+)/);
	        return matched !== null ? matched[1] : linkSections.join('>');
	    };
	    // rev or data-track
	    var linkObjTrack = '';
	    if (typeof linkObj.dataset !== 'undefined' && typeof linkObj.dataset.track !== 'undefined' && linkObj.dataset.track !== '' // NOTE: Unit tests are mocking linkObj therefore linkObj.dataset['track'] not work
	    ) {
	            // Use data-track attribute
	            linkObjTrack = linkObj.dataset.track;
	        } else if (linkObj.getAttribute('data-track')) {
	        // IE10 and lower don't support dataset
	        linkObjTrack = linkObj.getAttribute('data-track');
	    } else if (typeof linkObj.rev !== 'undefined' && linkObj.rev !== '') {
	        // Use rev attribute
	        linkObjTrack = linkObj.rev;
	    }
	    // Conditionals to determine what information to collect
	    if (linkObj.className.indexOf('external-link') !== -1) {
	
	        // External link
	        // eg <a class="external-link" rev="">
	        // eg <a class="external-link">
	        return {
	            'events': false,
	            'promoted': 'external',
	            'linkName': sanitiseLinkName(text),
	            'moduleName': false
	        };
	    } else if ((sectionStrings[0] === 'homepage' || sectionStrings[0] === 'wwscripts') && linkObjTrack.indexOf('|') !== -1) {
	        // Homepage Link Tracking
	        // eg <a rev="spotlight|video">
	        // eg <a data-track="spotlight|video">
	        // <moduleName>|<linkAssetType>
	        var htmlRevArr = linkObjTrack.split('|');
	        var linkName = linkSections[0].match(verticalsRegexp) ? getLinkNameFromUrlForVerticals(linkObj.href) : sanitiseLinkName(text);
	        var parent = utils.getParentElementByClass(linkObj, 'module2'); // desktop <div class="module2">
	        if (parent === false) {
	            parent = utils.getClosestElementByTagName(linkObj, 'section'); // responsive <section>
	        }
	        var linkPosition = utils.getAnchorPositionWithinElement(parent, linkObj.href);
	        if (htmlRevArr.length > 0) {
	            return {
	                'events': false,
	                'promoted': promoted.toLowerCase(),
	                'linkName': linkName,
	                'moduleName': htmlRevArr[0].toLowerCase(),
	                'linkType': typeof htmlRevArr[1] === 'string' ? htmlRevArr[1].toLowerCase() : NUL,
	                'linkPosition': linkPosition !== false && linkPosition !== 0 ? linkPosition : NUL
	            };
	        }
	    } else if (utils.parentHasClass(linkObj, 'bbccom_adsense', undefined, true)) {
	        // Google Adsense
	        return {
	            'events': false,
	            'promoted': 'ads',
	            'linkName': 'adsense',
	            'moduleName': 'google-adsense'
	        };
	    } else if (utils.parentHasClass(linkObj, 'bbccom_advert', undefined, true)) {
	        // BBCCOM-6147: Don't interfere with advert links (Doubleclick display ads)
	        return false;
	    } else if (utils.parentHasClass(linkObj, 'bbc-st-buttons') || utils.parentHasClass(linkObj, 'share__tool')) {
	        // Share Tools
	        // .bbc-st-buttons - News & Sport Desktop Share top and bottom
	        // .share__tool - News Responsive Share bottom
	        return {
	            'events': 'event23',
	            'promoted': 'share-tools',
	            'linkName': sanitiseLinkName(text), // eg Facebook, Twitter
	            'moduleName': 'share-tools',
	            'v': {
	                '35': sanitiseLinkName(text) + '-share', // v35
	                '39': sectionStrings[1] + '-' + getPageName() // v39
	            }
	        };
	    } else if (sectionStrings[0] === 'news' && (sectionStrings[1] === 'news' || sectionStrings[1] === 'news.0')) {
	
	        // News Front Page
	        parent = utils.getParentElementByAttribute(linkObj, 'data-entityid', 10);
	        var attrName = parent ? parent.getAttribute('data-entityid') : ""; // most-popular-watched-1 or us-stories#1
	        var moduleName = attrName.match(/(.+?)(-|#)(\d)/)[1]; // most-popular-watched or us-stories
	        linkPosition = attrName.match(/(\d{1,}$)/)[0]; // 1
	        return {
	            'promoted': promoted,
	            'moduleName': moduleName ? moduleName : NUL,
	            'linkName': sanitiseLinkName(text),
	            'linkPosition': linkPosition ? linkPosition : NUL,
	            'linkSection': linkSections.join(".")
	        };
	    } else if ((sectionStrings[0] === 'news' || sectionStrings[0] === 'wwscripts') && utils.parentHasClass(linkObj, 'hyper-promotional-content', 5)) {
	
	        // Elsewhere on the BBC module (News desktop)
	        return {
	            'events': false,
	            'promoted': 'elsewhere',
	            'linkName': sanitiseLinkName(text), // Story link
	            'moduleName': 'elsewhere'
	        };
	    } else if (linkObj.href.indexOf('outbrain.com') !== -1) {
	
	        // Outbrain tracking BBCCOM-5543, BBCCOM-6133
	        promoted = 'outbrain-module';
	        var parentEl = utils.getParentElementByClass(linkObj, 'OUTBRAIN', 5);
	        if (typeof parentEl.dataset.widgetId !== 'undefined') {
	            var widgetId = parseInt(parentEl.dataset.widgetId.substr(3, 1), 10);
	            var mapping = {
	                'videos-on-news': [1, 5, 6], // AR_1, AR_5, AR_6
	                'elsewhere-on-news': [2, 3, 7], // AR_2, AR_3, AR_7
	                'others-sites': [4, 9], // AR_4, AR_9
	                'elsewhere-on-features': [8] // AR_8
	            };
	            var m;
	            for (m in mapping) {
	                if (mapping[m].indexOf(widgetId) !== -1) {
	                    promoted = m;
	                    break;
	                }
	            }
	        }
	        return {
	            'events': false,
	            'promoted': promoted,
	            'linkName': sanitiseLinkName(text), // Story link
	            'moduleName': 'outbrain-recommends'
	        };
	    } else if (sectionStrings[0] === 'reel') {
	        var linkDetails = linkObjTrack.split('|');
	
	        var section = 'reel.home';
	        if (linkSections.length === 2) {
	            section = 'reel.playlists';
	        }
	        if (linkSections.length > 2) {
	            if (linkSections[2] === 'playlist') {
	                section = 'reel.playlist';
	            }
	            if (linkSections[2] === 'video') {
	                section = 'reel.video';
	            }
	        }
	
	        var title = sanitiseLinkName(text);
	        if (linkObj.getAttribute) {
	            if (linkObj.getAttribute('aria-label')) {
	                title = sanitiseLinkName(linkObj.getAttribute('aria-label'));
	            }
	        }
	
	        var position = '';
	        var total = '';
	        if (linkDetails.length > 1) {
	            position = linkDetails[1];
	        }
	        if (linkDetails.length > 2) {
	            total = linkDetails[2];
	        }
	
	        return {
	            'events': false,
	            'promoted': 'reel',
	            'moduleName': linkDetails[0],
	            'linkName': title,
	            'linkPosition': position,
	            'totalLinks': total,
	            'section': section
	        };
	    }
	    return false; // not a link to be tracked
	};
	
	var getAnalyticsUri = function getAnalyticsUri() {
	    return bbcdotcom.analytics.sscHelper.getAnalyticsLocation();
	};
	
	/**
	 * Load an image element to track the event
	 *
	 * @param string url
	 * @param function callback Used to delay page until image written into page (blocking)
	 */
	var loadTrackingImage = function loadTrackingImage(url, callback) {
	    url = getAnalyticsUri() + url;
	    log('Tracking URL: ', url);
	    var img = document.createElement('img');
	    if (typeof callback === 'function') {
	        img.onload = callback;
	    }
	    if (typeof window.IS_GNL_JS_UNIT_TEST === 'undefined') {
	        // Do not make comScore request when running unit tests
	        img.src = url;
	    }
	};
	
	var processDelayTrackingCookie = function processDelayTrackingCookie(delayTrackingCookieName, trackingRequests) {
	
	    var cookieValue = utils.getCookie(delayTrackingCookieName);
	    if (typeof cookieValue !== 'undefined' && cookieValue.length > 0) {
	        log('Delayed link tracking get ' + delayTrackingCookieName + ' cookie:' + cookieValue);
	        // eg /b/ss/bbcwglobaldev/1/H.22.1/s4757043230347?AQB=1&bw=1920&bh=705&c=24&cc=USD&cdp=2&ce=UTF-8&ndh=1...
	        loadTrackingImage(cookieValue);
	        trackingRequests['http'].push(cookieValue);
	        utils.deleteCookie(delayTrackingCookieName);
	    }
	};
	
	var trackLinkByDroppingCookie = function trackLinkByDroppingCookie(doTrackCallback, delayTrackingCookieName, customTrackingKeyValues) {
	    // doTrack() does not make request. Instead, the request is piped into a cookie
	    var cookieVal = doTrackCallback(customTrackingKeyValues, 'link', undefined, false);
	    utils.setCookie(delayTrackingCookieName, cookieVal, 60);
	    log('link tracking set ' + delayTrackingCookieName + ' cookie:' + cookieVal);
	};
	
	/**
	 * Problem with this approach: cannot CTRL-click to open link in new window
	 */
	var trackLinkAndResumeNavigation = function trackLinkAndResumeNavigation(doTrackCallback, uri, event, customTrackingKeyValues) {
	    var eventHandled = false,
	        timeoutId = null,
	        resume = !utils.isEventDefaultPrevented(event),
	        resumeNavigation = function resumeNavigation(uri, event, timeout, resume) {
	        clearTimeout(timeout);
	        if (event && !eventHandled && resume && uri) {
	            utils.navigateTo(uri);
	        }
	        eventHandled = true;
	    };
	    utils.cancelEvent(event);
	    doTrackCallback(customTrackingKeyValues, 'link', function (tracked) {
	        resumeNavigation(uri, event, timeoutId, resume);
	    });
	    timeoutId = setTimeout(function () {
	        resumeNavigation(uri, event, timeoutId, resume);
	    }, TRACKING_TIMEOUT);
	};
	
	var trackLink = function trackLink(doTrackCallback, delayTrackingCookieName, uri, event, keyValues) {
	    if (isBBCUri(uri) || isExternalRedirectToBBCUri(uri)) {
	        // Drop cookie and collect on other BBC page
	        trackLinkByDroppingCookie(doTrackCallback, delayTrackingCookieName, keyValues);
	    } else {
	        // Standard
	        trackLinkAndResumeNavigation(doTrackCallback, uri, event, keyValues);
	    }
	};
	
	/**
	 * Used to attach events to page.
	 * This must be called from within <body>, not <head>
	 */
	var applyLinkTrackingToPageElements = function applyLinkTrackingToPageElements(processLinkCallback) {
	    var rootSection = sections.getSection(0, 'analytics', true);
	    if (rootSection && LINK_TRACKING_SECTIONS.indexOf(rootSection) === -1) {
	        // Link tracking is not required on this page
	        return;
	    }
	    if (alreadyLinked === true) {
	        return;
	    }
	    clickListener = function clickListener(event) {
	        // Whatever you're thinking, don't do it.  Do not put "var clickListener"...
	        var linkObj = utils.getClosestElementByTagName(event.target || event.srcElement, 'a', true);
	        if (linkObj !== false) {
	            processLinkCallback(linkObj, event);
	        }
	    };
	    // Event for body click.  Using JavaScript Event Bubbling to identify what was clicked on
	    // within the page (besides <body>).
	    utils.addEvent(document.getElementsByTagName('body')[0], 'click', clickListener);
	    alreadyLinked = true;
	};
	
	/**
	 * Return the URI used to build the sections array
	 *
	 * @returns {string}
	 */
	var getUriForSections = function getUriForSections() {
	    var location = config.getWindowLocation(),
	        uri = location.href,
	        assetUri = objects('config.asset.asset_uri');
	
	    if (config.getType() === 'VIDEO-EMBED' && assetUri) {
	        uri = location.protocol + '//' + location.hostname + assetUri;
	    }
	
	    return uri;
	};
	
	/**
	 * Determine the av format (audio|video) for a given playlist item. For now we assume everything that isn't a
	 * radioProgramme is video. List of available kinds can be found below.
	 *
	 * @see https://confluence.dev.bbc.co.uk/display/mp/Loading+a+Playlist+with+an+object#LoadingaPlaylistwithanobject-kinds
	 * @param {string} kind
	 * @returns {string}
	 */
	var getAvFormatFromKind = function getAvFormatFromKind(kind) {
	    return kind === 'radioProgramme' ? 'audio' : 'video';
	};
	
	module.exports = {
	    isBBCUri: isBBCUri,
	    determineSections: determineSections,
	    getStoryHeadline: getStoryHeadline,
	    getPageEdition: getPageEdition,
	    getVertical: getVertical,
	    getPageType: getPageType,
	    sanitisePageName: sanitisePageName,
	    getAnalyticsUri: getAnalyticsUri,
	    getPageName: getPageName,
	    getPageNameComScore: getPageNameComScore,
	    getEmbedPageName: getEmbedPageName,
	    encodeValue: encodeValue,
	    getLinkTrackingProperties: getLinkTrackingProperties,
	    loadTrackingImage: loadTrackingImage,
	    processDelayTrackingCookie: processDelayTrackingCookie,
	    trackLink: trackLink,
	    applyLinkTrackingToPageElements: applyLinkTrackingToPageElements,
	    getUriForSections: getUriForSections,
	    getAvFormatFromKind: getAvFormatFromKind,
	    r: function r() {
	        utils.removeEvent(document.getElementsByTagName('body')[0], 'click', clickListener);
	        alreadyLinked = false;
	    }
	};

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * ALWAYS REQUIRED INTERNATIONAL for analytics.js, irrespective of ads being enabled
	 *
	 * USAGE
	 *
	 * Creates namespace/objects:
	 *   bbcdotcom.objects('bbcdotcom.data.stats', 'create')
	 *   => var window.bbcdotcom.data = {};  var window.bbcdotcom.data.stats = {};
	 *
	 * Returns object, method result or property result depending on whether it's an object, method or property.
	 *   bbcdotcom.objects('bbcdotcom.data.stats')
	 *   => var isExists = bbcdotcom.data.stats;
	 *
	 * Return the value of a function with passed in a param:
	 *   bbcdotcom.objects('bbcdotcom.config.isActive', 'analytics')
	 *   => var isAnalyticsActive = bbcdotcom.config.isActive('analytics');
	 *
	 * Returns true if method/object exists:
	 *   bbcdotcom.objects('slot', bbcdotcom.adverts)
	 *   => var methodExists = (typeof bbcdotcom.adverts.slot !== 'undefined' ? true : false);
	 *
	 */
	module.exports = function (strName) {
	    var i,
	        len,
	        args = arguments,
	        nameParts = strName.split("."),
	        obj = args[1] !== null && _typeof(args[1]) === 'object' ? args[1] : window;
	    for (i = 0, len = nameParts.length; i < len; i++) {
	        if (obj[nameParts[i]] === undefined) {
	            if (typeof args[1] === 'string' && args[1] === 'create') {
	                obj[nameParts[i]] = {};
	            } else {
	                return false; // Checking for an objects existence
	            }
	        } else if (typeof obj[nameParts[i]] === 'function') {
	            if (typeof args[1] !== 'undefined' && args[1] !== null && obj[nameParts[i]](args[1]) !== undefined) {
	                return obj[nameParts[i]](args[1]);
	            } else if (obj[nameParts[i]]() !== undefined) {
	                return obj[nameParts[i]]();
	            }
	        }
	        obj = obj[nameParts[i]];
	    }
	    return obj;
	};

/***/ }),
/* 173 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.sanitiseLabelValue = sanitiseLabelValue;
	exports.sanitiseKeyValues = sanitiseKeyValues;
	exports.sanitisePageName = sanitisePageName;
	function sanitiseLabelValue(value) {
	    if (typeof value !== 'string') {
	        return value;
	    }
	    return value.toLowerCase().replace(/[&=\/<>]/g, '');
	}
	
	function sanitiseKeyValues(keyValues) {
	    var cleanKvs = {};
	    for (var key in keyValues) {
	        if (keyValues.hasOwnProperty(key)) {
	            if (keyValues[key] !== '' && keyValues[key] !== null && keyValues[key] !== 'na') {
	                // Do not include label (key-value) if empty.
	                // Ensure we do not send integers/numbers/floats but strings BBCCOM-6288
	                cleanKvs[key] = isNaN(keyValues[key]) ? keyValues[key] : String(keyValues[key]);
	            }
	        }
	    }
	    return cleanKvs;
	}
	
	function sanitisePageName(name) {
	    if (typeof name !== 'string') {
	        return name;
	    }
	    return name.toLowerCase().replace(/[\s]/g, '_').replace(/[&=\/<>+?]/g, '').replace(/_{2,}/g, '_');
	}

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getArticleUpdatedDate;
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var getSportResponsiveUpdatedTimestamp = function getSportResponsiveUpdatedTimestamp() {
	    var timeElement = document.querySelector('time[data-timestamp]');
	
	    if (typeof timeElement === 'undefined' || !timeElement || timeElement === null) {
	        return null;
	    }
	
	    var timestamp = timeElement.getAttribute('data-timestamp');
	
	    if (typeof timestamp === 'undefined' || !timestamp || timestamp === "") {
	        return null;
	    }
	
	    return timestamp;
	};
	
	function getArticleUpdatedDate() {
	    var asTimestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var date = null,
	        sportDesktopDate = _utils2['default'].getMetaNameContent('DCTERMS.modified'),
	        sportResponsiveDate = getSportResponsiveUpdatedTimestamp();
	
	    if (typeof window.config !== 'undefined' && typeof window.config.asset !== 'undefined' && typeof window.config.asset.last_updated !== null && typeof window.config.asset.last_updated !== 'undefined' && typeof window.config.asset.last_updated.date !== 'undefined') {
	        // Responsive News
	        // eg 2015-01-08 03:44:31
	        date = window.config.asset.last_updated.date;
	    } else if (sportDesktopDate !== '') {
	        // Sport Desktop
	        // eg 2011/12/12T11:56:10+00:00
	        date = sportDesktopDate.replace('T', ' ').replace('+00:00', '');
	    } else if (sportResponsiveDate) {
	        return sportResponsiveDate; // Already a timestamp
	    }
	
	    if (date === null || date.length === 0) {
	        return null;
	    }
	
	    if (typeof asTimestamp !== 'undefined' && asTimestamp === true) {
	        return new Date(date.replace(/\//g, '-').replace(' ', 'T')).getTime() / 1000;
	    }
	    return date.replace(/-/g, '/');
	}
	module.exports = exports['default'];

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getCollection;
	
	var _keyValues = __webpack_require__(176);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getCollection() {
	    return _keyValues2['default'].get('keyword') !== false ? _keyValues2['default'].get('keyword').toLowerCase() : '';
	}
	module.exports = exports['default'];

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(152);
	var utils = __webpack_require__(143);
	
	var keyValues = {},
	    keywordObj = false,
	    assetTypeMap = {
	    'AV': 'media_asset',
	    'INDEX': 'index'
	};
	
	var setStoryId = function setStoryId(windowLocationHref) {
	    if (/([0-9]{7,8})$/.test(windowLocationHref.split("?")[0].split("#")[0])) {
	        keyValues['story_id'] = RegExp.$1;
	    }
	};
	
	var setCType = function setCType(windowLocationHref) {
	    windowLocationHref = windowLocationHref.split("?")[0].split("#")[0];
	    keyValues['ctype'] = /[0-9]{7,8}$/.test(windowLocationHref) ? 'content' : 'index';
	};
	
	var setAssetType = function setAssetType(windowLocationHref, assetType) {
	    if (typeof keyValues['asset_type'] === 'undefined') {
	        // Asset type INDEX will be set for Index and Feature Indexes and should override the use of the url
	        if (assetType && typeof assetType === 'string' && assetTypeMap[assetType]) {
	            keyValues['asset_type'] = assetTypeMap[assetType];
	        } else {
	            // If an asset type of AV or INDEX has not been defined use the url to work out the type
	            windowLocationHref = windowLocationHref.split("?")[0].split("#")[0];
	            keyValues['asset_type'] = /[0-9]{7,8}$/.test(windowLocationHref) ? 'story' : 'index';
	        }
	        // All live experience pages should override the asset type
	        if (/\/(sport|news)\/live\//.test(windowLocationHref)) {
	            keyValues['asset_type'] = 'live_event';
	        }
	    }
	};
	
	var setReferrer = function setReferrer(referrer) {
	    // Referrer KeyValue
	    var matchArr = referrer.match(/^(http[s]?:\/\/[a-z0-9\.]*bbc\.(co\.uk|com))(.*)$/);
	    if (matchArr) {
	        // Within bbc website
	        var refString;
	        refString = matchArr[3].replace(/default.stm$|\-|\/|_/g, "");
	        if (refString.length > 0 && refString.length <= 64) {
	            keyValues['referrer'] = escape(refString);
	        } else {
	            keyValues['referrer'] = "";
	        }
	    } else {
	        // Catch exceptions
	        keyValues['referrer'] = "nonbbc";
	    }
	};
	
	var setReferrerDomain = function setReferrerDomain(referrer) {
	    var refDomain = referrer.match(/^(http[s]?:\/\/)([a-z0-9\.]*)((?:\/(?:\w|-|\+|\.)+)*)(\/.*)$/);
	    if (refDomain) {
	        keyValues['referrer_domain'] = refDomain[2];
	    } else {
	        keyValues['referrer_domain'] = "";
	    }
	};
	
	// Behavioral targeting adserver integration
	var setRsi = function setRsi(windowDocument) {
	    var i,
	        rsi_segs = [],
	        segs_end,
	        segs_beg;
	    if (typeof windowDocument.cookie !== 'undefined') {
	        segs_beg = windowDocument.cookie.indexOf('rsi_segs=');
	        keyValues['rsi'] = [];
	        if (segs_beg >= 0) {
	            segs_beg = windowDocument.cookie.indexOf('=', segs_beg) + 1;
	            if (segs_beg > 0) {
	                segs_end = windowDocument.cookie.indexOf(';', segs_beg);
	                if (segs_end === -1) {
	                    segs_end = windowDocument.cookie.length;
	                }
	                rsi_segs = windowDocument.cookie.substring(segs_beg, segs_end).split('|');
	            }
	        }
	        for (i = 0; i < rsi_segs.length && i < 20; i++) {
	            keyValues['rsi'].push(rsi_segs[i]);
	        }
	    }
	};
	
	var setWorldServiceTitle = function setWorldServiceTitle(windowLocationPathname) {
	    var title;
	    if (sections.getSection(0) === 'worldservice') {
	        title = windowLocationPathname.split('/').pop().split('_');
	        if (typeof title[1] !== 'undefined') {
	            keyValues['keyword'] = title[1] + (typeof title[2] !== 'undefined' ? '_' + title[2] : '');
	        }
	        title.shift();
	        keyValues['title'] = title.join('_');
	    }
	};
	
	var setKeywordParts = function setKeywordParts(keyword) {
	    var keywordParts = keyword.match(/(((?!(sponsor:)).)*)(sponsor:([^,]+),?(.*))?/);
	    if (keywordParts !== null && typeof keywordParts[5] !== 'undefined' && keywordParts[5] !== '' && typeof keywordParts[6] !== 'undefined' && keywordParts[6] !== '') {
	        keywordObj = {
	            href: keywordParts[6],
	            title: utils.capitalize(keywordParts[5])
	        };
	        keyValues['keyword'] = keywordParts[5].replace(/ /g, '');
	    } else {
	        keyValues['keyword'] = keyword;
	    }
	};
	
	module.exports = {
	    init: function init(windowLocation, windowDocument, assetType) {
	        keyValues['domain'] = windowLocation.hostname;
	        setStoryId(windowLocation.href);
	        setCType(windowLocation.href);
	        setAssetType(windowLocation.href, assetType);
	        setReferrer(windowDocument.referrer);
	        setReferrerDomain(windowDocument.referrer);
	        setRsi(windowDocument);
	        setWorldServiceTitle(windowLocation.pathname);
	    },
	    getAll: function getAll() {
	        return keyValues;
	    },
	    get: function get(key) {
	        return typeof keyValues[key] !== 'undefined' ? keyValues[key] : false;
	    },
	    set: function set(key, value) {
	        if (typeof key === 'string') {
	            if (typeof key !== 'undefined' && typeof value !== 'undefined' && value !== '') {
	                if (key === 'keyword') {
	                    setKeywordParts(value);
	                } else {
	                    keyValues[key] = value;
	                }
	            }
	        }
	    },
	    unset: function unset(key) {
	        if (typeof key === 'string' && typeof key !== 'undefined' && typeof keyValues[key] !== 'undefined') {
	            delete keyValues[key];
	        }
	    },
	    setArray: function setArray(key, value) {
	        if (typeof key === 'string') {
	            if (typeof keyValues[key] === 'undefined') {
	                keyValues[key] = [];
	            }
	            if (typeof key !== 'undefined' && typeof value !== 'undefined' && value !== '') {
	                keyValues[key].push(value);
	            }
	        }
	    },
	    getKeywordParts: function getKeywordParts() {
	        return keywordObj;
	    },
	    r: function r() {
	        keyValues = {};
	        keywordObj = false;
	    }
	};

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getDaxCorp;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getDaxCorp() {
	    return _config2['default'].getDaxEnvironments().join('_');
	}
	module.exports = exports['default'];

/***/ }),
/* 178 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getDomain;
	function getDomain(uri) {
	    var re = /http(|s):\/\/([^\/]+)(.*)?/;
	    var match = re.exec(uri);
	    return "http" + match[1] + "://" + match[2];
	}
	module.exports = exports["default"];

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getEdition;
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getEdition() {
	    return _helper2['default'].getPageEdition().toLowerCase();
	}
	module.exports = exports['default'];

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getIsApp;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getIsApp() {
	    return _config2['default'].isSportApp() || bbcdotcom.analytics.isScwHandlerUsed ? 1 : 0;
	}
	module.exports = exports['default'];

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getPageName;
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _sanitiseValues = __webpack_require__(173);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getPageName() {
	    return (0, _sanitiseValues.sanitisePageName)(_helper2['default'].getPageNameComScore());
	}
	module.exports = exports['default'];

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getPageType;
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getPageType(uri) {
	    var siteCatalystPageType = _helper2['default'].getPageType(uri).toLowerCase();
	    var mappingTable = {
	        'index': 'idx|na',
	        'story': 'sty|na',
	        'story-video': 'sty|vid',
	        'live-event': 'liv|na',
	        'video': 'map|mps',
	        'video-sticky': 'vid|sti',
	        'video-embed': 'vid|emb'
	    };
	    return typeof mappingTable[siteCatalystPageType] !== 'undefined' ? mappingTable[siteCatalystPageType] : 'na|na';
	}
	module.exports = exports['default'];

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getReferrer;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getReferrer() {
	    return document.referrer !== _config2['default'].getReferrer() ? _config2['default'].getReferrer().substr(0, 255) : '';
	}
	module.exports = exports['default'];

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSectionStrings;
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getSectionStrings() {
	    return _helper2['default'].determineSections('.');
	}
	module.exports = exports['default'];

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteCatalystCookieValue;
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getSiteCatalystCookieValue() {
	    var siteCatalystCookieValue = _utils2['default'].getCookie('s_vi'); // Will be "undefined" when on "www.bbc.co.uk" because it's a ".com" cookie
	    return typeof siteCatalystCookieValue !== 'undefined' ? siteCatalystCookieValue : '';
	}
	module.exports = exports['default'];

/***/ }),
/* 186 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getSiteChannel;
	function getSiteChannel(sections) {
	    return sections[0];
	}
	module.exports = exports["default"];

/***/ }),
/* 187 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSection;
	function getSiteSection(sections) {
	    return sections[1] === sections[0] ? '' : sections[1]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ }),
/* 188 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSubsection1;
	function getSiteSubsection1(sections) {
	    return sections[2] === sections[1] ? '' : sections[2]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ }),
/* 189 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getSiteSubsection2;
	function getSiteSubsection2(sections) {
	    return sections[3] === sections[2] ? '' : sections[3]; // BBCCOM-6431
	}
	module.exports = exports['default'];

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = getSyndicatedVideoSource;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * Currently we only syndicate video to twitter so if the page is of type VIDEO-EMBED then we can assume
	 * we are embedded in twitter. We can look into changing this down the line as and when required.
	 *
	 * @returns {string}
	 */
	function getSyndicatedVideoSource() {
	  return _config2['default'].getType() === 'VIDEO-EMBED' ? 'twitter' : null;
	};
	module.exports = exports['default'];

/***/ }),
/* 191 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports["default"] = getTimestamp;
	/**
	 * Create Timestamp - JavaScript timestamp in milliseconds
	 * eg 1424452599000
	 */
	function getTimestamp() {
	    if (!Date.now) {
	        // IE8 & below
	        return new Date().getTime();
	    }
	
	    return Date.now();
	}
	module.exports = exports["default"];

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getTopicNames;
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getTopicNames() {
	    var topicNames = [],
	        topicMap = {},
	        topic = '',
	        topicElements = document.querySelectorAll(".tags-list__tags a"),
	        i;
	    for (i = 0; i < topicElements.length; i++) {
	        topic = topicElements[i].innerText.replace(/\s/g, '_').toLowerCase();
	        if (topicMap[topic] === undefined) {
	            topicNames.push(topic);
	            topicMap[topic] = 'Topic seen';
	        }
	    }
	    return topicNames.join('|');
	}
	module.exports = exports['default'];

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getVersion;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getVersion() {
	    return _config2['default'].getVersion();
	}
	module.exports = exports['default'];

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = getPartner;
	
	var _keyValues = __webpack_require__(176);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getPartner() {
	  return _keyValues2['default'].get('partner') !== false ? _keyValues2['default'].get('partner').toLowerCase() : '';
	}
	module.exports = exports['default'];

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports['default'] = getLicense;
	
	var _keyValues = __webpack_require__(176);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getLicense() {
	  return _keyValues2['default'].get('license') !== false ? _keyValues2['default'].get('license').toLowerCase() : '';
	}
	module.exports = exports['default'];

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports['default'] = getUserTrackingCookie;
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var OLD_USER_TRACKING_COOKIE = 'ckpf_uid';
	var USER_TRACKING_COOKIE = 'ckpf_sscid';
	var NEW_USER_TRACKING_COOKIE = 'ckns_sscid';
	
	function getUserTrackingCookie() {
	    var oldValue = _utils2['default'].getCookie(OLD_USER_TRACKING_COOKIE);
	    var currentValue = _utils2['default'].getCookie(USER_TRACKING_COOKIE);
	    var newValue = _utils2['default'].getCookie(NEW_USER_TRACKING_COOKIE);
	
	    if (typeof newValue !== 'undefined' && newValue !== 0) {
	        return newValue;
	    } else if (typeof currentValue !== 'undefined' && currentValue.length !== 0) {
	        return currentValue;
	    } else if (typeof oldValue !== 'undefined' && oldValue.length !== 0) {
	        return oldValue;
	    }
	
	    return false;
	}
	module.exports = exports['default'];

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var keyValues = __webpack_require__(176);
	var dfppRequest = __webpack_require__(198);
	
	var Predicate = function Predicate() {
	
	    'use strict';
	
	    this.exclusions = [];
	    this.inclusions = [];
	    this.predicates = {
	        airline: {
	            rules: {
	                1: { // each rule is an OR
	                    match: {
	                        1: ['air', 'plane', 'flight', 'jet', 'aviation'], // each line is an AND
	                        2: ['ash', 'bomb', 'crash', 'dead', 'detonat', 'disaster', 'disrupt', 'emergenc', 'fire', 'incident', 'injur', 'kill', 'missing', 'package', 'passenger', 'crew', 'search', 'score', 'strand', 'strike', 'volcan', 'wreck'] //each line is an AND
	                    },
	                    value: "!c"
	                },
	                2: {
	                    match: {
	                        1: ['osama', 'bin laden', 'twin towers', '9\/11,september 11', '11 september', 'al-qaeda', 'al qaeda']
	                    },
	                    value: "!c"
	                }
	            }
	        },
	        violence: {
	            rules: {
	                1: {
	                    match: {
	                        1: ['riot', 'violen', 'loot', 'unrest', 'unruly', 'attack', 'disturbance', 'shot', 'disorder', 'anarch', 'chaotic', 'chaos', 'unruliness', 'mindless', 'stealing', 'stolen', 'thiev', 'theft', 'arson', 'crisis', 'disarray', 'discord', 'lawlessness', 'criminal', 'vandal', 'thug', 'engulf', 'flame', 'burn', 'blast', 'blood', 'dead', 'death', 'die', 'explode', 'explosion', 'fatal', 'funeral', 'gun', 'injur', 'kill', 'knife', 'mourn', 'murder', 'stab', 'terror', 'traged', 'tragic', 'victim']
	                    },
	                    value: "!c"
	                }
	            }
	        },
	        sensitive: {
	            rules: {
	                1: {
	                    match: {
	                        1: ['violence', 'firearms', 'arms', 'tobacco', 'hygiene', 'religio', 'crim', 'illegal', 'politic', 'porno', 'paedophile', 'google', 'internet']
	                    },
	                    value: "!c"
	                }
	            }
	        }
	    };
	
	    /**
	     * @param exclusions Exclusions can either be an array "['airline','violence']" or a string "airline,violence"
	     */
	    this.setAdExclusion = function (exclusions) {
	        if (typeof exclusions === 'undefined' || exclusions === '') {
	            return;
	        }
	        var e;
	        for (e in exclusions) {
	            if (exclusions.hasOwnProperty(e)) {
	                dfppRequest.setExclusion(exclusions[e]);
	                // Adding the NEW GPT way this way so that when getPrerollAdTag is called it is populated.
	                keyValues.set('excl_cat', exclusions.join(','));
	            }
	        }
	        keyValues.set('!c', exclusions.join(','));
	    };
	};
	
	Predicate.prototype.getExclusions = function () {
	    return this.exclusions;
	};
	
	Predicate.prototype.getInclusions = function () {
	    return this.inclusions;
	};
	
	Predicate.prototype.set = function (contentMetaData) {
	    var x, n, key, numberToMatch, numberMatched;
	    contentMetaData = contentMetaData.toLowerCase();
	    for (key in this.predicates) {
	        for (x in this.predicates[key].rules) {
	            numberToMatch = 0;
	            numberMatched = 0;
	            for (n in this.predicates[key].rules[x].match) {
	                numberToMatch++;
	                var exp = new RegExp(this.predicates[key].rules[x].match[n].join('|'));
	                if (exp.test(contentMetaData)) {
	                    numberMatched++;
	                } else {
	                    // Must match each list as it's an AND operator
	                    continue;
	                }
	            }
	            if (0 !== numberMatched && numberToMatch === numberMatched) {
	                if ('!c' === this.predicates[key].rules[x].value) {
	                    // Exclusions
	                    this.exclusions.push(key);
	                } else {
	                    // Inclusions
	                    this.inclusions.push(key);
	                }
	            }
	        }
	    }
	    this.setAdExclusion(this.exclusions);
	    return this;
	};
	
	module.exports = Predicate;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var Log = __webpack_require__(144)('adverts:dfppRequest');
	var Layout = __webpack_require__(199);
	var Objects = __webpack_require__(172);
	var KeyValues = __webpack_require__(176);
	var AdRegister = __webpack_require__(200);
	var cmd = __webpack_require__(201);
	var PubSub = __webpack_require__(202);
	var AdUnit = __webpack_require__(203);
	var Config = __webpack_require__(150);
	var Sections = __webpack_require__(152);
	var Utils = __webpack_require__(143);
	var SlotDeferred = __webpack_require__(205);
	var AdFilter = __webpack_require__(206);
	var Breakpoints = __webpack_require__(207);
	var lazyLoadSlots = [];
	var delayedScroll;
	
	var throttle = function throttle(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function later() {
	        previous = options.leading === false ? 0 : Date.now();
	        timeout = null;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	    };
	    return function () {
	        var now = Date.now();
	        if (!previous && options.leading === false) previous = now;
	        var remaining = wait - (now - previous);
	        context = this;
	        args = arguments;
	        if (remaining <= 0 || remaining > wait) {
	            if (timeout) {
	                clearTimeout(timeout);
	                timeout = null;
	            }
	            previous = now;
	            result = func.apply(context, args);
	            if (!timeout) context = args = null;
	        } else if (!timeout && options.trailing !== false) {
	            timeout = setTimeout(later, remaining);
	        }
	        return result;
	    };
	};
	
	var AD_ID_PREFIX = 'bbccom_';
	
	var getAdData = function getAdData(adName) {
	    var ad = {
	        adSizes: Layout.getAdCurrentGroupSizes(adName)
	    };
	    // Reset ad slot name back to async one if required
	    ad.domId = Objects('bbcdotcom.config.isAsync') ? AD_ID_PREFIX + adName : adName;
	    return ad;
	};
	
	var setupRenderEndedCallback = function setupRenderEndedCallback() {
	    googletag.cmd.push(function () {
	        googletag.pubads().addEventListener('slotRenderEnded', function (event) {
	            if (!bbcdotcom.adverts.dfppRequest.getInitComplete()) {
	                bbcdotcom.adverts.dfppRequest.setInitComplete(true);
	            }
	            var adId = event.slot.getTargeting("slot");
	            adId = adId[0].replace('bbccom_', '');
	            var ad = AdRegister.getAd(adId);
	            var slotElementId = event.slot.getSlotElementId();
	
	            Log(adId, slotElementId, 'isEmpty', event.isEmpty);
	            if (ad && ad.isRendered()) {
	                return;
	            }
	            ad.injectAdvertisementText();
	            ad.setRendered(true);
	            ad.setEventSize(event.size);
	            ad.renderIfReady();
	            PubSub.trigger('ad:render:complete', slotElementId, event.isEmpty);
	            bbcdotcom.adverts.dfppRequest.requestDeferredAds();
	        });
	    });
	};
	
	var DFPPRequest = function DFPPRequest() {
	    this.slots = {};
	    this.deferredSlots = [];
	    this.initComplete = false;
	};
	
	DFPPRequest.prototype.reset = function () {
	
	    try {
	        if (Config.isAdsEnabled() && typeof googletag !== 'undefined') {
	            googletag.pubads().clearTargeting();
	            googletag.pubads().updateCorrelator();
	            this.init(true);
	        }
	    } catch (e) {
	        Log.error('Unable to reset ads targeting', e);
	    }
	};
	
	DFPPRequest.prototype.init = function (reset) {
	    try {
	        if (Config.isAdsEnabled() && typeof googletag !== 'undefined') {
	            // presume perfCookie is set on
	            // wrap in a try in case the cookie isn't there at all for whatever reason
	            var perfCookie = window.bbccookies && bbccookies.readPolicy && bbccookies.readPolicy('performance');
	
	            googletag.cmd.push(function () {
	
	                googletag.pubads().setPrivacySettings({
	                    'restrictDataProcessing': perfCookie !== true
	                });
	
	                googletag.pubads().setTargeting("frd", '1');
	
	                if (AdUnit.getPreviewUid()) {
	                    googletag.pubads().setTargeting("uid", AdUnit.getPreviewUid());
	                }
	
	                this.setKeyValues();
	
	                /**
	                 * Lotame
	                 */
	                this.setLotameData();
	
	                /**
	                 * Grapeshot
	                 */
	                this.setGrapeshotData();
	
	                /**
	                 * Programmes extra info
	                 */
	                this.setProgrammesData();
	
	                googletag.pubads().setTargeting('esi', '0');
	
	                // BBCCOM-7631
	                if (Sections.getSection(0) === 'weather') {
	                    googletag.pubads().addEventListener('impressionViewable', function (event) {
	                        var children, el;
	                        if (event.slot.getSlotElementId() === 'mpu') {
	                            children = document.getElementById('bbccom_mpu').children;
	                            if (children[children.length - 1].tagName === "SCRIPT") {
	                                el = children[children.length - 2];
	                            } else {
	                                el = children[children.length - 1];
	                            }
	                            Utils.addBodyTagClass('bbccom_slot_mpu' + Math.floor(el.clientHeight / 100) * 100);
	                        }
	                    });
	                }
	
	                /**
	                 *  SINGLE REQUEST MODE Ad Setup
	                 */
	                googletag.pubads().enableSingleRequest();
	
	                if (navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1) {
	                    var ppid = Utils.getCookie('ckpf_ppid') || Utils.generateUuidV4().split("-").join("");
	                    if (window.bbccookies && bbccookies.readPolicy('performance')) {
	                        Log('Calling SetCookie with value : ' + ppid);
	                        Utils.setCookie('ckpf_ppid', ppid);
	                    }
	                    googletag.pubads().setPublisherProvidedId(ppid);
	                }
	
	                /**
	                 *  SYNC/ASYNC Differences
	                 */
	                if (!Objects('bbcdotcom.config.isAsync')) {
	                    googletag.pubads().enableSyncRendering();
	                } else {
	                    if (Objects('bbcdotcom.config.isDisableInitialLoad')) {
	                        googletag.pubads().disableInitialLoad();
	                    }
	                    setupRenderEndedCallback();
	                }
	
	                /*
	                 * GDPR : check ckns_policy cookie to allow personalised ads or not
	                 *  xx1 : allowed, nothing to do, xx0 : disable personalised ads
	                 */
	                if (Config.isNPA()) {
	                    googletag.pubads().setRequestNonPersonalizedAds(1);
	                }
	
	                if (typeof reset === "undefined" || reset !== true) {
	                    this.requestAds();
	                }
	
	                PubSub.trigger('ads:initialised');
	            }.bind(this));
	        }
	    } catch (e) {
	        Log.error('Unable to setup ads', e);
	    }
	};
	
	DFPPRequest.prototype.requestAds = function () {
	    var interstitialFlag = AdFilter.isSlotEnabled('interstitial');
	    try {
	        if (Config.isAdsEnabled() && typeof googletag !== 'undefined') {
	
	            var i,
	                adData,
	                adSize,
	                adUnit = AdUnit.get(),
	                ads = AdRegister.getAds(),
	                keySlots = Object.keys(this.slots);
	
	            if (AdRegister.getAdCount() === 0) {
	                // No ads in register
	                // We still want to request 'interstitial' and enable services for after-initial-load ads
	                googletag.cmd.push(function () {
	                    if (interstitialFlag) {
	                        AdRegister.registerAd('interstitial');
	                        googletag.defineOutOfPageSlot(adUnit, 'bbccom_interstitial').addService(googletag.pubads()).setTargeting('slot', 'interstitial');
	
	                        keySlots.push('bbccom_interstitial');
	                    }
	                    googletag.enableServices();
	                });
	                this.setInitComplete(true);
	                return;
	            }
	
	            googletag.cmd.push(function () {
	
	                for (i in ads) {
	                    if (ads.hasOwnProperty(i) && AdFilter.isSlotEnabled(ads[i].getAdId().replace(AD_ID_PREFIX, ''))) {
	                        adData = getAdData(ads[i].getAdId().replace(AD_ID_PREFIX, ''));
	                        adSize = adData.adSizes;
	                        if (ads[i].isFluid) adSize.push('fluid');
	                        if (adData && (adData.adSizes.length > 0 || ads[i].isFluid)) {
	                            this.slots[adData.domId] = googletag.defineSlot(adUnit, adSize, adData.domId).addService(googletag.pubads());
	                            this.slots[adData.domId].setTargeting('slot', adData.domId.replace(AD_ID_PREFIX, ''));
	                        }
	                    }
	                }
	
	                /**
	                 *  INTERSTITIAL Ad Setup
	                 */
	                if (interstitialFlag) {
	                    AdRegister.registerAd('interstitial');
	                    googletag.defineOutOfPageSlot(adUnit, 'bbccom_interstitial').addService(googletag.pubads()).setTargeting('slot', 'interstitial');
	
	                    keySlots.push('bbccom_interstitial');
	                }
	
	                googletag.enableServices();
	
	                PubSub.trigger('ads:requested', keySlots);
	            }.bind(this));
	        }
	    } catch (e) {
	        Log.error('Unable to request ads', e);
	    }
	};
	
	/**
	 * Refresh ads in asynchronous loaded pages
	 * There is an sync version of refreshing ads in api.js for verticals as an interim
	 */
	DFPPRequest.prototype.refreshAd = function (domId) {
	    var ad = AdRegister.getAd(domId.replace('bbccom_', ''));
	    if (ad) {
	        googletag.pubads().refresh([this.slots[domId]]);
	        ad.injectAdvertisementText();
	    } else {
	        Log.warn('No ' + domId.replace('bbccom_', '') + ' ad found to refresh');
	    }
	};
	
	/**
	 * Deferred slots can only be registered after first ad request sent,
	 * we're waiting for initComplete to send the new ad request
	 */
	DFPPRequest.prototype.requestDeferredAds = function (mode) {
	    if (this.deferredSlots.length > 0) {
	        var slot,
	            domId,
	            groups,
	            advertText,
	            bool,
	            keyValues,
	            ad,
	            slotsArr = [],
	            boolCorrelator = mode ? mode : false,
	            currentGroupId = Layout.getCurrentGroupId();
	
	        for (var i = 0; i < this.deferredSlots.length; i++) {
	            slot = this.deferredSlots[i];
	            domId = slot.domId;
	            groups = slot.groups;
	            keyValues = slot.keyValues;
	            advertText = slot.advertText;
	            bool = slot.booleanCorrelator || false;
	            ad = AdRegister.registerAd(domId);
	
	            if (ad && !ad.hasAnyGroupAlreadyBeenRegistered([groups]) && groups.indexOf(currentGroupId) >= 0) {
	                Log('Registering ad: ' + domId + ' for groups ' + groups);
	                googletag.cmd.push(function () {
	                    var _this = this;
	
	                    var adUnit = AdUnit.get(),
	                        adData = getAdData(ad.getAdId().replace(AD_ID_PREFIX, '')),
	                        adSize = adData.adSizes;
	                    if (ad.isFluid) adSize.push('fluid');
	                    this.slots[adData.domId] = googletag.defineSlot(adUnit, adSize, adData.domId).addService(googletag.pubads());
	                    this.slots[adData.domId].setTargeting('slot', adData.domId.replace(AD_ID_PREFIX, ''));
	                    if (keyValues) {
	                        Object.keys(keyValues).forEach(function (key) {
	                            if (key && keyValues[key]) {
	                                _this.slots[adData.domId].setTargeting(key, keyValues[key]);
	                            };
	                        });
	                    }
	                    slotsArr.push(this.slots[adData.domId]);
	                    SlotDeferred(domId, groups);
	                    if (advertText) {
	                        ad.setAdText(advertText);
	                    }
	                    ad.injectAdvertisementText();
	                    this.deferredSlots[i] = "";
	                    PubSub.trigger('ads:requested', domId);
	                }.bind(this));
	            } else {
	                Log.warn('No ' + domId.replace('bbccom_', '') + ' ad found to register (for groups ' + groups + ' )');
	            }
	        }
	        this.deferredSlots = [];
	        googletag.pubads().refresh(slotsArr, { changeCorrelator: boolCorrelator });
	    }
	};
	
	/**
	 * Register a new ad in AJAX or infinite loaded pages
	 * Upgraded support, can accept pair (domId, groups) or object with more than one ad
	 * First signature matches postpone ad request on Live pages
	 * Second signature matches reload on new slots for Features
	 */
	DFPPRequest.prototype.registerAd = function (domId, groups, keyValues) {
	    var mode = false,
	        advertText,
	        _groups,
	        exception = domId === 'mpu_middle' && groups.length === 4 && Utils.parentHasClass(document.getElementById('bbccom_mpu_middle_1_2_3_4'), 'lx-stream') && Breakpoints.getGroup(5) !== 'undefined';
	    if (typeof groups !== 'undefined') {
	        if (exception) {
	            document.getElementById('bbccom_mpu_middle_1_2_3_4').id = "bbccom_mpu_middle_1_2_3_4_5";
	            groups = [1, 2, 3, 4, 5];
	        }
	        if (AdFilter.isSlotEnabled(domId) || AdFilter.isLazyLoadedSlot(domId)) {
	            this.deferredSlots.push({ 'domId': domId, 'groups': groups.map(Number), keyValues: keyValues });
	        } else {
	            Log.warn('Slot ' + domId + ' not enabled');
	        }
	    } else {
	        mode = typeof (keyValues || {}).mode !== 'undefined' ? keyValues.mode : true;
	        for (var ad in domId) {
	            if (AdFilter.isSlotEnabled(ad)) {
	                if (_typeof(domId[ad]) === 'object' && !(domId[ad] instanceof Array)) {
	                    advertText = domId[ad]['advertText'];
	                    _groups = domId[ad]['groups'];
	                    this.deferredSlots.push({ 'domId': ad, 'groups': _groups.map(Number), 'advertText': advertText, keyValues: keyValues });
	                } else {
	                    this.deferredSlots.push({ 'domId': ad, 'groups': domId[ad].map(Number), keyValues: keyValues });
	                }
	            } else {
	                Log.warn('Slot ' + ad + ' not enabled');
	            }
	        }
	    }
	    if (this.initComplete) {
	        this.requestDeferredAds(mode);
	    }
	};
	
	DFPPRequest.prototype.scrollHandler = function () {
	    for (var i = 0; i < lazyLoadSlots.length; i++) {
	        var obj = lazyLoadSlots[i];
	        if (obj.selectorElement.getBoundingClientRect().top < document.documentElement.clientHeight) {
	            if (AdFilter.isSlotEnabled(obj.domId)) {
	                bbcdotcom.registerAd(obj.domId, obj.groups);
	            } else {
	                Log.warn('Slot ' + obj.domId + ' not enabled');
	            }
	            // remove this item now it's been registered
	            lazyLoadSlots.splice(i, 1);
	            i--;
	        }
	    }
	    if (lazyLoadSlots.length === 0) {
	        window.removeEventListener("scroll", delayedScroll);
	    }
	};
	
	/**
	 * Postpones the request for a slot until it is about to come into view
	 * Parameters expected are slot name and groups
	 */
	DFPPRequest.prototype.lazyLoadAd = function (domId, groups) {
	    var selector = bbcdotcom.adverts.adFilter.isLazyLoadedSlot(domId);
	    var nodeElement = document.getElementById('bbccom_' + domId + '_' + groups.join('_'));
	    var selectorElement = Utils.getParentElementByClass(nodeElement, selector);
	    if (selectorElement) {
	        lazyLoadSlots.push({
	            selectorElement: selectorElement,
	            domId: domId,
	            groups: groups
	        });
	    }
	
	    if (!this.delayedScroll) {
	        delayedScroll = throttle(this.scrollHandler, 200);
	        window.addEventListener("scroll", delayedScroll);
	    }
	};
	
	DFPPRequest.prototype.registerAdSlots = function (querySelector) {
	    var slots, slot;
	
	    function validateGroups(groups) {
	        return groups.map(function (group) {
	            return parseInt(group, 10);
	        }).filter(function (group) {
	            return !isNaN(group);
	        });
	    }
	
	    function extractAdProperties(slotId) {
	        var matches = slotId.match(/bbccom_(.+?)_([\d_]+)/),
	            type,
	            groups;
	
	        if (!matches) {
	            return ['', []];
	        }
	
	        type = matches[1];
	        groups = matches[2].split('_');
	
	        return {
	            slotType: type,
	            slotGroups: validateGroups(groups)
	        };
	    }
	
	    if (document.querySelectorAll) {
	        slots = document.querySelectorAll(querySelector);
	
	        for (var i = 0; i < slots.length; i++) {
	            slot = extractAdProperties(slots[i].id);
	
	            if (slot.slotType && slot.slotGroups.length) {
	                this.registerAd(slot.slotType, slot.slotGroups);
	            }
	        }
	    }
	    return false;
	};
	
	DFPPRequest.prototype.setLotameData = function () {
	    var dartCCKey = "ccaud",
	        dartCC = "";
	
	    if (typeof ccauds != 'undefined') {
	        for (var cci = 0; cci < ccauds.Profile.Audiences.Audience.length; cci++) {
	            if (cci > 0) dartCC += ",";
	            dartCC += ccauds.Profile.Audiences.Audience[cci].abbr;
	        }
	        googletag.cmd.push(function () {
	            googletag.pubads().setTargeting(dartCCKey, [dartCC]);
	        });
	    }
	};
	
	DFPPRequest.prototype.setGrapeshotData = function () {
	    var gsKey = "gs_cat";
	
	    if (typeof window.gs_channels !== 'undefined' && window.gs_channels !== 'DEFAULT') {
	        googletag.cmd.push(function () {
	            googletag.pubads().setTargeting(gsKey, window.gs_channels);
	        });
	        bbcdotcom.lotame.sendData(window.gs_channels.indexOf("+") > 0 ? window.gs_channels.split("+") : window.gs_channels, "grapeshot");
	    }
	};
	
	DFPPRequest.prototype.setProgrammesData = function () {
	    var id, name, el;
	    if (Sections.getSection(1) === 'programmes') {
	        try {
	            el = document.getElementsByClassName('br-masthead__title')[0].children[0];
	            id = el.href.split('/').pop();
	            name = el.innerText;
	            googletag.cmd.push(function () {
	                googletag.pubads().setTargeting('programme', id);
	                googletag.pubads().setTargeting('name', name);
	            });
	        } catch (err) {}
	    }
	};
	
	DFPPRequest.prototype.setKeyValues = function () {
	    var keyValues = KeyValues.getAll(),
	        key;
	    if (keyValues) {
	        for (key in keyValues) {
	            if (keyValues.hasOwnProperty(key) && keyValues[key] !== '') {
	                googletag.pubads().setTargeting(key, keyValues[key]);
	            }
	        }
	    }
	};
	
	DFPPRequest.prototype.setInitComplete = function (initComplete) {
	    this.initComplete = initComplete;
	    /***
	     * Call the async command queue
	     */
	    if (initComplete) {
	        cmd();
	        this.requestDeferredAds(false);
	    }
	};
	
	DFPPRequest.prototype.getInitComplete = function () {
	    return this.initComplete;
	};
	
	DFPPRequest.prototype.setExclusion = function (key) {
	    googletag.cmd.push(function () {
	        googletag.pubads().setCategoryExclusion(key);
	    });
	};
	
	module.exports = new DFPPRequest();

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clientWidth,
	    adSizeLeewayAgainstSlotSize = 20,
	    adSizeLeewayAgainstSlotSizeWithNoBorder = 30,
	    initialGroup = false,
	    initialGroupId = false,
	    currentGroup,
	    currentGroupId,
	    currentGroupSizes = {},
	    layoutDisableReset = false;
	
	var log = __webpack_require__(144)('adverts:layout');
	var classes = __webpack_require__(155);
	var utils = __webpack_require__(143);
	
	/**
	 * Use page width to determine GroupID and GroupSizes
	 */
	function determineCurrentGroupAndSizes(groups) {
	    var x, slot, slotSizes;
	    for (x in groups) {
	        utils.removeHtmlTagClass(classes.className('group', x));
	        if ((typeof groups[x].f === 'undefined' || clientWidth <= groups[x].f) && clientWidth >= groups[x].s) {
	            currentGroupId = +x;
	            currentGroup = groups[x];
	
	            if (!initialGroup && !initialGroupId) {
	                initialGroup = currentGroup;
	                initialGroupId = currentGroupId;
	            }
	
	            utils.addHtmlTagClass(classes.className('group', currentGroupId));
	
	            // Strip out sizes not compatible with page width
	            for (slot in currentGroup.slots) {
	                currentGroupSizes[slot] = [];
	                for (slotSizes in currentGroup.slots[slot]) {
	                    if (clientWidth >= currentGroup.slots[slot][slotSizes][0]) {
	                        currentGroupSizes[slot].push(currentGroup.slots[slot][slotSizes]);
	                    }
	                }
	            }
	        }
	    }
	}
	
	function isAdSizeSuitableForCurrentGroup(ad) {
	    var slotIndex,
	        slotSizes = bbcdotcom.adverts.layout.getAdCurrentGroupSizes(ad.getAdName()),
	        leeway = typeof ad.adType !== 'undefined' && (ad.adType === 'promo' || ad.adType === 'feature') ? adSizeLeewayAgainstSlotSizeWithNoBorder : adSizeLeewayAgainstSlotSize;
	
	    for (slotIndex = 0; slotIndex < slotSizes.length; slotIndex++) {
	        /*
	         * THE FOLLOWING DETECTS HEIGHT INCLUDING THE ADVERTISING TEXT AS TRYING TO DETECT HEIGHT ON THE
	         * AD_CONTAINER DOES NOT WORK IN IE8. THE AD IS INJECTED OUTSIDE OF THIS AD_CONTAINER
	         */
	
	        if (Math.abs(slotSizes[slotIndex][0] - ad.getWidth()) <= leeway && Math.abs(slotSizes[slotIndex][1] - ad.getCreativeHeight()) <= leeway) {
	            return true;
	        }
	    }
	}
	
	function shouldShowAd(ad) {
	    return ad.currentSlotHasGroup(currentGroupId) && isAdSizeSuitableForCurrentGroup(ad);
	}
	
	var showOrHideAdForCurrentGroup = function showOrHideAdForCurrentGroup(ad) {
	    if (bbcdotcom.domLoaded && !ad.isResponsive && !ad.isFluid) {
	        if (shouldShowAd(ad)) {
	            log.debug('=== Opening ' + ad.getAdId() + ' for current slot ===');
	            ad.open();
	        } else {
	            log.debug('=== Shutting ' + ad.getAdId() + ' for current slot ===');
	            ad.shut();
	        }
	    }
	};
	
	function reset() {
	    if (layoutDisableReset) {
	        log.debug('layoutDisableReset is set to', true);
	        return;
	    }
	
	    try {
	        var ad,
	            ads = bbcdotcom.adverts.adRegister.getAds();
	
	        bbcdotcom.adverts.layout.init(bbcdotcom.adverts.breakpoints.getGroups());
	
	        for (ad in ads) {
	            if (ads.hasOwnProperty(ad)) {
	                if (ad.indexOf('adsense') > -1) {
	                    bbcdotcom.adverts.adsenseRenderer.reset();
	                } else {
	                    // Now lets check if the ad is still suitable for displaying in its current group
	                    showOrHideAdForCurrentGroup(ads[ad]);
	                }
	            }
	        }
	    } catch (e) {
	        log.error(e);
	    }
	}
	
	module.exports = {
	    init: function init(groups) {
	        clientWidth = document.documentElement.clientWidth; // TODO - A better way to detect width inline with media selectors
	        determineCurrentGroupAndSizes(groups);
	        if (!layoutDisableReset) {
	            // Reset layout to show/hide ads
	            bbcdotcom.addLoadEvent(function () {
	                window.addEventListener('resize', utils.debounce(reset, 500));
	            });
	        }
	    },
	    /**
	     * Deprecated
	     */
	    moveAd: function moveAd(from, to) {
	        //var iFrame,
	        //    iFrameDocument,
	        //    iFrameBody,
	        //    iFrameInnerHTML,
	        //    domFrom = document.getElementById(from),
	        //    domTo = document.getElementById(to);
	        //if (from !== to && domFrom !== null && domTo !== null) {
	        //    iFrame = domFrom.getElementsByTagName('iframe')[0];
	        //    if (typeof iFrame !== 'undefined') {
	        //        iFrameDocument = iFrame.contentDocument || iFrame.contentWindow.document;
	        //        if (iFrameDocument) {
	        //            iFrameBody = iFrameDocument.getElementsByTagName('body')[0];
	        //            iFrameInnerHTML = domFrom.innerHTML.replace(/<iframe.*>.*<\/iframe>/, iFrameBody.innerHTML);
	        //        }
	        //    }
	        //    domTo.innerHTML = iFrameInnerHTML || domFrom.innerHTML;
	        //    domFrom.innerHTML = '';
	        //}
	        //domFrom = domTo = null;
	    },
	    setClientWidth: function setClientWidth(width) {
	        clientWidth = width;
	    },
	    getClientWidth: function getClientWidth() {
	        return clientWidth;
	    },
	    getCurrentGroup: function getCurrentGroup() {
	        return currentGroup;
	    },
	    getCurrentGroupId: function getCurrentGroupId() {
	        return currentGroupId;
	    },
	    /**
	     * For testing
	     */
	    setCurrentGroupId: function setCurrentGroupId(groupId) {
	        currentGroupId = groupId;
	    },
	    /**
	     * TODO - Deprecate in favour of using the method below
	     * @returns array of all current group ad slot sizes
	     */
	    getCurrentGroupSizes: function getCurrentGroupSizes() {
	        return currentGroupSizes;
	    },
	    /**
	     * Should use this as opposed to the method above
	     * @param adId
	     * @returns array of current slot sizes for an ad
	     */
	    getAdCurrentGroupSizes: function getAdCurrentGroupSizes(adId) {
	        if (typeof currentGroupSizes[adId] !== 'undefined') {
	            return currentGroupSizes[adId];
	        } else if (typeof currentGroupSizes[adId.slice(0, adId.lastIndexOf('_'))] !== 'undefined') {
	            return currentGroupSizes[adId.slice(0, adId.lastIndexOf('_'))];
	        } else if (typeof currentGroupSizes[adId.slice(0, adId.indexOf('_'))] !== 'undefined') {
	            return currentGroupSizes[adId.slice(0, adId.indexOf('_'))];
	        }
	        return [];
	    },
	    overrideGroupSizes: function overrideGroupSizes(slots) {
	        var slot;
	        currentGroupSizes = [];
	        for (slot in slots) {
	            currentGroupSizes[slot] = slots[slot];
	        }
	    },
	    disableReset: function disableReset() {
	        layoutDisableReset = true;
	    },
	    reset: reset,
	    /**
	     * For testing.
	     */
	    r: function r() {
	        layoutDisableReset = false;
	        currentGroup = {};
	        currentGroupId = 0;
	        currentGroupSizes = {};
	    }
	};

/***/ }),
/* 200 */
/***/ (function(module, exports) {

	"use strict";
	
	var register = {},
	    factory,
	    currentAdId,
	
	/**
	 *
	 * TODO - Think about moving this logic into separate ad types that extend the standard ad type
	 *
	 * OPTIONS
	 * - isResponsive (Ad does not check to see if it is still suitable for the current slot as the ad will work in a responsive environment and does not shut)
	 * - allowScreenReader (Allows for tabbing through elements within an ad)
	 * - hasAdText (Displays associated ad text such as IS SPONSORED BY)
	 * - adType (Allows different slot renderers and classes to be used)
	 * - isDfppRequest (Will not be added to the dfp request as it is a different ad type)
	 * - istFluid (will enable the fluid format for the slot to enable rendering of GoogleNative ads)
	 *
	 */
	adConfig = {
	    "wallpaper": {
	        "isResponsive": true
	    },
	    "interstitial": {
	        "isResponsive": true
	    },
	    "native": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": false
	    },
	    "native_slice_l": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": true
	    },
	    "native_slice_r": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": true
	    },
	    "infeed": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": false
	    },
	    "infeed_news_home": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": true
	    },
	    "infeed_news_index": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": true,
	        "isFluid": true
	    },
	    "infeed_news_story": {
	        "allowScreenReader": true,
	        "isResponsive": true,
	        "hasAdText": true,
	        "isFluid": true
	    },
	    "adsense": {
	        "adType": "adsense",
	        "isResponsive": false,
	        "hasAdText": true
	    },
	    "outbrain": {
	        "adType": "outbrain",
	        "isResponsive": true,
	        "isDfppRequest": false
	    },
	    "promo": {
	        /* catch all */
	        "adType": "promo",
	        "hasAdText": false
	    },
	    "sponsor": {
	        "adType": "sponsor",
	        "isResponsive": true,
	        "size": [88, 31]
	    },
	    "sponsorbig": {
	        "adType": "sponsorbig",
	        "isResponsive": true,
	        "size": [132, 64]
	    },
	    "module": {
	        "adType": "module",
	        "isResponsive": true,
	        "size": [88, 31]
	    },
	    "module_worldinpictures": {
	        "adType": "module_worldinpictures",
	        "isResponsive": false
	    },
	    "sponsor_section": {
	        "adType": "sponsor_section",
	        "isResponsive": false,
	        "size": [88, 31]
	    },
	    "ad_feature_rc": {
	        "adType": "feature",
	        "hasAdText": false
	    },
	    "sponsor_banner": {
	        "adType": "sponsor_banner",
	        "isResponsive": false,
	        "size": [88, 31]
	    },
	    "googlenative": {
	        "isFluid": true
	    }
	};
	
	module.exports = {
	    setAdFactory: function setAdFactory(adFactory) {
	        factory = adFactory;
	    },
	    /**
	     * @param adId eg mpu, leaderboard
	     */
	    registerAd: function registerAd(adId) {
	        if (adId !== '' && typeof register[adId] === 'undefined') {
	            register[adId] = new bbcdotcom.adverts.ad(adId);
	            if (typeof adConfig[adId] !== 'undefined') {
	                register[adId].setConfig(adConfig[adId]);
	            } else if (typeof adConfig[adId.slice(0, adId.indexOf('_'))] !== 'undefined') {
	                register[adId].setConfig(adConfig[adId.slice(0, adId.indexOf('_'))]);
	            }
	        }
	        return register[adId];
	    },
	    setCurrentAdId: function setCurrentAdId(adId) {
	        currentAdId = adId;
	    },
	    getCurrentAdId: function getCurrentAdId() {
	        return currentAdId;
	    },
	    getCurrentAd: function getCurrentAd() {
	        // TODO - Remove if and else and return register[currentAdId] once apps use the correct API bbcdotcom.show()
	        if (bbcdotcom.config.isActive('ads')) {
	            if (typeof currentAdId !== 'undefined' && register[currentAdId]) {
	                return register[currentAdId];
	            }
	            return {
	                setBaseContent: function setBaseContent() {},
	                show: function show() {},
	                close: function close() {}
	            };
	        } else {
	            return {
	                show: function show() {},
	                close: function close() {}
	            };
	        }
	    },
	    getAd: function getAd(adId) {
	        if (typeof register[adId] !== 'undefined') {
	            return register[adId];
	        }
	    },
	    getAds: function getAds() {
	        return register;
	    },
	    getAdCount: function getAdCount() {
	        var k;
	        var count = 0;
	        for (k in register) {
	            if (register.hasOwnProperty(k)) {
	                count++;
	            }
	        }
	        return count;
	    },
	    // TODO - For tests only, fix later.
	    r: function r() {
	        register = {};
	        currentAdId = undefined;
	    }
	};

/***/ }),
/* 201 */
/***/ (function(module, exports) {

	"use strict";
	
	/* bbcdotcom Command Queue
	 * =======================
	 * 
	 * The purpose of this module is to pick up requests that are made to bbcdotcom before
	 * it has finished initialising. This module will fetch and execute any function in 
	 * bbcdotcom.cmd array in the order it was populated. 
	 * 
	 * After all the commands are executed and initialisation is complete the array will 
	 * automatically execute all functions sent to it.
	 * 
	 * Use example
	 * bbcdotcom.cmd = bbcdotcom.cmd || [];
	 * bbcdotcom.cmd.push( () => { bbcdotcom.registerAd( ... ) } );
	 */
	
	var cmd = function cmd() {
	  window.bbcdotcom.cmd = window.bbcdotcom.cmd || [];
	
	  if (window.bbcdotcom.cmd) {
	    setTimeout(function () {
	
	      while (window.bbcdotcom.cmd.length > 0) {
	        var func = window.bbcdotcom.cmd.shift();
	        func();
	      }
	
	      Object.defineProperty(window.bbcdotcom.cmd, "push", {
	        value: function value(_value) {
	          if (typeof _value === 'function') {
	            _value();
	          }
	        }
	      });
	    }, 500);
	  }
	};
	
	module.exports = cmd;

/***/ }),
/* 202 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Internal map of event listener functions. Each property is an event with the corresponding
	 * value being an array of the listeners which are bound to that event.
	 *
	 * @type {{}}
	 */
	var listeners = {};
	
	module.exports = {
	
	    /**
	     * Bind a listener function to a particular event or list of space separated events.
	     *
	     * @param {string} event The event to which we want to listen
	     * @param {function} listener The function to call when the event is triggered
	     */
	    on: function on(event, listener) {
	        var i;
	
	        if (typeof listener !== 'function') {
	            throw new TypeError('Event handler must be a function');
	        }
	
	        var events = event.split(' ');
	        for (i = 0; i < events.length; i++) {
	            listeners[events[i]] = listeners[events[i]] || [];
	            listeners[events[i]].push(listener);
	        }
	
	        return this;
	    },
	
	    /**
	     * Trigger an event calling any listeners which are bound with the arguments given.
	     *
	     * @param {string} event The name of the event to trigger
	     * @param {...*} arguments Any arguments which should be passed to the listener functions
	     */
	    trigger: function trigger(event) {
	        var i;
	
	        if (!listeners.hasOwnProperty(event)) {
	            return this;
	        }
	
	        for (i = 0; i < listeners[event].length; i++) {
	            listeners[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
	        }
	
	        return this;
	    },
	
	    /**
	     * Unbind listener(s) from a particular event. If a listener function is given, only this listener
	     * is unbound. If no listener is given, all listeners for a particular event are unbound.
	     *
	     * @param {string} event The event whose listener(s) we want to unbind
	     * @param {function=} listener Optional listener function to unbind
	     */
	    off: function off(event, listener) {
	        if (!listeners.hasOwnProperty(event)) {
	            return this;
	        }
	
	        if (typeof listener === 'undefined') {
	            delete listeners[event];
	            return this;
	        }
	
	        while (listeners[event].indexOf(listener) >= 0) {
	            listeners[event].splice(listeners[event].indexOf(listener), 1);
	        }
	
	        if (listeners[event].length === 0) {
	            delete listeners[event];
	        }
	
	        return this;
	    },
	
	    /**
	     * Remove all event listeners for all events.
	     */
	    clear: function clear() {
	        listeners = {};
	        return this;
	    }
	};

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * bbcdotcom.adverts.adUnit is responsible for providing the correct adUnits (used to be called 'zone') to DFP.
	 *
	 * adUnits is a forward-slash delimited string for targetting the best adverts to a page.
	 *
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var keyValues = __webpack_require__(176);
	var utils = __webpack_require__(143);
	var config = __webpack_require__(150);
	var adUnitWebService = __webpack_require__(204);
	
	var zoneData = {},
	    DFP_ID = '/4817/',
	    DFP_SUITE_DEFAULT = 'desktop',
	    DFP_SUITE_DEVICE_WIDTH_SWITCH = 900,
	    AD_UNIT_DEFAULT = 'bbccom.live.site.news/',
	    AD_UNIT_2_DEFAULT = '_default',
	    UNKNOWN = 'unknown',
	    CHANNEL_KEY = 'channel',
	    SECTION_KEY = 'sectn',
	    SUB_SECTION_KEY = 'subsect',
	    adUnit = AD_UNIT_DEFAULT,
	    customAdUnit = false,
	    dfpSuite = DFP_SUITE_DEFAULT,
	    adUnits2to9 = '',
	    previewUid = false,
	    queryStringOverride = false,
	    allowedSites = {
	    /* Desktop adUnits */
	    live: 'bbccom.live.site.news/',
	    www: 'bbccom.live.site.www/',
	    specials: 'bbccom.live.site.specialfeatures/',
	    preview: 'bbccom.preview.site.test/',
	    test: 'bbccom.test.site.flash/',
	    /* Mobile adUnits */
	    live_mobile: 'bbccom.live.site.mobile.news/',
	    www_mobile: 'bbccom.live.site.mobile.www/',
	    specials_mobile: 'bbccom.live.site.specialfeatures/',
	    preview_mobile: 'bbccom.preview.site.mobile.news/',
	    test_mobile: 'bbccom.qa.site.mobile.news/',
	    /* WorldService adUnits - used for testing only */
	    test_arabic: 'bbcws.test.site.mobile.arabic/',
	    test_russian: 'bbcws.test.site.mobile.russian/',
	    /* BBC Earth */
	    live_earth: 'bbcearth.com/',
	    test_earth: 'bbcearth.test.com/',
	    /* AMP Ad Units */
	    test_amp_news: 'bbccom.test.amp.news/',
	    live_amp_news: 'bbccom.live.amp.news/',
	    /* Sport App */
	    live_sport_app: 'BBCSportAppIOS/',
	    /* EMBED Ad Units */
	    live_embed: 'bbccom.embedplayer/',
	    test_embed: 'bbccom.test.embedplayer/',
	    /* BBC Reel */
	    live_reel: 'bbccom.live.site.reel/',
	    test_reel: 'bbccom.test.site.reel/'
	},
	    WORLD_SERVICE_AD_UNIT_PREFIX = {
	    live_desktop: 'bbcworldservice.live.site.',
	    test_desktop: 'bbcworldservice.test.site.',
	    live_mobile: 'bbcws.live.site.mobile.',
	    test_mobile: 'bbcws.test.site.mobile.'
	},
	    WORLD_SERVICE_AD_UNIT_SUFFIX_MAP = {
	    japanese: 'japan'
	},
	    VERTICALS_AD_UNITS_PREFIX = {
	    live: 'bbccom.live.site.',
	    test: 'bbccom.test.site.'
	},
	    AD_UNIT2_EXCEPTIONS = {
	    '^\/sport\/football\/teams\/(liverpool|manchester-city)': 'sport_football$1_content',
	    '^\/news\/election\/us2016': 'news_uscanada_content'
	},
	    sections,
	    adSections,
	    windowLocation = '';
	
	/**
	 * Based on visitor's browser width, determine whehter to return mobile or desktop suite.
	 */
	var assignDfpSuite = function assignDfpSuite(clientWidth) {
	    if (clientWidth < DFP_SUITE_DEVICE_WIDTH_SWITCH) {
	        dfpSuite = 'mobile';
	    } else {
	        dfpSuite = 'desktop';
	    }
	};
	
	/**
	 * Get the world service suffix to add to the primary adUnit. Basically adSections[0] run through
	 * WORLD_SERVICE_AD_UNIT_SUFFIX_MAP to see if there is an override and some special rules for China
	 *
	 * eg bbcworldservice.live.site.<suffix>/
	 *
	 * @returns {string}
	 */
	var getWorldServiceAdUnitSuffix = function getWorldServiceAdUnitSuffix() {
	    var adUnitSuffix = WORLD_SERVICE_AD_UNIT_SUFFIX_MAP[adSections[0]] || adSections[0];
	    if (adSections[0] === 'zhongwen' || adSections[0] === 'ukchina') {
	        adUnitSuffix += adSections[1];
	    }
	
	    if (dfpSuite === 'desktop' && adUnitSuffix === 'russian') {
	        //BBCCOM-7713
	        adUnitSuffix = "russia";
	    }
	
	    return adUnitSuffix;
	};
	
	/**
	 * Determine AdUnit 1
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var deriveAdUnit1 = function deriveAdUnit1() {
	    var mDotRegExp = new RegExp('(m.stage.|m.)bbc.co(m|m\/|.uk|.uk\/)'),
	        isTestEnv = utils.isTestEnv(),
	        adUnitOverride = utils.getUriParamByName('ad-unit', false),
	        siteOverride = utils.getUriParamByName('site', false),
	        uidOverride = utils.getUriParamByName('uid', false);
	
	    // User override for previewing an advert creative
	    if (uidOverride) {
	        previewUid = uidOverride;
	    }
	    if (!utils.isLiveEnv() && adUnitOverride) {
	        // Allow ad unit to be overridden un the URI
	        adUnit = adUnitOverride + '/';
	        queryStringOverride = true;
	    } else if (siteOverride === 'preview') {
	        adUnit = allowedSites.preview;
	        queryStringOverride = true;
	    } else if (siteOverride && typeof allowedSites[siteOverride] !== 'undefined') {
	        // User override of site
	        adUnit = allowedSites[siteOverride];
	        queryStringOverride = true;
	    } else if (sections[0] === 'worldservice' && typeof adSections[0] !== 'undefined') {
	        // World Service
	        // bbcworldservice.live.site.<adSections[0]>/ eg bbcworldservice.live.site.arabic/
	        adUnit = WORLD_SERVICE_AD_UNIT_PREFIX[(isTestEnv ? 'test' : 'live') + '_' + dfpSuite] + getWorldServiceAdUnitSuffix() + '/';
	    } else if (/^(earth)$/.test(adSections[0])) {
	        // Earth
	        adUnit = isTestEnv ? allowedSites.test_earth : allowedSites.live_earth;
	    } else if (isTestEnv && utils.getCookie('ad-unit') !== 'live') {
	        // Visitor is on sandbox/int/test, therefore show test adverts from test site
	        adUnit = dfpSuite === 'desktop' ? allowedSites.test : allowedSites.test_mobile;
	    } else if (config.isSportApp()) {
	        // Sport Mobile App
	        adUnit = allowedSites.live_sport_app;
	    } else if (sections[0] === 'homepage') {
	        // Homepage
	        adUnit = dfpSuite === 'desktop' ? allowedSites.www : allowedSites.www_mobile;
	    } else if (/^(autos|capital|culture|future|travel|worklife)$/.test(adSections[0])) {
	        // Verticals
	        var site = adSections[0].replace(/autos/, 'auto');
	        adUnit = VERTICALS_AD_UNITS_PREFIX[isTestEnv ? 'test' : 'live'] + site + '/';
	    } else if (mDotRegExp.test(windowLocation.href)) {
	        // Mobile vs Desktop
	        adUnit = dfpSuite === 'desktop' ? allowedSites.live : allowedSites.live_mobile;
	    } else if (/(.com|.co.uk|.net)\/specialfeatures\//.test(windowLocation.href)) {
	        // Special Features
	        adUnit = dfpSuite === 'desktop' ? allowedSites.specials : allowedSites.specials_mobile;
	    } else if (/\/embed$/.test(windowLocation.pathname)) {
	        // Embed video
	        adUnit = isTestEnv ? allowedSites.test_embed : allowedSites.live_embed;
	    } else if (/(.com|.co.uk)\/reel/.test(windowLocation.href)) {
	        // Reel
	        adUnit = isTestEnv ? allowedSites.test_reel : allowedSites.live_reel;
	    } else {
	        // Default site (needs to be the right default for mobile/desktop based on width)
	        adUnit = dfpSuite === 'mobile' ? allowedSites.live_mobile : AD_UNIT_DEFAULT;
	    }
	};
	
	/**
	 * Using the current page, determine what the zone should be.  Uses sections to break
	 * down the path of the Uri into logical sections.
	 */
	var deriveAdUnit2to9FromUri = function deriveAdUnit2to9FromUri() {
	    var i,
	        pattern,
	        re,
	        out = AD_UNIT_2_DEFAULT,
	        urlPath = '/' + adSections.join('/');
	
	    if (typeof adSections !== 'undefined' && adSections.length !== 0 && adSections[0] !== UNKNOWN) {
	
	        // Make sure all section parts are defined (make empty if not)
	        for (i = 0; i < 5; i++) {
	            adSections[i] = typeof adSections[i] === 'undefined' ? '' : adSections[i];
	            sections[i] = typeof sections[i] === 'undefined' ? '' : sections[i];
	        }
	        // Very Specific Exceptions
	        for (pattern in AD_UNIT2_EXCEPTIONS) {
	            re = new RegExp(pattern);
	            if (re.test(urlPath)) {
	                // Found pattern match
	                // eg {"\/sport\/football\/(hello|world)": "sport_football$1_content"} => "sport_footballhello_content"
	                out = AD_UNIT2_EXCEPTIONS[pattern].replace('$1', RegExp.$1).replace('$2', RegExp.$2);
	                break;
	            }
	        }
	        // Broad Exceptions
	        if (out === AD_UNIT_2_DEFAULT) {
	            if (adSections[0] === 'homepage') {
	                // BBC Homepage eg www.bbc.com/
	                out = 'bbc_homepage_int';
	            } else if (adSections[0] === 'reel') {
	                out = adSections[1] === '' ? 'reel_homepage' : 'reel_other';
	            } else if (adSections[1] === '') {
	                // Frontpage - News/Sport/Weather/blah eg news_homepage_int
	                out = adSections[0] + '_homepage_int';
	                adSections[1] = 'homepage';
	            } else if (adSections[0] === 'news' && sections[1] === 'world' && sections[2] !== '') {
	                // /news/world complications - NOTE adSections vs sections
	                // eg sections=/news/world/asia/india and adSections=/news/worldasia/india => news_asia_content with sectn=india
	                out = adSections[0] + '_' + sections[2] + '_content';
	            } else if (adSections[0] === 'specialfeatures') {
	                // Specials eg horizonsbusiness_home, horizonsbusiness_episodes
	                // eg /specialfeatures/horizonsbusiness/
	                out = adSections[1] + '_' + (adSections[2] === '' ? 'home' : adSections[2]);
	            } else if (adSections[0] === 'zhongwen' || adSections[0] === 'ukchina') {
	                // e.g. http://www.bbc.com/zhongwen/trad/world > zhongwentrad_world_content
	                out = adSections[0] + adSections[1] + '_' + (adSections[2] === '' ? 'home' : adSections[2]) + '_content';
	            } else {
	                // Standard
	                // eg /news/business
	                out = adSections[0] + '_' + adSections[1] + '_content';
	            }
	        }
	        keyValues.set(CHANNEL_KEY, adSections[0]);
	        keyValues.set(SECTION_KEY, adSections[1]);
	        keyValues.set(SUB_SECTION_KEY, adSections[2]);
	    }
	    return out.replace(/-/, '');
	};
	
	/**
	 * Determine AdUnit 2 to 9
	 * eg /4817/bbccom.qa.site.mobile.news/sport_homepage_int
	 *          [      ad unit 1         ] [    ad unit 2   ]
	 */
	var deriveAdUnit2to9 = function deriveAdUnit2to9(serversideAdUnits2to9) {
	    if (typeof serversideAdUnits2to9 !== "undefined" && serversideAdUnits2to9 === 'frameworks_barlesque') {
	        var data = this.processZoneData(windowLocation.pathname, adUnitWebService.zones);
	        adUnits2to9 = data.zone;
	    } else if (typeof serversideAdUnits2to9 !== 'undefined') {
	        adUnits2to9 = serversideAdUnits2to9;
	    } else {
	        adUnits2to9 = deriveAdUnit2to9FromUri();
	    }
	};
	
	module.exports = {
	    init: function init(clientWidth, serversideAdUnits2to9, adSectionsArray, sectionsArray) {
	        windowLocation = config.getWindowLocation();
	        sections = sectionsArray;
	        adSections = adSectionsArray;
	        if (typeof clientWidth === "number") {
	            assignDfpSuite(clientWidth);
	        }
	        deriveAdUnit1();
	        deriveAdUnit2to9(serversideAdUnits2to9);
	    },
	    get: function get() {
	        if (customAdUnit === false) {
	            return DFP_ID + adUnit + adUnits2to9;
	        } else if (queryStringOverride === true) {
	            return DFP_ID + adUnit + (customAdUnit.indexOf('/') !== -1 ? customAdUnit.split('/')[1] : '/' + AD_UNIT_2_DEFAULT);
	        } else {
	            return DFP_ID + customAdUnit + (customAdUnit.indexOf('/') !== -1 ? '' : '/' + AD_UNIT_2_DEFAULT);
	        }
	    },
	    setUid: function setUid(overrideUid) {
	        previewUid = overrideUid;
	    },
	    setAdUnit: function setAdUnit(overrideAdUnit) {
	        if (typeof overrideAdUnit !== 'undefined') {
	            if ('undefined' !== typeof allowedSites[overrideAdUnit]) {
	                adUnit = allowedSites[overrideAdUnit];
	            }
	            if (/(bbccom\.(test|live)\.site|bbcearth\.com|bbcearth\.test\.com)/.test(overrideAdUnit)) {
	                customAdUnit = overrideAdUnit;
	            }
	        }
	    },
	    getPreviewUid: function getPreviewUid() {
	        return previewUid;
	    },
	    getAdUnit1: function getAdUnit1() {
	        return adUnit.endsWith('/') ? adUnit.substr(0, adUnit.length - 1) : adUnit;
	    },
	    getAdUnits2to9: function getAdUnits2to9() {
	        return adUnits2to9;
	    },
	    /*
	     * NOTE - This logic is only here for sites that are served of CDN
	     * TODO - Rename vars from zone to adUnit (New terminology)
	     */
	    processZoneData: function processZoneData(href, zone) {
	        var x, z;
	        if (('undefined' === typeof zone.uri || -1 !== href.indexOf(zone.uri)) && 'undefined' !== typeof zone.data) {
	            for (x in zone.data) {
	                zoneData[x] = zone.data[x];
	                if ('undefined' !== typeof zone.zones) {
	                    for (z in zone.zones) {
	                        if ('undefined' !== typeof zone.zones[z].uri) {
	                            href = href.replace(zone.uri, '');
	                        }
	                        this.processZoneData(href, zone.zones[z]);
	                    }
	                }
	            }
	        }
	        return zoneData;
	    },
	    /*
	     * For testing only, may look at newing up a new object each time.
	     */
	    r: function r() {
	        windowLocation = '';
	        adUnit = AD_UNIT_DEFAULT;
	        adUnits2to9 = AD_UNIT_2_DEFAULT;
	        dfpSuite = DFP_SUITE_DEFAULT;
	        customAdUnit = false;
	        previewUid = false;
	        queryStringOverride = false;
	    }
	};

/***/ }),
/* 204 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = {
	    zones: {
	        data: {
	            uri: "/",
	            site: "bbccom.live.site.mobile.news",
	            zone: ""
	        },
	        zones: [{
	            uri: "specialfeatures/",
	            data: {
	                zone: "news_specialfeatures_content"
	            },
	            zones: [{
	                uri: "horizonsbusiness",
	                data: {
	                    zone: "horizonsbusiness_home"
	                },
	                zones: [{
	                    uri: "/megatrend",
	                    data: {
	                        zone: "horizonsbusiness_other"
	                    }
	                }, {
	                    uri: "/clips-library",
	                    data: {
	                        zone: "horizonsbusiness_clips"
	                    }
	                }, {
	                    uri: "/episodes",
	                    data: {
	                        zone: "horizonsbusiness_episodes"
	                    }
	                }, {
	                    uri: "/episode",
	                    data: {
	                        zone: "horizonsbusiness_episode"
	                    }
	                }]
	            }]
	        }, {
	            uri: "wwscripts/",
	            data: {
	                zone: "wwscripts_content"
	            },
	            zones: [{
	                uri: "test/",
	                data: {
	                    zone: "wwscripts_test_content"
	                },
	                zones: [{
	                    uri: "orb-web-service",
	                    data: {
	                        zone: "wwscripts_test_orbwebservice"
	                    }
	                }]
	            }]
	        }]
	    }
	};

/***/ }),
/* 205 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function (adID, groups) {
	
	    var ad, slot, slotDomChildElement;
	
	    var currentGroupId = bbcdotcom.adverts.layout.getCurrentGroupId();
	
	    if (window.bbcdotcom && bbcdotcom.ad && bbcdotcom.isActive && bbcdotcom.isActive('ads')) {
	        ad = bbcdotcom.ad(adID);
	        if (typeof ad !== 'undefined' && !ad.hasAnyGroupAlreadyBeenRegistered([groups])) {
	            ad.registerSlotGroups(groups);
	            if (groups.indexOf(currentGroupId) >= 0) {
	
	                ad.setCurrentSlotGroups(groups);
	
	                slot = document.getElementById('bbccom_' + ad.getAdId() + '_' + groups.join('_'));
	                slotDomChildElement = slot.firstElementChild || slot.firstChild;
	                if (slotDomChildElement) {
	                    slotDomChildElement.id = 'bbccom_' + ad.getAdId();
	                }
	                bbcdotcom.utils.addTagClass(slot, 'bbccom_' + ad.adType + '_slot');
	            }
	        }
	    }
	};

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(150);
	var sections = __webpack_require__(152);
	var utils = __webpack_require__(143);
	var AnalyticsHelper = __webpack_require__(171);
	
	function getDeprecatedSlotList() {
	    var windowLocation = config.getWindowLocation(),
	        section = sections.getSection(0),
	        index = sections.getSection(1),
	        sub_index = sections.getSection(2),
	        sub_section = section + '|' + index,
	        out = ['inread', 'infeed_sport_story', 'infeed_sport_index', 'infeed_sport_fp', 'infeed_ctp', 'native_ctp'],
	
	    /**
	     * BBCCOM-7985, GNLADAPPS-106
	     */
	    outBySection = {
	        'worldservice': ['sponsor_section', 'mpu_bottom'],
	        'homepage': ['module_feature-2', 'parallax'],
	        'travel': ['responsive_box_1', 'promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc', 'native_responsive'],
	        'future': ['responsive_box_1', 'promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc'],
	        'worklife': ['responsive_box_1', 'promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc'],
	        'earth': ['parallax', 'verticalnavbar', 'sponsor_section', 'responsive_box_1', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc', 'native_side'],
	        'culture': ['promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc'],
	        'capital': ['responsive_box_1', 'promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc'],
	        'autos': ['parallax', 'verticalnavbar', 'sponsor_section', 'responsive_box_1', 'promo_feature_responsive', 'promo_feature_1', 'promo_feature_2', 'promo_feature_3', 'ad_feature_rc'],
	        'news': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module', 'native_slice_r'],
	        'sport': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'worldservice|persian': ['adsense'],
	        'worldservice|swahili': ['adsense'],
	        'news|entertainment-arts': ['adsense', 'outbrain', 'outbrain_tr_1', 'outbrain_ar_5', 'outbrain_ar_7', 'outbrain_ar_8', 'outbrain_ar_9']
	    },
	        exceptionsBySection = {
	        'news|business': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'news|technology': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'news|resources': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|golf': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|tennis': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|football': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|formula1': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|equestrian': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|horse-racing': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|olympics': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|move-like-never-before': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module'],
	        'sport|home-of-the-english-premier-league': ['sponsor', 'sponsor_section', 'sponsor_banner', 'module']
	    };
	
	    if (config.isTlSportStoryEnabled()) {
	        out = out.filter(function (element) {
	            return element !== 'infeed_sport_story';
	        });
	    }
	    if (config.isTlSportIndexEnabled()) {
	        out = out.filter(function (element) {
	            return element !== 'infeed_sport_index';
	        });
	    }
	    if (config.isTlSportFpEnabled()) {
	        out = out.filter(function (element) {
	            return element !== 'infeed_sport_fp';
	        });
	    }
	    if (/testctp/i.test(window.location.href)) {
	        out = out.filter(function (element) {
	            return element !== 'infeed_ctp';
	        });
	        out = out.filter(function (element) {
	            return element !== 'native_ctp';
	        });
	    }
	
	    /**
	     * BBCCOM-8012: This page uses live stream, shouldn't include 'mpu' in adsToDisplay
	     */
	    if (/^\/news\/world\/us_and_canada\/states/.test(windowLocation.pathname)) {
	        out.push('mpu');
	    }
	
	    if (outBySection[section]) {
	        out = out.concat(outBySection[section]);
	    }
	    if (outBySection[sub_section]) {
	        out = out.concat(outBySection[sub_section]);
	    }
	    if (exceptionsBySection[sub_section]) {
	        out = out.filter(function (element) {
	            return !exceptionsBySection[sub_section].includes(element);
	        });
	    }
	    /*
	     * GNLADAPPS-183
	     */
	    if ('future/earth/culture/capital/autos/worklife'.indexOf(section) !== -1) {
	        if (/(\/story\/)(\d{8})(-)/.test(windowLocation.pathname)) {
	            out.push('native_responsive');
	        } else {
	            out.push('native_side');
	        }
	    }
	    if (!(section === 'news' && AnalyticsHelper.getPageType() === 'STORY') && section !== 'homepage') {
	        out.push('native');
	    }
	    if (!config.isPlatinumEnabled()) {
	        out.push('platinum');
	    }
	
	    /*
	     * GNLADAPPS-219, GNLADAPPS-220
	     */
	    if (sub_section === 'news|the-reporters' || sub_section === 'news|special-reports' || sub_section === 'news|world' && sub_index === 'radio-tv') {
	        out.push('infeed_news_index');
	        out.push('native_slice_l');
	    }
	    /*
	     * No interstitial on Sport App, Autos, Worldservice except Story pages on Arabic|Japan|Mundo|Brasil
	     */
	    if (config.isSportApp() || section === 'autos' || section === 'japan' && AnalyticsHelper.getPageType() !== 'STORY' || section === 'worldservice' && (AnalyticsHelper.getPageType() !== 'STORY' || AnalyticsHelper.getPageType() === 'STORY' && "arabic|mundo|portuguese|japanese".indexOf(index) === -1)) {
	        out.push('interstitial');
	    }
	
	    if (AnalyticsHelper.getPageType() === 'VIDEO' && section === 'sport') {
	        out.push('leaderboard');
	    }
	
	    // Google native test
	    if (utils.isTestEnv() && /[?|&]googlenative/.test(window.location.href) && AnalyticsHelper.getPageType() === 'STORY') {
	        out.push('mpu');
	        out.push('leaderboard');
	    }
	
	    // Google native test
	    if (utils.isTestEnv() && /[?|&]googlenative/.test(window.location.href) && AnalyticsHelper.getPageType() === 'INDEX') {
	        out.push('mpu');
	        out.push('leaderboard');
	    }
	
	    if (section === 'news' && document.getElementsByClassName('column--single-column-layout').length > 0 && AnalyticsHelper.getPageType() === 'STORY') {
	        out.push('mpu');
	        out.push('mpu_bottom');
	    }
	
	    return out.join('|');
	}
	
	function isLazyLoadedSlot(adId) {
	    var section = sections.getSection(0),
	        lazyLoadBySection = {
	        /* Section, slot, element to look out for on scroll event to trigger the ad request*/
	        'homepage|mpu_bottom': 'module--secondary-special-features',
	        'homepage|infeed': 'module__content',
	        'news|infeed_news_story': 'features-and-analysis__stories',
	        'news|infeed_news_home': 'gel-wrap'
	    };
	    return lazyLoadBySection[section + '|' + adId];
	}
	
	module.exports = {
	    build: function build(adsToDisplay) {
	        var deprecatedSlot = getDeprecatedSlotList();
	
	        if (config.isSportApp()) {
	            return adsToDisplay.filter(function (element) {
	                return element.includes('mpu') && !element.includes('mpu_') && !element.includes('_mpu');
	            });
	        } else {
	            return adsToDisplay.filter(function (element) {
	                return !deprecatedSlot.match(new RegExp("(^|\\|)(" + element + ")($|\\|)", "g")) && !isLazyLoadedSlot(element);
	            });
	        }
	    },
	    isSlotEnabled: function isSlotEnabled(adId) {
	        var deprecatedSlot = getDeprecatedSlotList();
	        return !deprecatedSlot.match(new RegExp("(^|\\|)(" + adId + ")($|\\|)", "g"));
	    },
	    isLazyLoadedSlot: isLazyLoadedSlot
	};

/***/ }),
/* 207 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * 1. The first leaderboard slot size is directly aligned to style/orb/css/bbccom-async.css
	 * If you are changing the first size in an ads breakpoint please check it is aligned with the styles for the group
	 */
	var groups = {
	    0: {
	        s: 0,
	        f: 319,
	        slots: {
	            wallpaper: [],
	            leaderboard: [],
	            mpu: [],
	            mpu_middle: [],
	            mpu_bottom: [],
	            sponsor: [],
	            module: [],
	            module_worldinpictures: [],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_slice_l": [[5, 5]],
	            "native_slice_r": [[5, 5]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            adsense: [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]],
	            "infeed": [[12, 12]],
	            "platinum": [[88, 31]]
	        }
	    },
	    1: {
	        s: 320,
	        f: 399,
	        slots: {
	            wallpaper: [],
	            leaderboard: [[320, 50], [300, 50]],
	            mpu: [[300, 50], [320, 50], [300, 250]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            adsense: [[300, 252]],
	            sponsor: [[88, 31]],
	            sponsorbig: [[132, 64]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_slice_l": [[5, 5]],
	            "native_slice_r": [[5, 5]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]],
	            "infeed": [[12, 12]],
	            "platinum": [[88, 31]]
	        }
	    },
	    2: {
	        s: 400,
	        f: 599,
	        slots: {
	            wallpaper: [],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[516, 60], [320, 50], [300, 50]],
	            mpu: [[516, 60], [300, 50], [320, 50], [300, 250]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            adsense: [[300, 252]],
	            sponsor: [[88, 31]],
	            sponsorbig: [[132, 64]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            promo: [],
	            ad_feature_rc: [],
	            "native": [[10, 10]],
	            "native_slice_l": [[5, 5]],
	            "native_slice_r": [[5, 5]],
	            "native_side_2": [],
	            "native_main_small": [],
	            "native_main_medium": [],
	            "native_main_large": [],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]],
	            "infeed": [[12, 12]],
	            "platinum": [[88, 31]]
	        }
	    },
	    3: {
	        s: 600,
	        f: 1007,
	        slots: {
	            wallpaper: [],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[516, 60], [728, 90], [970, 300], [970, 250], [970, 90], [970, 66]],
	            mpu: [[300, 250], [300, 600]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            adsense: [[300, 252]],
	            sponsor: [[88, 31]],
	            sponsorbig: [[132, 64]],
	            module: [[88, 31]],
	            module_worldinpictures: [[320, 50], [300, 50]],
	            promo: [[336, 224]],
	            ad_feature_rc: [[336, 136]],
	            "native": [[10, 10]],
	            "native_slice_l": [[5, 5]],
	            "native_slice_r": [[5, 5]],
	            "native_side_2": [[336, 209]],
	            "native_main_small": [[384, 258]],
	            "native_main_medium": [[464, 258]],
	            "native_main_large": [[624, 258]],
	            parallax: [],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]],
	            "infeed": [[12, 12]],
	            "platinum": [[88, 31]]
	        }
	    },
	    4: {
	        s: 1008,
	        f: 10000,
	        slots: {
	            wallpaper: [[1, 1]],
	            /** NOTE - Please read point 1 above before changing */
	            leaderboard: [[728, 90], [970, 300], [970, 250], [970, 90], [970, 66], [940, 230]],
	            mpu: [[300, 250], [300, 600]],
	            mpu_middle: [[300, 251]],
	            mpu_bottom: [[300, 251]],
	            adsense: [[300, 252]],
	            sponsor: [[88, 31]], /* catch all */
	            sponsorbig: [[132, 64]],
	            module: [[88, 31]], /* catch all */
	            module_worldinpictures: [[320, 50], [300, 50]],
	            promo: [[336, 224]],
	            ad_feature_rc: [[336, 136]],
	            "native": [[10, 10]],
	            "native_slice_l": [[5, 5]],
	            "native_slice_r": [[5, 5]],
	            "native_side_2": [[336, 209]],
	            "native_main_small": [[384, 258]],
	            "native_main_medium": [[464, 258]],
	            "native_main_large": [[624, 258]],
	            parallax: [[976, 400]],
	            promo_feature_responsive: [[472, 791]],
	            "responsive_box_1": [[8, 1]],
	            "responsive_box_2": [[8, 1]],
	            "verticalnavbar": [[20, 20]],
	            "infeed": [[12, 12]],
	            "platinum": [[88, 31]]
	        }
	    }
	};
	
	module.exports = {
	    /**
	     * @param {JSON} customGroups The new groups to replace the current groups object.
	     **/
	    setGroups: function setGroups(customGroups) {
	        groups = customGroups;
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {JSON} customGroup The new group data.
	     **/
	    setGroup: function setGroup(group, customGroup) {
	        if (customGroup.s && customGroup.f && customGroup.slots) {
	            groups[group] = customGroup;
	            this.setGroupStart(group, customGroup.s);
	            this.setGroupFinish(group, customGroup.f);
	        }
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {Number} width The new start width of the group.
	     **/
	    setGroupStart: function setGroupStart(group, width) {
	        if (typeof groups[group] !== 'undefined' && typeof groups[group].s !== 'undefined') {
	            groups[group].s = width;
	        }
	        if (typeof groups[group - 1] !== 'undefined' && typeof groups[group - 1].f !== 'undefined') {
	            groups[group - 1].f = width - 1;
	        }
	    },
	    /**
	     * @param {Number} group The group id to replace.
	     * @param {Number} width The new finish width of the group.
	     **/
	    setGroupFinish: function setGroupFinish(group, width) {
	        if (typeof groups[group] !== 'undefined' && typeof groups[group].f !== 'undefined') {
	            groups[group].f = width;
	        }
	        if (typeof groups[group + 1] !== 'undefined' && typeof groups[group + 1].f !== 'undefined') {
	            groups[group + 1].s = width + 1;
	        }
	    },
	    getGroups: function getGroups() {
	        return groups;
	    },
	    getGroup: function getGroup(group) {
	        return groups[group];
	    }
	};

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _comScore = __webpack_require__(209);
	
	var _comScore2 = _interopRequireDefault(_comScore);
	
	var _comScoreStreaming = __webpack_require__(257);
	
	var _comScoreStreaming2 = _interopRequireDefault(_comScoreStreaming);
	
	var _sscHelper = __webpack_require__(259);
	
	var _sscHelper2 = _interopRequireDefault(_sscHelper);
	
	var _overrides = __webpack_require__(258);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = Object.assign(_comScore2['default'], {
	    streamSense: _comScoreStreaming2['default'],
	    sscHelper: _sscHelper2['default'],
	    setMetricOverride: _overrides.setOverride
	});
	module.exports = exports['default'];

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _get2 = __webpack_require__(210);
	
	var _get3 = _interopRequireDefault(_get2);
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _helper = __webpack_require__(171);
	
	var _helper2 = _interopRequireDefault(_helper);
	
	var _logger = __webpack_require__(144);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _comScoreHelpers = __webpack_require__(157);
	
	var _comScoreStreaming = __webpack_require__(257);
	
	var _comScoreStreaming2 = _interopRequireDefault(_comScoreStreaming);
	
	var _sections = __webpack_require__(152);
	
	var _sections2 = _interopRequireDefault(_sections);
	
	var _getUserTrackingCookie = __webpack_require__(196);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	var _getSectionStrings = __webpack_require__(184);
	
	var _getSectionStrings2 = _interopRequireDefault(_getSectionStrings);
	
	var _getPageType = __webpack_require__(182);
	
	var _getPageType2 = _interopRequireDefault(_getPageType);
	
	var _sanitiseValues = __webpack_require__(173);
	
	var _metricsBuilder = __webpack_require__(158);
	
	var _metricsBuilder2 = _interopRequireDefault(_metricsBuilder);
	
	var _overrides = __webpack_require__(258);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var log = (0, _logger2['default'])('analytics:comScore');
	var DELAY_TRACKING_COOKIE = 'ckpf_gnlcs'; // ComScore specific
	
	var ComScore = function () {
	    function ComScore() {
	        _classCallCheck(this, ComScore);
	
	        this.playlistCount = 0;
	        this.videoEventCounter = 0;
	        this.allowLinkTracking = true;
	        this.isPlaylistStarted = false;
	        this.userTrackingCookieValue = false;
	        this.trackingRequests = { 'http': [], 'cookie': [] };
	        this.keyValues = {};
	        this.isScwHandlerUsed = false;
	    }
	
	    /**
	     * Executed in bbcdotcom.init
	     * Note: some pages such as /blogs do not run bbcdotcom.init() grrrr
	     */
	
	
	    _createClass(ComScore, [{
	        key: 'init',
	        value: function init() {
	            this.userTrackingCookieValue = (0, _getUserTrackingCookie2['default'])();
	            _helper2['default'].processDelayTrackingCookie(DELAY_TRACKING_COOKIE, this.trackingRequests);
	
	            setupStreamSense.call(this);
	            return this;
	        }
	    }, {
	        key: 'getScwForApp',
	        value: function getScwForApp() {
	            var _this = this;
	
	            log('getScwForApp() called to get "scw"');
	            this.isScwHandlerUsed = true;
	            return {
	                initAppPageTracking: function initAppPageTracking(pageName, uri, pageType) {
	                    _this.setApp({ pageName: pageName });
	                },
	                setAppName: function setAppName(appName) {
	                    _this.setApp({ appName: appName });
	                },
	                setAppVersionNumber: function setAppVersionNumber(appVersion) {
	                    _this.setApp({ appVersion: appVersion });
	                },
	                setAppOs: function setAppOs(appOs) {
	                    _this.setApp({ appOs: appOs });
	                },
	                appTrackPage: function appTrackPage() {
	                    _this.page();
	                }
	            };
	        }
	    }, {
	        key: 'setApp',
	        value: function setApp(keyValue) {
	            var conf;
	            for (conf in keyValue) {
	                switch (conf) {
	                    case 'appName':
	                        this.keyValues.b_app_name = keyValue[conf] + "|app";
	                        if (keyValue[conf] === "horizons") {
	                            this.keyValues.b_site_channel = 'news';
	                        }
	                        break;
	                    case 'appVersion':
	                        this.keyValues.b_app_imp_ver = keyValue[conf];
	                        break;
	                    case 'appOs':
	                        this.keyValues.b_app_os = keyValue[conf];
	                        break;
	                    case 'pageName':
	                        this.keyValues.name = keyValue[conf];
	                    default:
	                        break;
	                }
	            }
	        }
	    }, {
	        key: 'setAllowLinkTracking',
	        value: function setAllowLinkTracking(enabled) {
	            this.allowLinkTracking = enabled ? true : false;
	        }
	    }, {
	        key: 'getTrackingRequests',
	        value: function getTrackingRequests(type) {
	            if (typeof type === 'undefined' || type !== 'http' && type !== 'cookie') {
	                throw new Error('Invalid type provided to getTrackingRequests() "' + type + '"');
	            }
	            return this.trackingRequests[type];
	        }
	    }, {
	        key: 'getTrackingValue',
	        value: function getTrackingValue() {
	            return '';
	        }
	    }, {
	        key: 'setUserTrackingCookie',
	        value: function setUserTrackingCookie(val) {
	            this.userTrackingCookieValue = val;
	        }
	    }, {
	        key: 'getUserTrackingCookie',
	        value: function getUserTrackingCookie() {
	            return this.userTrackingCookieValue;
	        }
	
	        /**
	         * For testing.
	         */
	
	    }, {
	        key: 'r',
	        value: function r() {
	            this.userTrackingCookieValue = false;
	            this.allowLinkTracking = true;
	            this.trackingRequests = { 'http': [], 'cookie': [] };
	            _comScoreStreaming2['default'].videoEvents = [];
	            this.isPlaylistStarted = false;
	            _utils2['default'].deleteCookie(DELAY_TRACKING_COOKIE);
	            this.videoEventCounter = 0;
	        }
	
	        /**
	         * =================================================================================================================
	         * Page Tracking
	         * =================================================================================================================
	         */
	
	        /**
	         * Website Page Tracking
	         */
	
	    }, {
	        key: 'page',
	        value: function page(referrer) {
	            if (!_config2['default'].isComScoreEnabled()) {
	                log('did not do tracking because isComScoreEnabled=false');
	                return false;
	            }
	            try {
	                var keyValues = (0, _comScoreHelpers.getCoreKeyValues)();
	                keyValues = (0, _comScoreHelpers.appendPageCoreKeyValues)(keyValues);
	
	                // single page apps need to pass referrer in
	                if (typeof referrer !== 'undefined') {
	                    keyValues.c9 = referrer;
	                }
	
	                Object.assign(keyValues, this.keyValues);
	                doTrack.call(this, keyValues, 'page');
	                if (this.allowLinkTracking) {
	                    _helper2['default'].applyLinkTrackingToPageElements(this.link.bind(this)); // NOTE: processLink() method is callback
	                }
	            } catch (exception) {
	                log.error('bbcdotcom.analytics.page() exception "' + exception.message + '"');
	            }
	        }
	
	        /**
	         * =================================================================================================================
	         * Link Tracking
	         * =================================================================================================================
	         */
	
	        /**
	         * Method used to report on the link which has been clicked
	         *
	         *No longer tracking advertising because of issues not opening in new window (cannot reliably open in new window with JS)
	         *External links will fire request to analytics immediately, then open link (not in new tab/window because not possible in JS)
	         *Internal links will drop a cookie and pick up the click tracking on the subsequent page
	         *
	         * @param object linkObj is the <a> clicked, for example:
	         *      { href:'http://www.bbc.com/travel', title:'Travel website',
	         *        rev:'hello|world', data-track:'hello|world'}
	         * @param object event Event object
	         */
	
	    }, {
	        key: 'link',
	        value: function link(linkObj, event) {
	            // Title of the page at the other end of the link (generally data is stored within 'title' attribute
	            // of anchor <a href="" title="">.
	            if (!_config2['default'].isComScoreEnabled()) {
	                return false;
	            }
	            if (typeof linkObj === 'undefined' || typeof linkObj.href === 'undefined') {
	                return false;
	            }
	            // Key-Values to send
	            var keyValues = (0, _comScoreHelpers.getCoreKeyValues)(),
	                vars = _helper2['default'].getLinkTrackingProperties(linkObj),
	                uri = linkObj.href; //helper.normalizeUri(linkObj.href);
	
	            if (!vars) {
	                return '';
	            }
	
	            var metricsBuilder = new _metricsBuilder2['default']();
	
	            var isBBCUri = _helper2['default'].isBBCUri(uri);
	            metricsBuilder['with']('pev1', { value: uri.substr(0, 255), preRequisite: function preRequisite() {
	                    return isBBCUri;
	                } });
	            metricsBuilder['with']('domainFromUrl', { mapName: 'pev1', args: [uri], preRequisite: function preRequisite() {
	                    return !isBBCUri;
	                } });
	
	            // pageType is 'index', 'story', 'map'.
	            vars.pageType = (0, _getPageType2['default'])(linkObj.href).substring(0, 3).replace('|', '');
	            keyValues = (0, _comScoreHelpers.appendNonPageCoreKeyValues)(keyValues);
	            keyValues.b_link = buildPipeDelimitedKey.call(this, vars);
	
	            keyValues = Object.assign(keyValues, metricsBuilder.build());
	
	            _helper2['default'].trackLink(doTrack.bind(this), DELAY_TRACKING_COOKIE, uri, event, keyValues); // NOTE: doTrack() method is callback
	        }
	    }]);
	
	    return ComScore;
	}();
	
	exports['default'] = new ComScore();
	
	/**
	 * =================================================================================================================
	 * PRIVATE METHODS
	 * =================================================================================================================
	 */
	
	function setupStreamSense() {
	    // Proxy methods
	    var i, l;
	    var methods = ['startPlaylist', 'adRequest', 'adManagerLoaded', 'startAdvert', 'endAdvert', 'startProgramme', 'startPause', 'endPause', 'startSeek', 'endSeek', 'endProgramme',
	    //'endPlaylist',
	    //'isPlaylistStarted',
	    'duration', 'uiinfo', 'volumeChange', 'startPreview', 'stopPreview'];
	    for (i = 0, l = methods.length; i < l; i++) {
	        ComScore.prototype[methods[i]] = _comScoreStreaming2['default'][methods[i]].bind(_comScoreStreaming2['default']);
	    }
	
	    _comScoreStreaming2['default'].init();
	};
	
	/**
	 * Make request to ComScore endpoint
	 *
	 * @param object customTrackingKeyValues eg {}
	 * @param string trackType eg page, link, video
	 * @param function callback will be called when the tracking request is complete
	 * @param boolean makeImageRequest whether to make request or not
	 * @return mixed boolean|string false=ComScore disabled
	 */
	function doTrack(keyValues, type, callback, makeImageRequest) {
	    var key;
	    if (!_config2['default'].isAnalyticsEnabled()) {
	        log('did not do tracking because isAnalyticsEnabled=false');
	        if (typeof callback === 'function') {
	            callback(false);
	        }
	        return false;
	    }
	
	    if (this.userTrackingCookieValue === false) {
	        // Just in case page doesn't run bbcdotcom.init();
	        this.userTrackingCookieValue = (0, _getUserTrackingCookie2['default'])();
	    }
	
	    var overrides = (0, _overrides.getOverrides)();
	    var defaultC2 = typeof keyValues.c2 !== 'undefined' ? keyValues.c2 : '';
	
	    var url = '?' + 'c1=' + (type === 'page' ? 2 : 22) + '&c2=' + (0, _get3['default'])(overrides, 'c2', defaultC2);
	
	    if (overrides.b_app_type === 'fia') {
	        overrides.app_name = keyValues.prod_name;
	        overrides.name = _helper2['default'].getEmbedPageName();
	        overrides.section = _sections2['default'].getSectionsForUri(_config2['default'].getWindowLocation().href, 'analytics').join("%2F");
	        overrides.page_type = _helper2['default'].getPageType().toLowerCase();
	        overrides.cps_asset_id = keyValues.b_article_id;
	    }
	    if (type === 'video') {
	        this.videoEventCounter++;
	        keyValues.ns_st_ec = this.videoEventCounter;
	    }
	    // Apply Overrides
	    keyValues = Object.assign(keyValues, overrides);
	
	    // Append to end of request (do not put at front!)
	    keyValues.c7 = _config2['default'].getWindowLocation().href.replace(/\.app$/, '');
	    keyValues.c8 = _config2['default'].getWindowDocument().title;
	
	    // single page apps need to pass referrer in
	    if (typeof keyValues.c9 === 'undefined') {
	        keyValues.c9 = document.referrer;
	    }
	
	    keyValues = (0, _sanitiseValues.sanitiseKeyValues)(keyValues);
	    for (key in keyValues) {
	        if (key !== 'c2') {
	            // Do not include label (key-value) if empty.  Don't include 'c2' here as included above (for easily reading http requests).
	            url += '&' + key + '=' + _helper2['default'].encodeValue(keyValues[key]);
	        }
	    }
	
	    //  GDPR and CCPA requirements
	    url += window.bbccookies && bbccookies.readPolicy('performance') ? '&cs_ucfr=1' : '&cs_ucfr=0';
	
	    if (typeof makeImageRequest === 'undefined' || makeImageRequest === true) {
	        this.trackingRequests['http'].push(url);
	        _helper2['default'].loadTrackingImage(url, callback);
	    } else {
	        this.trackingRequests['cookie'].push(url);
	        if (typeof callback === 'function') {
	            callback();
	        }
	    }
	    log('comScore doTrack url:' + url);
	    return url;
	};
	
	/**
	 * Construct pipe delimited value
	 *
	 * Pipe delimited order:
	 * - 1.  name or channel of content being promoted  eg /news/story-1234 => 'news'
	 * - 2.  channel eg news
	 * - 3.  module name eg carousel
	 * - 4.  link type eg 'text', 'image', 'icon', 'video'
	 * - 5.  link name eg royal-babyis-born
	 * - 6.  link position eg 1
	 * - 7.  total number of links in module eg 10
	 * - 8.  extra link info eg facebook
	 * - 9.  section eg news>world
	 * - 10. page type eg idx|na, sty|na
	 * - 11. module placement (not link placement) eg topcentre
	 *
	 * @param object data Override params
	 */
	function buildPipeDelimitedKey(data) {
	    if (typeof data === 'undefined') {
	        return false;
	    }
	    var sectionStrings = (0, _getSectionStrings2['default'])();
	    var keys = {
	        // NOTE: ORDER IS IMPORTANT
	        'promoted': '',
	        'channel': sectionStrings[0],
	        'moduleName': '',
	        'linkType': 'text',
	        'linkName': '',
	        'linkPosition': '',
	        'totalLinks': '',
	        'extraLinkInfo': '',
	        'section': sectionStrings[1],
	        'pageType': '',
	        'placement': ''
	        // NOTE: ORDER IS IMPORTANT
	    };
	    var d,
	        k,
	        parts = [];
	    for (d in data) {
	        if (typeof keys[d] !== 'undefined') {
	            // Update key within keys, do not add any new keys just the values
	            keys[d] = typeof data[d] === 'undefined' || data[d] === '' || data[d] === false ? '' : _utils2['default'].trim(data[d]);
	        }
	    }
	    for (k in keys) {
	        parts.push(keys[k]);
	    }
	    return parts.join('|');
	};
	module.exports = exports['default'];

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(211);
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(212),
	    isKey = __webpack_require__(255),
	    toKey = __webpack_require__(256);
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}
	
	module.exports = baseGet;


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(159),
	    stringToPath = __webpack_require__(213);
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}
	
	module.exports = castPath;


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(214),
	    toString = __webpack_require__(250);
	
	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoize(function(string) {
	  string = toString(string);
	
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});
	
	module.exports = stringToPath;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(215);
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result);
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}
	
	// Assign cache to `_.memoize`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(216),
	    mapCacheDelete = __webpack_require__(244),
	    mapCacheGet = __webpack_require__(247),
	    mapCacheHas = __webpack_require__(248),
	    mapCacheSet = __webpack_require__(249);
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	module.exports = MapCache;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(217),
	    ListCache = __webpack_require__(235),
	    Map = __webpack_require__(243);
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	module.exports = mapCacheClear;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(218),
	    hashDelete = __webpack_require__(231),
	    hashGet = __webpack_require__(232),
	    hashHas = __webpack_require__(233),
	    hashSet = __webpack_require__(234);
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	module.exports = Hash;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}
	
	module.exports = hashClear;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(220);
	
	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');
	
	module.exports = nativeCreate;


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(221),
	    getValue = __webpack_require__(230);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	module.exports = getNative;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(222),
	    isHostObject = __webpack_require__(224),
	    isMasked = __webpack_require__(225),
	    isObject = __webpack_require__(223),
	    toSource = __webpack_require__(229);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	module.exports = baseIsNative;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(223);
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}
	
	module.exports = isFunction;


/***/ }),
/* 223 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}
	
	module.exports = isHostObject;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(226);
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	module.exports = isMasked;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(227);
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	module.exports = coreJsData;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(228);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ }),
/* 228 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 229 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	module.exports = toSource;


/***/ }),
/* 230 */
/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	module.exports = getValue;


/***/ }),
/* 231 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}
	
	module.exports = hashDelete;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	module.exports = hashGet;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	module.exports = hashHas;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	module.exports = hashSet;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(236),
	    listCacheDelete = __webpack_require__(237),
	    listCacheGet = __webpack_require__(240),
	    listCacheHas = __webpack_require__(241),
	    listCacheSet = __webpack_require__(242);
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	module.exports = ListCache;


/***/ }),
/* 236 */
/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}
	
	module.exports = listCacheClear;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(238);
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype;
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}
	
	module.exports = listCacheDelete;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(239);
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	module.exports = assocIndexOf;


/***/ }),
/* 239 */
/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	module.exports = eq;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(238);
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	module.exports = listCacheGet;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(238);
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	module.exports = listCacheHas;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(238);
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	module.exports = listCacheSet;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(220),
	    root = __webpack_require__(227);
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');
	
	module.exports = Map;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(245);
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}
	
	module.exports = mapCacheDelete;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(246);
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	module.exports = getMapData;


/***/ }),
/* 246 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	module.exports = isKeyable;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(245);
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	module.exports = mapCacheGet;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(245);
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	module.exports = mapCacheHas;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(245);
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}
	
	module.exports = mapCacheSet;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(251);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(252),
	    isSymbol = __webpack_require__(253);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = baseToString;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(227);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(254);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ }),
/* 254 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(159),
	    isSymbol = __webpack_require__(253);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}
	
	module.exports = isKey;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(253);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}
	
	module.exports = toKey;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _logger = __webpack_require__(144);
	
	var _logger2 = _interopRequireDefault(_logger);
	
	var _sanitiseValues = __webpack_require__(173);
	
	var _comScoreHelpers = __webpack_require__(157);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var config = __webpack_require__(150);
	var utils = __webpack_require__(143);
	var analyticsHelper = __webpack_require__(171);
	var log = (0, _logger2['default'])('analytics:comScoreStreaming');
	
	var AD = 'AD';
	var CONTENT = 'CONTENT';
	
	var NULL = '*null';
	
	var StreamSenseV6 = function () {
	    function StreamSenseV6() {
	        _classCallCheck(this, StreamSenseV6);
	
	        this.sa = null;
	        this.playlistCount = 0;
	        this.contentDuration = '0';
	        this.currentlyPlaying = '';
	        this.isPreview = false;
	        this.uiInfoLabels = {
	            ns_st_ws: 'norm',
	            ns_st_cs: ''
	        };
	        this.volumeLabel = {
	            ns_st_vo: ''
	        };
	        this.volume = '';
	        this.adPlayed = false;
	    }
	
	    _createClass(StreamSenseV6, [{
	        key: 'init',
	        value: function init() {
	            // Construct streamSense (/script/vendor/comscore/comscore.streaming.6.0.0.161201.min.js)
	            this.sa = new ns_.StreamingAnalytics({ liveEndpointURL: analyticsHelper.getAnalyticsUri() });
	            log('init()');
	        }
	    }, {
	        key: 'notify',
	        value: function notify(method, data) {
	            log('notify() ' + method);
	            if (!config.isComScoreEnabled()) {
	                log('bbcdotcom.analytics did not do tracking because isComScoreEnabled=false');
	                return;
	            }
	
	            if (method !== 'notifyCustomEvent') {
	                log('playbackSession labels:');
	                log(this.sa.getPlaybackSession().getLabels());
	                log('asset labels:');
	                log(this.sa.getPlaybackSession().getAsset().getLabels());
	            }
	
	            if (typeof data !== 'undefined') {
	                if (method === 'notifyCustomEvent') {
	
	                    log('custom labels:');
	                    log(data);
	
	                    this.sa[method](0, data);
	                } else {
	                    this.sa[method](data);
	                }
	            } else {
	                this.sa[method]();
	            }
	        }
	
	        // this fires either on
	        // - 1st content 'playing' event
	        // - 1st adRequest event
	        // - 1st adStarted event
	        // why is it not using playlistLoaded event?
	
	    }, {
	        key: 'startPlaylist',
	        value: function startPlaylist(data) {
	            // if something is already playing then send the 'end' stats calls
	            if (this.currentlyPlaying === AD) {
	                this.notify('notifyEnd');
	            }
	            if (this.currentlyPlaying === CONTENT) {
	                this.notify('notifyEnd', utils.secondsToMilliSeconds(data.mediaOffset));
	            }
	            // No content is loaded in to the player while previewing at the moment
	            /*
	            if(this.currentlyPlaying === PREVIEW) {
	                this.notify('notifyEnd', utils.secondsToMilliSeconds(data.mediaOffset));
	            }
	            */
	
	            this.currentlyPlaying = '';
	            this.playlistCount++;
	            this.adPlayed = false;
	
	            var c1 = bbcdotcom.utils.isString(data.mediaPlayerName) && data.mediaPlayerName.includes('flash') ? '19' : '2';
	            var keyValues = (0, _comScoreHelpers.getCoreKeyValues)({
	                c1: c1,
	                c2: config.getAnalyticsAcctId(),
	                c3: NULL, // No logical value but still needs to be set @BBCCOM-7746
	                c4: NULL, // No logical value but still needs to be set @BBCCOM-7746
	                b_av_action: this._getAVAction(data.videoPlaysAutomatically),
	                ns_st_it: 'c', // comScore identification. always 'c'
	                ns_st_mp: data.mediaPlayerName, // Media Player Name
	                ns_st_mv: data.bumpVersion, // Media Player Version
	                ns_st_cp: '1',
	                b_av_ad: config.isAdsEnabled() ? '1' : '0',
	                b_av_format: analyticsHelper.getAvFormatFromKind(data.kind),
	                b_av_plist: 'multi',
	                b_av_method: 'stream',
	                b_av_source: 'bbc',
	                ns_st_ws: this.uiInfoLabels.ns_st_ws,
	                ns_st_cs: this.uiInfoLabels.ns_st_cs,
	                ns_st_vo: this.volumeLabel.ns_st_vo,
	                b_preview_flag: this.isPreview ? '1' : '0'
	            });
	            keyValues = (0, _comScoreHelpers.appendPageCoreKeyValues)(keyValues);
	
	            this.sa.createPlaybackSession(keyValues);
	        }
	
	        // ============================================================================================================= //
	        // ADVERTISMENT REPORTING
	        // ============================================================================================================= //
	
	    }, {
	        key: 'adRequest',
	        value: function adRequest(data) {
	            this.notify('notifyCustomEvent', { ns_st_ev: 'ad_request' });
	        }
	    }, {
	        key: 'adManagerLoaded',
	        value: function adManagerLoaded(data) {
	            this.notify('notifyCustomEvent', { ns_st_ev: 'ad_loaded' });
	        }
	    }, {
	        key: 'startAdvert',
	        value: function startAdvert(data) {
	            var mediaName = (0, _sanitiseValues.sanitisePageName)(data.mediaName);
	            this.currentlyPlaying = AD;
	            this.adPlayed = true;
	            this.sa.getPlaybackSession().setAsset({
	                ns_st_br: NULL, // Playback Bit Rate @todo require additional info from player
	                ns_st_ci: 'pre-roll', // Unique Content ID
	                ns_st_cl: data.adLength || '0', // asset length (duration is only being pulled through from ads html plugin, NOT flash)
	                ns_st_pu: NULL, // publisher brand name
	                ns_st_pr: mediaName, // program title (to make it the same as content play)
	                ns_st_ep: NULL, // episode title
	                ns_st_sn: NULL, // episode saeson number
	                ns_st_en: NULL, // episode number
	                ns_st_ge: NULL, //genre
	                ns_st_ct: 'va11', // classification type
	                ns_st_ti: NULL, // tms id
	                ns_st_ia: NULL, // ad load tag
	                ns_st_ddt: NULL, // Digital Airdate
	                ns_st_tdt: NULL, // TV Airdate
	                ns_st_st: NULL, // Station Title
	                ns_st_cp: '2',
	                c3: NULL,
	                c4: NULL,
	                c6: NULL,
	                ns_st_ad: 'pre-roll'
	            });
	            this.notify('notifyPlay', 0);
	        }
	    }, {
	        key: 'endAdvert',
	        value: function endAdvert(data) {
	            // Will assume the position is equal to the length of the advertisement.
	            this.notify('notifyEnd');
	        }
	
	        // ============================================================================================================= //
	        // MAIN CONTENT REPORTING
	        // ============================================================================================================= //
	
	    }, {
	        key: 'startProgramme',
	        value: function startProgramme(data) {
	            this.currentlyPlaying = CONTENT;
	            var mediaName = (0, _sanitiseValues.sanitisePageName)(data.mediaName);
	            this.sa.getPlaybackSession().setAsset({
	                ns_st_br: NULL, // Playback Bit Rate @todo require additional info from player
	                ns_st_ci: mediaName, // Unique Content ID
	                ns_st_cl: this.contentDuration, // asset length
	                ns_st_pu: 'bbc', // publisher brand name
	                ns_st_pr: mediaName, // program title
	                ns_st_ep: NULL, // episode title
	                ns_st_sn: NULL, // episode season number
	                ns_st_en: NULL, // episode number
	                ns_st_ge: NULL, //genre
	                ns_st_ct: data.isLive ? 'vc13' : 'vc11', // classification type
	                ns_st_ti: NULL, // tms id
	                ns_st_ia: NULL, // ad load tag
	                ns_st_ddt: NULL, // Digital Airdate
	                ns_st_tdt: NULL, // TV Airdate
	                ns_st_st: NULL, // Station Title
	                c3: NULL,
	                c4: NULL,
	                c6: NULL,
	                ns_st_pn: '1', // segment number
	                ns_st_ce: NULL, // Complete Episode Flag
	                ns_st_li: data.isLive ? '1' : NULL, // Live Stream Flag
	                ns_st_cp: this.adPlayed ? '2' : '1'
	            });
	            this.notify('notifyPlay', 0);
	        }
	    }, {
	        key: 'endProgramme',
	        value: function endProgramme(data) {
	            // Will assume the position is equal to the length of the programme.
	            this.notify('notifyEnd');
	        }
	    }, {
	        key: 'startPause',
	        value: function startPause(data) {
	            this.notify('notifyPause', utils.secondsToMilliSeconds(data.mediaOffset));
	        }
	    }, {
	        key: 'endPause',
	        value: function endPause(data) {
	            this.notify('notifyPlay', utils.secondsToMilliSeconds(data.mediaOffset));
	        }
	    }, {
	        key: 'startSeek',
	        value: function startSeek(data) {
	            this.notify('notifySeekStart', utils.secondsToMilliSeconds(data.mediaOffset));
	        }
	    }, {
	        key: 'endSeek',
	        value: function endSeek() {
	            this.notify('notifyPlay', utils.secondsToMilliSeconds(data.mediaOffset));
	        }
	    }, {
	        key: 'duration',
	        value: function duration(data) {
	            // HTML player will get this from bump 'loadedmetadata' event before ANY other events have fired
	            // and before the pre-roll (if there is one) starts playing
	
	            // Flash player will get this from bump 'timeupdate' event when the actual content is playing
	            // after pre-roll (if there is one) has finished
	
	            // this gets passed correctly in to startProgramme() for html player
	            this.contentDuration = utils.secondsToMilliSeconds(data.mediaLength).toString();
	
	            // for flash player we need to add manuallu
	            if (this.currentlyPlaying == CONTENT) {
	                this.sa.getPlaybackSession().getAsset().setLabel('ns_st_cl', this.contentDuration);
	            }
	        }
	
	        // ============================================================================================================= //
	        // PLAYER REPORTING
	        // ============================================================================================================= //
	
	        // this comes through 1st time before startPlaylist() has fired
	
	    }, {
	        key: 'uiinfo',
	        value: function uiinfo(data) {
	            this.uiInfoLabels.ns_st_ws = data.uiinfo.isFullscreen === true ? 'full' : 'norm';
	            this.uiInfoLabels.ns_st_cs = data.uiinfo.videoWidth.toString() + 'x' + data.uiinfo.videoHeight.toString();
	            if (this.currentlyPlaying !== '') {
	                this.sa.getPlaybackSession().setLabels(this.uiInfoLabels);
	            }
	        }
	
	        // this comes through 1st time before startPlaylist() has fired
	
	    }, {
	        key: 'volumeChange',
	        value: function volumeChange(data) {
	            this.volumeLabel.ns_st_vo = (data.volume * 100).toString();
	            if (this.currentlyPlaying !== '') {
	                this.sa.getPlaybackSession().setLabels(this.volumeLabel);
	            }
	        }
	
	        // presumption here that once the preview plugin has loaded
	        // all subsequent playlists loaded into the player will run preview
	
	    }, {
	        key: 'startPreview',
	        value: function startPreview(data) {
	            this.isPreview = true;
	        }
	    }, {
	        key: 'stopPreview',
	        value: function stopPreview(data) {
	            this.isPreview = false;
	            this.notify('notifyCustomEvent', { ns_st_ev: data.previewStoppedReason });
	            this.sa.getPlaybackSession().setLabel('b_preview_flag', '0');
	        }
	
	        // ============================================================================================================= //
	        // UTILS
	        // ============================================================================================================= //
	
	        /**
	         * Return the actions that initiated video play:
	         * cpfm : Continuous Play, first video, user initiated
	         * cpf  : Continuous Play, first video, auto started
	         * cp   : Continuous Play, not first video
	         * ap   : Not Continuous Play, auto started
	         * mp   : Not Continuous Play, user initiated
	         */
	
	    }, {
	        key: '_getAVAction',
	        value: function _getAVAction(videoPlaysAutomatically) {
	            var av_action;
	            if (config.isContinuousPlayPage()) {
	                if (this.playlistCount === 1) {
	                    av_action = videoPlaysAutomatically ? 'cpf' : 'cpfm';
	                } else {
	                    av_action = 'cp';
	                }
	            } else {
	                av_action = videoPlaysAutomatically ? 'ap' : 'mp';
	            }
	
	            return av_action;
	        }
	    }]);
	
	    return StreamSenseV6;
	}();
	
	exports['default'] = new StreamSenseV6();
	module.exports = exports['default'];

/***/ }),
/* 258 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.setOverride = setOverride;
	exports.getOverrides = getOverrides;
	var overrides = new Map();
	
	function setOverride(key, value) {
	    overrides.set(key, value);
	}
	
	function getOverrides() {
	    var output = {};
	    overrides.forEach(function (value, key) {
	        output[key] = value;
	    });
	
	    return output;
	}

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _getUserTrackingCookie = __webpack_require__(196);
	
	var _getUserTrackingCookie2 = _interopRequireDefault(_getUserTrackingCookie);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/**
	 * @constructor
	 */
	function SSCHelper() {
	    var analyticsConfig = _config2['default'].getAnalyticsConfig();
	
	    this.sscHost = {
	        https: analyticsConfig.SSC.HTTPS
	    };
	
	    this.comScoreHost = {
	        https: analyticsConfig.COMSCORE.HTTPS
	    };
	}
	
	SSCHelper.prototype.getAnalyticsLocation = function () {
	    if (this.hasUserTrackingCookie()) {
	        return this.getComScoreBaseUrl();
	    } else {
	        return this.getSscBaseUrl();
	    }
	};
	
	SSCHelper.prototype.isSecure = function () {
	    return _config2['default'].getWindowLocation().protocol === 'https:';
	};
	
	SSCHelper.prototype.hasUserTrackingCookie = function () {
	    return (0, _getUserTrackingCookie2['default'])() !== false;
	};
	
	SSCHelper.prototype.getComScoreBaseUrl = function () {
	    return this.comScoreHost.https;
	};
	
	SSCHelper.prototype.getSscBaseUrl = function () {
	    return this.sscHost.https;
	};
	
	module.exports = new SSCHelper();

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var adUnit = __webpack_require__(203);
	var layout = __webpack_require__(199);
	
	var suites = {
	    '970x250': {
	        dfppId: 185036058,
	        adUnit: 'preview',
	        uid: '5d453f2d6551484b782064357a',
	        slots: {
	            leaderboard: [[970, 250]],
	            mpu: []
	        }
	    },
	    large: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '224f514079694b3d567a747a22',
	        slots: {
	            leaderboard: [[970, 250]]
	        }
	    },
	    big: {
	        dfppId: 185036058,
	        adUnit: 'preview',
	        uid: '5d453f2d6551484b782064357a',
	        slots: {
	            leaderboard: [[970, 250]],
	            mpu: [[300, 600]]
	        }
	    },
	    standard: {
	        dfppId: 193669458,
	        adUnit: 'preview',
	        uid: '3171676f4450464e3d5a3b4746',
	        slots: {
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    opaque: {
	        dfppId: 193669458,
	        adUnit: 'preview',
	        uid: '3171676f4450464e3d5a3b4746',
	        slots: {
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    interstitial: {
	        dfppId: 193674858,
	        adUnit: 'preview',
	        uid: '3f784566412e58404762524028',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    "int-uni-iframe": {
	        dfppId: 200145378,
	        adUnit: 'preview',
	        uid: '2b614a6426584d2e767e7a2967',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    "int-uni-image": {
	        dfppId: 200147178,
	        adUnit: 'preview',
	        uid: '2b5e292758336b7b662b346122',
	        slots: {
	            interstitial: [[1, 1]],
	            leaderboard: [[728, 90]],
	            mpu: [[300, 250]]
	        }
	    },
	    empty: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    },
	    none: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    },
	    noad: {
	        dfppId: 114180258,
	        adUnit: 'preview',
	        uid: '537034287a7as704b51655e3227'
	    }
	};
	
	module.exports = {
	    init: function init(windowLocationHref) {
	        var suite;
	        if (/[\\?&]ads=([^&#]*)/.test(windowLocationHref)) {
	            if ('undefined' !== typeof suites[RegExp.$1]) {
	                suite = suites[RegExp.$1];
	                if (suite.uid) {
	                    adUnit.setUid(suite.uid);
	                }
	                if (suite.adUnit) {
	                    adUnit.setAdUnit(suite.adUnit);
	                }
	                if (suite.slots) {
	                    layout.overrideGroupSizes(suite.slots);
	                }
	            }
	        }
	    }
	};

/***/ }),
/* 261 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * @module stats
	 *
	 * Listens to events raised by bbcdotcom and maintains an immutable bbcdotcom.stats.data object
	 * with useful information on for tracking.
	 */
	
	/**
	 * This is the main stats module object. This is what is returned or exported by this module.
	 * The init function and data property are both exposed publicly although the data property
	 * is frozen so cannot be directly manipulated.
	 *
	 * @type {{data: {}, init: Function}}
	 */
	var stats = {
	    data: {}
	};
	
	/**
	 * Initial values which are exposed on the bbcdotcom.stats.data property
	 *
	 * @type {{adsRequested: Array, adsRendered: Array}}
	 */
	var initialData = {
	    adsRequested: [],
	    adsRendered: [],
	    adsEmpty: [],
	    adsSlots: [],
	    adsShut: []
	};
	
	/**
	 * Map of handlers which is updated every time bind() is called. We keep a reference to these so we
	 * can clean up after ourselves and unbind all of our listeners
	 *
	 * @type {{}}
	 */
	var handlers = {};
	
	/**
	 * This function takes a map of event names to array of handlers and unbinds them all.
	 *
	 * @param eventHandlers
	 */
	function unbind(eventHandlers) {
	    Object.keys(eventHandlers).forEach(function (event) {
	        eventHandlers[event].forEach(function (handler) {
	            bbcdotcom.pubsub.off(event, handler);
	        });
	    });
	}
	
	/**
	 * This function takes an event name or array of event names and a reducer function. It sets up a binding to
	 * the event(s) given and calls the reducer function for each event passing in the current bbcdotcom.stats.data
	 * object and the arguments given then the event was triggered.
	 *
	 * Each bound event/reducer combo is stored into the handlers map and then unbound if init is called again.
	 *
	 * @param events
	 * @param reducer
	 */
	function bind(events, reducer) {
	    var normalisedEvents = Array.isArray(events) ? events : [events];
	
	    normalisedEvents.forEach(function (event) {
	        var handler = function handler() {
	            var next = Object.freeze(reducer.apply(null, [stats.data].concat(Array.prototype.slice.call(arguments))));
	            stats.data = next;
	        };
	
	        bbcdotcom.pubsub.on(event, handler);
	        handlers[event] = (handlers[event] || []).concat(handler);
	    });
	}
	
	/**
	 * Initialise the stats module and (re)bind the event listeners. When called this method will restore
	 * bbcdotcom.stats.data to it's initialData, unbind any bound event listeners and then bind all
	 * of the appropriate event listeners.
	 *
	 * The handler functions which are set up using bind() take two (or more)
	 * arguments, the current data object, and any arguments passed in by the event trigger. These functions
	 * should return a new data object based on the current data state and the event arguments. They should
	 * not modify the data object, but instead return a new modified object.
	 */
	stats.init = function init() {
	
	    stats.data = Object.freeze(initialData);
	    unbind(handlers);
	
	    bind('bbcdotcom:init:complete', function (data, init) {
	        return Object.assign({}, data, init.stats, {
	            implementation: init.stats.isAsync ? 'gpt-async' : 'gpt'
	        });
	    });
	
	    bind('ads:requested', function (data, slots) {
	        return Object.assign({}, data, {
	            adsRequested: slots
	        });
	    });
	
	    bind('ad:render:complete', function (data, adId, isEmpty) {
	        if (data.adsRendered.indexOf(adId) >= 0) {
	            return data;
	        }
	
	        return Object.assign({}, data, {
	            adsRendered: data.adsRendered.concat(adId),
	            adsEmpty: isEmpty ? data.adsEmpty.concat(adId) : data.adsEmpty
	        });
	    });
	
	    bind('ad:render', function (data, adId) {
	        return Object.assign({}, data, {
	            adsSlots: data.adsSlots.concat(adId)
	        });
	    });
	
	    bind('ad:render:close', function (data, adId) {
	        return Object.assign({}, data, {
	            adsShut: data.adsShut.concat(adId)
	        });
	    });
	};
	
	module.exports = stats;

/***/ }),
/* 262 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function addLoadEvent(func) {
	    var windowOnload = window.onload;
	    if (typeof window.onload !== 'function') {
	        window.onload = func;
	    } else {
	        window.onload = function () {
	            if (windowOnload) {
	                windowOnload();
	            }
	            func();
	        };
	    }
	};

/***/ }),
/* 263 */
/***/ (function(module, exports) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	// Presumes Orbit has polyfilled Promise
	var attemptToShowSignin = function attemptToShowSignin() {
	  isOnAppropriatePage().then(isAdsEnabled).then(isLocalStorageAvailable).then(isUserEligible).then(isIdctaFlagpoleGreen).then(isTimeToEncourage).then(getIdCtaButtons).then(function (someJson) {
	    // Presumes orbit has put the head and css link in the page
	    showPopup(someJson.html);
	  })['catch'](function (err) {
	    if (err !== 'not_signin_page') {
	      document.dispatchEvent(new CustomEvent('bbc-user-event', {
	        detail: {
	          container: 'sign-in-dismissible',
	          label: err
	        }
	      }));
	    }
	  });
	};
	
	// used in case of an emergency...
	var isAdsEnabled = function isAdsEnabled() {
	  if (window.bbcdotcom.config.isAdsEnabled() === true) {
	    return Promise.resolve(true);
	  }
	  return Promise.reject('ads_not_enabled');
	};
	
	var isOnAppropriatePage = function isOnAppropriatePage() {
	  // https://www.bbc.co.uk/news/business-49605180?ads techbiz
	  var keyword = bbcdotcom.adverts.keyValues.get('keyword');
	  if (keyword && keyword === 'signin') {
	    return Promise.resolve(true);
	  }
	  if (/[?|&]idcta-debug/.test(window.location.href)) {
	    return Promise.resolve(true);
	  }
	  return Promise.reject('not_signin_page');
	};
	
	var storageAvailable = function storageAvailable(type) {
	  var storage = void 0;
	  try {
	    storage = window[type];
	    var x = '__storage_test__';
	    storage.setItem(x, x);
	    storage.removeItem(x);
	    return true;
	  } catch (e) {
	    return e instanceof DOMException && (
	    // everything except Firefox
	    e.code === 22 ||
	    // Firefox
	    e.code === 1014 ||
	    // test name field too, because code might not be present
	    // everything except Firefox
	    e.name === 'QuotaExceededError' ||
	    // Firefox
	    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
	    // acknowledge QuotaExceededError only if there's something already stored
	    storage && storage.length !== 0;
	  }
	};
	
	var isLocalStorageAvailable = function isLocalStorageAvailable() {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
	  if (storageAvailable('localStorage')) {
	    return Promise.resolve(true);
	  }
	  return Promise.reject('no_local_storage');
	};
	
	var isUserEligible = function isUserEligible() {
	  var checks = [window.bbcuser.isSignedIn(), window.bbcuser.allowsPerformanceCookies()];
	
	  // window.bbcuser.allowsFunctionalCookies()
	  // funcCookies
	
	  return Promise.all(checks).then(function (_ref) {
	    var _ref2 = _slicedToArray(_ref, 2),
	        signedIn = _ref2[0],
	        perfCookies = _ref2[1];
	
	    if (signedIn) {
	      return Promise.reject('user_signed_in');
	    }
	
	    // don't worry about functoinal cookies for now
	    // (!perfCookies || !funcCookies)
	
	    if (!perfCookies) {
	      return Promise.reject('cookies_disabled');
	    }
	
	    return Promise.resolve(true);
	  });
	};
	
	var isIdctaFlagpoleGreen = function isIdctaFlagpoleGreen() {
	  return window.require(['idcta-v2/config'], function (idcta) {
	    var FLAGPOLE = idcta['id-availability'];
	    if (FLAGPOLE !== 'GREEN') {
	      return Promise.reject('idcta_flagpole');
	    }
	    return Promise.resolve(true);
	  });
	};
	
	// 7 days
	var SECS_AFTER_DISMISS_UNTIL_PROMPTABLE = 7 * 24 * 60 * 60;
	var isTimeToEncourage = function isTimeToEncourage() {
	  var timeStamp = window.localStorage.getItem(DISMISSED_TIMESTAMP_KEY);
	  var timeStampInt = timeStamp ? parseInt(timeStamp, 10) : 0;
	  if (timeStampInt === 0 || timeStampInt + SECS_AFTER_DISMISS_UNTIL_PROMPTABLE < timestampInSecNow()) {
	    return Promise.resolve(true);
	  }
	  return Promise.reject('recently_dismissed');
	};
	
	var getIdCtaButtons = function getIdCtaButtons() {
	  var size = getBreakpoint();
	  var buttonColour = 'white';
	  var buttonSize = size === 0 ? 'small' : 'medium';
	  var context = 'news';
	  var userOrigin = 'NEWS_GNL';
	  var ptrt = window.location.href.replace(/\?.*$/, '') + '?prompt';
	  var root = 'https://idcta.test.api.bbc.com';
	  if (window.location.hostname === 'www.bbc.com') {
	    root = 'https://idcta.api.bbc.com';
	  }
	
	  var url = root + '/idcta/init?&context=' + context + '&userOrigin=' + userOrigin + '&ptrt=' + ptrt + '&buttonSize=' + buttonSize + '&buttonColour=' + buttonColour;
	  return fetch(url).then(function (response) {
	    return response.json();
	  });
	};
	
	var timestampInSecNow = function timestampInSecNow() {
	  return Math.floor(Date.now() / 1000);
	};
	
	var getBreakpoint = function getBreakpoint() {
	  // 0 mobile, 1 tablet, 2 desktop
	  var size = 0;
	  if (window.matchMedia('(min-width: 721px)').matches) {
	    size = 1;
	  } else if (window.matchMedia('(min-width: 1025px)').matches) {
	    size = 2;
	  }
	  return size;
	};
	
	var _signinBox = void 0,
	    _background = void 0,
	    _tabList = void 0,
	    _currentTab = void 0;
	var DISMISSED_TIMESTAMP_KEY = 'dotcom/news/dismiss-timestamp';
	var TITLE_TEXT = 'Sign in to get the best from the BBC';
	var WHY_TEXT = 'Why sign in to the BBC?';
	var CLOSE_BTN_TEXT = 'Maybe later';
	
	var showPopup = function showPopup(html) {
	  if (_signinBox) {
	    closePopup(true);
	  }
	
	  _background = document.createElement('div');
	  _background.setAttribute('id', 'sign_in-bg');
	
	  _signinBox = document.createElement('div');
	  _signinBox.setAttribute('id', 'sign_in');
	  _signinBox.setAttribute('role', 'alertdialog');
	  _signinBox.setAttribute('data-bbc-container', 'sign-in-dismissible');
	  _signinBox.setAttribute('data-bbc-title', 'sign-in-container-viewed');
	  _signinBox.setAttribute('aria-labelledby', 'sign_in-header');
	
	  var container = document.createElement('div');
	  container.className = 'sign_in-container';
	
	  var header = document.createElement('h2');
	  header.className = 'sign_in-header';
	  header.setAttribute('id', 'sign_in-header');
	  header.textContent = TITLE_TEXT;
	  container.appendChild(header);
	
	  var buttons = document.createElement('div');
	  buttons.className = 'sign_in-button-container';
	  buttons.innerHTML = html;
	
	  var signinButton = buttons.querySelector('.id4-cta-signin');
	  var registerButton = buttons.querySelector('.id4-cta-register');
	  signinButton.setAttribute('data-bbc-title', 'sign-in');
	  signinButton.setAttribute('data-bbc-container', 'sign-in-dismissible');
	  registerButton.setAttribute('data-bbc-title', 'register');
	  registerButton.setAttribute('data-bbc-container', 'sign-in-dismissible');
	
	  container.appendChild(buttons);
	  _signinBox.appendChild(container);
	
	  setTimeout(function () {
	    signinButton.focus();
	  }, 100);
	
	  var closeButton = document.createElement('button');
	  closeButton.className = 'sign_in-exit';
	  closeButton.setAttribute('aria-label', 'close');
	  closeButton.setAttribute('data-bbc-title', 'dismiss');
	  closeButton.setAttribute('data-bbc-container', 'sign-in-dismissible');
	  closeButton.textContent = CLOSE_BTN_TEXT;
	  container.appendChild(closeButton);
	
	  closeButton.addEventListener('click', function (event) {
	    event.preventDefault();
	    window.localStorage.setItem(DISMISSED_TIMESTAMP_KEY, String(timestampInSecNow()));
	
	    // have to wait to close popup here otherwise stats don't fire
	    setTimeout(function () {
	      closePopup();
	    }, 100);
	  });
	
	  var linebreak = document.createElement('hr');
	  linebreak.className = 'sign_in-line-break';
	  container.appendChild(linebreak);
	
	  var whyLink = document.createElement('a');
	  whyLink.target = '_blank';
	  whyLink.className = 'sign_in-why';
	
	  // need to find and add extras to this url. i.e. ptrt
	  whyLink.href = 'https://www.bbc.com/usingthebbc/your-bbc-account-global';
	  whyLink.setAttribute('data-bbc-title', 'why-sign-in');
	  whyLink.setAttribute('data-bbc-container', 'sign-in-dismissible');
	
	  var whyIcon = document.createElement('span');
	  whyIcon.className = 'sign_in-why-icon';
	  whyIcon.innerHTML = '<svg focusable=\'false\' viewBox=\'0 0 32 32\'><path d=\'M16 0C7.2 0 0 7.2 0 16s7.2 16 16 16 16-7.2 16-16S24.8 0 16 0zm2 25h-4V13h4v12zm0-14h-4V7h4v4z\'></path></svg>';
	  whyLink.appendChild(whyIcon);
	
	  var whyTextSpan = document.createElement('span');
	  whyTextSpan.className = 'sign_in-why-text';
	  whyTextSpan.textContent = WHY_TEXT;
	  whyLink.appendChild(whyTextSpan);
	
	  container.appendChild(whyLink);
	
	  _tabList = [signinButton, registerButton, closeButton, whyLink];
	  _currentTab = 1;
	
	  var keyHandler = function keyHandler(e) {
	    var keyCode = e.keyCode || e.which;
	
	    switch (keyCode) {
	      case 27:
	        e.preventDefault();
	        closePopup();
	        break;
	      case 9:
	        //Override tab controls to tab loop inside popup and prevent focus from moving to the page underneath
	        e.preventDefault();
	
	        var tl1 = _tabList.length - 1;
	
	        if (e.shiftKey) {
	          _currentTab = _currentTab === 0 ? tl1 : _currentTab - 1;
	        } else {
	          _currentTab = _currentTab === tl1 ? 0 : _currentTab + 1;
	        }
	
	        setTimeout(function () {
	          _tabList[_currentTab].focus();
	        }, 200);
	        break;
	      default:
	    }
	  };
	
	  for (var i = 0; i < _tabList.length; i++) {
	    _tabList[i].addEventListener('keydown', keyHandler);
	  }
	
	  // Has to be inside orb-modules otherwise text content from idcta changes
	  var element = document.getElementById('orb-modules');
	  element.appendChild(_background);
	  element.appendChild(_signinBox);
	};
	
	var closePopup = function closePopup() {
	  if (_background) {
	    _background.parentNode.removeChild(_background);
	    _background = undefined;
	  }
	  if (_signinBox) {
	    _signinBox.parentNode.removeChild(_signinBox);
	    _signinBox = undefined;
	  }
	};
	
	module.exports = {
	  init: function init() {
	    attemptToShowSignin();
	  }
	};

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    ad: __webpack_require__(265),
	    adAsyncRenderer: __webpack_require__(268),
	    adFactory: __webpack_require__(269),
	    adFilter: __webpack_require__(206),
	    adRegister: __webpack_require__(200),
	    adRenderer: __webpack_require__(270),
	    adsenseRenderer: __webpack_require__(271),
	    adSuites: __webpack_require__(260),
	    adText: __webpack_require__(267),
	    adUnit: __webpack_require__(203),
	    adUnitWebService: __webpack_require__(204),
	    branding: __webpack_require__(266),
	    breakpoints: __webpack_require__(207),
	    dfppRequest: __webpack_require__(198),
	    keyValues: __webpack_require__(176),
	    layout: __webpack_require__(199),
	    outbrainRenderer: __webpack_require__(272),
	    slot: __webpack_require__(273),
	    slotAsync: __webpack_require__(274),
	    slotDeferred: __webpack_require__(205),
	    slotInfinite: __webpack_require__(275)
	};

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Branding = __webpack_require__(266);
	
	var utils = __webpack_require__(143);
	var pubsub = __webpack_require__(202);
	var layout = __webpack_require__(199);
	
	var log = __webpack_require__(144)('adverts:ad');
	
	var AD_HEIGHT_ADJUSTMENT = 30,
	    SLOT_PREFIX = 'bbccom_',
	    AD_IS_VISIBLE = SLOT_PREFIX + 'visible',
	    AD_IS_SHUT_CLASS = SLOT_PREFIX + 'shut',
	    DISPLAY_NONE_CLASS = SLOT_PREFIX + 'display_none',
	    adTextKey = {
	    "default": 'advertisementText',
	    "sponsor_section": 'sponsoredByText',
	    "sponsor": 'inAssociationWithText',
	    "module": 'inAssociationWithText',
	    "partner": 'advertisingPartnersText',
	    "adsense": 'advertisementText'
	};
	
	var getContents = function getContents(domId) {
	    var domAd = document.getElementById(domId);
	    if (typeof domAd !== 'undefined' && domAd !== null) {
	        return domAd.innerHTML.replace(/\s+/g, '');
	    }
	    return false;
	};
	
	/**
	 * GNADTECH-1705-flexframe-ad
	 */
	var flexFrameAdUpdate = function flexFrameAdUpdate(domId) {
	    try {
	        var leaderboardEl = document.getElementById(domId);
	        var flexframeEl = leaderboardEl.getElementsByClassName('celtra-ad-inline-host');
	        var adFrameEl = utils.getParentElementByClass(leaderboardEl, 'AdFrame__inner', 5, true);
	        if (flexframeEl.length > 0) {
	            log('Flex Frame Ad detected');
	            utils.addTagClass(leaderboardEl, 'flexframe-ad');
	            utils.addTagClass(leaderboardEl.parentElement, 'flexframe-ad');
	            if (adFrameEl) {
	                //PWA extra
	                utils.addTagClass(adFrameEl, 'flexframe-ad');
	            }
	        }
	    } catch (e) {}
	};
	
	var Ad = function Ad(adID) {
	    this.adID = adID;
	    this.domId = SLOT_PREFIX + adID;
	    this.width = null;
	    this.height = null;
	    this.branding = false;
	    this.preloaded = false;
	    this.closed = false;
	    this.rendered = false;
	    this.eventSize = null;
	    this.contents = {
	        base: false
	    };
	    this.element = null;
	
	    this.adType = 'standard';
	    this.sizeSet = false;
	    this.isResponsive = false;
	    this.isFluid = false;
	    this.allowScreenReader = false;
	    this.currentSlotGroups = [];
	    this.registeredSlotGroups = [];
	    this.sticky = { isSticky: false };
	};
	
	Ad.prototype.setClosed = function (value) {
	    this.closed = value;
	    return this.closed;
	};
	
	Ad.prototype.close = function () {
	    log('close ' + this.adID);
	    this.setClosed(true);
	    this.shut();
	};
	
	Ad.prototype.isCloseAd = function () {
	    return this.closed;
	};
	
	Ad.prototype.setRendered = function (value) {
	    this.rendered = value;
	    return this.rendered;
	};
	
	Ad.prototype.isRendered = function () {
	    return this.rendered;
	};
	
	Ad.prototype.setConfig = function (config) {
	    var i;
	    for (i in config) {
	        if (config.hasOwnProperty(i)) {
	            this[i] = config[i];
	        }
	    }
	    return this;
	};
	
	Ad.prototype.setBaseContent = function () {
	    this.contents.base = getContents(this.domId);
	    return this.contents.base;
	};
	
	Ad.prototype.getBaseContent = function () {
	    return this.contents.base;
	};
	
	Ad.prototype.setCurrentSlotGroups = function (currentSlot) {
	    log('settings slot groups for ' + this.adID + ' to ' + currentSlot);
	    this.currentSlotGroups = currentSlot;
	    return this;
	};
	
	Ad.prototype.getCurrentSlotGroups = function () {
	    return this.currentSlotGroups;
	};
	
	Ad.prototype.registerSlotGroups = function (groups) {
	    this.registeredSlotGroups.push(groups);
	};
	
	Ad.prototype.getRegisteredSlotGroups = function () {
	    return this.registeredSlotGroups;
	};
	
	Ad.prototype.setPreloaded = function (preload) {
	    this.preloaded = preload;
	    return this;
	};
	
	Ad.prototype.isPreloaded = function () {
	    return this.preloaded;
	};
	
	/**
	 * @deprecated Use getDomElement()
	 * @returns {null|Element|*}
	 */
	Ad.prototype.domElement = function () {
	    return this.getDomElement();
	};
	
	Ad.prototype.getDomElement = function () {
	    if (!this.element) {
	        this.element = document.getElementById(this.domId);
	    }
	    if (!this.element && this.domId.indexOf('adsense') > -1) {
	        this.element = document.getElementsByClassName(this.domId)[0];
	    }
	    return this.element;
	};
	
	Ad.prototype.getAdvertDimensions = function () {
	    // Use forced set width & height if set
	    var advert = document.getElementById(this.domId);
	    return {
	        width: this.width || (advert ? advert.clientWidth : 0),
	        height: this.height || (advert ? advert.clientHeight : 0)
	    };
	};
	
	Ad.prototype.setWidth = function (clientWidth) {
	    this.width = clientWidth;
	    return this;
	};
	
	Ad.prototype.getWidth = function () {
	    return parseInt(this.getAdvertDimensions().width, 10);
	};
	
	Ad.prototype.setHeight = function (clientHeight) {
	    this.height = clientHeight;
	    return this;
	};
	
	Ad.prototype.getHeight = function () {
	    return parseInt(this.getAdvertDimensions().height, 10);
	};
	
	Ad.prototype.getCreativeHeight = function () {
	    return bbcdotcom.objects('bbcdotcom.config.isAsync') ? this.getHeight() : this.getHeight() - AD_HEIGHT_ADJUSTMENT;
	};
	
	Ad.prototype.setAdDomHeightWidth = function (height, width, isIframeSettingSize) {
	    var element = this.getDomElement();
	    if (element !== null && (!this.sizeSet || isIframeSettingSize)) {
	        var adPadHeight = 35;
	        if (typeof width !== 'undefined') {
	            element.style.width = width + 'px';
	        }
	        element.style.height = height + adPadHeight + 'px';
	        this.sizeSet = true;
	    }
	};
	
	/**
	 * A function used by third party ads to change the size of the iFrame and it's other div's
	 * @param height
	 * @param width
	 * @returns Ad
	 */
	Ad.prototype.setIframeSize = function (height, width) {
	    var element = this.getDomElement();
	    var x,
	        adIframes = element.getElementsByTagName("iframe"),
	        insElements = element.getElementsByTagName("ins");
	    this.setAdDomHeightWidth(height, width, true);
	    this.setEventSize([width, height]);
	    if (adIframes.length >= 1 && typeof adIframes[0] !== 'undefined') {
	        if (typeof width !== 'undefined') {
	            adIframes[0].width = width;
	        }
	        adIframes[0].height = height;
	    }
	    for (x in insElements) {
	        if (typeof insElements[x].style !== "undefined") {
	            if (typeof width !== 'undefined') {
	                insElements[x].style.width = width + 'px';
	            }
	            insElements[x].style.height = height + 'px';
	        }
	    }
	    this.openAsync(width, height);
	    pubsub.trigger('ad:resize', this.adID, width, height);
	    pubsub.trigger('ad:resize:' + this.adID, this.adID, width, height);
	
	    return this;
	};
	
	Ad.prototype.setResponsive = function (responsive) {
	    this.isResponsive = responsive;
	    utils.addTagClass(this.getDomElement(), 'bbccom_responsive');
	    return this;
	};
	
	Ad.prototype.getAdTextKey = function () {
	    var x;
	    for (x in adTextKey) {
	        if (this.adID !== undefined && typeof this.adID.indexOf !== 'undefined' && this.adID.indexOf(x) !== -1) {
	            return adTextKey[x];
	        }
	    }
	    return adTextKey['default'];
	};
	
	Ad.prototype.getAdText = function () {
	    return typeof this.hasAdText !== 'undefined' && this.hasAdText === false ? false : typeof this.advertText === 'undefined' ? bbcdotcom.adverts.adText.getText(this.getAdTextKey()) : this.advertText;
	};
	
	Ad.prototype.setAdText = function (advertText) {
	    if (this.adID.indexOf('sponsor') === 0 && advertText && /^[A-Za-z '\_-]+$/.test(advertText)) {
	        this.advertText = advertText;
	        this.hasAdText = true;
	    }
	};
	
	Ad.prototype.getAdInfoUrl = function () {
	    return bbcdotcom.adverts.adText.getInfoUrl(this.getAdTextKey());
	};
	
	Ad.prototype.getAdId = function () {
	    return this.adID;
	};
	
	Ad.prototype.getAdName = function () {
	    return this.getAdId();
	};
	
	/**
	 * USED in Synchronous slot requests
	 */
	Ad.prototype.show = function () {
	    var current = getContents(this.domId);
	    this.element = document.getElementById(this.domId);
	    if (current && !this.isCloseAd() && !bbcdotcom.objects('bbcdotcom.config.isAsync')) {
	        this.setClosed(this.contents.base === current && -1 === current.indexOf('iframe'));
	        this.open();
	    }
	    this.disableScreenReaderForAdContent();
	};
	
	/**
	 * We need to disable tabbing through ads as not all ads are built for screen readers
	 */
	Ad.prototype.disableScreenReaderForAdContent = function () {
	    var i, j, links, iframes, element;
	    var adSlots = document.getElementsByClassName('bbccom_advert');
	    for (j = 0; j < adSlots.length; j++) {
	        element = adSlots[j];
	        links = element.getElementsByTagName('a');
	        for (i = 0; i < links.length; i++) {
	            links[i].tabIndex = "-1";
	        }
	        iframes = element.getElementsByTagName('iframe');
	        for (i = 0; i < iframes.length; i++) {
	            iframes[i].tabIndex = "-1";
	        }
	    }
	};
	
	/**
	 * TODO - The closing of slots and resizing does not work for IE7, awaiting google to send size
	 */
	Ad.prototype.shut = function () {
	    var element = this.getDomElement();
	    if (element !== null && typeof element !== 'undefined' && element.className.indexOf(AD_IS_SHUT_CLASS) === -1 && element.className.indexOf(DISPLAY_NONE_CLASS) === -1) {
	        // TODO - As we now shut the slot as opposed to the ad, following line could be removed
	        if (element.id.indexOf('bbccom_') === 0) {
	            utils.addTagClass(element, AD_IS_SHUT_CLASS);
	        }
	        if (element.parentElement.id.indexOf('bbccom_') === 0) {
	            utils.addTagClass(element.parentElement, AD_IS_SHUT_CLASS);
	        }
	        utils.removeTagClass(element.parentElement, AD_IS_VISIBLE);
	        utils.removeBodyTagClass(SLOT_PREFIX + this.adID);
	        if (this.domId.indexOf('mpu') > 0) {
	            utils.removeBodyTagClass(this.domId + "_" + "big");
	            utils.removeBodyTagClass(this.domId + "_" + "small");
	        }
	        pubsub.trigger('ad:close', this.adID);
	        pubsub.trigger('ad:close:' + this.adID, this.adID);
	    }
	};
	
	Ad.prototype.isShut = function () {
	    var element = this.getDomElement();
	    return element.className.indexOf(AD_IS_SHUT_CLASS) !== -1;
	};
	
	/**
	 * TODO - Move this into a separate sponsor class
	 */
	Ad.prototype.setTitleForSponsorAds = function () {
	    if (!this.branding && this.adID === 'sponsor_section') {
	        this.branding = new Branding(bbcdotcom.adverts.keyValues.get('keyword'));
	    }
	};
	
	/**
	 * USED in Synchronous slot requests
	 */
	Ad.prototype.open = function () {
	    var element = this.getDomElement();
	    this.setTitleForSponsorAds();
	    if (this.isResponsive) {
	        utils.addTagClass(element, 'bbccom_responsive');
	    }
	    if (!this.isCloseAd()) {
	        utils.removeTagClass(element, DISPLAY_NONE_CLASS);
	        // TODO - As we now shut the slot as opposed to the ad, following line could be removed
	        utils.removeTagClass(element, AD_IS_SHUT_CLASS);
	        utils.removeTagClass(element.parentElement, AD_IS_SHUT_CLASS);
	        utils.addBodyTagClass(SLOT_PREFIX + this.adID);
	        utils.addTagClass(element.parentElement, AD_IS_VISIBLE);
	        if (this.domId.indexOf('leaderboard') !== -1) {
	            flexFrameAdUpdate(this.domId);
	        }
	        if (layout.getCurrentGroupId() > 2 && this.domId.indexOf('mpu') > 0) {
	            utils.removeBodyTagClass(this.domId + "_" + "big");
	            utils.removeBodyTagClass(this.domId + "_" + "small");
	            utils.addBodyTagClass(this.domId + "_" + (this.height > 251 ? "big" : "small"));
	        }
	        this.disableScreenReaderForAdContent();
	    }
	};
	
	/**
	 * USED in Asynchronous slot requests
	 */
	Ad.prototype.openAsync = function (width, height) {
	    var element = this.getDomElement();
	    /**
	     * Setting ad size so we know if we need to close it on resize/rotation
	     */
	    this.setWidth(width);
	    this.setHeight(height);
	
	    /**
	     * Add body class for a responsive ad
	     */
	    if (this.isResponsive) {
	        utils.addTagClass(element, 'bbccom_responsive');
	    }
	    /**
	     * Add class for a fluid ad
	     */
	    if (this.isFluid) {
	        utils.addTagClass(element, 'bbccom_fluid');
	    }
	    /**
	     * Display the element
	     */
	    var self = this;
	    setTimeout(function () {
	        var isCloseAd = self.isCloseAd();
	        log('OpenAsync Timer ad:' + self.getAdId() + ', isCloseAd: ' + isCloseAd);
	        if (!isCloseAd) {
	            utils.removeTagClass(self.element, AD_IS_SHUT_CLASS);
	            utils.removeTagClass(self.element.parentElement, AD_IS_SHUT_CLASS);
	            utils.addTagClass(self.element.parentElement, AD_IS_VISIBLE);
	        }
	
	        pubsub.trigger('ad:done', self.adID, width, height);
	        pubsub.trigger('ad:done:' + self.adID, self.adID, width, height);
	        layout.reset();
	    }, 300);
	    utils.removeTagClass(document.getElementById('bbccom_' + this.adID + '_text'), DISPLAY_NONE_CLASS);
	    if (this.domId.indexOf('leaderboard') !== -1) {
	        flexFrameAdUpdate(this.domId);
	    }
	    /**
	     * Add a body class to show that the ad is in the page.
	     */
	    utils.addBodyTagClass(this.domId);
	    if (layout.getCurrentGroupId() > 2 && this.domId.indexOf('mpu') > 0) {
	        utils.removeBodyTagClass(this.domId + "_" + "big");
	        utils.removeBodyTagClass(this.domId + "_" + "small");
	        utils.addBodyTagClass(this.domId + "_" + (this.height > 251 ? "big" : "small"));
	    }
	    pubsub.trigger('ad:open', this.adID, width, height);
	    pubsub.trigger('ad:open:' + this.adID, this.adID, width, height);
	};
	
	/**
	 * @Todo temp fix for BBCCOM-7784 - we need to make this better.
	 * @param eventSize [width, height]
	 */
	Ad.prototype.setEventSize = function (eventSize) {
	    this.eventSize = eventSize;
	};
	
	Ad.prototype.renderIfReady = function () {
	    try {
	        if (this.getDomElement() !== null && this.isRendered()) {
	            if (!this.isCloseAd() && this.eventSize !== null && typeof this.eventSize[0] !== 'undefined' && typeof this.eventSize[1] !== 'undefined') {
	                /**
	                 * BBCCOM-5589 - View notes about issues with GPT slotRenderEnded event in IE browsers
	                 * Would be lovely to use promises here
	                 */
	                setTimeout(function () {
	                    if (this.isCloseAd()) {
	                        pubsub.trigger('ad:render:close', this.domId);
	                        log('renderIfReady ', this.domId, ' isCloseAd true - about to call .close()');
	                        this.close();
	                    } else {
	                        this.openAsync(this.eventSize[0], this.eventSize[1]);
	                    }
	                }.bind(this), 200);
	            } else {
	                pubsub.trigger('ad:render:close', this.domId);
	                log('renderIfReady about to call .close()');
	                this.close();
	            }
	        }
	    } catch (e) {
	        log.error('Failed during renderEndedCallback', e);
	    }
	};
	
	/**
	 * This was a news requirement in order to be able to position other elements on a page around whether an
	 * ad is visible or not, the bbccom_visible class is used within the tabloid news application
	 */
	Ad.prototype.setCurrentSlotVisible = function () {
	    var slotElement,
	        slot,
	        slots = this.getRegisteredSlotGroups();
	    for (slot in slots) {
	        if (slots.hasOwnProperty(slot)) {
	            slotElement = document.getElementById(SLOT_PREFIX + this.adID + '_' + slots[slot].join('_'));
	            utils.removeTagClass(slotElement, AD_IS_VISIBLE);
	        }
	    }
	    if (this.currentSlotGroups && this.currentSlotGroups.length > 0 && !this.closed) {
	        slotElement = document.getElementById(SLOT_PREFIX + this.adID + '_' + this.currentSlotGroups.join('_'));
	        utils.addTagClass(slotElement, AD_IS_VISIBLE);
	    }
	    slotElement = null;
	};
	
	Ad.prototype.hasAnyGroupAlreadyBeenRegistered = function (groups) {
	    var i, len, groupsRegistered;
	    groupsRegistered = [].concat.apply([], this.registeredSlotGroups).join();
	    for (i = 0, len = groups.length; i < len; i += 1) {
	        if (groupsRegistered.indexOf(groups[i]) !== -1) {
	            log.warn(groups[i] + ' has already been registered for ' + this.adID);
	            return true;
	        }
	    }
	    return false;
	};
	
	Ad.prototype.injectAdvertisementText = function () {
	    var adTextInterval = void 0;
	    var adText = void 0;
	    var adInfoUrl = void 0;
	    var injectTry = 0;
	
	    function tryInjectAdText() {
	        injectTry++;
	        var element = this.getDomElement();
	        if (element && element.getElementsByClassName('bbccom_text').length === 0) {
	            var aTag = document.createElement('a');
	            aTag.innerHTML = adText;
	            aTag.href = adInfoUrl;
	            aTag.className = 'bbccom_text';
	
	            element.insertBefore(aTag, element.firstChild);
	            clearInterval(adTextInterval);
	        } else if (injectTry >= 10) {
	            clearInterval(adTextInterval);
	        }
	    };
	    if (this.adID.includes('interstitial') || this.adID.includes('wallpaper')) {
	        return;
	    }
	    adText = this.getAdText();
	    if (adText) {
	        adInfoUrl = this.getAdInfoUrl();
	        adTextInterval = setInterval(tryInjectAdText.bind(this), 50);
	    }
	};
	
	Ad.prototype.hideAdContainer = function () {
	    var domAd = document.getElementById(this.domId);
	
	    if (domAd) {
	        try {
	            domAd.style.display = 'block';
	            domAd.style.height = '0px';
	            domAd.style.overflow = 'hidden';
	            domAd.style.padding = '0';
	        } catch (e) {}
	    }
	};
	
	Ad.prototype.currentSlotHasGroup = function (group) {
	    return this.getCurrentSlotGroups().indexOf(group) >= 0;
	};
	
	module.exports = Ad;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(152);
	var AdText = __webpack_require__(267);
	var keyValues = __webpack_require__(176);
	
	module.exports = function Branding(keyword) {
	    var href = false,
	        title = false,
	        keywordParts,
	        keywords = {
	        'firstperson': {
	            title: 'First Person',
	            url: '/news/magazine-14633099'
	        },
	        'firstpersonbigdreams': {
	            title: 'First Person Big Dreams',
	            url: '/news/magazine-14633099'
	        },
	        'picturethis': {
	            title: 'Picture This',
	            url: '/news/magazine-14760628'
	        },
	        'livingonline': {
	            title: 'Living Online',
	            url: '/news/magazine-14760626'
	        },
	        'rab': {
	            title: 'Running a Business',
	            url: '/news/business-16611973'
	        },
	        'powerofart': {
	            title: 'Power of Art',
	            url: '/news/magazine-21459225'
	        },
	        'alteredstates': {
	            title: 'Altered States',
	            url: '/news/magazine-14760627'
	        },
	        'uselection': {
	            title: 'US Election',
	            url: '/news/world-us-canada-15949569'
	        },
	        'jubilee': {
	            title: 'The Diamond Jubilee',
	            url: '/news/uk-17500000',
	            altTitle: "Back to Queen's Diamond Jubilee"
	        },
	        'entrepreneurship': {
	            title: 'Entrepreneurship',
	            url: '/news/business-22434141'
	        },
	        'energy': {
	            title: 'Energy',
	            url: '/news/business-15521824'
	        },
	        'knowledgeeconomy': {
	            title: 'Knowledge economy',
	            url: '/news/business-12686570'
	        },
	        'ceoguru': {
	            title: 'CEO Guru',
	            url: '/news/business-20071226'
	        },
	        'theboss': {
	            title: 'The Boss',
	            url: '/news/business-22449886'
	        },
	        'makingtime': {
	            title: 'Making Time',
	            url: '/news/magazine-24117219'
	        },
	        'thinkingbusiness': {
	            title: 'Thinking Business',
	            url: '/news/business-22449887'
	        },
	        'techbiz': {
	            title: 'Technology of Business',
	            url: '/news/business-11428889'
	        },
	        'meettheteam': {
	            title: 'Meet the team',
	            url: '/news/world-radio-and-tv-23426239'
	        },
	        '100women': {
	            title: '100 Women',
	            url: '/news/world-24371433'
	        },
	        'businessoftennis': {
	            title: 'Business of Tennis',
	            url: '/news/business-25319175'
	        },
	        'nextsiliconvalleys': {
	            title: 'The Next Silicon Valleys',
	            url: '/news/technology-25852150'
	        },
	        'businessofgiving': { // BBCCOM-5669
	            title: 'The Business of Giving',
	            url: '/news/business-19182463'
	        },
	        'howtosucceedin': { // BBCCOM-5730
	            title: 'How to Succeed In',
	            url: '/news/business-29617902'
	        },
	        'komladumor': { // BBCCOM-5981
	            title: 'Komla Dumor Award',
	            url: '/news/world-radio-and-tv-30725772'
	        },
	        'lifeofluxury': { //BBCCOM-6664 START
	            title: 'Life of Luxury',
	            url: '/news/business-31157861'
	        },
	        'themakingofme': {
	            title: 'The Making of Me',
	            url: '/news/business-32660236'
	        },
	        'singaporeat50': {
	            title: 'Singapore at 50',
	            url: '/news/world-asia-31522499'
	        },
	        'madeinamerica': {
	            title: 'Made in America',
	            url: '/news/business-30533292'
	        },
	        'tomorrowscities': {
	            title: 'Tomorrow\'s Cities',
	            url: '/news/technology-23517670'
	        },
	        'mybusiness': {
	            title: 'My Business',
	            url: '/news/business-15870435'
	        },
	        'newentrepreneurs': {
	            title: 'The New Entrepreneurs',
	            url: '/news/business-27614930'
	        },
	        'africabeats': {
	            title: 'Africa Beats',
	            url: '/news/entertainment-arts-17679490'
	        },
	        'asiabeats': {
	            title: 'Asia Beats',
	            url: '/news/entertainment-arts-26040146'
	        },
	        'latambeats': {
	            title: 'LatAm Beats',
	            url: '/news/world-latin-america-19523770'
	        },
	        'middleeastbeats': { //BBCCOM-6664 LAST
	            title: 'Middle East Beats',
	            url: '/news/world-middle-east-30555154'
	        },
	        'businessbrain': { //BBCCOM-6793
	            title: 'Business Brain',
	            url: '/news/business-32339576'
	        }
	    };
	
	    (function () {
	        keywordParts = keyValues.getKeywordParts();
	        if (typeof keywords[keyword] !== 'undefined') {
	            href = keywords[keyword].url;
	            title = keywords[keyword].title;
	        } else if (keywordParts) {
	            href = keywordParts.href;
	            title = keywordParts.title;
	        }
	    })();
	
	    /**
	     * Branding is only required on the News and World Service sites
	     */
	    if ((sections.getSections()[0] === 'news' || sections.getSections()[0] === 'worldservice') && "function" !== 'undefined') {
	        requirejs(['module/bootstrap', 'module/indexTitle'], function (news, indexTitle) {
	            var indexTitleString,
	                adTextKey = 'sponsoredByText',
	                adText = AdText.getText(adTextKey),
	                adInfoLink = AdText.getInfoUrl(adTextKey);
	            if (typeof indexTitle !== 'undefined') {
	                if (typeof indexTitle.setTitleHtml !== 'undefined' && indexTitle.getIndexTitle().element.length > 0) {
	                    indexTitleString = href && indexTitle.getIndexTitle().element.find('a').length >= 1 ? '<a href="' + href + '">' + title + '</a>' : indexTitle.getIndexTitle().element[0].textContent;
	
	                    indexTitle.setTitleHtml('<span class="bbccom_index_title">' + indexTitleString + '</span>' + '<a class="bbccom_text" href="' + adInfoLink + '" ' + 'tabindex="-1" aria-hidden="true">' + adText + '</a>');
	                }
	            }
	        });
	    }
	
	    return {
	        getUrl: function getUrl() {
	            return href;
	        },
	        getTitle: function getTitle() {
	            return title;
	        }
	    };
	};

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * This module is responsible for resolving the advert text and corresponding info URL for each text value.
	 * The actual strings are retrieved from the locale which is configured on a page by page
	 * basis by consumers of bbcdotcom.
	 *
	 * If we are adding a new text string or info URL in the future, we should add an entry to the
	 * AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP to map the ad text and URL correctly
	 *
	 * We can add overrides to the ad text based on the page sections - see SECTION_OVERRIDES below
	 *
	 */
	
	var utils = __webpack_require__(143);
	var sections = __webpack_require__(152);
	var locale = __webpack_require__(153);
	
	/**
	 * Overrides for the advert text based on sections & ad text key.
	 *
	 * Eg on bbc.com/sport/ultimate-performers/23003279?ads-debug
	 * sections.getSections() = ['sport', 'ulitamate-performers'];
	 *
	 * overrides = {
	     *   'sport': {
	     *     'ultimate-performers': {
	     *       inAssociationWithText: 'foo'
	     *     }
	     *   }
	     * }
	 *
	 * Wildcards (*) can be used to mean this section or any children thereof. Using the
	 * example data below, that would also match http://www.bbc.com/sport/ultimate-performers/rugbyfacts
	 * where sections.getSections() = ['sport', 'ulitamate-performers', 'rugbyfacts'];
	 *
	 * overridesWithWildcard = {
	     *   'sport': {
	     *     'ultimate-performers': {
	     *       '*': {
	     *         inAssociationWithText: 'foo'
	     *       }
	     *     }
	     *   }
	     * }
	 *
	 */
	var SECTION_OVERRIDES = {
	    'sport': {
	        'ultimate-performers': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        },
	        'move-like-never-before': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        },
	        'home-of-the-english-premier-league': {
	            '*': {
	                inAssociationWithText: 'Partnered Content Presented by'
	            }
	        }
	    }
	};
	
	/**
	 * Map of adTextKeys to info URL locale keys. This allows us to have different
	 * info URLs for different ad texts.
	 *
	 * @type {Object}
	 */
	var AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP = {
	    advertisementText: 'advertInfoPageUrl',
	    inAssociationWithText: 'associationInfoPageUrl',
	    sponsoredByText: 'associationInfoPageUrl',
	    advertisingPartnersText: 'associationInfoPageUrl',
	    adsByGoogleText: 'googleAdsPageUrl'
	};
	
	/**
	 * When there is no match in the map above for a given ad text key, use the below
	 * key when looking up the ad info URL in the locale.
	 *
	 * @type {string}
	 */
	var DEFAULT_INFO_URL_LOCALE_KEY = 'advertInfoPageUrl';
	
	module.exports = {
	
	    /**
	     * Get the ad text for the given adTextKey. If the adTextKey is invalid it will return undefined.
	     *
	     * @param adTextKey
	     * @returns {String|undefined}
	     */
	    getText: function getText(adTextKey) {
	        var s = utils.cleanArray(sections.getSections());
	        var overrides = SECTION_OVERRIDES;
	        var override;
	
	        // Return the matching object from the data config above.
	        var i, n;
	        for (i = 0, n = s.length; i < n; ++i) {
	            var k = s[i];
	            if (overrides.hasOwnProperty(k)) {
	                overrides = overrides[k];
	            } else if (!overrides.hasOwnProperty('*')) {
	                overrides = false;
	                break;
	            }
	        }
	
	        // If we found a matching object, extract the override if present
	        if (overrides && overrides.hasOwnProperty(adTextKey)) {
	            override = overrides[adTextKey];
	        } else if (overrides && overrides.hasOwnProperty('*') && overrides['*'].hasOwnProperty(adTextKey)) {
	            override = overrides['*'][adTextKey];
	        }
	
	        return override || locale.get(adTextKey);
	    },
	
	    /**
	     * Return the info info URL for the given adTextKey. If the adTextKey is invalid it will return undefined
	     *
	     * @param adTextKey
	     * @returns {String|undefined}
	     */
	    getInfoUrl: function getInfoUrl(adTextKey) {
	        var localeKey = AD_TEXT_KEY_TO_URL_LOCALE_KEY_MAP[adTextKey] || DEFAULT_INFO_URL_LOCALE_KEY;
	        return locale.get(localeKey);
	    },
	
	    /**
	     * Set the section overrides, used for unit testing
	     * @param overrides
	     */
	    setSectionOverrides: function setSectionOverrides(overrides) {
	        SECTION_OVERRIDES = overrides;
	    }
	};

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _pubsub = __webpack_require__(202);
	
	var _pubsub2 = _interopRequireDefault(_pubsub);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	exports['default'] = {
	    renderAd: function renderAd(ad, advertText) {
	        var adText, adInfo, adElement, adId, adSlotId, adNode;
	
	        if (advertText) {
	            ad.setAdText(advertText);
	        }
	        adText = ad.getAdText();
	        adId = ad.getAdId();
	        adSlotId = 'bbccom_' + adId;
	        adNode = document.getElementById(adSlotId);
	
	        _pubsub2['default'].trigger('ad:render', adId);
	        if (adText) {
	            adInfo = ad.getAdInfoUrl();
	            adElement = document.createElement("a");
	            adElement.setAttribute("class", "bbccom_text");
	            adElement.setAttribute("href", adInfo);
	            adElement.innerText = adText;
	            if (adNode && adNode.getElementsByClassName('bbccom_text').length === 0) {
	                adNode.prepend(adElement);
	            }
	        }
	        _pubsub2['default'].on('ads:initialised', function () {
	            googletag.cmd.push(function () {
	                googletag.display(adSlotId);
	                ad.disableScreenReaderForAdContent();
	                _pubsub2['default'].trigger('ad:render:complete', adId);
	            });
	        });
	    }
	};
	module.exports = exports['default'];

/***/ }),
/* 269 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = {
	    /**
	     * @param adId eg mpu, leaderboard
	     */
	    createAd: function createAd(adId) {
	        return new bbcdotcom.adverts.ad(adId);
	    }
	};

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var pubsub = __webpack_require__(202);
	
	var adText = '<a class="bbccom_text" href="{adInfo}">{adText}</a>',
	    adTemplate = '<script type="text/javascript">' + 'bbcdotcom.ad("{adId}").setBaseContent();' + 'googletag.display("{adId}");' + '</script>';
	
	module.exports = {
	    renderAd: function renderAd(data) {
	        var out = '';
	
	        pubsub.trigger('ad:render', data.adId);
	
	        if (data.adText) {
	            out = this.substituteData(adText, data);
	        }
	        out += this.substituteData(adTemplate, data);
	        document.write(out);
	
	        return out;
	    },
	    substituteData: function substituteData(template, data) {
	        var adHtml = template.replace(/\{[^{}]+\}/g, function (key) {
	            return data[key.replace(/[{}]+/g, "")] || key;
	        });
	        return adHtml;
	    }
	};

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var sections = __webpack_require__(152);
	var adText = __webpack_require__(267);
	var breakpoints = __webpack_require__(207);
	var layout = __webpack_require__(199);
	var utils = __webpack_require__(143);
	var config = __webpack_require__(150);
	var log = __webpack_require__(144)('adverts:adsenseRenderer');
	
	var productSettings = {
	    "news": {
	        //"false": { //news front page
	        //    "dataAdSlot": "1519812776"
	        //},
	        "dataAdSlot": "6031494774"
	    },
	    "weather": {
	        "dataAdSlot": "7287144776"
	    },
	    "weather/0": {
	        "dataAdSlot": "7949963556"
	    },
	    "sport": {
	        "dataAdSlot": "4333678371"
	    },
	    "worldservice": {
	        "arabic": {
	            "dataAdSlot": "5810411579"
	        },
	        "hindi": {
	            "dataAdSlot": "5131780375"
	        },
	        "mundo": {
	            "dataAdSlot": "2597116378"
	        },
	        "portuguese": {
	            "dataAdSlot": "1027494774"
	        },
	        "turkce": {
	            "dataAdSlot": "1120383176"
	        }
	    },
	    "default": {
	        "dataAdSlot": "2504227975"
	    }
	};
	
	var getSettings = function getSettings() {
	    var section = sections.getSection(0),
	        sub_section = sections.getSection(1).toString(),
	        windowLocation = config.getWindowLocation();
	
	    if (/(adsense=)(\d{10})$/.test(window.location.href)) {
	        return { "dataAdSlot": RegExp.$2 };
	    }
	
	    if (productSettings[section]) {
	        if (windowLocation.pathname.indexOf('/weather/0') === 0) {
	            log('Adsense for ', section, "/0 = ", productSettings['weather/0']);
	            return productSettings['weather/0'];
	        }
	        if (productSettings[section][sub_section]) {
	            log('Adsense for ', section, "/", sub_section, " = ", productSettings[section][sub_section].dataAdSlot);
	            return productSettings[section][sub_section];
	        } else {
	            log('Adsense for ', section, " = ", productSettings[section].dataAdSlot);
	            return productSettings[section];
	        }
	    } else {
	        log('No adsense data found for this page (', section, "/", sub_section, "), using default ", productSettings['default'].dataAdSlot);
	        return productSettings['default'];
	    }
	};
	
	var loadGoogleAdsense = function loadGoogleAdsense() {
	    var adSenseScript;
	    function initAdsense() {
	        setTimeout(function () {
	            if (bbcdotcom.config.isNPA() && adsbygoogle) {
	                adsbygoogle.requestNonPersonalizedAds = 1;
	            }
	        }, 600);
	    }
	    if (typeof window.adsbygoogle === 'undefined') {
	        adSenseScript = document.createElement("script");
	        adSenseScript.setAttribute("async", "async");
	        adSenseScript.setAttribute("src", '//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js');
	        adSenseScript.setAttribute("onload", initAdsense());
	        document.body.appendChild(adSenseScript);
	        return true;
	    }
	    return false;
	};
	
	var reset = function reset() {
	    var fixedWidth,
	        currentGroupId = layout.getCurrentGroupId(),
	        adsenseGroups = [],
	        maxGroup;
	    if (!document.getElementById('bbccom_adsense') || document.getElementById('bbccom_adsense') && document.getElementById('bbccom_adsense').getElementsByTagName('iframe').length < 1) {
	        return;
	    }
	    fixedWidth = document.getElementById('bbccom_adsense').getElementsByTagName('iframe')[0].width;
	    adsenseGroups = document.getElementById('bbccom_adsense').parentElement.id.replace('bbccom_adsense_', '').split('_');
	    maxGroup = adsenseGroups[adsenseGroups.length - 1];
	    if (maxGroup == 5 && fixedWidth < breakpoints.getGroup(currentGroupId).f || fixedWidth < breakpoints.getGroup(currentGroupId).f && currentGroupId < 4 || currentGroupId > 3 && fixedWidth < 301) {
	        log.debug('=== Opening adsense for current layout ===');
	        utils.removeTagClass(document.getElementById('bbccom_adsense'), 'bbccom_shut');
	        utils.addTagClass(document.getElementById('bbccom_adsense'), 'bbccom_visible');
	    } else {
	        log.debug('=== Shutting adsense for current layout ===');
	        utils.removeTagClass(document.getElementById('bbccom_adsense'), 'bbccom_visible');
	        utils.addTagClass(document.getElementById('bbccom_adsense'), 'bbccom_shut');
	    }
	    document.getElementById('bbccom_adsense').getElementsByTagName('iframe')[0].tabIndex = "-1";
	};
	
	module.exports = {
	    loadGoogleAdsense: loadGoogleAdsense,
	    getSettings: getSettings,
	    renderAd: function renderAd(adId, groups) {
	        var adSenseElement,
	            adSenseRunScript,
	            productSettings = getSettings(),
	            adTextKey = 'adsByGoogleText',
	            adTextValue = adText.getText(adTextKey),
	            adInfoUrl = adText.getInfoUrl(adTextKey),
	            isFullWidth = window.document.documentElement.offsetWidth < breakpoints.getGroup(4).s,
	            offsetWidth = layout.getCurrentGroupId() < 2 ? 16 : 32,
	            slotId = 'bbccom_' + adId + '_' + groups.join('_'),
	            slotWidth = isFullWidth ? window.document.documentElement.offsetWidth - offsetWidth + 'px' : Math.min(document.getElementById(slotId).parentElement.offsetWidth, 300) + 'px',
	            slotHeight = layout.getCurrentGroupId() === 3 ? '350px' : '430px';
	
	        if (typeof window.adsbygoogle === 'undefined') {
	            loadGoogleAdsense();
	        }
	        if (groups[groups.length - 1] == 5) {
	            slotWidth = document.getElementById(slotId).parentElement.offsetWidth - offsetWidth + 'px';
	            slotHeight = '150px';
	        }
	        adSenseElement = '<h3><a href="' + adInfoUrl + '" tabindex="-1">' + adTextValue + '</a></h3>' + '<ins class="adsbygoogle" ' + 'style="display:inline-block;width:' + slotWidth + ';height:' + slotHeight + ';max-width:' + slotWidth + ';" ' + 'data-ad-client="ca-pub-5087960732420604" ' + 'data-ad-slot=' + productSettings.dataAdSlot + '></ins>';
	        try {
	            document.getElementById(slotId).className += ' bbccom_adsense_slot';
	            document.getElementById(slotId).getElementsByClassName('bbccom_advert')[0].id = 'bbccom_adsense';
	            document.getElementById(slotId).getElementsByClassName('bbccom_advert')[0].innerHTML = adSenseElement;
	            adSenseRunScript = document.createElement("script");
	            adSenseRunScript.innerHTML = '(adsbygoogle = window.adsbygoogle || []).push({});';
	            document.body.appendChild(adSenseRunScript);
	            return true;
	        } catch (e) {
	            return false;
	        }
	    },
	    reset: reset
	};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 *
	 * Note: This is called in slot.js AND currencyProviders.js
	 *
	 */
	var config = __webpack_require__(150);
	var sections = __webpack_require__(152);
	
	/**
	 * Map of templates used for rendering the outbrain widget. The key is the first section
	 * from bbcdotcom.sections. If we add outbrain to a new product, we will need to add a
	 * template to this map otherwise the News template will be used as a default.
	 */
	var productTemplates = {
	    news: 'bbc.com/News',
	    sport: 'bbc.com/Sport',
	    fallback: 'bbc.com/News'
	};
	
	var loadScriptCalled = false;
	
	function sanitiseDataSrc(href) {
	    if (href.match(/^(https|http):\/\/(pal|m|www).*.bbc.(com|co.uk)/)) {
	        return encodeURIComponent(href.replace(/(\?|#).+$/, '') // Remove everything after ? or #
	        );
	    } else {
	        return encodeURIComponent('http://www.bbc.com/news');
	    }
	}
	
	function generateHtml(id, template) {
	    var windowLocation = config.getWindowLocation();
	    var url = sanitiseDataSrc(windowLocation.href.replace(/(pal|m).sandbox.dev/, 'www'));
	
	    return '<div class="bbccom_outbrain_container bbccom_' + id + '">' + '<div class="OUTBRAIN" data-src="' + url + '" data-widget-id="' + id.replace(/outbrain_/, '').toUpperCase() + '" data-ob-template="' + template + '"></div>' + '</div>';
	}
	
	function loadScript(src) {
	    var a = document.createElement("script");
	    a.type = "text/javascript";
	    a.async = true;
	    a.src = src;
	    var b = document.getElementsByTagName("script")[0];
	    b.parentNode.insertBefore(a, b);
	}
	
	module.exports = {
	    sanitiseDataSrc: sanitiseDataSrc,
	    renderAd: function renderAd(id) {
	        var product = sections.getSection(0);
	        var template = productTemplates[product] || productTemplates.fallback;
	        var elId = 'bbccom_' + id;
	        if (!config.isIE7() && config.isOutbrainEnabled()) {
	            // IE7 cannot document.write() within a document.write() and place contents into the <div>
	            var html = generateHtml(id, template);
	            if (!loadScriptCalled) {
	                loadScript("https://widgets.outbrain.com/outbrain.js");
	                loadScriptCalled = true;
	            }
	            if (document.getElementById(elId)) {
	                document.getElementById(elId).innerHTML = html;
	            }
	            return html;
	        }
	        return false;
	    }
	};

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(143);
	var config = __webpack_require__(150);
	var adRegister = __webpack_require__(200);
	var layout = __webpack_require__(199);
	var adRenderer = __webpack_require__(270);
	var outbrainRenderer = __webpack_require__(272);
	var adsenseRenderer = __webpack_require__(271);
	
	module.exports = function slot(adId, groups, preload, advertText, currentScriptTag) {
	    'use strict';
	
	    var log = __webpack_require__(144)('adverts:slot');
	
	    try {
	        if (config.isActive('ads') && typeof adId === 'string' && adId.length > 0 && typeof groups !== 'undefined') {
	            var slotConfig,
	                scriptTags,
	                ad = adRegister.getAd(adId),
	                currentGroupId = layout.getCurrentGroupId(),
	                slotDomId = preload ? 'bbccom_' + adId + '_' + groups.join('_') + '_preload' : 'bbccom_' + adId + '_' + groups.join('_'),
	                slotElement = document.getElementById(slotDomId),
	                adDomId = 'bbccom_' + adId;
	            if (typeof ad !== 'undefined' && typeof ad.getAdId() !== 'undefined') {
	                slotConfig = {
	                    adInfo: ad.getAdInfoUrl(),
	                    adText: advertText || ad.getAdText(),
	                    adDomId: adDomId,
	                    adId: adId
	                };
	                if (!ad.hasAnyGroupAlreadyBeenRegistered(groups)) {
	                    ad.registerSlotGroups(groups);
	                    /** Legacy ad slots will not have the ID defined in the markup */
	                    if (slotElement === null) {
	                        scriptTags = document.getElementsByTagName("script");
	                        currentScriptTag = typeof currentScriptTag === 'undefined' ? scriptTags[scriptTags.length - 1].innerHTML.indexOf('bbcdotcom') === -1 ? scriptTags[scriptTags.length - 2] : scriptTags[scriptTags.length - 1] : currentScriptTag;
	                        slotElement = utils.getParentElementByClass(currentScriptTag, 'bbccom_slot');
	                        if (!slotElement) {
	                            log.warn('"bbccom_slot" class not found for this slot "' + slotDomId + '"');
	                            adRegister.setCurrentAdId(undefined);
	                            return false;
	                        }
	                        slotElement.id = slotDomId;
	                    }
	                    /** END Legacy ad slots will not have the ID defined in the markup */
	
	                    slotElement.className += ' bbccom_' + ad.adType + '_slot';
	
	                    if (groups.indexOf(currentGroupId) >= 0) {
	                        // Ad can be rendered because slot matches current group id (width)
	                        ad.setCurrentSlotGroups(groups);
	
	                        if (typeof preload !== 'undefined' && preload) {
	                            ad.setPreloaded(true);
	                        }
	
	                        // Tell the register that this ad is currently being processed (for .show)
	                        adRegister.setCurrentAdId(adId);
	
	                        // Assign adDomId to enable copying ad and moving
	                        slotElement.children[0].id = adDomId;
	
	                        ad.setCurrentSlotVisible();
	
	                        // Render ad in Html
	                        if (adId.indexOf('adsense') === 0) {
	                            // Google Adsense advert (eg adsense, adsense_mpu)
	                            return adsenseRenderer.renderAd();
	                        } else if (adId.indexOf('outbrain') === 0) {
	                            // Outbrain - note, TR_1 is injected in currencyProviders.js
	                            return outbrainRenderer.renderAd(adId);
	                        } else {
	                            // Standard advert
	                            return adRenderer.renderAd(slotConfig);
	                        }
	                    } else {
	                        adRegister.setCurrentAdId(false);
	                    }
	                }
	            }
	        }
	    } catch (e) {
	        log.error(e);
	    }
	};

/***/ }),
/* 274 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function (adId, groups, advertText) {
	    var ad,
	        slot,
	        slotDomChildElement,
	        currentGroupId = bbcdotcom.adverts.layout.getCurrentGroupId();
	
	    if (window.bbcdotcom && bbcdotcom.ad && bbcdotcom.isActive && bbcdotcom.isActive('ads')) {
	        if (bbcdotcom.adverts.adFilter.isLazyLoadedSlot(adId)) {
	            bbcdotcom.lazyLoadAd(adId, groups, advertText);
	            return;
	        }
	        ad = bbcdotcom.ad(adId);
	        if (typeof ad !== 'undefined' && !ad.hasAnyGroupAlreadyBeenRegistered([groups])) {
	            ad.registerSlotGroups(groups);
	            if (groups.indexOf(currentGroupId) >= 0) {
	
	                ad.setCurrentSlotGroups(groups);
	
	                slot = document.getElementById('bbccom_' + adId + '_' + groups.join('_'));
	                slotDomChildElement = slot.firstElementChild || slot.firstChild;
	                if (slotDomChildElement) {
	                    slotDomChildElement.id = 'bbccom_' + adId;
	                }
	                bbcdotcom.utils.addTagClass(slot, 'bbccom_' + ad.adType + '_slot');
	
	                ad.renderIfReady();
	
	                // Render ad in Html
	                if (adId.indexOf('outbrain') === 0) {
	                    // Outbrain - note, TR_1 is injected in currencyProviders.js
	                    // Not Async, we need to call open to make them visible
	                    bbcdotcom.checkThirdPartyFirst(function () {
	                        ad.open();
	                        return bbcdotcom.adverts.outbrainRenderer.renderAd(adId);
	                    });
	                } else {
	                    // Standard advert
	                    return bbcdotcom.adverts.adAsyncRenderer.renderAd(ad, advertText);
	                }
	            }
	        }
	    }
	};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Log = __webpack_require__(144)('adverts:slotInfinite');
	var TemplateFactory = __webpack_require__(276);
	
	/**
	 * Renders an an template and optionally writes it to the dom within 'element'
	 *
	 * @param {string} adId
	 * @param {number[]} groups
	 * @param {Element} [element=]
	 * @param {bool} [register=false]
	 */
	var SlotInfinite = function SlotInfinite(adId, groups, element, register) {
	    Log('Rendering Infinite Slot: ', {
	        adId: adId,
	        groups: groups,
	        element: element,
	        register: register
	    });
	
	    // Compose the group class name
	    var groupsClass = groups.join('_'),
	        renderedTemplate;
	
	    try {
	        // Render the template
	        renderedTemplate = TemplateFactory.getTemplate('adTemplates/infinite-slot').render({
	            "adId": adId,
	            "groups": groups,
	            "groupsClass": groupsClass,
	            "register": register
	        });
	    } catch (e) {
	        Log.error('Error rendering the template!');
	        return null;
	    }
	
	    if (!element) {
	        // Return the template if not rendering into DOM
	        Log('Returned rendered template for: ' + adId);
	        return renderedTemplate;
	    }
	
	    Log('Inserting rendered template into DOM element: ', {
	        element: element,
	        renderedTemplate: renderedTemplate
	    });
	    TemplateFactory.renderIntoElement(element, renderedTemplate);
	};
	
	module.exports = SlotInfinite;

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Log = __webpack_require__(144)('templates:templateFactory');
	
	/**
	 * ***************************
	 * Add you template names here
	 * @type {string[]}
	 * ***************************
	 */
	var AVAILABLE_TEMPLATES = ['adTemplates/infinite-slot'];
	
	function TemplateFactory() {
	    this.templates = AVAILABLE_TEMPLATES.reduce(function (objectMap, value) {
	        objectMap[value] = __webpack_require__(277)("./" + value + '.mustache');
	        return objectMap;
	    }, {});
	}
	
	/**
	 * Get a template
	 *
	 * @method getTemplate
	 * @param {string} templateName - The Template to retrieve
	 * @throws {Error} - When template cannot be found.
	 */
	TemplateFactory.prototype.getTemplate = function (templateName) {
	    if (!this.templates.hasOwnProperty(templateName)) {
	        Log.error('Could not find template: ' + templateName);
	        throw new Error('Could not find template: ' + templateName);
	    }
	
	    return this.templates[templateName];
	};
	
	TemplateFactory.prototype.renderIntoElement = function (element, html) {
	    if (!element || !html) {
	        Log.error('Require parameter not supplied', {
	            element: element,
	            html: html
	        });
	        throw new Error('Required param not supplied');
	    }
	
	    element.innerHTML = html;
	    try {
	        nodeScriptReplace(element);
	    } catch (e) {
	        Log.error('Error rendering template into DOM: ', e);
	    }
	};
	
	// Add script elements to DOM
	function nodeScriptReplace(node) {
	    if (nodeScriptIs(node) === true) {
	        node.parentNode.replaceChild(nodeScriptClone(node), node);
	    } else {
	        var i = 0;
	        var children = node.childNodes;
	        while (i < children.length) {
	            nodeScriptReplace(children[i++]);
	        }
	    }
	
	    return node;
	}
	
	function nodeScriptIs(node) {
	    return node.tagName === 'SCRIPT';
	}
	
	function nodeScriptClone(node) {
	    var script = document.createElement("script");
	    script.text = node.innerHTML;
	    for (var i = node.attributes.length - 1; i >= 0; i--) {
	        script.setAttribute(node.attributes[i].name, node.attributes[i].value);
	    }
	    return script;
	}
	
	module.exports = new TemplateFactory();

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./adTemplates/infinite-slot.mustache": 278
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 277;


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	var H = __webpack_require__(279);
	module.exports = function() { var T = new H.Template({code: function (c,p,i) { var t=this;t.b(i=i||"");t.b("<div id=\"bbccom_");t.b(t.v(t.f("adId",c,p,0)));t.b("_");t.b(t.v(t.f("groupsClass",c,p,0)));t.b("\" class=\"bbccom_slot\" aria-hidden=\"true\"><div id=\"bbccom_");t.b(t.v(t.f("adId",c,p,0)));t.b("\" class=\"bbccom_advert\">");if(t.s(t.f("register",c,p,1),c,p,0,142,353,"{{ }}")){t.rs(c,p,function(c,p,t){t.b("<script type=\"text/javascript\">/*<![CDATA[*/");t.b("\n" + i);t.b("            if (window.bbcdotcom && bbcdotcom.registerAd) {");t.b("\n" + i);t.b("                bbcdotcom.registerAd('");t.b(t.v(t.f("adId",c,p,0)));t.b("', [");t.b(t.v(t.f("groups",c,p,0)));t.b("]);");t.b("\n" + i);t.b("            }");t.b("\n" + i);t.b("            /*]]>*/</script>");});c.pop();}t.b("</div></div>");return t.fl(); },partials: {}, subs: {  }}, "<div id=\"bbccom_{{adId}}_{{groupsClass}}\" class=\"bbccom_slot\" aria-hidden=\"true\"><div id=\"bbccom_{{adId}}\" class=\"bbccom_advert\">{{#register}}<script type=\"text/javascript\">/*<![CDATA[*/\n            if (window.bbcdotcom && bbcdotcom.registerAd) {\n                bbcdotcom.registerAd('{{adId}}', [{{groups}}]);\n            }\n            /*]]>*/</script>{{/register}}</div></div>", H);return T; }();

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	 *  Copyright 2011 Twitter, Inc.
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *  http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */
	
	var Hogan = {};
	
	(function (Hogan) {
	  Hogan.Template = function (codeObj, text, compiler, options) {
	    codeObj = codeObj || {};
	    this.r = codeObj.code || this.r;
	    this.c = compiler;
	    this.options = options || {};
	    this.text = text || '';
	    this.partials = codeObj.partials || {};
	    this.subs = codeObj.subs || {};
	    this.buf = '';
	  }
	
	  Hogan.Template.prototype = {
	    // render: replaced by generated code.
	    r: function (context, partials, indent) { return ''; },
	
	    // variable escaping
	    v: hoganEscape,
	
	    // triple stache
	    t: coerceToString,
	
	    render: function render(context, partials, indent) {
	      return this.ri([context], partials || {}, indent);
	    },
	
	    // render internal -- a hook for overrides that catches partials too
	    ri: function (context, partials, indent) {
	      return this.r(context, partials, indent);
	    },
	
	    // ensurePartial
	    ep: function(symbol, partials) {
	      var partial = this.partials[symbol];
	
	      // check to see that if we've instantiated this partial before
	      var template = partials[partial.name];
	      if (partial.instance && partial.base == template) {
	        return partial.instance;
	      }
	
	      if (typeof template == 'string') {
	        if (!this.c) {
	          throw new Error("No compiler available.");
	        }
	        template = this.c.compile(template, this.options);
	      }
	
	      if (!template) {
	        return null;
	      }
	
	      // We use this to check whether the partials dictionary has changed
	      this.partials[symbol].base = template;
	
	      if (partial.subs) {
	        // Make sure we consider parent template now
	        if (!partials.stackText) partials.stackText = {};
	        for (key in partial.subs) {
	          if (!partials.stackText[key]) {
	            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;
	          }
	        }
	        template = createSpecializedPartial(template, partial.subs, partial.partials,
	          this.stackSubs, this.stackPartials, partials.stackText);
	      }
	      this.partials[symbol].instance = template;
	
	      return template;
	    },
	
	    // tries to find a partial in the current scope and render it
	    rp: function(symbol, context, partials, indent) {
	      var partial = this.ep(symbol, partials);
	      if (!partial) {
	        return '';
	      }
	
	      return partial.ri(context, partials, indent);
	    },
	
	    // render a section
	    rs: function(context, partials, section) {
	      var tail = context[context.length - 1];
	
	      if (!isArray(tail)) {
	        section(context, partials, this);
	        return;
	      }
	
	      for (var i = 0; i < tail.length; i++) {
	        context.push(tail[i]);
	        section(context, partials, this);
	        context.pop();
	      }
	    },
	
	    // maybe start a section
	    s: function(val, ctx, partials, inverted, start, end, tags) {
	      var pass;
	
	      if (isArray(val) && val.length === 0) {
	        return false;
	      }
	
	      if (typeof val == 'function') {
	        val = this.ms(val, ctx, partials, inverted, start, end, tags);
	      }
	
	      pass = !!val;
	
	      if (!inverted && pass && ctx) {
	        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
	      }
	
	      return pass;
	    },
	
	    // find values with dotted names
	    d: function(key, ctx, partials, returnFound) {
	      var found,
	          names = key.split('.'),
	          val = this.f(names[0], ctx, partials, returnFound),
	          doModelGet = this.options.modelGet,
	          cx = null;
	
	      if (key === '.' && isArray(ctx[ctx.length - 2])) {
	        val = ctx[ctx.length - 1];
	      } else {
	        for (var i = 1; i < names.length; i++) {
	          found = findInScope(names[i], val, doModelGet);
	          if (found !== undefined) {
	            cx = val;
	            val = found;
	          } else {
	            val = '';
	          }
	        }
	      }
	
	      if (returnFound && !val) {
	        return false;
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        ctx.push(cx);
	        val = this.mv(val, ctx, partials);
	        ctx.pop();
	      }
	
	      return val;
	    },
	
	    // find values with normal names
	    f: function(key, ctx, partials, returnFound) {
	      var val = false,
	          v = null,
	          found = false,
	          doModelGet = this.options.modelGet;
	
	      for (var i = ctx.length - 1; i >= 0; i--) {
	        v = ctx[i];
	        val = findInScope(key, v, doModelGet);
	        if (val !== undefined) {
	          found = true;
	          break;
	        }
	      }
	
	      if (!found) {
	        return (returnFound) ? false : "";
	      }
	
	      if (!returnFound && typeof val == 'function') {
	        val = this.mv(val, ctx, partials);
	      }
	
	      return val;
	    },
	
	    // higher order templates
	    ls: function(func, cx, partials, text, tags) {
	      var oldTags = this.options.delimiters;
	
	      this.options.delimiters = tags;
	      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));
	      this.options.delimiters = oldTags;
	
	      return false;
	    },
	
	    // compile text
	    ct: function(text, cx, partials) {
	      if (this.options.disableLambda) {
	        throw new Error('Lambda features disabled.');
	      }
	      return this.c.compile(text, this.options).render(cx, partials);
	    },
	
	    // template result buffering
	    b: function(s) { this.buf += s; },
	
	    fl: function() { var r = this.buf; this.buf = ''; return r; },
	
	    // method replace section
	    ms: function(func, ctx, partials, inverted, start, end, tags) {
	      var textSource,
	          cx = ctx[ctx.length - 1],
	          result = func.call(cx);
	
	      if (typeof result == 'function') {
	        if (inverted) {
	          return true;
	        } else {
	          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;
	          return this.ls(result, cx, partials, textSource.substring(start, end), tags);
	        }
	      }
	
	      return result;
	    },
	
	    // method replace variable
	    mv: function(func, ctx, partials) {
	      var cx = ctx[ctx.length - 1];
	      var result = func.call(cx);
	
	      if (typeof result == 'function') {
	        return this.ct(coerceToString(result.call(cx)), cx, partials);
	      }
	
	      return result;
	    },
	
	    sub: function(name, context, partials, indent) {
	      var f = this.subs[name];
	      if (f) {
	        this.activeSub = name;
	        f(context, partials, this, indent);
	        this.activeSub = false;
	      }
	    }
	
	  };
	
	  //Find a key in an object
	  function findInScope(key, scope, doModelGet) {
	    var val;
	
	    if (scope && typeof scope == 'object') {
	
	      if (scope[key] !== undefined) {
	        val = scope[key];
	
	      // try lookup with get for backbone or similar model data
	      } else if (doModelGet && scope.get && typeof scope.get == 'function') {
	        val = scope.get(key);
	      }
	    }
	
	    return val;
	  }
	
	  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {
	    function PartialTemplate() {};
	    PartialTemplate.prototype = instance;
	    function Substitutions() {};
	    Substitutions.prototype = instance.subs;
	    var key;
	    var partial = new PartialTemplate();
	    partial.subs = new Substitutions();
	    partial.subsText = {};  //hehe. substext.
	    partial.buf = '';
	
	    stackSubs = stackSubs || {};
	    partial.stackSubs = stackSubs;
	    partial.subsText = stackText;
	    for (key in subs) {
	      if (!stackSubs[key]) stackSubs[key] = subs[key];
	    }
	    for (key in stackSubs) {
	      partial.subs[key] = stackSubs[key];
	    }
	
	    stackPartials = stackPartials || {};
	    partial.stackPartials = stackPartials;
	    for (key in partials) {
	      if (!stackPartials[key]) stackPartials[key] = partials[key];
	    }
	    for (key in stackPartials) {
	      partial.partials[key] = stackPartials[key];
	    }
	
	    return partial;
	  }
	
	  var rAmp = /&/g,
	      rLt = /</g,
	      rGt = />/g,
	      rApos = /\'/g,
	      rQuot = /\"/g,
	      hChars = /[&<>\"\']/;
	
	  function coerceToString(val) {
	    return String((val === null || val === undefined) ? '' : val);
	  }
	
	  function hoganEscape(str) {
	    str = coerceToString(str);
	    return hChars.test(str) ?
	      str
	        .replace(rAmp, '&amp;')
	        .replace(rLt, '&lt;')
	        .replace(rGt, '&gt;')
	        .replace(rApos, '&#39;')
	        .replace(rQuot, '&quot;') :
	      str;
	  }
	
	  var isArray = Array.isArray || function(a) {
	    return Object.prototype.toString.call(a) === '[object Array]';
	  };
	
	})( true ? exports : Hogan);


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(150);
	var adRegister = __webpack_require__(200);
	var outbrainRenderer = __webpack_require__(272);
	
	var loaded = [];
	var isNielsenLoadedInterval;
	
	var loadNielsenAu = function loadNielsenAu() {
	    if (typeof nol_t !== 'undefined') {
	        nol_t({ cid: "au-bbc", content: "0", server: "secure-au" }).record().post();
	        clearInterval(isNielsenLoadedInterval);
	    }
	};
	
	var loadNielsenNz = function loadNielsenNz() {
	    if (typeof nol_t !== 'undefined') {
	        nol_t({ cid: "nz-bbc", content: "0", server: "secure-nz" }).record().post();
	        clearInterval(isNielsenLoadedInterval);
	    }
	};
	
	var loadScript = function loadScript(src) {
	    var script, body;
	    /* Load the library, asynchronously. */
	    script = document.createElement('script');
	    script.async = true;
	    script.type = 'text/javascript';
	    script.src = src;
	    body = document.getElementsByTagName('body')[0];
	    body.appendChild(script);
	};
	
	module.exports = {
	    write: function write() {
	
	        if (config.isAnalyticsEnabled()) {
	
	            /* Nielsen (AU) SiteCensus V6.0 */
	            if (config.isActive('nielsen-au')) {
	                /* COPYRIGHT 2009 Nielsen Online */
	                loadScript('https://secure-au.imrworldwide.com/v60.js');
	                loaded.push('nielsen_au');
	            }
	
	            /* Nielsen (NZ) SiteCensus V6.0 */
	            if (config.isActive('nielsen-nz')) {
	                /* COPYRIGHT 2009 Nielsen Online */
	                loadScript('https://secure-nz.imrworldwide.com/v60.js');
	                loaded.push('nielsen_nz');
	            }
	
	            /* Nielsen (US) SiteCensus V6.0 */
	            if (config.isActive('nielsen-us')) {
	                /* COPYRIGHT 2010 Nielsen Online */
	                (function () {
	                    var d = new Image(1, 1);
	                    d.onerror = d.onload = function () {
	                        d.onerror = d.onload = null;
	                    };
	                    d.src = ["https://secure-us.imrworldwide.com/cgi-bin/m?ci=us-804789h&amp;cg=0&amp;cc=1&amp;si=", encodeURI(window.location.href), "&amp;rp=", encodeURI(document.referrer), "&amp;ts=compact&amp;rnd=", new Date().getTime()].join('');
	                })();
	                loaded.push('nielsen_us');
	            }
	
	            /* Effective Measure */
	            (function () {
	                var em = document.createElement('script');
	                em.type = 'text/javascript';
	                em.async = true;
	                em.src = 'https://me-ssl.effectivemeasure.net/em.js';
	                var s = document.getElementsByTagName('head')[0];
	                s.appendChild(em);
	            })();
	            loaded.push('effective_measure');
	
	            /* Outbrain Tracking */
	            if (typeof adRegister.getAd('outbrain_tr_1') !== 'undefined') {
	                outbrainRenderer.renderAd('outbrain_tr_1');
	                loaded.push('outbrain');
	            }
	        }
	    },
	    postWrite: function postWrite() {
	        if (config.isActive('analytics')) {
	
	            /* Nielsen (AU) SiteCensus V6.0 */
	            if (config.isActive('nielsen-au')) {
	                isNielsenLoadedInterval = setInterval(loadNielsenAu, 500);
	                loaded.push('nielsen_au-postWrite');
	            }
	
	            /* Nielsen (NZ) SiteCensus V6.0 */
	            if (config.isActive('nielsen-nz')) {
	                isNielsenLoadedInterval = setInterval(loadNielsenNz, 500);
	                loaded.push('nielsen_nz-postWrite');
	            }
	        }
	    },
	    /**
	     * For testing only.
	     */
	    getLoaded: function getLoaded() {
	        return loaded;
	    },
	    r: function r() {
	        loaded = [];
	    }
	};

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _utils = __webpack_require__(143);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _locale = __webpack_require__(153);
	
	var _locale2 = _interopRequireDefault(_locale);
	
	var _sections = __webpack_require__(152);
	
	var _sections2 = _interopRequireDefault(_sections);
	
	var _predicate = __webpack_require__(197);
	
	var _predicate2 = _interopRequireDefault(_predicate);
	
	var _slotAsync2 = __webpack_require__(274);
	
	var _slotAsync3 = _interopRequireDefault(_slotAsync2);
	
	var _slotInfinite2 = __webpack_require__(275);
	
	var _slotInfinite3 = _interopRequireDefault(_slotInfinite2);
	
	var _layout = __webpack_require__(199);
	
	var _layout2 = _interopRequireDefault(_layout);
	
	var _slot2 = __webpack_require__(273);
	
	var _slot3 = _interopRequireDefault(_slot2);
	
	var _adRegister = __webpack_require__(200);
	
	var _adRegister2 = _interopRequireDefault(_adRegister);
	
	var _adFilter = __webpack_require__(206);
	
	var _adFilter2 = _interopRequireDefault(_adFilter);
	
	var _adUnit = __webpack_require__(203);
	
	var _adUnit2 = _interopRequireDefault(_adUnit);
	
	var _adSuites = __webpack_require__(260);
	
	var _adSuites2 = _interopRequireDefault(_adSuites);
	
	var _keyValues = __webpack_require__(176);
	
	var _keyValues2 = _interopRequireDefault(_keyValues);
	
	var _breakpoints = __webpack_require__(207);
	
	var _breakpoints2 = _interopRequireDefault(_breakpoints);
	
	var _dfppRequest = __webpack_require__(198);
	
	var _dfppRequest2 = _interopRequireDefault(_dfppRequest);
	
	var _featureSwitch = __webpack_require__(282);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	/*
	 * This maps a simpler API and checks the needed objects exits
	 */
	var ad;
	
	var analytics = __webpack_require__(208);
	var log = __webpack_require__(144)('adverts:ad');
	
	var api = {
	    slot: function slot(adId, groups, preload, advertText, stubCurrentScriptTag) {
	        if (adId && groups) {
	            return (0, _slot3['default'])(adId, groups, preload, advertText, stubCurrentScriptTag);
	        }
	        return false;
	    },
	
	    /** @deprecated Use slotAsync */
	    asyncSlot: _slotAsync3['default'],
	    slotAsync: function slotAsync(adId, groups, preload, advertText) {
	        if (adId && groups) {
	            return (0, _slotAsync3['default'])(adId, groups, advertText);
	        }
	        return false;
	    },
	
	    /**
	     * Renders an an template and optionally writes it to the dom within 'element'
	     *
	     * @param {string} adId - Ad Slot eg 'mpu', 'native'
	     * @param {number[]} groups - Groups that the ad should display on
	     * @param {Element} [element=null] - DOM Element to render template inside
	     * @param {bool} [register=false] - Include JS that registers ad with bbcdotcom module (Display Ad)
	     */
	    slotInfinite: function slotInfinite(adId, groups, element, register) {
	        return (0, _slotInfinite3['default'])(adId, groups, element, register);
	    },
	
	    getCurrentGroupId: function getCurrentGroupId() {
	        return _layout2['default'].getCurrentGroupId();
	    },
	
	    receiveMessage: function receiveMessage(event) {
	        // First validate the origin
	        var re = /(www|m)\.{0,1}(test|int|stage){0,1}\.bbc\.com$/;
	        if (re.exec(event.origin) === null && event.origin !== "http://pal.sandbox.dev.bbc.com" && event.origin !== "http://m.sandbox.dev.bbc.com") {
	            // Not from a valid origin - do noting
	            return;
	        }
	
	        // Then check that the data is valid JSON
	        var data;
	        try {
	            data = JSON.parse(event.data);
	        } catch (e) {
	            // Not valid JSON - do nothing
	            return;
	        }
	
	        if (typeof data.slot !== 'undefined') {
	            // Close the slot & post back success
	            log('receiveMessage about to call .close()');
	            _adRegister2['default'].getAd(data.slot).close();
	            event.source.postMessage(JSON.stringify({ success: true }), '*');
	        }
	    },
	
	    registerSlot: function registerSlot(id, groups) {
	        // TODO - Add ability to register slot when ad has not been pre loaded
	        var groupsString = groups.join('_'),
	            ad = _adRegister2['default'].registerAd(id);
	        if (ad.isPreloaded() && id && groups) {
	            _layout2['default'].moveAd('bbccom_' + id + '_' + groupsString + '_preload', 'bbccom_' + id + '_' + groupsString);
	            _adRegister2['default'].getAd(id).show();
	        }
	    },
	
	    reset: function reset() {
	        return _layout2['default'].reset();
	    },
	
	    show: function show() {
	        ad = _adRegister2['default'].getCurrentAd();
	        if (typeof ad !== 'undefined') {
	            ad.show();
	        }
	    },
	
	    isActive: function isActive(key) {
	        return _config2['default'].isActive(key);
	    },
	
	    setAdKeyValue: function setAdKeyValue(key, value) {
	        _keyValues2['default'].set(key, value);
	    },
	
	    setAdUnit: function setAdUnit(unit) {
	        _adUnit2['default'].setAdUnit(unit);
	    },
	
	    setLocale: function setLocale(field, text) {
	        _locale2['default'].set(field, text);
	    },
	
	    ad: function ad(adId) {
	        return _adRegister2['default'].getAd(adId);
	    },
	
	    setGroupStartWidth: function setGroupStartWidth(group, width) {
	        return _breakpoints2['default'].setGroupStart(group, width);
	    },
	
	    /**
	     * Config passed from server-side then config from client-side is passed into this method.
	     *
	     * @param conf array|object Configuration items
	     */
	    setConfig: _config2['default'].rehydrate.bind(_config2['default']),
	
	    /**
	     * Register ads is used in asynchronous mode to ad additional ads after page load
	     * This differs to refreshing a slot with a new ad
	     *
	     * Params:
	     * adId <JSONObject|string>
	     *  | May be a JSON object eg `config[id].groups = [1,2,3,4]`
	     *  | May be a JSON object eg `config[id].groups = [1,2,3,4]`
	     *  | or just a slot id eg leaderboard, mpu.
	     *
	     * groups <array>
	     *  | Array of page group numbers to request ads for eg. [1, 2, 3, 4]
	     *  | If domId was passed as an object the field may be set to undefined.
	     *
	     * keyValues <JSONObject>
	     *  | List of key value pairs to be passed on for individual ad requests.
	     *
	     */
	    registerAd: function registerAd(adId, groups, keyValues) {
	        _dfppRequest2['default'].registerAd(adId, groups, keyValues);
	    },
	
	    /**
	     *
	     */
	    lazyLoadAd: function lazyLoadAd(adId, groups) {
	        _dfppRequest2['default'].lazyLoadAd(adId, groups);
	    },
	
	    getFeatures: _featureSwitch.getFeatures,
	    getFeature: _featureSwitch.getFeature,
	
	    /**
	     * Refresh ads in synchronous loaded pages
	     * There is an async version of refreshing ads in dfppRequest.js
	     * TODO - Remove once using async version of GPT
	     */
	    refreshAd: function refreshAd(adId, size, advertText) {
	
	        var i,
	            adString,
	            adIdPrefix = 'bbccom_',
	            keyValueString = '',
	            keyValues = keyValues.getAll(),
	            ad = _adRegister2['default'].getAd(adId),
	            adSlot = document.getElementById(adIdPrefix + adId),
	            aTag = document.createElement('a'),
	            iFrame = document.createElement('iframe'),
	            adInfo = ad.getAdInfoUrl(),
	            adText = ad.getAdText();
	
	        for (i in keyValues) {
	            if (keyValues.hasOwnProperty(i)) {
	                keyValueString += ';' + i + '=' + keyValues[i];
	            }
	        }
	
	        adString = 'https://ad.doubleclick.net' + _adUnit2['default'].get().replace('/4817', '/N4817/adi') + ';slot=' + adId + ';sz=' + size + keyValueString + ';ord=' + Math.random().toString().slice(2, 16) + ';tile=1' + ';iframe=yes?';
	
	        iFrame.src = adString;
	        iFrame.width = size.split('x')[0];
	        iFrame.height = size.split('x')[1];
	        iFrame.scrolling = 'no';
	        iFrame.style.border = 'none';
	        iFrame.style.overflow = 'hidden';
	
	        aTag.innerHTML = adText;
	        aTag.href = adInfo;
	        aTag.className = 'bbccom_text';
	
	        adSlot.innerHTML = '';
	        adSlot.style.width = size.split('x')[0] + 'px';
	        adSlot.className = adSlot.className.replace('bbccom_display_none', '');
	        adSlot.appendChild(aTag);
	        adSlot.appendChild(iFrame);
	
	        _adRegister2['default'].getAd(adId).open();
	    },
	
	    /**
	     * Analytics tracking by third-party apps (eg Video Experience)
	     */
	    trackEvent: function trackEvent() {
	        // NoOp
	    },
	
	    checkThirdPartyFirst: function checkThirdPartyFirst(callback, that) {
	        var boundCallback = callback.bind(that);
	        var GDPR_COUNTRIES = ['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'IS', 'LI', 'NO', 'CH'];
	        if (!bbcdotcom.config.isThirdPartyDisabled() || bbcdotcom.config.isEU() !== undefined) {
	            boundCallback();
	        } else if (window.bbcuser && window.bbcuser.getCountry && typeof window.bbcuser.getCountry === 'function') {
	            window.bbcuser.getCountry().then(function (countryCode) {
	                var isEU = countryCode ? GDPR_COUNTRIES.indexOf(countryCode.toUpperCase()) !== -1 : false;
	                bbcdotcom.config.setEU(isEU);
	                boundCallback();
	            });
	        } else if (window.orb && window.orb.fig && typeof window.orb.fig === 'function') {
	            bbcdotcom.config.setEU(window.orb.fig('eu'));
	            boundCallback();
	        }
	    },
	
	    reInit: function reInit(params) {
	
	        var windowDocument = {
	            title: params.headline,
	            referrer: params.referrer || ''
	        },
	            url = params.url || '',
	            predicate = new _predicate2['default']();
	
	        // TODO - Should new these up instead of having to reset them
	        _sections2['default'].r();
	        _keyValues2['default'].r();
	
	        api.setConfig(params);
	
	        if (typeof params.headline !== 'undefined' && typeof params.summary !== 'undefined') {
	            predicate.set(params.headline + ' ' + params.summary);
	        }
	
	        _sections2['default'].build(true, url);
	
	        _adUnit2['default'].init(_layout2['default'].getClientWidth(), undefined, _sections2['default'].getSections('advert'), _sections2['default'].getSections());
	
	        _keyValues2['default'].init(_utils2['default'].createWindowLocation(url), windowDocument);
	        if (typeof params.assetType !== 'undefined') {
	            _keyValues2['default'].set('asset_type', params.assetType);
	        }
	    },
	    resetPage: function resetPage(params) {
	
	        var referrer = _config2['default'].getWindowLocation().href || "",
	            windowLocation = _utils2['default'].createWindowLocation(params.url),
	            adsToDisplay;
	
	        var disableAdUnit = params.disableAdUnit || false;
	
	        if (_config2['default'].isAdsEnabled() && (!_config2['default'].isSportApp() || _config2['default'].isSportApp() && _config2['default'].isAdsportappEnabled())) {
	            /**
	             * KeyValues
	             */
	            _keyValues2['default'].r();
	
	            /**
	            * DFPP Requests
	            */
	            _dfppRequest2['default'].reset();
	
	            _config2['default'].init(bbcdotcomConfig, bbcdotcom.data, windowLocation, { title: params.title, description: params.description, referrer: referrer });
	
	            /**
	             * Sections
	             */
	            _sections2['default'].build(true);
	
	            if (params.adsToDisplay) {
	                adsToDisplay = _adFilter2['default'].build(params.adsToDisplay);
	            }
	
	            /**
	             * DFPP Register ads
	             */
	            if (adsToDisplay) {
	                window.bbcdotcom.adsToDisplay = adsToDisplay;
	                for (var i = 0, len = adsToDisplay.length; i < len; i++) {
	                    _adRegister2['default'].registerAd(adsToDisplay[i]);
	                }
	            }
	
	            /**
	             * Ad Exclusions
	             */
	            new _predicate2['default']().set(params.title + ' ' + params.description);
	
	            /**
	             * Ad Unit
	             */
	            // FIXME
	            if (!disableAdUnit) {
	                _adUnit2['default'].init(_layout2['default'].getClientWidth(), this.serversideAdUnits2to9, _sections2['default'].getSections('advert'), _sections2['default'].getSections());
	            }
	
	            /**
	             * Key Values
	             */
	            _keyValues2['default'].init(windowLocation, window.document, _config2['default'].getType());
	            if (typeof params.keyValues !== 'undefined') {
	                for (var x in params.keyValues) {
	                    if (params.keyValues.hasOwnProperty(x)) {
	                        _keyValues2['default'].set(x, params.keyValues[x]);
	                    }
	                }
	            }
	            _dfppRequest2['default'].setKeyValues();
	
	            /**
	             * Ad Suites - used to display a certain set of ads all the time using ?ads=big
	             */
	            _adSuites2['default'].init(windowLocation.href);
	        }
	        if (_config2['default'].isAnalyticsEnabled()) {
	            analytics.page();
	        }
	    }
	};
	
	module.exports = api;

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.getFeature = getFeature;
	exports.getFeatures = getFeatures;
	
	var _config = __webpack_require__(150);
	
	var _config2 = _interopRequireDefault(_config);
	
	var _feature = __webpack_require__(283);
	
	var _feature2 = _interopRequireDefault(_feature);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function getFeature() {
	    var featureName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	
	
	    if (featureName === null) {
	        return new _feature2['default']({}, palEnv);
	    }
	    featureName = featureName.toLowerCase();
	
	    var featuresConfig = _config2['default'].getFeatures();
	    var palEnv = _config2['default'].getPalEnv();
	
	    var featureData = featuresConfig.hasOwnProperty(featureName) ? Object.assign({ name: featureName }, featuresConfig[featureName]) : { name: featureName };
	
	    return new _feature2['default'](featureData, palEnv);
	}
	
	function getFeatures() {
	
	    var featuresConfig = _config2['default'].getFeatures();
	    var palEnv = _config2['default'].getPalEnv();
	    var features = {};
	
	    for (var featureName in featuresConfig) {
	        /* istanbul ignore else  */
	        if (featuresConfig.hasOwnProperty(featureName)) {
	            features[featureName] = getFeature(featureName);
	        }
	    }
	
	    return features;
	}

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _consts = __webpack_require__(151);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Feature = function () {
	    function Feature() {
	        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	            _ref$name = _ref.name,
	            name = _ref$name === undefined ? 'unknown-feature' : _ref$name,
	            _ref$envs = _ref.envs,
	            envs = _ref$envs === undefined ? [] : _ref$envs,
	            _ref$on = _ref.on,
	            on = _ref$on === undefined ? false : _ref$on,
	            _ref$options = _ref.options,
	            options = _ref$options === undefined ? {} : _ref$options,
	            _ref$override = _ref.override,
	            override = _ref$override === undefined ? null : _ref$override;
	
	        var palEnv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _consts.PAL_ENV_LIVE;
	
	        _classCallCheck(this, Feature);
	
	        this.name = name;
	        this.envs = envs;
	        this.on = on;
	        this.options = options;
	        this.override = override;
	        this.palEnv = palEnv;
	    }
	
	    _createClass(Feature, [{
	        key: 'getName',
	        value: function getName() {
	            return this.name;
	        }
	    }, {
	        key: 'isEnabled',
	        value: function isEnabled() {
	            var environment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.palEnv;
	
	            if (this.override !== null) {
	                return this.override;
	            }
	            return isEnvironmentEnabled.call(this, environment) && getOn.call(this);
	        }
	    }, {
	        key: 'getOptions',
	        value: function getOptions() {
	            return this.options;
	        }
	    }, {
	        key: 'getOption',
	        value: function getOption(option) {
	            var options = this.getOptions();
	            return options.hasOwnProperty(option) ? options[option] : null;
	        }
	    }]);
	
	    return Feature;
	}();
	
	exports['default'] = Feature;
	
	
	function isEnvironmentEnabled(environment) {
	    return this.envs.includes(environment) || this.envs.length === 0;
	}
	
	function getOn() {
	    return this.on;
	}
	module.exports = exports['default'];

/***/ }),
/* 284 */
/***/ (function(module, exports) {

	'use strict';
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	/*
	StickyAdvert.js
	===============
	
	Searches the dom for the given elements passed through the exposed addElement() method
	and makes them stick to the top of screen on scroll for the distance(px) defined in the
	options object.
	
	API
	===
	add(<string> key, <DOMElement> element, <JSONObject> options)
	  | Makes an element sticky with the provided options. It is added to the listener with the provided key.
	
	remove(<string> key)
	  | Remove stickiness from element.
	
	list()
	  | List all elements that are currently sticky.
	
	Options configuration
	=====================
	offset.from: [<string> CSSselector, <string> (top|bottom)]
	  | Calculates the travel distance *FROM* either the top or bottom of the selected element.
	  | Both values must always be passed.
	
	offset.to: [<string> CSSselector, <string> (top|bottom)]
	  | Calculates the travel distance *TO* either the top or bottom of the selected element.
	  | Both values must always be passed.
	
	offsetType: <string> (include|exclude)
	  | OffsetType 'include' will subtract the stickied elements height from the travel distance,
	  | exlude will not.
	
	applyTo: <string> (parent)
	  | This will apply the stickiness to the parent of the actual ad container. This might be
	  | necessary for some ads that require a full section to become sticky.
	  | eg. leaderboard on wwhp.
	
	heightLimit: <integer>
	  | Any ad that exceeds this height will not be made sticky.
	
	parallax: <boolean>
	  | Makes the effect parallax instead of sticky *NOT WORKING*
	*/
	
	var StickyStuff = function () {
	  var stickiedElements = {};
	
	  var add = function add(key, element, options) {
	    // make sure ad height meets height limit
	    if (element.clientHeight > options.heightLimit) {
	      return;
	    }
	    stickiedElements[key] = makeSticky(element, options);
	  };
	
	  var remove = function remove(key) {
	    delete stickiedElements[key];
	  };
	
	  var list = function list() {
	    return stickiedElements;
	  };
	
	  var triggerResize = function triggerResize() {
	    Object.keys(stickiedElements).forEach(function (key) {
	      stickiedElements[key].triggerResize();
	    });
	  };
	
	  var startScrollListener = function startScrollListener() {
	    var scrollTop = 0;
	    window.addEventListener('scroll', function () {
	      scrollTop = window.pageYOffset;
	      Object.keys(stickiedElements).forEach(function (key) {
	        stickiedElements[key].update(scrollTop);
	      });
	    }, false);
	  };
	
	  var startResizeListener = function startResizeListener() {
	    var resizeTimer = null;
	    var width = window.outerWidth;
	    window.addEventListener('resize', function (e) {
	      if (e.target.outerWidth === width) return;
	      width = e.target.outerWidth;
	
	      if (!resizeTimer) {
	        triggerResize();
	      };
	      clearTimeout(resizeTimer);
	      resizeTimer = setTimeout(function () {
	        resizeTimer = null;
	        triggerResize();
	      }, 100);
	    });
	  };
	
	  var startOrientationListener = function startOrientationListener() {
	    window.addEventListener("orientationchange", function () {
	      setTimeout(function () {
	        Object.keys(stickiedElements).forEach(function (key) {
	          stickiedElements[key].triggerResize();
	        });
	      }, 1000);
	    });
	  };
	
	  var init = function () {
	    startScrollListener();
	    startResizeListener();
	    startOrientationListener();
	  }();
	
	  return { add: add, remove: remove, list: list };
	}();
	
	// Wrap reference to elements in a closure to store it's current state
	var makeSticky = function makeSticky(element, options) {
	  var ABOVE = 0,
	      OVER = 1,
	      BELOW = 2;
	
	  // Apply sticky directly to ad or to its parent. This is to only be used when the ad needs to be out of the page flow eg. leaderboard
	  var target = options.applyTo === 'parent' ? element.parentElement : element;
	  var _state = ABOVE; // Current state used to know what transition coming from [0: start, 1: travel, 2: end]
	  var _initialTop = null; // Initial top of the element on page load
	  var _travel = null; // The calculated offset (travel distance) to be used in calculations
	  var _left = null; // Left position of the element relative to the document
	  var waitingForFrame = false;
	  var scrollTop = window.pageYOffset;
	
	  // States
	  var setState = function setState(state) {
	    if (state > BELOW || state < ABOVE) return;
	    _state = state;
	    switch (state) {
	      case ABOVE:
	        render(setStylesAbove);
	        break;
	      case OVER:
	        !options.parallax ? render(setStylesOver) : render(setStylesParallax);
	        break;
	      case BELOW:
	        render(setStylesBelow);
	        break;
	    }
	  };
	
	  // Styles
	  var setStylesAbove = function setStylesAbove() {
	    target.style.position = 'relative';
	    target.style.left = '0';
	    target.style.top = '0';
	    target.style.transform = "translate3d(0px, 0px, 0px)";
	  };
	
	  var setStylesOver = function setStylesOver() {
	    target.style.position = 'fixed';
	    target.style.left = _left + 'px';
	    target.style.transform = "translate3d(0px, 0px, 0px)";
	    target.style.zIndex = '100';
	    target.style.top = 0;
	  };
	
	  var setStylesBelow = function setStylesBelow() {
	    target.style.position = 'absolute';
	    target.style.top = _travel + 'px';
	    target.style.left = '50%';
	    target.style.transform = "translate3d(-50%, 0px, 0px)";
	    target.style.zIndex = '100';
	  };
	
	  var setStylesParallax = function setStylesParallax() {
	    target.style.position = 'absolute';
	    target.style.transform = 'translate3d(0px, ' + getParallax() + 'px, 0px)';
	    target.style.left = _left + 'px';
	  };
	
	  var setWrapperStyle = function setWrapperStyle(ad) {
	    target.parentElement.style.height = target.offsetHeight + 'px';
	    target.parentElement.style.position = 'relative';
	  };
	
	  var updateVariables = function updateVariables() {
	    _initialTop = getInitialTop();
	    _travel = calcTravel();
	    _left = getLeft();
	  };
	
	  var getLeft = function getLeft() {
	    return Math.round(target.getBoundingClientRect().left);
	  };
	
	  var getInitialTop = function getInitialTop() {
	    return Math.round(target.getBoundingClientRect().top + window.pageYOffset);
	  };
	
	  var calcTravel = function calcTravel() {
	    if (options.offset.from[0] && options.offset.to[0]) {
	      var fromElement = document.querySelector(options.offset.from[0]);
	      var toElement = document.querySelector(options.offset.to[0]);
	      var from = fromElement.offsetTop;
	      var to = toElement.offsetTop;
	
	      if (options.offset.from[1] === 'bottom') {
	        from += fromElement.offsetHeight;
	      }
	      if (options.offset.to[1] === 'bottom') {
	        to += toElement.offsetHeight;
	      }
	      if (options.offsetType === 'include') {
	        to -= target.offsetHeight;
	      }
	      if (options.parallax) {
	        to += target.offsetHeight;
	      }
	
	      return to - from;
	    }
	  };
	
	  var triggerResize = function triggerResize() {
	    setStylesAbove();
	    updateVariables();
	    update(window.pageYOffset);
	  };
	
	  var getParallax = function getParallax() {
	    return Math.round(scrollTop - element.clientHeight / _travel * scrollTop);
	  };
	
	  var render = function render(setPosition) {
	    if (!waitingForFrame) {
	      waitingForFrame = requestAnimationFrame(function () {
	        setPosition();
	        waitingForFrame = false;
	      });
	    }
	  };
	
	  var update = function update(_scrollTop) {
	    scrollTop = _scrollTop;
	    switch (true) {
	      case _initialTop > scrollTop:
	        setState(ABOVE);
	        break;
	      case scrollTop >= _initialTop && scrollTop <= _initialTop + _travel:
	        setState(OVER);
	        break;
	      case _initialTop + _travel < scrollTop:
	        setState(BELOW);
	        break;
	    }
	  };
	
	  var init = function () {
	    setWrapperStyle();
	    updateVariables();
	  }();
	
	  return { update: update, triggerResize: triggerResize };
	};
	
	var stickyAdvert = function stickyAdvert() {
	  return _extends({}, StickyStuff);
	};
	
	module.exports = stickyAdvert;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*** IMPORTS FROM imports-loader ***/
	var define = false;
	
	"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/* Copyright (c) 2016 comScore, Inc.
	 * All rights reserved.
	 * By using this software, you are agreeing to be bound by the
	 * terms of these policies: http://www.comscore.com/About_comScore/Privacy_Policy
	 */
	!function (a, b) {
	  "use strict";
	  "function" == typeof define && define.amd ? (b(a.ns_ = a.ns_ || {}), define([], function () {
	    return a.ns_;
	  })) : "object" == ( false ? "undefined" : _typeof(module)) && module.exports ? module.exports = b({}) : b(a.ns_ = a.ns_ || {});
	}(undefined, function (a) {
	  "use strict";
	  a.ns_ = a;var b = b || {};b.indexOf = function (a, b) {
	    var c = -1;return this.forEach(b, function (b, d) {
	      b == a && (c = d);
	    }), c;
	  }, b.forEach = function (a, b, c) {
	    try {
	      if ("function" == typeof b) if (c = "undefined" != typeof c ? c : null, "number" != typeof a.length || "undefined" == typeof a[0]) {
	        var d = "undefined" != typeof a.__proto__;for (var e in a) {
	          a.hasOwnProperty(e) && (!d || d && "undefined" == typeof a.__proto__[e]) && "function" != typeof a[e] && b.call(c, a[e], e);
	        }
	      } else for (var f = 0, g = a.length; f < g; f++) {
	        b.call(c, a[f], f);
	      }
	    } catch (h) {}
	  };var b = b || {};b.parseBoolean = function (a, b) {
	    return b = b || !1, a ? "0" != a : b;
	  }, b.parseInteger = function (a, b) {
	    return null == a || isNaN(a) ? b || 0 : parseInt(a);
	  }, b.parseLong = function (a, b) {
	    var c = Number(a);return null == a || isNaN(c) ? b || 0 : c;
	  }, b.toString = function (a) {
	    if ("undefined" == typeof a) return "undefined";if ("string" == typeof a) return a;if (a instanceof Array) return a.join(",");var b = "";for (var c in a) {
	      a.hasOwnProperty(c) && (b += c + ":" + a[c] + ";");
	    }return b || a.toString();
	  };var b = b || {};b.filter = function (a, b) {
	    var c = {};for (var d in b) {
	      b.hasOwnProperty(d) && a(b[d]) && (c[d] = b[d]);
	    }return c;
	  }, b.extend = function (a) {
	    var b,
	        c = arguments.length;a = a || {};for (var d = 1; d < c; d++) {
	      if (b = arguments[d]) for (var e in b) {
	        b.hasOwnProperty(e) && (a[e] = b[e]);
	      }
	    }return a;
	  };var b = b || {};b.cloneObject = function (a) {
	    if (null == a || "object" != (typeof a === "undefined" ? "undefined" : _typeof(a))) return a;var b = function () {
	      function a() {}function b(b) {
	        return "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) ? (a.prototype = b, new a()) : b;
	      }function c(a) {
	        for (var b in a) {
	          a.hasOwnProperty(b) && (this[b] = a[b]);
	        }
	      }function d() {
	        this.copiedObjects = [];var a = this;this.recursiveDeepCopy = function (b) {
	          return a.deepCopy(b);
	        }, this.depth = 0;
	      }function e(a, b) {
	        var c = new d();return b && (c.maxDepth = b), c.deepCopy(a);
	      }function f(a) {
	        return "undefined" != typeof window && window && window.Node ? a instanceof Node : "undefined" != typeof document && a === document || "number" == typeof a.nodeType && a.attributes && a.childNodes && a.cloneNode;
	      }var g = [];return c.prototype = { constructor: c, canCopy: function canCopy() {
	          return !1;
	        }, create: function create(a) {}, populate: function populate(a, b, c) {} }, d.prototype = { constructor: d, maxDepth: 256, cacheResult: function cacheResult(a, b) {
	          this.copiedObjects.push([a, b]);
	        }, getCachedResult: function getCachedResult(a) {
	          for (var b = this.copiedObjects, c = b.length, d = 0; d < c; d++) {
	            if (b[d][0] === a) return b[d][1];
	          }
	        }, deepCopy: function deepCopy(a) {
	          if (null === a) return null;if ("object" != (typeof a === "undefined" ? "undefined" : _typeof(a))) return a;var b = this.getCachedResult(a);if (b) return b;for (var c = 0; c < g.length; c++) {
	            var d = g[c];if (d.canCopy(a)) return this.applyDeepCopier(d, a);
	          }throw new Error("Unable to clone the following object " + a);
	        }, applyDeepCopier: function applyDeepCopier(a, b) {
	          var c = a.create(b);if (this.cacheResult(b, c), this.depth++, this.depth > this.maxDepth) throw new Error("Maximum recursion depth exceeded.");return a.populate(this.recursiveDeepCopy, b, c), this.depth--, c;
	        } }, e.DeepCopier = c, e.deepCopiers = g, e.register = function (a) {
	        a instanceof c || (a = new c(a)), g.unshift(a);
	      }, e.register({ canCopy: function canCopy() {
	          return !0;
	        }, create: function create(a) {
	          return a instanceof a.constructor ? b(a.constructor.prototype) : {};
	        }, populate: function populate(a, b, c) {
	          for (var d in b) {
	            b.hasOwnProperty(d) && (c[d] = a(b[d]));
	          }return c;
	        } }), e.register({ canCopy: function canCopy(a) {
	          return a instanceof Array;
	        }, create: function create(a) {
	          return new a.constructor();
	        }, populate: function populate(a, b, c) {
	          for (var d = 0; d < b.length; d++) {
	            c.push(a(b[d]));
	          }return c;
	        } }), e.register({ canCopy: function canCopy(a) {
	          return a instanceof Date;
	        }, create: function create(a) {
	          return new Date(a);
	        } }), e.register({ canCopy: function canCopy(a) {
	          return f(a);
	        }, create: function create(a) {
	          return "undefined" != typeof document && a === document ? document : a.cloneNode(!1);
	        }, populate: function populate(a, b, c) {
	          if ("undefined" != typeof document && b === document) return document;if (b.childNodes && b.childNodes.length) for (var d = 0; d < b.childNodes.length; d++) {
	            var e = a(b.childNodes[d]);c.appendChild(e);
	          }
	        } }), { deepCopy: e };
	    }();return b.deepCopy(a);
	  };var b = b || {};b.getNamespace = function () {
	    return a.ns_ || a;
	  }, b.uid = function () {
	    var a = 1;return function () {
	      return +new Date() + "_" + a++;
	    };
	  }(), b.isEmpty = function (a) {
	    return void 0 === a || null === a || "" === a || a instanceof Array && 0 === a.length;
	  }, b.isNotEmpty = function (a) {
	    return !this.isEmpty(a);
	  }, b.safeGet = function (a, b) {
	    return b = this.exists(b) ? b : "", this.exists(a) ? a : b;
	  }, b.isTrue = function (a) {
	    return "undefined" != typeof a && ("string" == typeof a ? (a = a.toLowerCase(), "true" === a || "1" === a || "on" === a) : !!a);
	  }, b.regionMatches = function (a, b, c, d, e) {
	    if (b < 0 || d < 0 || b + e > a.length || d + e > c.length) return !1;for (; --e >= 0;) {
	      var f = a.charAt(b++),
	          g = c.charAt(d++);if (f != g) return !1;
	    }return !0;
	  }, b.exists = function (a) {
	    return "undefined" != typeof a && null != a;
	  }, !function () {
	    var a = [],
	        c = !1,
	        d = !0,
	        e = 1e3;b.onSystemClockJump = function (b, f) {
	      a.push(b), c || (c = !0, e = f || e, d = +new Date(), setInterval(function () {
	        var b = d + e,
	            c = +new Date();d = c;var f = c - b;if (Math.abs(f) > e) for (var g = 0; g < a.length; ++g) {
	          a[g](f > 0);
	        }
	      }, e));
	    };
	  }();var b = b || {};b.hasPageVisibilityAPISupport = function () {
	    if ("undefined" == typeof document) return !1;var a = !1;return "undefined" != typeof document.hidden ? a = !0 : "undefined" != typeof document.mozHidden ? a = !0 : "undefined" != typeof document.msHidden ? a = !0 : "undefined" != typeof document.webkitHidden && (a = !0), function () {
	      return a;
	    };
	  }(), b.getPageVisibilityAPI = function () {
	    if ("undefined" == typeof document) return null;var a, b, c;"undefined" != typeof document.hidden ? (a = "hidden", b = "visibilitychange", c = "visibilityState") : "undefined" != typeof document.mozHidden ? (a = "mozHidden", b = "mozvisibilitychange", c = "mozVisibilityState") : "undefined" != typeof document.msHidden ? (a = "msHidden", b = "msvisibilitychange", c = "msVisibilityState") : "undefined" != typeof document.webkitHidden && (a = "webkitHidden", b = "webkitvisibilitychange", c = "webkitVisibilityState");var d = { hidden: a, visibilityChange: b, state: c };return function () {
	      return d;
	    };
	  }(), b.isTabInBackground = function () {
	    if ("undefined" == typeof document) return null;var a = b.getPageVisibilityAPI();return function () {
	      return document[a.hidden];
	    };
	  }(), b.getBrowserName = function () {
	    if (!navigator) return "";var a,
	        b,
	        c = navigator.userAgent || "",
	        d = navigator.appName || "";return (b = c.indexOf("Opera")) != -1 || (b = c.indexOf("OPR/")) != -1 ? d = "Opera" : (b = c.indexOf("Android")) != -1 ? d = "Android" : (b = c.indexOf("Chrome")) != -1 ? d = "Chrome" : (b = c.indexOf("Safari")) != -1 ? d = "Safari" : (b = c.indexOf("Firefox")) != -1 ? d = "Firefox" : (b = c.indexOf("IEMobile")) != -1 ? d = "Internet Explorer Mobile" : "Microsoft Internet Explorer" == d || "Netscape" == d ? d = "Internet Explorer" : (a = c.lastIndexOf(" ") + 1) < (b = c.lastIndexOf("/")) ? (d = c.substring(a, b), d.toLowerCase() == d.toUpperCase() && (d = navigator.appName)) : d = "unknown", d;
	  }, b.getBrowserFullVersion = function () {
	    if (!navigator) return "";var a,
	        b,
	        c,
	        d,
	        e = navigator.userAgent || "",
	        f = navigator.appName || "",
	        g = navigator.appVersion ? "" + parseFloat(navigator.appVersion) : "";return (b = e.indexOf("Opera")) != -1 ? (g = e.substring(b + 6), (b = e.indexOf("Version")) != -1 && (g = e.substring(b + 8))) : (b = e.indexOf("OPR/")) != -1 ? g = e.substring(b + 4) : (b = e.indexOf("Android")) != -1 ? g = e.substring(b + 11) : (b = e.indexOf("Chrome")) != -1 ? g = e.substring(b + 7) : (b = e.indexOf("Safari")) != -1 ? (g = e.substring(b + 7), (b = e.indexOf("Version")) != -1 && (g = e.substring(b + 8))) : (b = e.indexOf("Firefox")) != -1 ? g = e.substring(b + 8) : "Microsoft Internet Explorer" == f ? (d = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"), null != d.exec(e) && (g = parseFloat(RegExp.$1))) : "Netscape" == f ? (d = new RegExp("Trident/.*rv:([0-9]{1,}[.0-9]{0,})"), null != d.exec(e) && (g = parseFloat(RegExp.$1))) : g = e.lastIndexOf(" ") + 1 < (b = e.lastIndexOf("/")) ? e.substring(b + 1) : "unknown", g = g.toString(), (c = g.indexOf(";")) != -1 && (g = g.substring(0, c)), (c = g.indexOf(" ")) != -1 && (g = g.substring(0, c)), (c = g.indexOf(")")) != -1 && (g = g.substring(0, c)), a = parseInt("" + g, 10), isNaN(a) && (g = "" + parseFloat(navigator.appVersion)), g;
	  }, b.browserAcceptsLargeURLs = function () {
	    return "undefined" == typeof window || (null !== window.ActiveXObject, !0);
	  }, b.isBrowser = function () {
	    return "undefined" != typeof window && "undefined" != typeof document;
	  }, b.isWebSecure = function () {
	    return "undefined" != typeof document && null != document && "s" === document.location.href.charAt(4);
	  };var c = function () {
	    var a = 1e4;return function (b, c) {
	      function d(a) {
	        a = a || [];var c = [h, +new Date()];return b && c.push(b), a = Array.prototype.slice.call(a), c = c.concat(a);
	      }function e(a) {
	        var b, d, e;if ("boolean" == typeof c || !c) return !!c;if (e = a.join(" "), c instanceof Array && c.length > 0) {
	          for (b = 0; b < c.length; ++b) {
	            if (d = c[b], d instanceof RegExp && d.test(e)) return !0;
	          }return !1;
	        }if ("object" == (typeof c === "undefined" ? "undefined" : _typeof(c))) {
	          var f = !1;if (c.hide instanceof Array) for (b = 0; b < c.hide.length; ++b) {
	            if (d = c.hide[b], d instanceof RegExp && d.test(e)) {
	              f = !0;break;
	            }
	          }if (c.show instanceof Array) for (b = 0; b < c.show.length; ++b) {
	            if (d = c.show[b], d instanceof RegExp && d.test(e)) return !0;
	          }return !f && !c.show;
	        }return !0;
	      }function f(b) {
	        var d = i.length;(d > a || c && c.max && d > c.max) && (i = i.slice(-Math.floor(c.max / 2)), i.push("Previous logs: " + d)), i.push(b);
	      }var g = this,
	          h = "comScore",
	          i = [];g.log = function () {
	        var a = d(arguments);f(a), "undefined" != typeof console && "function" == typeof console.log && e(a) && console.log.apply(console, a);
	      }, g.warn = function () {
	        var a = d(arguments);f(a), "undefined" != typeof console && "function" == typeof console.warn && e(a) && console.warn.apply(console, a);
	      }, g.error = function () {
	        var a = d(arguments);f(a), "undefined" != typeof console && "function" == typeof console.error && e(a) && console.error.apply(console, a);
	      }, g.apiCall = function (a) {
	        for (var b = ["API call to:", a], c = 1; c < arguments.length; ++c) {
	          b.push("arg" + c + ":", arguments[c]);
	        }this.log.apply(this, b);
	      }, g.infoLog = function () {
	        var a = ["Trace log:"];a.push.apply(a, Array.prototype.slice.call(arguments)), this.log.apply(this, a);
	      }, g.deprecation = function (a, b) {
	        var c = ["Deprecated API:", a, "is deprecated and will be eventually removed."];b && c.push("Use", b, "instead."), this.warn.apply(this, c);
	      }, g.getLogHistory = function () {
	        return i;
	      };
	    };
	  }();return a.StreamingAnalytics = a.StreamingAnalytics || function () {
	    var a = function () {
	      var a = "cs_";return function () {
	        var c = "undefined" != typeof localStorage ? localStorage : null;b.extend(this, { get: function get(b) {
	            return c && c.getItem(a + b);
	          }, set: function set(b, d) {
	            c && c.setItem(a + b, d);
	          }, has: function has(b) {
	            return c && c.getItem(a + b);
	          }, remove: function remove(b) {
	            c && c.removeItem(a + b);
	          }, clear: function clear() {
	            for (var b = 0; c && b < c.length; ++b) {
	              var d = c.key(b);d.substr(0, a.length) === a && c.removeItem(d);
	            }
	          } });
	      };
	    }(),
	        d = function d(a, b) {
	      if ("undefined" == typeof Image) return void ("function" == typeof setTimeout ? b && setTimeout(b, 0) : b && b());var c = new Image();c.onload = function () {
	        b && b(200), c = null;
	      }, c.onerror = function () {
	        b && b(), c = null;
	      }, c.src = a;
	    },
	        e = function e(a, b, c) {
	      "function" == typeof setTimeout ? c && setTimeout(function () {
	        c(200);
	      }, 0) : c && c(200);
	    },
	        f = function () {
	      return { dir: function dir() {
	          return null;
	        }, append: function append(a, b, c) {}, write: function write(a, b, c) {}, deleteFile: function deleteFile() {
	          return !1;
	        }, read: function read() {
	          return null;
	        } };
	    }(),
	        g = function () {
	      return { PLATFORM: "generic", httpGet: d, httpPost: e, Storage: a, IO: f, onDataFetch: function onDataFetch(a) {
	          a();
	        }, getCrossPublisherId: function getCrossPublisherId() {
	          return null;
	        }, getAppName: function getAppName() {
	          return h.UNKNOWN_VALUE;
	        }, getAppVersion: function getAppVersion() {
	          return h.UNKNOWN_VALUE;
	        }, getVisitorId: function getVisitorId() {
	          return +new Date() + ~~(1e3 * Math.random());
	        }, getVisitorIdSuffix: function getVisitorIdSuffix() {
	          return "72";
	        }, getDeviceModel: function getDeviceModel() {
	          return h.UNKNOWN_VALUE;
	        }, getPlatformVersion: function getPlatformVersion() {
	          return h.UNKNOWN_VALUE;
	        }, getPlatformName: function getPlatformName() {
	          return "js";
	        }, getRuntimeName: function getRuntimeName() {
	          return h.UNKNOWN_VALUE;
	        }, getRuntimeVersion: function getRuntimeVersion() {
	          return h.UNKNOWN_VALUE;
	        }, getDisplayResolution: function getDisplayResolution() {
	          return h.UNKNOWN_RESOLUTION;
	        }, getApplicationResolution: function getApplicationResolution() {
	          return h.UNKNOWN_RESOLUTION;
	        }, getLanguage: function getLanguage() {
	          return h.UNKNOWN_VALUE;
	        }, getPackageName: function getPackageName() {
	          return null;
	        }, isConnectionAvailable: function isConnectionAvailable() {
	          return !0;
	        }, isCompatible: function isCompatible() {
	          return !0;
	        }, autoSelect: function autoSelect() {}, setPlatformAPI: function setPlatformAPI() {}, isCrossPublisherIdChanged: function isCrossPublisherIdChanged() {
	          return !1;
	        }, setTimeout: function (_setTimeout) {
	          function setTimeout(_x, _x2) {
	            return _setTimeout.apply(this, arguments);
	          }
	
	          setTimeout.toString = function () {
	            return _setTimeout.toString();
	          };
	
	          return setTimeout;
	        }(function (a, b) {
	          return setTimeout(a, b);
	        }), clearTimeout: function (_clearTimeout) {
	          function clearTimeout(_x3) {
	            return _clearTimeout.apply(this, arguments);
	          }
	
	          clearTimeout.toString = function () {
	            return _clearTimeout.toString();
	          };
	
	          return clearTimeout;
	        }(function (a) {
	          return clearTimeout(a);
	        }), getDeviceArchitecture: function getDeviceArchitecture() {
	          return h.UNKNOWN_VALUE;
	        }, getConnectionType: function getConnectionType() {
	          return h.UNKNOWN_VALUE;
	        }, getDeviceJailBrokenFlag: function getDeviceJailBrokenFlag() {
	          return h.UNKNOWN_VALUE;
	        }, isConnectionSecure: function isConnectionSecure() {
	          return !1;
	        }, processMeasurementLabels: function processMeasurementLabels() {} };
	    }(),
	        h = { UNKNOWN_VALUE: "unknown", UNKNOWN_RESOLUTION: "0x0" };b.jsonObjectToStringDictionary = function (a) {
	      var b = {};for (var c in a) {
	        var d = a[c];null === d || void 0 === d ? b[c] = d : b[c] = a[c] + "";
	      }return b;
	    }, b.getKeys = function (a, b) {
	      var c,
	          d = [];for (c in a) {
	        b && !b.test(c) || !a.hasOwnProperty(c) || (d[d.length] = c);
	      }return d;
	    }, b.fixEventTime = function (a) {
	      if (a.ns_ts) return parseInt(a.ns_ts);var b = +new Date();return a.ns_ts = b + "", b;
	    }, b.isBrowser = function () {
	      return "undefined" != typeof window && "undefined" != typeof document;
	    }, b.addNewPlaybackInterval = function (a, c, d, e) {
	      var f = {};if (!(d >= c)) return b.cloneObject(a);if (f.start = c, f.end = d, 0 == a.length) return a.push(f), b.cloneObject(a);var g;for (g = 0; g < a.length; g++) {
	        if (f.start >= a[g].start && f.end <= a[g].end) return b.cloneObject(a);
	      }var h,
	          i = !1;for (h = 0; h < a.length; h++) {
	        if (h + 1 === a.length && f.start >= a[h].start || f.start >= a[h].start && f.start < a[h + 1].start) {
	          a.splice(h + 1, 0, f), i = !0;break;
	        }
	      }i || a.splice(0, 0, f);var j = [a[0]];for (g = 1; g < a.length; g++) {
	        j[j.length - 1].end + e < a[g].start ? j.push(a[g]) : j[j.length - 1].end < a[g].end && (j[j.length - 1].end = a[g].end);
	      }return b.cloneObject(j);
	    }, b.stateToString = function (a) {
	      var b = H.InternalStates;for (var c in b) {
	        if (b.hasOwnProperty(c) && b[c] == a) return c;
	      }
	    };var i = function () {
	      var a = ["play", "pause", "pause-on-buffering", "end", "buffer", "buffer-stop", "keep-alive", "hb", "custom", "load", "start", "skstart", "adskip", "cta", "error", "trans", "drmfa", "drmap", "drmde", "bitrt", "playrt", "volume", "window", "audio", "video", "subs", "cdn"];return { PLAY: 0, PAUSE: 1, PAUSE_ON_BUFFERING: 2, END: 3, BUFFER: 4, BUFFER_STOP: 5, KEEPALIVE: 6, HEARTBEAT: 7, CUSTOM: 8, LOAD: 9, ENGAGE: 10, SEEK_START: 11, AD_SKIP: 12, CTA: 13, ERROR: 14, TRANSFER: 15, DRM_FAILED: 16, DRM_APPROVED: 17, DRM_DENIED: 18, BIT_RATE: 19, PLAYBACK_RATE: 20, VOLUME: 21, WINDOW_STATE: 22, AUDIO: 23, VIDEO: 24, SUBS: 25, CDN: 26, toString: function toString(b) {
	          return a[b];
	        } };
	    }(),
	        j = function () {
	      return { IDLE: 0, PLAYBACK_NOT_STARTED: 1, PLAYING: 2, PAUSED: 3, BUFFERING_BEFORE_PLAYBACK: 4, BUFFERING_DURING_PLAYBACK: 5, BUFFERING_DURING_SEEKING: 6, BUFFERING_DURING_PAUSE: 7, SEEKING_BEFORE_PLAYBACK: 8, SEEKING_DURING_PLAYBACK: 9, SEEKING_DURING_BUFFERING: 10, SEEKING_DURING_PAUSE: 11, PAUSED_DURING_BUFFERING: 12 };
	    }(),
	        k = function () {
	      var a = ["c", "s", "r"];return { SINGLE_CLIP: 0, SEGMENTED: 1, REDUCED: 2, toString: function toString(b) {
	          return a[b];
	        } };
	    }(),
	        l = { STREAMINGANALYTICS_VERSION: "6.0.0.161201", MODEL_VERSION: "5.7", LOG_NAMESPACE: "STA", DEFAULT_PLAYERNAME: "js_api", DEFAULT_HEARTBEAT_INTERVAL: [{ playingtime: 6e4, interval: 1e4 }, { playingtime: null, interval: 6e4 }], DEFAULT_KEEP_ALIVE_INTERVAL: 12e5, DEFAULT_PAUSED_ON_BUFFERING_INTERVAL: 500, C1_VALUE: "19", C10_VALUE: "js", NS_AP_C12M_VALUE: "1", NS_NC_VALUE: "1", PAGE_NAME_LABEL: "name", RESTRICTED_URL_LENGTH_LIMIT: 2048, URL_LENGTH_LIMIT: 4096, THROTTLING_DELAY: 500, INTERVAL_MERGE_TOLERANCE: 500, SYSTEM_CLOCK_JUMP_DETECTION_DEFAULT_INTERVAL: 1e3, SYSTEM_CLOCK_JUMP_DETECTION_MINIMUM_INTERVAL: 500, STANDARD_METADATA_LABELS: ["ns_st_st", "ns_st_ci", "ns_st_pr", "ns_st_sn", "ns_st_en", "ns_st_ep", "ns_st_ty", "ns_st_ct", "ns_st_li", "ns_st_ad", "ns_st_bn", "ns_st_tb", "ns_st_an", "ns_st_ta", "ns_st_pu", "c3", "c4", "c6"], LABELS_ORDER: ["c1", "c2", "ca2", "cb2", "cc2", "cd2", "ns_site", "ca_ns_site", "cb_ns_site", "cc_ns_site", "cd_ns_site", "ns_vsite", "ca_ns_vsite", "cb_ns_vsite", "cc_ns_vsite", "cd_ns_vsite", "ns_alias", "ca_ns_alias", "cb_ns_alias", "cc_ns_alias", "cd_ns_alias", "ns_ap_an", "ca_ns_ap_an", "cb_ns_ap_an", "cc_ns_ap_an", "cd_ns_ap_an", "ns_ap_pn", "ns_ap_pv", "c12", "ca12", "cb12", "cc12", "cd12", "ns_ak", "ns_ap_hw", "name", "ns_ap_ni", "ns_ap_ec", "ns_ap_ev", "ns_ap_device", "ns_ap_id", "ns_ap_csf", "ns_ap_bi", "ns_ap_pfm", "ns_ap_pfv", "ns_ap_ver", "ca_ns_ap_ver", "cb_ns_ap_ver", "cc_ns_ap_ver", "cd_ns_ap_ver", "ns_ap_sv", "ns_ap_cv", "ns_ap_smv", "ns_type", "ca_ns_type", "cb_ns_type", "cc_ns_type", "cd_ns_type", "ns_radio", "ns_nc", "cs_partner", "cs_xcid", "cs_impid", "ns_ap_ui", "ca_ns_ap_ui", "cb_ns_ap_ui", "cc_ns_ap_ui", "cd_ns_ap_ui", "ns_ap_gs", "ns_st_sv", "ns_st_pv", "ns_st_smv", "ns_st_it", "ns_st_id", "ns_st_ec", "ns_st_sp", "ns_st_sc", "ns_st_psq", "ns_st_asq", "ns_st_sq", "ns_st_ppc", "ns_st_apc", "ns_st_spc", "ns_st_cn", "ns_st_ev", "ns_st_po", "ns_st_cl", "ns_st_el", "ns_st_sl", "ns_st_pb", "ns_st_hc", "ns_st_mp", "ca_ns_st_mp", "cb_ns_st_mp", "cc_ns_st_mp", "cd_ns_st_mp", "ns_st_mv", "ca_ns_st_mv", "cb_ns_st_mv", "cc_ns_st_mv", "cd_ns_st_mv", "ns_st_pn", "ns_st_tp", "ns_st_ad", "ns_st_li", "ns_st_ci", "ns_st_si", "ns_st_pt", "ns_st_dpt", "ns_st_ipt", "ns_st_et", "ns_st_det", "ns_st_upc", "ns_st_dupc", "ns_st_iupc", "ns_st_upa", "ns_st_dupa", "ns_st_iupa", "ns_st_lpc", "ns_st_dlpc", "ns_st_lpa", "ns_st_dlpa", "ns_st_pa", "ns_st_ie", "ns_ap_jb", "ns_ap_et", "ns_ap_res", "ns_ap_sd", "ns_ap_po", "ns_ap_ot", "ns_ap_c12m", "cs_c12u", "ca_cs_c12u", "cb_cs_c12u", "cc_cs_c12u", "cd_cs_c12u", "ns_ap_install", "ns_ap_updated", "ns_ap_lastrun", "ns_ap_cs", "ns_ap_runs", "ns_ap_usage", "ns_ap_fg", "ns_ap_ft", "ns_ap_dft", "ns_ap_bt", "ns_ap_dbt", "ns_ap_dit", "ns_ap_as", "ns_ap_das", "ns_ap_it", "ns_ap_uc", "ns_ap_aus", "ns_ap_daus", "ns_ap_us", "ns_ap_dus", "ns_ap_ut", "ns_ap_oc", "ns_ap_uxc", "ns_ap_uxs", "ns_ap_lang", "ns_ap_ar", "ns_ap_miss", "ns_ts", "ns_ap_cfg", "ns_st_ca", "ns_st_cp", "ns_st_er", "ca_ns_st_er", "cb_ns_st_er", "cc_ns_st_er", "cd_ns_st_er", "ns_st_pe", "ns_st_ui", "ca_ns_st_ui", "cb_ns_st_ui", "cc_ns_st_ui", "cd_ns_st_ui", "ns_st_bc", "ns_st_dbc", "ns_st_bt", "ns_st_dbt", "ns_st_bp", "ns_st_lt", "ns_st_skc", "ns_st_dskc", "ns_st_ska", "ns_st_dska", "ns_st_skd", "ns_st_skt", "ns_st_dskt", "ns_st_pc", "ns_st_dpc", "ns_st_pp", "ns_st_br", "ns_st_pbr", "ns_st_rt", "ns_st_prt", "ns_st_ub", "ns_st_vo", "ns_st_pvo", "ns_st_ws", "ns_st_pws", "ns_st_ki", "ns_st_rp", "ns_st_bn", "ns_st_tb", "ns_st_an", "ns_st_ta", "ns_st_pl", "ns_st_pr", "ns_st_sn", "ns_st_en", "ns_st_ep", "ns_st_sr", "ns_st_ty", "ns_st_ct", "ns_st_cs", "ns_st_ge", "ns_st_st", "ns_st_stc", "ns_st_ce", "ns_st_ia", "ns_st_dt", "ns_st_ddt", "ns_st_tdt", "ns_st_tm", "ns_st_dtm", "ns_st_ttm", "ns_st_de", "ns_st_pu", "ns_st_ti", "ns_st_cu", "ns_st_fee", "ns_st_ft", "ns_st_at", "ns_st_pat", "ns_st_vt", "ns_st_pvt", "ns_st_tt", "ns_st_ptt", "ns_st_cdn", "ns_st_pcdn", "ns_st_ami", "ns_st_amt", "ns_st_ams", "ns_ap_i1", "ns_ap_i2", "ns_ap_i3", "ns_ap_i4", "ns_ap_i5", "ns_ap_i6", "ns_ap_referrer", "ns_clid", "ns_campaign", "ns_source", "ns_mchannel", "ns_linkname", "ns_fee", "gclid", "utm_campaign", "utm_source", "utm_medium", "utm_term", "utm_content", "ns_ecommerce", "ns_ec_sv", "ns_client_id", "ns_order_id", "ns_ec_cur", "ns_orderline_id", "ns_orderlines", "ns_prod_id", "ns_qty", "ns_prod_price", "ns_prod_grp", "ns_brand", "ns_shop", "ns_category", "category", "ns_c", "ns_search_term", "ns_search_result", "ns_m_exp", "ns_m_chs", "c3", "ca3", "cb3", "cc3", "cd3", "c4", "ca4", "cb4", "cc4", "cd4", "c5", "ca5", "cb5", "cc5", "cd5", "c6", "ca6", "cb6", "cc6", "cd6", "c10", "c11", "c13", "c14", "c15", "c16", "c7", "c8", "c9", "ns_ap_er", "ns_st_amc"] },
	        m = function () {
	      function a() {
	        function a() {
	          f = {}, f.ns_st_cl = "0", f.ns_st_pn = "1", f.ns_st_tp = "0", f.ns_st_cn = "1", f.ns_st_skd = "0", f.ns_st_ci = "0", f.c3 = "*null", f.c4 = "*null", f.c6 = "*null", f.ns_st_st = "*null", f.ns_st_pu = "*null", f.ns_st_pr = "*null", f.ns_st_ep = "*null", f.ns_st_sn = "*null", f.ns_st_en = "*null", f.ns_st_ct = "*null", g = {}, e = !1, d = !1, c = h.UNKNOWN_VALUE, i = !0, j = 0, k = NaN, p = 0, n = 0, m = NaN, q = 0, r = NaN, t = 0, s = 0, o = 0, w = NaN, u = [], v = [], x = 0, y = 0, z = 0, A = 0, B = 0, C = 0, D = 0, E = NaN, F = 0, G = 0, H = 0, I = !1, J = NaN, N = !1, M = 0, Q = 0, K = 0, L = 0, O = 0, P = 0, S = 0, T = 0, U = 0, V = 0, W = 0, X = 0, Y = 0, Z = 0, $ = 0, R = !1;
	        }var c,
	            d,
	            e,
	            f,
	            g,
	            i,
	            j,
	            k,
	            m,
	            n,
	            o,
	            p,
	            q,
	            r,
	            s,
	            t,
	            u,
	            v,
	            w,
	            x,
	            y,
	            z,
	            A,
	            B,
	            C,
	            D,
	            E,
	            F,
	            G,
	            H,
	            I,
	            J,
	            K,
	            L,
	            M,
	            N,
	            O,
	            P,
	            Q,
	            R,
	            S,
	            T,
	            U,
	            V,
	            W,
	            X,
	            Y,
	            Z,
	            $,
	            _ = this,
	            aa = l.INTERVAL_MERGE_TOLERANCE;b.extend(this, { getHash: function getHash() {
	            return c;
	          }, setHash: function setHash(a) {
	            c = a;
	          }, setPlaybackIntervalMergeTolerance: function setPlaybackIntervalMergeTolerance(a) {
	            aa = a;
	          }, getPlaybackIntervalMergeTolerance: function getPlaybackIntervalMergeTolerance() {
	            return aa;
	          }, setInternalLabel: function setInternalLabel(a, b) {
	            f[a] = b;
	          }, getInternalLabel: function getInternalLabel(a) {
	            return f[a];
	          }, hasInternalLabel: function hasInternalLabel(a) {
	            return null != f[a];
	          }, setLabels: function setLabels(a) {
	            a && b.extend(g, a);
	          }, getLabels: function getLabels() {
	            return g;
	          }, setLabel: function setLabel(a, b) {
	            g[a] = b;
	          }, getLabel: function getLabel(a) {
	            return g[a];
	          }, hasLabel: function hasLabel(a) {
	            return a in g;
	          }, getClipNumber: function getClipNumber() {
	            return parseInt(_.getInternalLabel("ns_st_cn"));
	          }, setClipNumber: function setClipNumber(a) {
	            _.setInternalLabel("ns_st_cn", a + "");
	          }, getPartNumber: function getPartNumber() {
	            return _.hasLabel("ns_st_pn") ? parseInt(_.getLabel("ns_st_pn")) : parseInt(_.getInternalLabel("ns_st_pn"));
	          }, createLabels: function createLabels(a, c) {
	            var d = a || {},
	                h = b.isEmpty(d.ns_st_pt) ? _.getPlaybackTime() : parseInt(d.ns_st_pt);d.ns_st_pt = h + (isNaN(k) ? 0 : c - k) + "", d.ns_st_dpt = h + (isNaN(k) ? 0 : c - k) - n + "", d.ns_st_ipt = h + (isNaN(k) ? 0 : c - k) - o + "";var i = b.isEmpty(d.ns_st_et) ? _.getElapsedTime() : parseInt(d.ns_st_et);d.ns_st_et = i + (isNaN(r) ? 0 : c - r) + "", d.ns_st_det = i + (isNaN(r) ? 0 : c - r) - s + "";var j = b.isEmpty(d.ns_st_bt) ? _.getBufferingTime() : parseInt(d.ns_st_bt);d.ns_st_bt = j + "", d.ns_st_dbt = j + (isNaN(E) ? 0 : c - E) - F + "";for (var l, m = parseInt(d.ns_st_po), p = b.addNewPlaybackInterval(b.cloneObject(_.getSegmentPlaybackIntervals()), w, m, aa), q = b.addNewPlaybackInterval(b.cloneObject(_.getAssetPlaybackIntervals()), w, m, aa), t = 0, u = 0, v = 0; v < p.length; v++) {
	              l = Math.abs(p[v].end - p[v].start), t += l, l > u && (u = l);
	            }var D = 0,
	                G = 0;for (v = 0, l; v < q.length; v++) {
	              l = Math.abs(q[v].end - q[v].start), D += l, l > G && (G = l);
	            }d.ns_st_upc = t + "", d.ns_st_dupc = t - x + "", d.ns_st_iupc = t - y + "", t > y ? d.ns_st_iupc = t - y + "" : d.ns_st_iupc = "0", d.ns_st_lpc = u + "", d.ns_st_dlpc = u - z + "", d.ns_st_upa = D + "", d.ns_st_dupa = D - A + "", D > B ? d.ns_st_iupa = D - B + "" : d.ns_st_iupa = "0", d.ns_st_lpa = G + "", d.ns_st_dlpa = G - C + "";var I = b.isEmpty(d.ns_st_pc) ? _.getPauses() : parseInt(d.ns_st_pc);d.ns_st_pc = I + "", d.ns_st_dpc = I - T + "";var J = b.isEmpty(d.ns_st_skc) ? _.getSeeks() : parseInt(d.ns_st_skc);d.ns_st_skc = J + "", d.ns_st_dskc = J - V + "";var K = b.isEmpty(d.ns_st_bc) ? _.getBuffers() : parseInt(d.ns_st_bc);d.ns_st_bc = K + "", d.ns_st_dbc = K - H + "";var M = b.isEmpty(d.ns_st_skt) ? _.getSeekingTime() : parseInt(d.ns_st_skt);d.ns_st_skt = M + "", d.ns_st_dskt = M - L + "";var N = b.isEmpty(d.ns_st_ska) ? _.getSeekingAmount() : parseInt(d.ns_st_ska);return d.ns_st_ska = N + "", d.ns_st_dska = N - P + "", e && (d.ns_st_spc = W + "", d.ns_st_apc = X + "", d.ns_st_sq = Y + "", d.ns_st_asq = Z + ""), e || 0 != $ ? d.ns_st_sc = $ + "" : d.ns_st_sc = "1", b.extend(d, f, g), d;
	          }, updateDeltaLabels: function updateDeltaLabels(a) {
	            n = parseInt(a.ns_st_pt), s = parseInt(a.ns_st_et), F = parseInt(a.ns_st_bt), x = parseInt(a.ns_st_upc), z = parseInt(a.ns_st_lpc), A = parseInt(a.ns_st_upa), C = parseInt(a.ns_st_lpa), T = parseInt(a.ns_st_pc), V = parseInt(a.ns_st_skc), H = parseInt(a.ns_st_bc), L = parseInt(a.ns_st_skt), P = parseInt(a.ns_st_ska), _.setSeekingDirection(0);
	          }, updateIndependentLabels: function updateIndependentLabels(a) {
	            o = parseInt(a.ns_st_pt), y = parseInt(a.ns_st_upc), B = parseInt(a.ns_st_upa);
	          }, getVideoTrack: function getVideoTrack() {
	            return _.getInternalLabel("ns_st_vt");
	          }, setVideoTrack: function setVideoTrack(a) {
	            _.setInternalLabel("ns_st_vt", a + "");
	          }, getAudioTrack: function getAudioTrack() {
	            return _.getInternalLabel("ns_st_at");
	          }, setAudioTrack: function setAudioTrack(a) {
	            _.setInternalLabel("ns_st_at", a + "");
	          }, getSubtitleTrack: function getSubtitleTrack() {
	            return _.getInternalLabel("ns_st_tt");
	          }, setSubtitleTrack: function setSubtitleTrack(a) {
	            _.setInternalLabel("ns_st_tt", a + "");
	          }, getCDN: function getCDN() {
	            return _.getInternalLabel("ns_st_cdn");
	          }, setCDN: function setCDN(a) {
	            _.setInternalLabel("ns_st_cdn", a + "");
	          }, getSegmentPlaybackIntervals: function getSegmentPlaybackIntervals() {
	            return u;
	          }, setAssetPlaybackIntervals: function setAssetPlaybackIntervals(a) {
	            u = a;
	          }, getAssetPlaybackIntervals: function getAssetPlaybackIntervals() {
	            return v;
	          }, incrementPauses: function incrementPauses() {
	            S++;
	          }, incrementSeeks: function incrementSeeks() {
	            U++;
	          }, incrementPlayCounter: function incrementPlayCounter() {
	            Y++;
	          }, getPlayCounter: function getPlayCounter() {
	            return Y;
	          }, getBufferingTime: function getBufferingTime() {
	            return D;
	          }, setBufferingTime: function setBufferingTime(a) {
	            D = a;
	          }, addBufferingTime: function addBufferingTime(a) {
	            if (!isNaN(E)) {
	              var b = _.getBufferingTime();b += a - E, _.setBufferingTime(b), E = NaN;
	            }
	          }, setPlaybackStartPosition: function setPlaybackStartPosition(a) {
	            w = parseInt(a);
	          }, getPlaybackStartPosition: function getPlaybackStartPosition() {
	            return w;
	          }, addInterval: function addInterval(a) {
	            isNaN(w) || isNaN(a) || (u = b.addNewPlaybackInterval(u, w, a, aa), v = b.addNewPlaybackInterval(v, w, a, aa), w = NaN);
	          }, getElapsedTime: function getElapsedTime() {
	            return q;
	          }, setElapsedTime: function setElapsedTime(a) {
	            q = a;
	          }, addElapsedTime: function addElapsedTime(a) {
	            if (!isNaN(r)) {
	              var b = _.getElapsedTime();b += a - r, _.setElapsedTime(b), r = NaN;
	            }
	          }, getElapsedTimestamp: function getElapsedTimestamp() {
	            return r;
	          }, setElapsedTimestamp: function setElapsedTimestamp(a) {
	            r = a;
	          }, addPlaybackTime: function addPlaybackTime(a) {
	            if (!isNaN(k)) {
	              var b = _.getPlaybackTime();b += a - k, _.setPlaybackTime(b), k = NaN;
	            }
	          }, getPlaybackTime: function getPlaybackTime() {
	            return j;
	          }, getExpectedPlaybackPosition: function getExpectedPlaybackPosition(a) {
	            return isNaN(k) ? p : p + (a - k);
	          }, setPlaybackTimeOffset: function setPlaybackTimeOffset(a) {
	            p = a;
	          }, getPlaybackTimeOffset: function getPlaybackTimeOffset() {
	            return p;
	          }, setPlaybackTime: function setPlaybackTime(a) {
	            j = a;
	          }, getPlaybackTimestamp: function getPlaybackTimestamp() {
	            return k;
	          }, setPlaybackTimestamp: function setPlaybackTimestamp(a) {
	            k = a;
	          }, setPreviousPlaybackTime: function setPreviousPlaybackTime(a) {
	            n = a;
	          }, setPreviousPlaybackTimestamp: function setPreviousPlaybackTimestamp(a) {
	            m = a;
	          }, getBufferingTimestamp: function getBufferingTimestamp() {
	            return E;
	          }, setBufferingTimestamp: function setBufferingTimestamp(a) {
	            E = a;
	          }, getPauses: function getPauses() {
	            return S;
	          }, setPauses: function setPauses(a) {
	            S = a;
	          }, getSeeks: function getSeeks() {
	            return U;
	          }, setSeeks: function setSeeks(a) {
	            U = a;
	          }, setSeeking: function setSeeking(a) {
	            I = a;
	          }, isSeeking: function isSeeking() {
	            return I;
	          }, setCollectingSeekingTime: function setCollectingSeekingTime(a) {
	            N = a;
	          }, isCollectingSeekingTime: function isCollectingSeekingTime() {
	            return N;
	          }, setAssetStarted: function setAssetStarted(a) {
	            d = a;
	          }, isAssetStarted: function isAssetStarted() {
	            return d;
	          }, setPlaybackStarted: function setPlaybackStarted(a) {
	            e = a;
	          }, isPlaybackStarted: function isPlaybackStarted() {
	            return e;
	          }, setSeekingTimestamp: function setSeekingTimestamp(a) {
	            J = a;
	          }, getSeekingTimestamp: function getSeekingTimestamp() {
	            return J;
	          }, addSeekingTime: function addSeekingTime(a) {
	            if (!isNaN(J)) {
	              var b = _.getSeekingTime();b += a - J, _.setSeekingTime(b), J = NaN;
	            }
	          }, getSeekingTime: function getSeekingTime() {
	            return K;
	          }, setSeekingTime: function setSeekingTime(a) {
	            K = a;
	          }, setSeekingTimeBeforeEnd: function setSeekingTimeBeforeEnd(a) {
	            Q = a;
	          }, getSeekingTimeBeforeEnd: function getSeekingTimeBeforeEnd() {
	            return Q;
	          }, setSeekStartPosition: function setSeekStartPosition(a) {
	            M = a;
	          }, getSeekStartPosition: function getSeekStartPosition() {
	            return M;
	          }, setSeekingAmount: function setSeekingAmount(a) {
	            O = a;
	          }, getSeekingAmount: function getSeekingAmount() {
	            return O;
	          }, addSeekingAmount: function addSeekingAmount(a) {
	            var b = _.getSeekingAmount();b += Math.abs(a - M), _.setSeekingAmount(b);var c;M == a ? c = 0 : M > a ? c = -1 : M < a && (c = 1), _.setSeekingDirection(c), M = 0;
	          }, getSeekingDirection: function getSeekingDirection() {
	            return parseInt(_.getInternalLabel("ns_st_skd"));
	          }, setSeekingDirection: function setSeekingDirection(a) {
	            _.setInternalLabel("ns_st_skd", a + "");
	          }, resetAssetLifecycleLabels: function resetAssetLifecycleLabels() {
	            j = 0, n = 0, o = 0, D = 0, F = 0, G = 0, H = 0, S = 0, T = 0, Y = 0, v = [], A = 0, B = 0, C = 0, q = 0, s = 0, K = 0, L = 0, O = 0, P = 0, U = 0, V = 0;
	          }, incrementSegmentPlaybackCounter: function incrementSegmentPlaybackCounter() {
	            W++;
	          }, incrementAssetLoadCounter: function incrementAssetLoadCounter() {
	            $++;
	          }, incrementAssetPlaybackCounter: function incrementAssetPlaybackCounter() {
	            X++;
	          }, getPreviousUniquePlaybackInterval: function getPreviousUniquePlaybackInterval() {
	            return x;
	          }, setPreviousUniquePlaybackInterval: function setPreviousUniquePlaybackInterval(a) {
	            x = a;
	          }, getPreviousEventIndependentUniquePlaybackInterval: function getPreviousEventIndependentUniquePlaybackInterval() {
	            return y;
	          }, setPreviousEventIndependentUniquePlaybackInterval: function setPreviousEventIndependentUniquePlaybackInterval(a) {
	            y = a;
	          }, setPreviousLongestPlaybackInterval: function setPreviousLongestPlaybackInterval(a) {
	            z = a;
	          }, getPreviousLongestPlaybackInterval: function getPreviousLongestPlaybackInterval() {
	            return z;
	          }, resetAssetPlaybackIntervals: function resetAssetPlaybackIntervals() {
	            v = [], A = 0, B = 0, C = 0;
	          }, setSegmentPlaybackCounter: function setSegmentPlaybackCounter(a) {
	            W = a;
	          }, setAssetLoadCounter: function setAssetLoadCounter(a) {
	            $ = a;
	          }, setAssetPlaybackCounter: function setAssetPlaybackCounter(a) {
	            X = a;
	          }, setLowestPartNumberPlayed: function setLowestPartNumberPlayed(a) {
	            t = a;
	          }, getSegmentPlaybackCounter: function getSegmentPlaybackCounter() {
	            return W;
	          }, getAssetLoadCounter: function getAssetLoadCounter() {
	            return $;
	          }, getAssetPlaybackCounter: function getAssetPlaybackCounter() {
	            return X;
	          }, getLowestPartNumberPlayed: function getLowestPartNumberPlayed() {
	            return t;
	          }, getBuffers: function getBuffers() {
	            return G;
	          }, incrementBufferCount: function incrementBufferCount() {
	            G++;
	          }, getPreviousBufferingTime: function getPreviousBufferingTime() {
	            return F;
	          }, setPlaySequenceCounter: function setPlaySequenceCounter(a) {
	            Z = a;
	          }, incrementPlaySequenceCounter: function incrementPlaySequenceCounter() {
	            Z++;
	          }, getPlaySequenceCounter: function getPlaySequenceCounter() {
	            return Z;
	          }, isPlaybackSessionLooping: function isPlaybackSessionLooping() {
	            return R;
	          }, setPlaybackSessionLooping: function setPlaybackSessionLooping(a) {
	            R = a;
	          }, enableAutoCalculatePositions: function enableAutoCalculatePositions(a) {
	            i = !!a;
	          }, isAutoCalculatePositionsEnabled: function isAutoCalculatePositionsEnabled() {
	            return i;
	          } }), a();
	      }return a.resetAsset = function (a, b, c) {
	        for (var d = a.getLabels(), e = {}, f = 0; c && f < c.length; ++f) {
	          d.hasOwnProperty(c[f]) && (e[c[f]] = d[c[f]]);
	        }b.setLabels(e), b.setPlaybackIntervalMergeTolerance(a.getPlaybackIntervalMergeTolerance());
	      }, a;
	    }(),
	        n = function () {
	      function a(a) {
	        function c() {
	          d = new m(), h = {}, h.ns_st_id = +new Date() + "", k = {}, e = NaN, f = 0, g = NaN, o = {}, p = 0, n = !1, q = !1, r = 0, t = 0, s = 0, u = 1, v = 0, w = [];
	        }var d,
	            e,
	            f,
	            g,
	            h,
	            k,
	            n,
	            o,
	            p,
	            q,
	            r,
	            s,
	            t,
	            u,
	            v,
	            w,
	            x = this;b.extend(this, { resetAsset: function resetAsset() {
	            var a = d;d = new m(), m.resetAsset(a, d);
	          }, hashExists: function hashExists(a) {
	            return null != o[a];
	          }, storeHash: function storeHash(a) {
	            o[a] = {};
	          }, removeHash: function removeHash(a) {
	            delete o[a];
	          }, storeAssetPlaybackCounters: function storeAssetPlaybackCounters() {
	            for (var a in o) {
	              if (o.hasOwnProperty(a) && o[a].clipNumber === d.getClipNumber()) {
	                b.extend(o[a], { segmentPlaybackCounter: d.getSegmentPlaybackCounter(), assetLoadCounter: d.getAssetLoadCounter(), assetPlaybackCounter: d.getAssetPlaybackCounter(), lowestPartNumberPlayed: d.getLowestPartNumberPlayed(), seeking: d.isSeeking(), seekingTimeBeforeEnd: d.getSeekingTimeBeforeEnd(), seekingStartPosition: d.getSeekStartPosition(), segmentPlaybackIntervals: d.getSegmentPlaybackIntervals(), videoTrack: d.getVideoTrack(), audioTrack: d.getAudioTrack(), subtitleTrack: d.getSubtitleTrack(), cdn: d.getCDN(), playSequenceCounter: d.getPlaySequenceCounter(), previousUniquePlaybackInterval: d.getPreviousUniquePlaybackInterval(), previousEventIndependentUniquePlaybackInterval: d.getPreviousEventIndependentUniquePlaybackInterval(), previousLongestPlaybackInterval: d.getPreviousLongestPlaybackInterval() });break;
	              }
	            }
	          }, getStoredAssetRegisters: function getStoredAssetRegisters(a) {
	            return o[a];
	          }, getClipNumber: function getClipNumber(a) {
	            return o[a].clipNumber;
	          }, getMaxClipNumber: function getMaxClipNumber() {
	            return p;
	          }, storeClipNumber: function storeClipNumber(a, b) {
	            o[a].clipNumber = b, b > p && (p = b);
	          }, setLabels: function setLabels(a) {
	            null != a && b.extend(k, a);
	          }, getLabels: function getLabels() {
	            return k;
	          }, setLabel: function setLabel(a, b) {
	            var c = {};c[a] = b, x.setLabels(c);
	          }, getLabel: function getLabel(a) {
	            return k[a];
	          }, getAsset: function getAsset() {
	            return d;
	          }, addInternalErrorFlag: function addInternalErrorFlag(a) {
	            for (var b = 0; b < w.length; ++b) {
	              if (w[b] == a) return;
	            }w.push(a);
	          }, createLabels: function createLabels(c, e) {
	            var f = c || {},
	                i = b.isEmpty(f.ns_st_pa) ? x.getPlaybackTime() : parseInt(f.ns_st_pa);return f.ns_st_pa = i + (isNaN(g) ? 0 : e - g) + "", f.ns_st_pp = t + "", f.ns_st_sp = u + "", f.ns_st_bp = v + "", q || (f.ns_st_pb = null != f.ns_st_pb ? f.ns_st_pb : "1"), d.isPlaybackStarted() && (f.ns_st_ppc = r + "", f.ns_st_psq = s + ""), w.length > 0 && (f.ns_st_ie = (f.ns_st_ie ? f.ns_st_ie + ";" : "") + w.join(";")), b.extend(f, h, k), a.getPlaybackSession().getAsset().createLabels(f, e), f;
	          }, incrementPlayCounter: function incrementPlayCounter() {
	            u++;
	          }, incrementPauses: function incrementPauses() {
	            t++;
	          }, addPlaybackTime: function addPlaybackTime(a) {
	            if (!isNaN(g)) {
	              var b = x.getPlaybackTime();b += a - g, x.setPlaybackTime(b), g = NaN;
	            }
	          }, addBufferingTime: function addBufferingTime(a) {
	            if (!isNaN(e)) {
	              var b = x.getBufferingTime();b += a - e, x.setBufferingTime(b), e = NaN;
	            }
	          }, getBufferingTime: function getBufferingTime() {
	            return v;
	          }, setBufferingTime: function setBufferingTime(a) {
	            v = a;
	          }, getPlaybackTime: function getPlaybackTime() {
	            return f;
	          }, setBufferingTimestamp: function setBufferingTimestamp(a) {
	            e = a;
	          }, getBufferingTimestamp: function getBufferingTimestamp() {
	            return e;
	          }, setPlaybackTime: function setPlaybackTime(a) {
	            f = a;
	          }, setPlaybackTimestamp: function setPlaybackTimestamp(a) {
	            g = a;
	          }, getPlaybackTimestamp: function getPlaybackTimestamp() {
	            return g;
	          }, getPauses: function getPauses() {
	            return t;
	          }, setPauses: function setPauses(a) {
	            t = a;
	          }, isPlaybackSessionStarted: function isPlaybackSessionStarted() {
	            return n;
	          }, setPlaybackSessionStarted: function setPlaybackSessionStarted(a) {
	            n = a;
	          }, getPlaybackCounter: function getPlaybackCounter() {
	            return r;
	          }, incrementPlaybackCounter: function incrementPlaybackCounter() {
	            r++;
	          }, setFirstEventSent: function setFirstEventSent(a) {
	            q = a;
	          }, setPlaySequenceCounter: function setPlaySequenceCounter(a) {
	            s = a;
	          }, incrementPlaySequenceCounter: function incrementPlaySequenceCounter() {
	            s++;
	          }, getPlaybackSessionID: function getPlaybackSessionID() {
	            return h.ns_st_id;
	          }, setAsset: function setAsset(c, d) {
	            a.getLogging().apiCall("setAsset", c, d), c = b.jsonObjectToStringDictionary(c);var e = a.getStateMachine().getCurrentState();if (e != j.IDLE) {
	              a.getLogging().infoLog("Ending the current Clip. It was in state:", b.stateToString(e));var f = {};a.getStaCore().newEvent(i.END, b.fixEventTime(f), f);
	            }var g = "",
	                h = 0;if (null != c.ns_st_cn) g = c.ns_st_cn;else for (var k = 0; k < l.STANDARD_METADATA_LABELS.length; k++) {
	              c[l.STANDARD_METADATA_LABELS[k]] && (g += l.STANDARD_METADATA_LABELS[k] + ":" + c[l.STANDARD_METADATA_LABELS[k]] + ";");
	            }var m = x,
	                n = m.getAsset();n.isAssetStarted() ? (m.hashExists(n.getHash()) || (m.storeHash(n.getHash()), m.storeClipNumber(n.getHash(), n.getClipNumber())), m.storeAssetPlaybackCounters(), h = m.hashExists(g) ? m.getClipNumber(g) : b.exists(c.ns_st_cn) ? parseInt(c.ns_st_cn) : m.getMaxClipNumber() + 1) : h = m.hashExists(g) ? m.getClipNumber(g) : n.getClipNumber(), m.resetAsset(), n = m.getAsset(), n.setHash(g), n.setClipNumber(h), n.setLabels(c);var o = m.getStoredAssetRegisters(g);o && (n.setAssetStarted(!0), n.setSegmentPlaybackCounter(o.segmentPlaybackCounter), n.setAssetLoadCounter(o.assetLoadCounter), n.setAssetPlaybackCounter(o.assetPlaybackCounter), n.setLowestPartNumberPlayed(o.lowestPartNumberPlayed), n.setSeeking(o.seeking), n.setSeekingTimeBeforeEnd(o.seekingTimeBeforeEnd), n.setSeekStartPosition(o.seekingStartPosition), n.setAssetPlaybackIntervals(o.segmentPlaybackIntervals), o.videoTrack && n.setVideoTrack(o.videoTrack), o.audioTrack && n.setAudioTrack(o.audioTrack), o.subtitleTrack && n.setSubtitleTrack(o.subtitleTrack), o.cdn && n.setCDN(o.cdn), n.setPlaySequenceCounter(o.playSequenceCounter), n.setPreviousUniquePlaybackInterval(o.previousUniquePlaybackInterval), n.setPreviousEventIndependentUniquePlaybackInterval(o.previousEventIndependentUniquePlaybackInterval), n.setPreviousLongestPlaybackInterval(o.previousLongestPlaybackInterval)), n.incrementAssetLoadCounter(), n.isAssetStarted() && d && m.incrementPlayCounter(), d && (m.setPlaySequenceCounter(0), n.setPlaybackSessionLooping(!0)), !b.exists(c.ns_st_tp) && b.exists(c.ns_st_ad) && b.isNotEmpty(c.ns_st_ad) && "0" !== c.ns_st_ad && n.setInternalLabel("ns_st_tp", "1");
	          } }), c();
	      }return a.resetPlaybackSession = function (a, b, c) {
	        for (var d = b.getAsset(), e = b.getLabels(), f = {}, g = 0; c && g < c.length; g++) {
	          e.hasOwnProperty(c[g]) && (f[c[g]] = e[c[g]]);
	        }a.getPlaybackSession().setLabels(f), m.resetAsset(d, a.getPlaybackSession().getAsset(), c);
	      }, a;
	    }(),
	        o = function () {
	      return function (a) {
	        function c() {
	          e = 1;
	        }function d(c) {
	          f = b.extend({}, c);var d = a.getStaCore().getLiveEndpointURL();if (a.getAppCore()) {
	            if (a.getStaCore().isProperlyInitialized()) {
	              var e = a.getStaCore().getExports().et;if ("function" == typeof a.getAppCore().getMeasurementDispatcher) {
	                var g = a.getAppCore().getMeasurementDispatcher();g.send(e.HIDDEN, c, d);
	              } else {
	                var h = a.getStaCore().getExports().am,
	                    i = h.newApplicationMeasurement(a.getAppCore(), e.HIDDEN, c, d);a.getAppCore().getQueue().offer(i);
	              }
	            }
	          } else d && a.getStaCore().getPlatformAPI().httpGet(a.getStaCore().prepareUrl(d, c));
	        }var e,
	            f,
	            g = this,
	            h = [];b.extend(this, { newEvent: function newEvent(a) {
	            for (var b = 0; b < h.length; ++b) {
	              h[b](a.eventLabels);
	            }d(a.eventLabels), a.eventType != i.HEARTBEAT && g.incrementEventCounter();
	          }, addMeasurementListener: function addMeasurementListener(a) {
	            "function" == typeof a && h.push(a);
	          }, removeMeasurementListener: function removeMeasurementListener(a) {
	            for (var b = NaN, c = 0; c < h.length; ++c) {
	              if (h[c] == a) {
	                b = c;break;
	              }
	            }isNaN(b) || h.splice(b, 1);
	          }, getEventCounter: function getEventCounter() {
	            return e;
	          }, incrementEventCounter: function incrementEventCounter() {
	            e++;
	          }, setEventCounter: function setEventCounter(a) {
	            e = a;
	          }, getMeasurementSnapshot: function getMeasurementSnapshot() {
	            return f;
	          } }), c();
	      };
	    }(),
	        p = function () {
	      return function (a) {
	        function c() {
	          g = 0, h = 0;
	        }function d() {
	          h++;var c = {},
	              d = b.fixEventTime(c);c.ns_st_hc = a.getHeartbeat().getCount() + "";var e = a.getStaCore().createLabels(i.HEARTBEAT, c, d);a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), g = 0, j.resume();
	        }function e() {
	          null != f && (a.getStaCore().getPlatformAPI().clearTimeout(f), f = null);
	        }var f,
	            g,
	            h,
	            j = this,
	            k = l.DEFAULT_HEARTBEAT_INTERVAL;b.extend(this, { getCount: function getCount() {
	            return h;
	          }, setIntervals: function setIntervals(a) {
	            k = a;
	          }, getInterval: function getInterval(a) {
	            var b = 0;if (null != k) for (var c = 0; c < k.length; c++) {
	              var d = k[c],
	                  e = d.playingtime;if (!e || a < e) {
	                b = d.interval;break;
	              }
	            }return b;
	          }, getIntervals: function getIntervals() {
	            return k;
	          }, resume: function resume() {
	            e();var b = j.getInterval(a.getPlaybackSession().getAsset().getPlaybackTime() + (+new Date() - a.getPlaybackSession().getAsset().getPlaybackTimestamp()));if (b > 0) {
	              var c = g > 0 ? g : b;f = a.getStaCore().getPlatformAPI().setTimeout(d, c);
	            }g = 0;
	          }, pause: function pause() {
	            e();var b = j.getInterval(a.getPlaybackSession().getAsset().getPlaybackTime() + (+new Date() - a.getPlaybackSession().getAsset().getPlaybackTimestamp()));g = b - (a.getPlaybackSession().getAsset().getPlaybackTime() + (+new Date() - a.getPlaybackSession().getAsset().getPlaybackTimestamp())) % b;
	          } }), c();
	      };
	    }(),
	        q = function () {
	      return function (a) {
	        function c() {}function d() {
	          var c = {},
	              d = b.fixEventTime(c);a.getStaCore().newPseudoEvent(i.KEEPALIVE, d, c), g.start();
	        }function e() {
	          null != f && (a.getStaCore().getPlatformAPI().clearTimeout(f), f = null);
	        }var f,
	            g = this,
	            h = l.DEFAULT_KEEP_ALIVE_INTERVAL;b.extend(g, { start: function start() {
	            e(), f = a.getStaCore().getPlatformAPI().setTimeout(d, h);
	          }, stop: e, setInterval: function setInterval(a) {
	            h = a;
	          }, getInterval: function getInterval() {
	            return h;
	          } }), c();
	      };
	    }(),
	        r = function () {
	      return function (a) {
	        function c() {
	          f = j.IDLE, e = null, d = NaN;
	        }var d,
	            e,
	            f,
	            g = this;b.extend(g, { eventTypeToState: function eventTypeToState(a) {
	            if (f == j.IDLE) {
	              if (a == i.PLAY) return j.PLAYING;if (a == i.SEEK_START) return j.SEEKING_BEFORE_PLAYBACK;if (a == i.BUFFER) return j.BUFFERING_BEFORE_PLAYBACK;
	            } else if (f == j.PLAYBACK_NOT_STARTED) {
	              if (a == i.PLAY) return j.PLAYING;if (a == i.SEEK_START) return j.SEEKING_BEFORE_PLAYBACK;if (a == i.BUFFER) return j.BUFFERING_BEFORE_PLAYBACK;if (a == i.END || a == i.AD_SKIP) return j.IDLE;
	            } else if (f == j.PLAYING) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.BUFFER) return j.BUFFERING_DURING_PLAYBACK;if (a == i.PAUSE) return j.PAUSED;if (a == i.SEEK_START) return j.SEEKING_DURING_PLAYBACK;
	            } else if (f == j.PAUSED) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.BUFFER) return j.BUFFERING_DURING_PAUSE;if (a == i.PLAY) return j.PLAYING;if (a == i.SEEK_START) return j.SEEKING_DURING_PAUSE;
	            } else if (f == j.BUFFERING_BEFORE_PLAYBACK) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PAUSE || a == i.BUFFER_STOP) return j.PLAYBACK_NOT_STARTED;if (a == i.PLAY) return j.PLAYING;if (a == i.SEEK_START) return j.SEEKING_BEFORE_PLAYBACK;
	            } else if (f == j.BUFFERING_DURING_PLAYBACK) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY || a == i.BUFFER_STOP) return j.PLAYING;if (a == i.PAUSE_ON_BUFFERING) return j.PAUSED_DURING_BUFFERING;if (a == i.SEEK_START) return j.SEEKING_DURING_BUFFERING;if (a == i.PAUSE) return j.PAUSED;
	            } else if (f == j.BUFFERING_DURING_SEEKING) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY) return j.PLAYING;if (a == i.BUFFER_STOP) return j.SEEKING_DURING_PLAYBACK;if (a == i.PAUSE) return j.PAUSED;
	            } else if (f == j.BUFFERING_DURING_PAUSE) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY) return j.PLAYING;if (a == i.SEEK_START) return j.SEEKING_DURING_PAUSE;if (a == i.BUFFER_STOP || a == i.PAUSE) return j.PAUSED;
	            } else if (f == j.SEEKING_BEFORE_PLAYBACK) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PAUSE) return j.PLAYBACK_NOT_STARTED;if (a == i.PLAY) return j.PLAYING;if (a == i.BUFFER) return j.BUFFERING_BEFORE_PLAYBACK;
	            } else if (f == j.SEEKING_DURING_PLAYBACK) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY) return j.PLAYING;if (a == i.PAUSE) return j.PAUSED;if (a == i.BUFFER) return j.BUFFERING_DURING_SEEKING;
	            } else if (f == j.SEEKING_DURING_BUFFERING) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY) return j.PLAYING;if (a == i.PAUSE || a == i.BUFFER_STOP) return j.PAUSED;if (a == i.BUFFER) return j.BUFFERING_DURING_SEEKING;
	            } else if (f == j.SEEKING_DURING_PAUSE) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.PLAY) return j.PLAYING;if (a == i.PAUSE || a == i.BUFFER_STOP) return j.PAUSED;if (a == i.BUFFER) return j.BUFFERING_DURING_PAUSE;
	            } else if (f == j.PAUSED_DURING_BUFFERING) {
	              if (a == i.END || a == i.AD_SKIP) return j.IDLE;if (a == i.SEEK_START) return j.SEEKING_DURING_BUFFERING;if (a == i.PAUSE) return j.PAUSED;if (a == i.PLAY || a == i.BUFFER_STOP) return j.PLAYING;
	            }return null;
	          }, getCurrentState: function getCurrentState() {
	            return f;
	          }, newEvent: function newEvent(a, b) {
	            var c = g.eventTypeToState(a);f != c && (e = f, f = c, d = b);
	          }, getPreviousState: function getPreviousState() {
	            return e;
	          }, getLastStateChangeTimestamp: function getLastStateChangeTimestamp() {
	            return d;
	          } }), c();
	      };
	    }(),
	        s = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onSeekStartWhenPausedOrBufferingDuringPause: function onSeekStartWhenPausedOrBufferingDuringPause(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().getAsset().isSeeking() ? a.getPlaybackSession().getAsset().isCollectingSeekingTime() || (a.getPlaybackSession().getAsset().setSeekingTimestamp(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0)) : a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().isSeeking() || (a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onBufferWhenSeekingOrPaused: function onBufferWhenSeekingOrPaused(b, c) {
	            a.getPlaybackSession().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPlayWhenSeekingDuringBufferingOrSeekingDuringPause: function onPlayWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          }, onBufferStopWhenBufferingDuringSeekingOrBufferingDuringPause: function onBufferStopWhenBufferingDuringSeekingOrBufferingDuringPause(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPauseWhenSeekingDuringPlaybackOrSeekingDuringPause: function onPauseWhenSeekingDuringPlaybackOrSeekingDuringPause(b, c) {
	            a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onEndOrAdSkipWhenSeekingDuringBufferingOrSeekingDuringPause: function onEndOrAdSkipWhenSeekingDuringBufferingOrSeekingDuringPause(c, d) {
	            a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onBufferStopWhenSeekingDuringBufferingOrSeekingDuringPause: function onBufferStopWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) {
	            a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onBufferStopOrOnPlayWhenBufferingDuringPlayback: function onBufferStopOrOnPlayWhenBufferingDuringPlayback(b, c) {
	            var d = parseInt(c.ns_st_po);a.getStaCore().stopPausedOnBufferingTimer(), a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getHeartbeat().resume(), a.getKeepAlive().start();
	          } });
	      };
	    }(),
	        t = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getPlaybackSession().addBufferingTime(c), a.getPlaybackSession().getAsset().addBufferingTime(c), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onBufferStop: function onBufferStop(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1));
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() ? a.getPlaybackSession().getAsset().isCollectingSeekingTime() || (a.getPlaybackSession().getAsset().setSeekingTimestamp(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0)) : a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().isSeeking() || (a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b));
	          }, onPause: function onPause(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1));
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().setPlaybackStarted(!0), (a.getPlaybackSession().getAsset().isPlaybackSessionLooping() || 0 == a.getPlaybackSession().getPlaybackCounter()) && (a.getPlaybackSession().incrementPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaybackSessionLooping(!1)), a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().setPlaybackStarted(!0), a.getPlaybackSession().getAsset().incrementSegmentPlaybackCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), (0 == a.getPlaybackSession().getAsset().getLowestPartNumberPlayed() || a.getPlaybackSession().getAsset().getPartNumber() <= a.getPlaybackSession().getAsset().getLowestPartNumberPlayed()) && (a.getPlaybackSession().getAsset().setLowestPartNumberPlayed(a.getPlaybackSession().getAsset().getPartNumber()), a.getPlaybackSession().getAsset().incrementAssetPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaySequenceCounter(0), a.getPlaybackSession().getAsset().resetAssetPlaybackIntervals()), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getStaCore().isLoadingTimeSent() || (c.ns_st_lt = a.getStaCore().getLoadTimeOffset() + b - a.getStaCore().getInitTimestamp() + "", a.getStaCore().setLoadingTimeSent(!0)), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        u = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndAndSkip: function onEndAndSkip(c, d) {
	            a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().addBufferingTime(c), a.getPlaybackSession().getAsset().addBufferingTime(c), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onPause: function onPause(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        v = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onPauseOnBuffering: function onPauseOnBuffering(b, c) {
	            parseInt(c.ns_st_po);a.getStaCore().stopPausedOnBufferingTimer(), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses();var d = a.getStaCore().createLabels(i.PAUSE, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(d.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(d.eventLabels), a.getEventManager().newEvent(d), a.getPlaybackSession().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().setBufferingTimestamp(b);
	          }, onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            parseInt(d.ns_st_po);a.getStaCore().stopPausedOnBufferingTimer(), a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().addBufferingTime(c), a.getPlaybackSession().getAsset().addBufferingTime(c), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getStaCore().stopPausedOnBufferingTimer(), a.getHeartbeat().pause(), a.getKeepAlive().stop(), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses();var e = a.getStaCore().createLabels(i.PAUSE, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          }, onPause: function onPause(b, c) {
	            parseInt(c.ns_st_po);a.getStaCore().stopPausedOnBufferingTimer(), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses();var d = a.getStaCore().createLabels(i.PAUSE, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(d.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(d.eventLabels), a.getEventManager().newEvent(d);
	          } });
	      };
	    }(),
	        w = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getStaCore().stopPausedOnBufferingTimer(), a.getPlaybackSession().addBufferingTime(c), a.getPlaybackSession().getAsset().addBufferingTime(c), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onPause: function onPause(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses(), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        x = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onBuffer: function onBuffer(b, c) {
	            a.getPlaybackSession().setPlaybackSessionStarted(!0), a.getPlaybackSession().getAsset().setAssetStarted(!0), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().setSeekingTime(a.getPlaybackSession().getAsset().getSeekingTimeBeforeEnd()), a.getPlaybackSession().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().setBufferingTimestamp(b);
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().setPlaybackSessionStarted(!0), a.getPlaybackSession().getAsset().setAssetStarted(!0), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().setSeekingTime(a.getPlaybackSession().getAsset().getSeekingTimeBeforeEnd()), a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b);
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().setPlaybackSessionStarted(!0), a.getPlaybackSession().getAsset().setAssetStarted(!0), (a.getPlaybackSession().getAsset().isPlaybackSessionLooping() || 0 == a.getPlaybackSession().getPlaybackCounter()) && (a.getPlaybackSession().incrementPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaybackSessionLooping(!1)), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().setSeekingTime(a.getPlaybackSession().getAsset().getSeekingTimeBeforeEnd()), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().setPlaybackStarted(!0), a.getPlaybackSession().getAsset().incrementSegmentPlaybackCounter(), (0 == a.getPlaybackSession().getAsset().getLowestPartNumberPlayed() || a.getPlaybackSession().getAsset().getPartNumber() <= a.getPlaybackSession().getAsset().getLowestPartNumberPlayed()) && (a.getPlaybackSession().getAsset().setLowestPartNumberPlayed(a.getPlaybackSession().getAsset().getPartNumber()), a.getPlaybackSession().getAsset().incrementAssetPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaySequenceCounter(0), a.getPlaybackSession().getAsset().resetAssetPlaybackIntervals()), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getStaCore().isLoadingTimeSent() || (c.ns_st_lt = a.getStaCore().getLoadTimeOffset() + b - a.getStaCore().getInitTimestamp() + "", a.getStaCore().setLoadingTimeSent(!0)), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        y = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        z = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().addBufferingTime(c), a.getPlaybackSession().getAsset().addBufferingTime(c), a.getPlaybackSession().getAsset().addElapsedTime(c), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1));var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onBufferStop: function onBufferStop(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().isSeeking() ? a.getPlaybackSession().getAsset().isCollectingSeekingTime() || (a.getPlaybackSession().getAsset().setSeekingTimestamp(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0)) : a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().isSeeking() || (a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPause: function onPause(b, c) {
	            a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().addBufferingTime(b), a.getPlaybackSession().getAsset().addBufferingTime(b), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        A = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().getAsset().isSeeking() ? a.getPlaybackSession().getAsset().setSeekingTimestamp(b) : a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().isSeeking() || (a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b));
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().setPlaybackSessionStarted(!0), (a.getPlaybackSession().getAsset().isPlaybackSessionLooping() || 0 == a.getPlaybackSession().getPlaybackCounter()) && (a.getPlaybackSession().incrementPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaybackSessionLooping(!1)), a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().setPlaybackStarted(!0), a.getPlaybackSession().getAsset().incrementSegmentPlaybackCounter(), (0 == a.getPlaybackSession().getAsset().getLowestPartNumberPlayed() || a.getPlaybackSession().getAsset().getPartNumber() <= a.getPlaybackSession().getAsset().getLowestPartNumberPlayed()) && (a.getPlaybackSession().getAsset().setLowestPartNumberPlayed(a.getPlaybackSession().getAsset().getPartNumber()), a.getPlaybackSession().getAsset().incrementAssetPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaySequenceCounter(0), a.getPlaybackSession().getAsset().resetAssetPlaybackIntervals()), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getStaCore().isLoadingTimeSent() || (c.ns_st_lt = a.getStaCore().getLoadTimeOffset() + b - a.getStaCore().getInitTimestamp() + "", a.getStaCore().setLoadingTimeSent(!0)), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          }, onBuffer: function onBuffer() {
	            a.getPlaybackSession().setBufferingTimestamp(eventTimestamp), a.getPlaybackSession().getAsset().setBufferingTimestamp(eventTimestamp);
	          } });
	      };
	    }(),
	        B = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            var e = parseInt(d.ns_st_po);a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().addPlaybackTime(c), a.getPlaybackSession().getAsset().addPlaybackTime(c), a.getPlaybackSession().getAsset().addElapsedTime(c), a.getPlaybackSession().getAsset().addInterval(e);var f = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(f.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(f.eventLabels), a.getEventManager().newEvent(f), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onBuffer: function onBuffer(b, c) {
	            var d = parseInt(c.ns_st_po);a.getHeartbeat().pause(), a.getKeepAlive().stop(), a.getPlaybackSession().addPlaybackTime(b), a.getPlaybackSession().getAsset().addPlaybackTime(b), a.getPlaybackSession().getAsset().addInterval(d), a.getStaCore().isPauseOnBufferingEnabled() && a.getStaCore().startPausedOnBufferingTimer(b, c), a.getPlaybackSession().getAsset().incrementBufferCount(), a.getPlaybackSession().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().setBufferingTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          }, onSeekStart: function onSeekStart(b, c) {
	            var d = parseInt(c.ns_st_po);a.getHeartbeat().pause(), a.getKeepAlive().stop(), a.getPlaybackSession().addPlaybackTime(b), a.getPlaybackSession().getAsset().addPlaybackTime(b), a.getPlaybackSession().getAsset().addInterval(d), a.getPlaybackSession().getAsset().incrementSeeks(), a.getPlaybackSession().getAsset().setSeeking(!0), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!0), a.getPlaybackSession().getAsset().setSeekStartPosition(d), a.getPlaybackSession().getAsset().setSeekingTimestamp(b), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses();var e = a.getStaCore().createLabels(i.PAUSE, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          }, onPause: function onPause(b, c) {
	            var d = parseInt(c.ns_st_po);a.getHeartbeat().pause(), a.getKeepAlive().stop(), a.getPlaybackSession().addPlaybackTime(b), a.getPlaybackSession().getAsset().addPlaybackTime(b), a.getPlaybackSession().getAsset().addInterval(d), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses();var e = a.getStaCore().createLabels(i.PAUSE, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        C = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onPause: function onPause(b, c) {
	            a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1));
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), (a.getPlaybackSession().getAsset().isPlaybackSessionLooping() || 0 == a.getPlaybackSession().getPlaybackCounter()) && (a.getPlaybackSession().incrementPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaybackSessionLooping(!1)), a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().getAsset().setPlaybackStarted(!0), a.getPlaybackSession().getAsset().incrementSegmentPlaybackCounter(), (0 == a.getPlaybackSession().getAsset().getLowestPartNumberPlayed() || a.getPlaybackSession().getAsset().getPartNumber() <= a.getPlaybackSession().getAsset().getLowestPartNumberPlayed()) && (a.getPlaybackSession().getAsset().setLowestPartNumberPlayed(a.getPlaybackSession().getAsset().getPartNumber()), a.getPlaybackSession().getAsset().incrementAssetPlaybackCounter(), a.getPlaybackSession().getAsset().setPlaySequenceCounter(0), a.getPlaybackSession().getAsset().resetAssetPlaybackIntervals()), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getStaCore().isLoadingTimeSent() || (c.ns_st_lt = a.getStaCore().getLoadTimeOffset() + b - a.getStaCore().getInitTimestamp() + "", a.getStaCore().setLoadingTimeSent(!0)), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        D = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onPause: function onPause(b, c) {
	            a.getPlaybackSession().incrementPauses(), a.getPlaybackSession().getAsset().incrementPauses(), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b);
	          } });
	      };
	    }(),
	        E = function () {
	      return function (a) {
	        var c = this;b.extend(c, { onEndOrAdSkip: function onEndOrAdSkip(c, d) {
	            parseInt(d.ns_st_po);a.getStaCore().resetHeartbeat(), a.getKeepAlive().stop(), a.getPlaybackSession().getAsset().addElapsedTime(c);var e = a.getStaCore().createLabels(i.END, d, c);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e), a.getPlaybackSession().getAsset().isSeeking() && a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().setSeekingTimeBeforeEnd(c - a.getPlaybackSession().getAsset().getSeekingTimestamp()), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().storeAssetPlaybackCounters(), a.getPlaybackSession().getAsset().resetAssetLifecycleLabels(), a.getPlaybackSession().getAsset().setPlaybackStarted(!1), d.hasOwnProperty("ns_st_pe") && b.parseBoolean(d.ns_st_pe, !1) && a.getStaCore().resetPlaybackSession();
	          }, onPlay: function onPlay(b, c) {
	            var d = parseInt(c.ns_st_po);a.getPlaybackSession().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlaySequenceCounter(), a.getPlaybackSession().getAsset().incrementPlayCounter(), a.getPlaybackSession().getAsset().isSeeking() && (a.getPlaybackSession().getAsset().isCollectingSeekingTime() && (a.getPlaybackSession().getAsset().addSeekingTime(b), a.getPlaybackSession().getAsset().setCollectingSeekingTime(!1)), a.getPlaybackSession().getAsset().addSeekingAmount(d), a.getPlaybackSession().getAsset().setSeeking(!1)), a.getPlaybackSession().getAsset().addElapsedTime(b), a.getPlaybackSession().getAsset().setElapsedTimestamp(b), a.getPlaybackSession().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackTimestamp(b), a.getPlaybackSession().getAsset().setPlaybackStartPosition(d), a.getStaCore().isLoadingTimeSent() || (c.ns_st_lt = a.getStaCore().getLoadTimeOffset() + b - a.getStaCore().getInitTimestamp() + "", a.getStaCore().setLoadingTimeSent(!0)), a.getHeartbeat().resume(), a.getKeepAlive().start();var e = a.getStaCore().createLabels(i.PLAY, c, b);a.getPlaybackSession().getAsset().updateDeltaLabels(e.eventLabels), a.getPlaybackSession().getAsset().updateIndependentLabels(e.eventLabels), a.getEventManager().newEvent(e);
	          } });
	      };
	    }(),
	        F = function () {
	      return function (a) {
	        function d() {
	          if (F = new G(ea), b.getNamespace().comScore ? (fa = b.getNamespace().comScore.exports, F.setAppCore(fa.c())) : F.setAppCore(null), a.publisherId) {
	            ea.setLabel("c2", a.publisherId);var d = a.secure;!d && F.getAppCore() ? d = F.getAppCore().isSecure() : !d && b.isBrowser() && (d = b.isWebSecure());var e = (d ? "https://sb" : "http://b") + ".scorecardresearch.com/p?c1=2";ea.setLiveEndpointURL(e);
	          }a.liveEndpointURL && ea.setLiveEndpointURL(a.liveEndpointURL), F.setKeepAlive(new q(F)), F.setHeartbeat(new p(F)), F.setEventManager(new o(F)), F.setStateMachine(new r()), F.setLogging(new c(l.LOG_NAMESPACE, a.debug)), F.setPlaybackSession(new n(F)), H = new x(F), I = new y(F), J = new A(F), K = new B(F), L = new t(F), M = new v(F), N = new w(F), O = new u(F), P = new z(F), Q = new C(F), R = new D(F), S = new E(F), T = new s(F), U = !1, V = 0, W = +new Date(), Y = !0, $ = !1, aa = [], a.systemClockJumpDetection && ea.enableSystemClockJumpsDetection(parseInt(a.systemClockJumpDetectionInterval));
	        }function e(a) {
	          var b = F.getStateMachine().getCurrentState();if (b == j.IDLE || b == j.PLAYBACK_NOT_STARTED || b == j.BUFFERING_BEFORE_PLAYBACK || b == j.SEEKING_BEFORE_PLAYBACK) {
	            if (a == i.PLAY) return !0;
	          } else if (b == j.PLAYING) {
	            if (a == i.END || a == i.AD_SKIP || a == i.SEEK_START || a == i.PAUSE) return !0;
	          } else if (b == j.PAUSED || b == j.BUFFERING_DURING_PAUSE || b == j.SEEKING_DURING_PLAYBACK || b == j.SEEKING_DURING_BUFFERING || b == j.SEEKING_DURING_PAUSE) {
	            if (a == i.END || a == i.AD_SKIP || a == i.PLAY) return !0;
	          } else if (b == j.BUFFERING_DURING_PLAYBACK) {
	            if (a == i.PAUSE_ON_BUFFERING || a == i.END || a == i.AD_SKIP || a == i.SEEK_START || a == i.PAUSE || a == i.PLAY) return !0;
	          } else if (b == j.BUFFERING_DURING_SEEKING) {
	            if (a == i.END || a == i.AD_SKIP || a == i.PAUSE || a == i.PLAY) return !0;
	          } else if (b == j.PAUSED_DURING_BUFFERING && (a == i.END || a == i.AD_SKIP || a == i.BUFFER_STOP || a == i.PLAY)) return !0;return !1;
	        }function f(a, b, c) {
	          var d = F.getStateMachine().getCurrentState();a == i.AD_SKIP && !c.hasOwnProperty("ns_st_ui") && e(a) ? c.ns_st_ui = "skip" : a == i.SEEK_START && !c.hasOwnProperty("ns_st_ui") && e(a) && (c.ns_st_ui = "seek"), d == j.IDLE ? a == i.BUFFER ? H.onBuffer(b, c) : a == i.SEEK_START ? H.onSeekStart(b, c) : a == i.PLAY && H.onPlay(b, c) : d == j.PLAYBACK_NOT_STARTED ? a == i.END || a == i.AD_SKIP ? J.onEndOrAdSkip(b, c) : a == i.SEEK_START ? J.onSeekStart(b, c) : a == i.PLAY ? J.onPlay(b, c) : a == i.BUFFER && J.onBuffer(b, c) : d == j.PLAYING ? a == i.END || a == i.AD_SKIP ? K.onEndOrAdSkip(b, c) : a == i.BUFFER ? K.onBuffer(b, c) : a == i.SEEK_START ? K.onSeekStart(b, c) : a == i.PAUSE && K.onPause(b, c) : d == j.PAUSED ? a == i.END || a == i.AD_SKIP ? I.onEndOrAdSkip(b, c) : a == i.PLAY ? I.onPlay(b, c) : a == i.BUFFER ? T.onBufferWhenSeekingOrPaused(b, c) : a == i.SEEK_START && T.onSeekStartWhenPausedOrBufferingDuringPause(b, c) : d == j.BUFFERING_BEFORE_PLAYBACK ? a == i.END || a == i.AD_SKIP ? L.onEndOrAdSkip(b, c) : a == i.BUFFER_STOP ? L.onBufferStop(b, c) : a == i.SEEK_START ? L.onSeekStart(b, c) : a == i.PAUSE ? L.onPause(b, c) : a == i.PLAY && L.onPlay(b, c) : d == j.BUFFERING_DURING_PLAYBACK ? a == i.PAUSE_ON_BUFFERING ? M.onPauseOnBuffering(b, c) : a == i.BUFFER_STOP ? T.onBufferStopOrOnPlayWhenBufferingDuringPlayback(b, c) : a == i.END || a == i.AD_SKIP ? M.onEndOrAdSkip(b, c) : a == i.SEEK_START ? M.onSeekStart(b, c) : a == i.PAUSE ? M.onPause(b, c) : a == i.PLAY && T.onBufferStopOrOnPlayWhenBufferingDuringPlayback(b, c) : d == j.BUFFERING_DURING_SEEKING ? a == i.END || a == i.AD_SKIP ? N.onEndOrAdSkip(b, c) : a == i.PAUSE ? N.onPause(b, c) : a == i.PLAY ? N.onPlay(b, c) : a == i.BUFFER_STOP && T.onBufferStopWhenBufferingDuringSeekingOrBufferingDuringPause(b, c) : d == j.BUFFERING_DURING_PAUSE ? a == i.END || a == i.AD_SKIP ? O.onEndAndSkip(b, c) : a == i.PAUSE ? O.onPause(b, c) : a == i.PLAY ? O.onPlay(b, c) : a == i.SEEK_START ? T.onSeekStartWhenPausedOrBufferingDuringPause(b, c) : a == i.BUFFER_STOP && T.onBufferStopWhenBufferingDuringSeekingOrBufferingDuringPause(b, c) : d == j.SEEKING_BEFORE_PLAYBACK ? a == i.END || a == i.AD_SKIP ? Q.onEndOrAdSkip(b, c) : a == i.PAUSE ? Q.onPause(b, c) : a == i.PLAY ? Q.onPlay(b, c) : a == i.BUFFER && T.onBufferWhenSeekingOrPaused(b, c) : d == j.SEEKING_DURING_PLAYBACK ? a == i.END || a == i.AD_SKIP ? S.onEndOrAdSkip(b, c) : a == i.PLAY ? S.onPlay(b, c) : a == i.BUFFER ? T.onBufferWhenSeekingOrPaused(b, c) : a == i.PAUSE && T.onPauseWhenSeekingDuringPlaybackOrSeekingDuringPause(b, c) : d == j.SEEKING_DURING_BUFFERING ? a == i.PAUSE ? R.onPause(b, c) : a == i.BUFFER ? T.onBufferWhenSeekingOrPaused(b, c) : a == i.PLAY ? T.onPlayWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) : a == i.END || a == i.AD_SKIP ? T.onEndOrAdSkipWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) : a == i.BUFFER_STOP && T.onBufferStopWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) : d == j.PAUSED_DURING_BUFFERING ? a == i.END || a == i.AD_SKIP ? P.onEndOrAdSkip(b, c) : a == i.BUFFER_STOP ? P.onBufferStop(b, c) : a == i.SEEK_START ? P.onSeekStart(b, c) : a == i.PAUSE ? P.onPause(b, c) : a == i.PLAY && P.onPlay(b, c) : d == j.SEEKING_DURING_PAUSE && (a == i.BUFFER ? T.onBufferWhenSeekingOrPaused(b, c) : a == i.PLAY ? T.onPlayWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) : a == i.PAUSE ? T.onPauseWhenSeekingDuringPlaybackOrSeekingDuringPause(b, c) : a == i.END || a == i.AD_SKIP ? T.onEndOrAdSkipWhenSeekingDuringBufferingOrSeekingDuringPause(b, c) : a == i.BUFFER_STOP && T.onBufferStopWhenSeekingDuringBufferingOrSeekingDuringPause(b, c)), e(a) && F.getPlaybackSession().setFirstEventSent(!0);
	        }function m(a, c) {
	          for (var d, e = ka.encodeURIComponent || escape, f = [], g = l.LABELS_ORDER, h = a.split("?"), i = h[0], j = h[1], k = j.split("&"), m = 0, n = k.length; m < n; m++) {
	            var o = k[m].split("="),
	                p = unescape(o[0]),
	                q = unescape(o[1]);p && (c[p] = q);
	          }for (var r = {}, s = 0, t = g.length; s < t; s++) {
	            var u = g[s];if (c.hasOwnProperty(u)) {
	              var v = c[u];"undefined" != typeof v && null != v && (r[u] = !0, f.push(e(u) + "=" + e(c[u])));
	            }
	          }for (var w in c) {
	            if (c.hasOwnProperty(w)) {
	              if (r[w]) continue;var x = c[w];"undefined" != typeof x && null != x && f.push(e(w) + "=" + e(c[w]));
	            }
	          }d = i + "?" + f.join("&"), d = d + (d.indexOf("&c8=") < 0 ? "&c8=" + e(la.title) : "") + (d.indexOf("&c7=") < 0 ? "&c7=" + e(la.URL) : "") + (d.indexOf("&c9=") < 0 ? "&c9=" + e(la.referrer) : "");var y = b.browserAcceptsLargeURLs() ? l.URL_LENGTH_LIMIT : l.RESTRICTED_URL_LENGTH_LIMIT;if (d.length > y && d.indexOf("&") > 0) {
	            var z = d.substr(0, y - 8).lastIndexOf("&");d = (d.substring(0, z) + "&ns_cut=" + e(d.substring(z + 1))).substr(0, y);
	          }return d;
	        }var F,
	            H,
	            I,
	            J,
	            K,
	            L,
	            M,
	            N,
	            O,
	            P,
	            Q,
	            R,
	            S,
	            T,
	            U,
	            V,
	            W,
	            X,
	            Y,
	            Z,
	            $,
	            _,
	            aa,
	            ba,
	            ca,
	            da,
	            ea = this,
	            fa = {},
	            ga = l.DEFAULT_PAUSED_ON_BUFFERING_INTERVAL,
	            ha = l.THROTTLING_DELAY,
	            ia = {},
	            ja = !1;b.extend(ea, { getConfiguration: function getConfiguration() {
	            return a || {};
	          }, enableSystemClockJumpsDetection: function enableSystemClockJumpsDetection(a) {
	            (a < l.SYSTEM_CLOCK_JUMP_DETECTION_MINIMUM_INTERVAL || !a) && (a = l.SYSTEM_CLOCK_JUMP_DETECTION_DEFAULT_INTERVAL), b.onSystemClockJump(function (a) {
	              da = a, ja = !0;
	            }, a);
	          }, createLabels: function createLabels(a, c, d) {
	            var e = !1;if (a == i.HEARTBEAT) {
	              var f = isNaN(X) ? W : X;X = d, (d < f || ja) && (e = !0, ja = !1, d < f ? (F.getPlaybackSession().addInternalErrorFlag("1"), F.getLogging().infoLog("System clock jump detected", "to the far past")) : da ? (F.getPlaybackSession().addInternalErrorFlag("3"), F.getLogging().infoLog("System clock jump detected", "to the future")) : (F.getPlaybackSession().addInternalErrorFlag("2"), F.getLogging().infoLog("System clock jump detected", "to the near past")), d = f);
	            }var g = {};if ("undefined" != typeof document) {
	              var h = document;g.c7 = h.URL, g.c8 = h.title, g.c9 = h.referrer;
	            }return g.ns_ts = +new Date() + "", g.ns_st_ev = i.toString(a), g.ns_st_mp = l.DEFAULT_PLAYERNAME, g.ns_st_mv = l.STREAMINGANALYTICS_VERSION, g.ns_st_ub = "0", g.ns_st_br = "0", g.ns_st_pn = "1", g.ns_st_tp = "0", g.ns_st_it = k.toString(k.SINGLE_CLIP), g.ns_st_sv = l.STREAMINGANALYTICS_VERSION, g.ns_st_smv = l.MODEL_VERSION, g.ns_type = "hidden", g.ns_st_ec = F.getEventManager().getEventCounter() + "", g.ns_st_ki = F.getKeepAlive().getInterval() + "", F.getPlaybackSession().getAsset().isAutoCalculatePositionsEnabled() ? g.ns_st_po = F.getPlaybackSession().getAsset().getExpectedPlaybackPosition(d) + "" : g.ns_st_po = ca + "", ca = parseInt(g.ns_st_po), b.extend(g, ea.getLabels()), F.getPlaybackSession().createLabels(g, d), b.extend(g, c), e && (F.getPlaybackSession().setPlaybackTimestamp(X - parseInt(g.ns_st_pt)), F.getPlaybackSession().getAsset().setPlaybackTimestamp(X - parseInt(g.ns_st_pt)), F.getPlaybackSession().getAsset().setElapsedTimestamp(X - parseInt(g.ns_st_et)), F.getStateMachine().getCurrentState() == j.BUFFERING_DURING_PLAYBACK && F.getPlaybackSession().getAsset().setBufferingTimestamp(X - parseInt(g.ns_st_bp))), { eventType: a, eventLabels: g };
	          }, newEvent: function newEvent(a, c, d, e) {
	            ea.stopDelayedTransitionTimer();var g = F.getStateMachine().getCurrentState(),
	                h = F.getStateMachine().eventTypeToState(a);if (null == h || h == g) return void F.getLogging().infoLog("Ignored event:", i.toString(a), "during state", b.stateToString(g), d);if (ea.isThrottlingEnabled() && (g == j.PLAYING || g == j.PAUSED) && (h == j.PLAYING || h == j.PAUSED) && !e) {
	              F.getLogging().infoLog("Throttled event:", i.toString(a), "during state", b.stateToString(g), d, ea.getThrottlingDelay(), "ms");var k = function (a, b, d) {
	                return function () {
	                  ea.newEvent(a, c, d, !0);
	                };
	              }(a, h, d);return void (_ = F.getPlatformAPI().setTimeout(k, ea.getThrottlingDelay()));
	            }var l = isNaN(X) ? W : X;X = c;var m = !1;(c < l || ja) && (m = !0, ja = !1, c < l ? (F.getPlaybackSession().addInternalErrorFlag("1"), F.getLogging().infoLog("System clock jump detected", "to the far past")) : da ? (F.getPlaybackSession().addInternalErrorFlag("3"), F.getLogging().infoLog("System clock jump detected", "to the future")) : (F.getPlaybackSession().addInternalErrorFlag("2"), F.getLogging().infoLog("System clock jump detected", "to the near past")), c = l), d.ns_st_po || (F.getPlaybackSession().getAsset().isAutoCalculatePositionsEnabled() ? F.getStateMachine().getCurrentState() == j.IDLE ? d.ns_st_po = "0" : d.ns_st_po = F.getPlaybackSession().getAsset().getExpectedPlaybackPosition(c) + "" : d.ns_st_po = ca + ""), ca = parseInt(d.ns_st_po), F.getPlaybackSession().getAsset().setPlaybackTimeOffset(parseInt(d.ns_st_po)), f(a, c, d);var n = 0;isNaN(F.getStateMachine().getLastStateChangeTimestamp()) || (n = c - F.getStateMachine().getLastStateChangeTimestamp()), F.getStateMachine().newEvent(a, c), m && (h != j.IDLE && h != j.PLAYBACK_NOT_STARTED && h != j.SEEKING_BEFORE_PLAYBACK && h != j.BUFFERING_BEFORE_PLAYBACK && F.getPlaybackSession().getAsset().setElapsedTimestamp(X), h != j.BUFFERING_BEFORE_PLAYBACK && h != j.BUFFERING_DURING_PAUSE && h != j.BUFFERING_DURING_PLAYBACK && h != j.BUFFERING_DURING_SEEKING && h != j.PAUSED_DURING_BUFFERING || (F.getPlaybackSession().setBufferingTimestamp(X), F.getPlaybackSession().getAsset().setBufferingTimestamp(X)), h != j.PLAYING && h != j.BUFFERING_DURING_PLAYBACK || (F.getPlaybackSession().setPlaybackTimestamp(X), F.getPlaybackSession().getAsset().setPlaybackTimestamp(X)), h != j.SEEKING_BEFORE_PLAYBACK && h != j.SEEKING_DURING_BUFFERING && h != j.SEEKING_DURING_PAUSE && h != j.SEEKING_DURING_PLAYBACK && h != j.BUFFERING_DURING_SEEKING || F.getPlaybackSession().getAsset().setSeekingTimestamp(X)), F.getLogging().log("Transition from", b.stateToString(g), "to", b.stateToString(h), "due to event:", i.toString(a));for (var o = 0, p = aa.length; o < p; o++) {
	              aa[o](g, h, d, n);
	            }
	          }, newPseudoEvent: function newPseudoEvent(a, c, d) {
	            if ((a == i.LOAD || a == i.ENGAGE) && F.getStateMachine().getCurrentState() != j.IDLE) return void F.getLogging().infoLog("Ignored pseudo-event:", i.toString(a), "during state", b.stateToString(F.getStateMachine().getCurrentState()), d);a == i.ERROR && null == d.ns_st_er && (d.ns_st_er = h.UNKNOWN_VALUE), a == i.TRANSFER && null == d.ns_st_rp && (d.ns_st_rp = h.UNKNOWN_VALUE);var e,
	                f,
	                g,
	                k = !0,
	                l = !1;switch (a) {case i.BIT_RATE:
	                e = "ns_st_br", f = "ns_st_pbr", l = !0;break;case i.PLAYBACK_RATE:
	                e = "ns_st_rt", f = "ns_st_prt", l = !0;break;case i.VOLUME:
	                e = "ns_st_vo", f = "ns_st_pvo", l = !0;break;case i.WINDOW_STATE:
	                e = "ns_st_ws", f = "ns_st_pws", l = !0;break;case i.AUDIO:
	                e = "ns_st_at", f = "ns_st_pat", l = !1;break;case i.VIDEO:
	                e = "ns_st_vt", f = "ns_st_pvt", l = !1;break;case i.SUBS:
	                e = "ns_st_tt", f = "ns_st_ptt", l = !1;break;case i.CDN:
	                e = "ns_st_cdn", f = "ns_st_pcdn", l = !1;break;default:
	                k = !1;}if (k && d.hasOwnProperty(e) && (l ? (ea.getLabels().hasOwnProperty(e) && (g = ea.getLabels()[e], d[f] = g), ea.setLabel(e, d[e])) : (F.getPlaybackSession().getAsset().hasInternalLabel(e) && (g = F.getPlaybackSession().getAsset().getInternalLabel(e), d[f] = g), F.getPlaybackSession().getAsset().setInternalLabel(e, d[e]))), k && F.getStateMachine().getCurrentState() != j.PLAYING && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PLAYBACK) return void F.getLogging().infoLog("No measurement send for the pseudo-event:", i.toString(a), "during state", b.stateToString(F.getStateMachine().getCurrentState()), d);var m = isNaN(X) ? W : X;X = c;var n = !1;(c < m || ja) && (n = !0, ja = !1, c < m ? (F.getPlaybackSession().addInternalErrorFlag("1"), F.getLogging().infoLog("System clock jump detected", "to the far past")) : da ? (F.getPlaybackSession().addInternalErrorFlag("3"), F.getLogging().infoLog("System clock jump detected", "to the future")) : (F.getPlaybackSession().addInternalErrorFlag("2"), F.getLogging().infoLog("System clock jump detected", "to the near past")), c = m), d.ns_st_po || (F.getPlaybackSession().getAsset().isAutoCalculatePositionsEnabled() ? d.ns_st_po = F.getPlaybackSession().getAsset().getExpectedPlaybackPosition(c) + "" : d.ns_st_po = ca + ""), ca = parseInt(d.ns_st_po), F.getPlaybackSession().getAsset().setPlaybackTimeOffset(parseInt(d.ns_st_po)), F.getStateMachine().getCurrentState() != j.IDLE && F.getStateMachine().getCurrentState() != j.PLAYBACK_NOT_STARTED && F.getStateMachine().getCurrentState() != j.SEEKING_BEFORE_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_BEFORE_PLAYBACK && (F.getPlaybackSession().getAsset().addElapsedTime(c), F.getPlaybackSession().getAsset().setElapsedTimestamp(c)), F.getStateMachine().getCurrentState() != j.PLAYING && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PLAYBACK || (F.getPlaybackSession().addPlaybackTime(c), F.getPlaybackSession().setPlaybackTimestamp(c), F.getPlaybackSession().getAsset().addPlaybackTime(c), F.getPlaybackSession().getAsset().setPlaybackTimestamp(c), F.getPlaybackSession().getAsset().addInterval(parseInt(d.ns_st_po)), F.getPlaybackSession().getAsset().setPlaybackStartPosition(parseInt(d.ns_st_po))), F.getStateMachine().getCurrentState() != j.BUFFERING_BEFORE_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PAUSE && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_SEEKING || (F.getPlaybackSession().addBufferingTime(c), F.getPlaybackSession().setBufferingTimestamp(c), F.getPlaybackSession().getAsset().addBufferingTime(c), F.getPlaybackSession().getAsset().setBufferingTimestamp(c));var o = ea.createLabels(a, d, c);F.getPlaybackSession().getAsset().updateDeltaLabels(o.eventLabels), F.getPlaybackSession().getAsset().updateIndependentLabels(o.eventLabels), F.getEventManager().newEvent(o), n && (F.getStateMachine().getCurrentState() != j.PLAYING && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PLAYBACK || (F.getPlaybackSession().setPlaybackTimestamp(X), F.getPlaybackSession().getAsset().setPlaybackTimestamp(X)), F.getStateMachine().getCurrentState() != j.IDLE && F.getStateMachine().getCurrentState() != j.PLAYBACK_NOT_STARTED && F.getStateMachine().getCurrentState() != j.SEEKING_BEFORE_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_BEFORE_PLAYBACK && F.getPlaybackSession().getAsset().setElapsedTimestamp(X), F.getStateMachine().getCurrentState() != j.BUFFERING_BEFORE_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PAUSE && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_PLAYBACK && F.getStateMachine().getCurrentState() != j.BUFFERING_DURING_SEEKING || (F.getPlaybackSession().setBufferingTimestamp(X), F.getPlaybackSession().getAsset().setBufferingTimestamp(X)), newState != j.SEEKING_BEFORE_PLAYBACK && newState != j.SEEKING_DURING_BUFFERING && newState != j.SEEKING_DURING_PAUSE && newState != j.SEEKING_DURING_PLAYBACK && newState != j.BUFFERING_DURING_SEEKING || F.getPlaybackSession().getAsset().setSeekingTimestamp(X));
	          }, getState: function getState() {
	            return F.getStateMachine().getCurrentState();
	          }, addListener: function addListener(a) {
	            aa.push(a);
	          }, removeListener: function removeListener(a) {
	            aa.splice(b.indexOf(a, aa), 1);
	          }, getLabel: function getLabel(a) {
	            return ia[a];
	          }, getLabels: function getLabels() {
	            return ia;
	          }, setLabel: function setLabel(a, b) {
	            null == b ? delete ia[a] : ia[a] = b;
	          }, setLabels: function setLabels(a) {
	            for (var b in a) {
	              a.hasOwnProperty(b) && ea.setLabel(b, a[b]);
	            }
	          }, getPlatformAPI: function getPlatformAPI() {
	            return F.getAppCore() ? F.getAppCore().getPlatformAPI() : g;
	          }, getExports: function getExports() {
	            return fa;
	          }, isProperlyInitialized: function isProperlyInitialized() {
	            var a = F.getAppCore().getAppContext(),
	                b = F.getAppCore().getSalt(),
	                c = F.getAppCore().getPixelURL();return a && c && b;
	          }, setThrottlingDelay: function setThrottlingDelay(a) {
	            ha = a;
	          }, getThrottlingDelay: function getThrottlingDelay() {
	            return ha;
	          }, isThrottlingEnabled: function isThrottlingEnabled() {
	            return $;
	          }, setThrottlingEnabled: function setThrottlingEnabled(a) {
	            $ = a;
	          }, isLoadingTimeSent: function isLoadingTimeSent() {
	            return U;
	          }, setLoadingTimeSent: function setLoadingTimeSent(a) {
	            U = a;
	          }, getLoadTimeOffset: function getLoadTimeOffset() {
	            return V;
	          }, setLoadTimeOffset: function setLoadTimeOffset(a) {
	            V = a;
	          }, getInitTimestamp: function getInitTimestamp() {
	            return W;
	          }, setPauseOnBufferingInterval: function setPauseOnBufferingInterval(a) {
	            ga = a;
	          }, getPauseOnBufferingInterval: function getPauseOnBufferingInterval() {
	            return ga;
	          }, isPauseOnBufferingEnabled: function isPauseOnBufferingEnabled() {
	            return Y;
	          }, setPauseOnBufferingEnabled: function setPauseOnBufferingEnabled(a) {
	            Y = a;
	          }, startPausedOnBufferingTimer: function startPausedOnBufferingTimer(a, c) {
	            ea.stopPausedOnBufferingTimer(), Z = ea.getPlatformAPI().setTimeout(function () {
	              var a = {},
	                  d = b.fixEventTime(a),
	                  e = parseInt(c.ns_st_po);a.ns_st_po = e + "", ea.newEvent(i.PAUSE_ON_BUFFERING, d, a);
	            }, ga);
	          }, stopPausedOnBufferingTimer: function stopPausedOnBufferingTimer() {
	            null != Z && (ea.getPlatformAPI().clearTimeout(Z), Z = null);
	          }, stopDelayedTransitionTimer: function stopDelayedTransitionTimer() {
	            _ && (ea.getPlatformAPI().clearTimeout(_), _ = null);
	          }, setLiveEndpointURL: function setLiveEndpointURL(a) {
	            if (null == a || 0 == a.length) return null;var b = decodeURIComponent || unescape,
	                c = a.indexOf("?");if (c >= 0) {
	              if (c < a.length - 1) {
	                for (var d = a.substring(c + 1).split("&"), e = 0, f = d.length; e < f; e++) {
	                  var g = d[e],
	                      h = g.split("=");2 == h.length ? ea.setLabel(h[0], b(h[1])) : 1 == h.length && ea.setLabel(l.PAGE_NAME_LABEL, b(h[0]));
	                }a = a.substring(0, c + 1);
	              }
	            } else a += "?";return ba = a;
	          }, getLiveEndpointURL: function getLiveEndpointURL() {
	            return ba ? ba : "undefined" != typeof ns_p && "string" == typeof ns_p.src ? ba = ns_p.src.replace(/&amp;/, "&").replace(/&ns__t=\d+/, "") : "string" == typeof ns_pixelUrl ? ba = ns_pixelUrl.replace(/&amp;/, "&").replace(/&ns__t=\d+/, "") : null;
	          }, getStaSM: function getStaSM() {
	            return F;
	          }, resetPlaybackSession: function resetPlaybackSession(a) {
	            var b = F.getPlaybackSession();F.setPlaybackSession(new n(F)), n.resetPlaybackSession(F, b, a);
	          }, resetHeartbeat: function resetHeartbeat() {
	            F.getHeartbeat().pause();var a = F.getHeartbeat().getIntervals();F.setHeartbeat(new p(F)), F.getHeartbeat().setIntervals(a);
	          } });var ka, la;b.isBrowser() ? (ka = window, la = document) : (ka = {}, la = { location: { href: "" }, title: "", URL: "", referrer: "", cookie: "" }), b.extend(ea, { prepareUrl: m }), d();
	      };
	    }(),
	        G = function () {
	      return function (a) {
	        var c,
	            d,
	            e,
	            f,
	            g,
	            h,
	            i,
	            j = this;b.extend(j, { getAppCore: function getAppCore() {
	            return c;
	          }, getStaCore: function getStaCore() {
	            return a;
	          }, getEventManager: function getEventManager() {
	            return d;
	          }, getStateMachine: function getStateMachine() {
	            return e;
	          }, getHeartbeat: function getHeartbeat() {
	            return f;
	          }, getKeepAlive: function getKeepAlive() {
	            return g;
	          }, getPlaybackSession: function getPlaybackSession() {
	            return h;
	          }, getLogging: function getLogging() {
	            return i;
	          }, setAppCore: function setAppCore(a) {
	            c = a;
	          }, setKeepAlive: function setKeepAlive(a) {
	            g = a;
	          }, setHeartbeat: function setHeartbeat(a) {
	            f = a;
	          }, setEventManager: function setEventManager(a) {
	            d = a;
	          }, setStateMachine: function setStateMachine(a) {
	            e = a;
	          }, setPlaybackSession: function setPlaybackSession(a) {
	            h = a;
	          }, setLogging: function setLogging(a) {
	            i = a;
	          } });
	      };
	    }(),
	        H = function () {
	      return function (a) {
	        function c() {
	          a = b.extend({}, a), f = new F(a), f.getStaSM().getLogging().log("New StreamingAnalytics instance with configuration", a);
	        }function d(a) {
	          var c, d;if (c = "object" == _typeof(arguments[1]) ? arguments[1] : "object" == _typeof(arguments[2]) ? arguments[2] : {}, d = "number" == typeof arguments[1] ? arguments[1] : "number" == typeof arguments[2] ? arguments[2] : NaN, i.toString(a)) {
	            c = b.jsonObjectToStringDictionary(c);var e = b.fixEventTime(c);c.ns_st_po || isNaN(d) || (c.ns_st_po = b.parseInteger(d, 0) + ""), a == i.PLAY || a == i.PAUSE || a == i.BUFFER || a == i.END || a == i.SEEK_START || a == i.AD_SKIP || a == i.BUFFER_STOP ? f.newEvent(a, e, c) : f.newPseudoEvent(a, e, c);
	          }
	        }function e() {
	          h && f.getStaSM().getStateMachine().getCurrentState() != j.IDLE && g.notifyEnd();
	        }var f,
	            g = this,
	            h = !0;b.extend(this, { isProperlyInitialized: function isProperlyInitialized() {
	            return f.isProperlyInitialized();
	          }, reset: function reset(a) {
	            d(i.END);var b = f;b.getStaSM().getKeepAlive().stop(), b.getStaSM().getHeartbeat().pause(), f = new F(b.getConfiguration()), n.resetPlaybackSession(f.getStaSM(), b.getStaSM().getPlaybackSession(), a);
	          }, setPauseOnBufferingInterval: function setPauseOnBufferingInterval(a) {
	            f.setPauseOnBufferingInterval(a);
	          }, getPauseOnBufferingInterval: function getPauseOnBufferingInterval() {
	            return f.getPauseOnBufferingInterval();
	          }, setKeepAliveInterval: function setKeepAliveInterval(a) {
	            f.getStaSM().getKeepAlive().setInterval(a);
	          }, getKeepAliveInterval: function getKeepAliveInterval() {
	            return f.getStaSM().getKeepAlive().getInterval();
	          }, setHeartbeatIntervals: function setHeartbeatIntervals(a) {
	            f.getStaSM().getHeartbeat().setIntervals(a);
	          }, notifyPlay: function notifyPlay(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyPlay", a, b), d(i.PLAY, a, b);
	          }, notifyPause: function notifyPause(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyPause", a, b), d(i.PAUSE, a, b);
	          }, notifyEnd: function notifyEnd(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyEnd", a, b), d(i.END, a, b);
	          }, notifyBufferStart: function notifyBufferStart(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyBufferStart", a, b), d(i.BUFFER, a, b);
	          }, notifyBufferStop: function notifyBufferStop(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyBufferStop", a, b), d(i.BUFFER_STOP, a, b);
	          }, notifyLoad: function notifyLoad(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyLoad", a, b), d(i.LOAD, a, b);
	          }, notifyEngage: function notifyEngage(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyEngage", a, b), d(i.ENGAGE, a, b);
	          }, notifySeekStart: function notifySeekStart(a, b) {
	            f.getStaSM().getLogging().apiCall("notifySeekStart", a, b), d(i.SEEK_START, a, b);
	          }, notifySkipAd: function notifySkipAd(a, b) {
	            f.getStaSM().getLogging().apiCall("notifySkipAd", a, b), d(i.AD_SKIP, a, b);
	          }, notifyCallToAction: function notifyCallToAction(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyCallToAction", a, b), d(i.CTA, a, b);
	          }, notifyError: function notifyError(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyError", a, b), d(i.ERROR, a, b);
	          }, notifyTransferPlayback: function notifyTransferPlayback(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyTransferPlayback", a, b), d(i.TRANSFER, a, b);
	          }, notifyDrmFail: function notifyDrmFail(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyDrmFail", a, b), d(i.DRM_FAILED, a, b);
	          }, notifyDrmApprove: function notifyDrmApprove(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyDrmApprove", a, b), d(i.DRM_APPROVED, a, b);
	          }, notifyDrmDeny: function notifyDrmDeny(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyDrmDeny", a, b), d(i.DRM_DENIED, a, b);
	          }, notifyChangeBitrate: function notifyChangeBitrate(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeBitrate", a, b, c), null != a) {
	              var e = c || {};e.ns_st_br = a + "", d(i.BIT_RATE, e, b);
	            }
	          }, notifyChangePlaybackRate: function notifyChangePlaybackRate(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangePlaybackRate", a, b, c), null != a) {
	              var e = c || {};e.ns_st_rt = a + "", d(i.PLAYBACK_RATE, e, b);
	            }
	          }, notifyChangeVolume: function notifyChangeVolume(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeVolume", a, b, c), null != a) {
	              var e = c || {};e.ns_st_vo = a + "", d(i.VOLUME, e, b);
	            }
	          }, notifyChangeWindowState: function notifyChangeWindowState(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeWindowState", a, b, c), null != a) {
	              var e = c || {};e.ns_st_ws = a + "", d(i.WINDOW_STATE, e, b);
	            }
	          }, notifyChangeAudioTrack: function notifyChangeAudioTrack(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeAudioTrack", a, b, c), null != a) {
	              var e = c || {};e.ns_st_at = a + "", d(i.AUDIO, e, b);
	            }
	          }, notifyChangeVideoTrack: function notifyChangeVideoTrack(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeVideoTrack", a, b, c), null != a) {
	              var e = c || {};e.ns_st_vt = a + "", d(i.VIDEO, e, b);
	            }
	          }, notifyChangeSubtitleTrack: function notifyChangeSubtitleTrack(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeSubtitleTrack", a, b, c), null != a) {
	              var e = c || {};e.ns_st_tt = a + "", d(i.SUBS, e, b);
	            }
	          }, notifyChangeCdn: function notifyChangeCdn(a, b, c) {
	            if (f.getStaSM().getLogging().apiCall("notifyChangeCdn", a, b, c), null != a) {
	              var e = c || {};e.ns_st_cdn = a + "", d(i.CDN, e, b);
	            }
	          }, notifyCustomEvent: function notifyCustomEvent(a, b) {
	            f.getStaSM().getLogging().apiCall("notifyCustomEvent", a, b), d(i.CUSTOM, a, b);
	          }, getLabels: function getLabels() {
	            return f.getLabels();
	          }, getState: function getState() {
	            return f.getStaSM().getStateMachine().getCurrentState();
	          }, setLabels: function setLabels(a) {
	            f.setLabels(a);
	          }, getLabel: function getLabel(a) {
	            return f.getLabel(a);
	          }, setLabel: function setLabel(a, b) {
	            f.setLabel(a, b);
	          }, getLoadTimeOffset: function getLoadTimeOffset() {
	            return f.getLoadTimeOffset();
	          }, setLoadTimeOffset: function setLoadTimeOffset(a) {
	            f.setLoadTimeOffset(a);
	          }, setLiveEndpointURL: function setLiveEndpointURL(a) {
	            return f.setLiveEndpointURL(a);
	          }, getLiveEndpointURL: function getLiveEndpointURL() {
	            return f.getLiveEndpointURL();
	          }, isPauseOnBufferingEnabled: function isPauseOnBufferingEnabled() {
	            return f.isPauseOnBufferingEnabled();
	          }, setPauseOnBufferingEnabled: function setPauseOnBufferingEnabled(a) {
	            f.setPauseOnBufferingEnabled(a);
	          }, isThrottlingEnabled: function isThrottlingEnabled() {
	            return f.isThrottlingEnabled();
	          }, setThrottlingEnabled: function setThrottlingEnabled(a) {
	            f.setThrottlingEnabled(a);
	          }, setThrottlingDelay: function setThrottlingDelay(a) {
	            f.setThrottlingDelay(a);
	          }, getThrottlingDelay: function getThrottlingDelay() {
	            return f.getThrottlingDelay();
	          }, setPlaybackIntervalMergeTolerance: function setPlaybackIntervalMergeTolerance(a) {
	            f.getStaSM().getPlaybackSession().getAsset().setPlaybackIntervalMergeTolerance(a);
	          }, getPlaybackIntervalMergeTolerance: function getPlaybackIntervalMergeTolerance() {
	            return f.getStaSM().getPlaybackSession().getAsset().getPlaybackIntervalMergeTolerance();
	          }, createPlaybackSession: function createPlaybackSession(a) {
	            f.getStaSM().getLogging().apiCall("createPlaybackSession", a), a = b.jsonObjectToStringDictionary(a);var c = f.getStaSM().getStateMachine().getCurrentState();c != j.IDLE && (f.getStaSM().getLogging().infoLog("Ending the current Clip. It was in state:", b.stateToString(c)), g.notifyEnd()), f.getStaSM().getPlaybackSession().isPlaybackSessionStarted() && f.resetPlaybackSession(), f.getStaSM().getPlaybackSession().setLabels(a);
	          }, getVersion: function getVersion() {
	            return l.STREAMINGANALYTICS_VERSION;
	          }, addListener: function addListener(a) {
	            f.addListener(a);
	          }, removeListener: function removeListener(a) {
	            f.removeListener(a);
	          }, addMeasurementListener: function addMeasurementListener(a) {
	            f.getStaSM().getEventManager().addMeasurementListener(a);
	          }, removeMeasurementListener: function removeMeasurementListener(a) {
	            f.getStaSM().getEventManager().removeMeasurementListener(a);
	          }, getPlaybackSession: function getPlaybackSession() {
	            return f.getStaSM().getPlaybackSession();
	          }, setExitEndEventEnabled: function setExitEndEventEnabled(a) {
	            h = a;
	          }, isExitEndEventEnabled: function isExitEndEventEnabled() {
	            return h;
	          }, getPlatformAPI: function getPlatformAPI() {
	            return f.getPlatformAPI();
	          }, _getLogHistory: function _getLogHistory() {
	            return f.getStaSM().getLogging().getLogHistory();
	          } }), b.isBrowser() && (window.addEventListener ? (window.addEventListener("beforeunload", e), window.addEventListener("unload", e)) : window.attachEvent && (window.attachEvent("onbeforeunload", e), window.attachEvent("onunload", e))), c();
	      };
	    }();return H.PlayerEvents = i, H.InternalStates = j, H.ImplementationType = k, H.Constants = l, H;
	  }(), a.ReducedRequirementsStreamingAnalytics = a.ReducedRequirementsStreamingAnalytics || function () {
	    var d = { LongFormOnDemand: "12", ShortFormOnDemand: "11", Live: "13", UserGeneratedLongFormOnDemand: "22", UserGeneratedShortFormOnDemand: "21", UserGeneratedLive: "23", Bumper: "99", Other: "00" },
	        e = { LinearOnDemandPreRoll: "11", LinearOnDemandMidRoll: "12", LinearOnDemandPostRoll: "13", LinearLive: "21", BrandedOnDemandPreRoll: "31", BrandedOnDemandMidRoll: "32", BrandedOnDemandPostRoll: "33", BrandedOnDemandContent: "34", BrandedOnDemandLive: "35", Other: "00" },
	        f = a.StreamingAnalytics,
	        g = a.StreamingAnalytics.InternalStates || null,
	        h = a.StreamingAnalytics.ImplementationType || null,
	        i = null != a.StreamingAnalytics.InternalStates && null != a.StreamingAnalytics.ImplementationType,
	        j = a.StreamingAnalytics.Constants,
	        k = function k(a) {
	      function k() {
	        i && (b.exists(a) && (a.customerC2 || a.publisherId) || b.getNamespace().comScore ? t = new f(a) : w.error("Cannot instantiate StreamingAnalytics", "The property publisherId was not provided (or incorrectly provided) in the StreamingAnalytics configuration."), t && t.setLabel("ns_st_it", h.toString(h.REDUCED)));
	      }function l(a) {
	        for (var b in j.STANDARD_METADATA_LABELS) {
	          if (j.STANDARD_METADATA_LABELS.hasOwnProperty(b) && !m(j.STANDARD_METADATA_LABELS[b], q, a)) return !1;
	        }return !0;
	      }function m(a, c, d) {
	        return !!(b.exists(a) && b.exists(c) && b.exists(d) && (c.hasOwnProperty(a) && d.hasOwnProperty(a) && c[a] === d[a] || !c.hasOwnProperty(a) && !d.hasOwnProperty(a)));
	      }function n(a) {
	        t.getPlaybackSession().setAsset(a), q = a, t.notifyPlay();
	      }function o(a) {
	        var b = a || {};b.ns_st_ad = "1", b.ns_st_an = ++r + "", t.getPlaybackSession().setAsset(b), t.notifyPlay(), s = !1;
	      }function p(a, b) {
	        v == u.None && (v = b), s && v == b && l(a) ? (t.getPlaybackSession().getAsset().setLabels(a), t.getState() != g.PLAYING && t.notifyPlay()) : n(a), s = !0, v = b;
	      }var q = null,
	          r = 0,
	          s = !1,
	          t = null,
	          u = { None: 0, AudioContent: 1, VideoContent: 2 },
	          v = u.None,
	          w = new c("TTSTA", (a || {}).debug);b.extend(this, { playVideoAdvertisement: function playVideoAdvertisement(a, c) {
	          if (t) {
	            w.apiCall("playVideoAdvertisement", a, c);var d = { ns_st_ct: "va" };c ? d.ns_st_ct = "va" + c : w.warn("Calling 'playVideoAdvertisement' without specifying the media type as a second parameter."), c != e.LinearLive && c != e.BrandedOnDemandLive || (d.ns_st_li = "1"), a && b.extend(d, a), o(d);
	          }
	        }, playAudioAdvertisement: function playAudioAdvertisement(a, c) {
	          if (t) {
	            w.apiCall("playAudioAdvertisement", a, c);var d = { ns_st_ct: "aa" };c ? d.ns_st_ct = "aa" + c : w.warn("Calling 'playAudioAdvertisement' without specifying the media type as a second parameter."), c != e.LinearLive && c != e.BrandedOnDemandLive || (d.ns_st_li = "1"), a && b.extend(d, a), o(d);
	          }
	        }, playVideoContentPart: function playVideoContentPart(a, c) {
	          if (t) {
	            w.apiCall("playVideoContentPart", a, c);var e = { ns_st_ct: "vc" };c ? e.ns_st_ct = "vc" + c : w.warn("Calling 'playVideoContentPart' without specifying the media type as a second parameter."), c != d.Live && c != d.UserGeneratedLive || (e.ns_st_li = "1"), a && b.extend(e, a), p(e, u.VideoContent);
	          }
	        }, playAudioContentPart: function playAudioContentPart(a, c) {
	          if (t) {
	            w.apiCall("playAudioContentPart", a, c);var e = { ns_st_ct: "ac" };c ? e.ns_st_ct = "ac" + c : w.warn("Calling 'playAudioContentPart' without specifying the media type as a second parameter."), c != d.Live && c != d.UserGeneratedLive || (e.ns_st_li = "1"), a && b.extend(e, a), p(e, u.AudioContent);
	          }
	        }, stop: function stop() {
	          t && (w.apiCall("stop"), t.notifyPause());
	        } }), k();
	    };return k.ContentType = d, k.AdType = e, k;
	  }(), a;
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(286)(module)))

/***/ }),
/* 286 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTQ0Yzg2ZDg5OGE3NDUxZWE4NzgiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvd2VicGFjay1lbnRyeS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9lczUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZnVuY3Rpb24tdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcGQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUubm93LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9lczYvc3ltYm9sLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2Jvb3RzdHJhcC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L21zL2luZGV4LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9pbml0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NvbW1vbi9mZWF0dXJlU3dpdGNoL2NvbnN0cy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc2VjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc3VydmV5LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jbGFzc2VzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9sb3RhbWUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZUhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9tZXRyaWNzL21ldHJpY3NCdWlsZGVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvbWV0cmljcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QWRzRW5hYmxlZC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFuYWx5dGljc0FjY291bnRJRC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFuYWx5dGljc1N1aXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXBwTmFtZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFwcFR5cGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcnRpY2xlSUQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcnRpY2xlTGVuZ3RoLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcnRpY2xlVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL29iamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVVcGRhdGVkRGF0ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldENvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMva2V5VmFsdWVzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0RGF4Q29ycC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldERvbWFpbkZyb21VcmwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRFZGl0aW9uLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0SXNBcHAuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRQYWdlTmFtZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VUeXBlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0UmVmZXJyZXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTZWN0aW9uU3RyaW5ncy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U2l0ZUNoYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTdWJzZWN0aW9uMS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTdWJzZWN0aW9uMi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFN5bmRpY2F0ZWRWaWRlb1NvdXJjZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFRpbWVzdGFtcC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFRvcGljTmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRWZXJzaW9uLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0UGFydG5lci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldExpY2Vuc2UuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRVc2VyVHJhY2tpbmdDb29raWUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3ByZWRpY2F0ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9kZnBwUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9sYXlvdXQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRSZWdpc3Rlci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY21kLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9wdWJzdWIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRVbml0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkVW5pdFdlYlNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvc2xvdERlZmVycmVkLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkRmlsdGVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Nhc3RQYXRoLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fc3RyaW5nVG9QYXRoLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9tZW1vaXplLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fTWFwQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fSGFzaC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19pc0hvc3RPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19pc01hc2tlZC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaEdldC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hIYXMuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fTGlzdENhY2hlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL2VxLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVEZWxldGUuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC90b1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZVN0cmVhbWluZy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3Mvc3NjSGVscGVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkU3VpdGVzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zdGF0cy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9pZGN0YS9pZGN0YS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9icmFuZGluZy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFRleHQuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRBc3luY1JlbmRlcmVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlbmRlcmVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2Fkc2Vuc2VSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9vdXRicmFpblJlbmRlcmVyLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3QuanMiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvc2xvdEFzeW5jLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3RJbmZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzL3RlbXBsYXRlRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzIF5cXC5cXC8uKlxcLm11c3RhY2hlJCIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzL2FkVGVtcGxhdGVzL2luZmluaXRlLXNsb3QubXVzdGFjaGUiLCJ3ZWJwYWNrOi8vLy92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vaG9nYW4uanMvbGliL3RlbXBsYXRlLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jdXJyZW5jeVByb3ZpZGVycy5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYXBpLmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb21tb24vZmVhdHVyZVN3aXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvY29tbW9uL2ZlYXR1cmVTd2l0Y2gvZmVhdHVyZS5qcyIsIndlYnBhY2s6Ly8vL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvc3RpY2t5QWR2ZXJ0LmpzIiwid2VicGFjazovLy8vdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvdmVuZG9yL2NvbXNjb3JlL2NvbXNjb3JlLnN0cmVhbWluZy5taW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiYm9vdHN0cmFwIiwiaW5pdCIsImNvbmZpZyIsImFkdmVydHMiLCJhbmFseXRpY3MiLCJhbmFseXRpY3NIZWxwZXIiLCJVdGlscyIsInNlY3Rpb25zIiwibG9jYWxlIiwiY3VycmVuY3lQcm92aWRlcnMiLCJhZGRMb2FkRXZlbnQiLCJhcGkiLCJvYmplY3RzIiwiY2xhc3NlcyIsInB1YnN1YiIsImxvdGFtZSIsIlByZWRpY2F0ZSIsIlN0YXRzIiwiU3VydmV5IiwibG9nZ2VyIiwic3RpY2t5QWR2ZXJ0IiwiaWRjdGEiLCJjb21zY29yZVN0cmVhbWluZyIsImxvZyIsImluZm8iLCJPYmplY3QiLCJhc3NpZ24iLCJ3aW5kb3ciLCJiYmNkb3Rjb20iLCJkb21Mb2FkZWQiLCJ1dGlscyIsInN0YXRzIiwic3VydmV5IiwiTG9nZ2VyIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJuc18iLCJnb29nbGVfYWRfcmVxdWVzdF9kb25lIiwiYWRzZW5zZVJlbmRlcmVyIiwiQm9vdHN0cmFwIiwiYWRkSHRtbFRhZ0NsYXNzIiwidHJhY2tDb29raWUiLCJoYXNBdHJyaWJ1dGUiLCJlbGVtZW50IiwiYXR0cmlidXRlS2V5IiwiYXR0cmlidXRlVmFsdWUiLCJyZWdleCIsIlJlZ0V4cCIsIm1hdGNoIiwiaGFzVGFnSWQiLCJ0YWdOYW1lIiwiaWROYW1lIiwiYXR0cmlidXRlTWF0Y2giLCJ0YWciLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2VhcmNoVHJlZVVwd2FyZHMiLCJub2RlIiwibWF0Y2hlciIsImluY2x1ZGVTZWxmIiwibGltaXQiLCJjdXJyZW50IiwicmVzdWx0IiwiaXRlcmF0aW9uIiwicGFyZW50Tm9kZSIsIm1hdGNoZXJSZXN1bHQiLCJnZXRDb29raWVEb21haW4iLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwiaW5kZXhPZiIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJpbW1lZGlhdGUiLCJ0aW1lb3V0IiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJsYXRlciIsImFwcGx5IiwiY2FsbE5vdyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJhcHBlbmRMaW5rVG9IZWFkIiwidXJsIiwiaGVhZCIsImxpbmsiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInJlbCIsImhyZWYiLCJhcHBlbmRDaGlsZCIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJpIiwibiIsInBpZWNlcyIsInNwbGl0IiwibGVuZ3RoIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJqb2luIiwid2FybiIsImFkZFRhZ0NsYXNzIiwiY2xhc3NOYW1lIiwicmVtb3ZlVGFnQ2xhc3MiLCJyZWd4IiwicmVwbGFjZSIsImFkZEJvZHlUYWdDbGFzcyIsInJlbW92ZUJvZHlUYWdDbGFzcyIsInJlbW92ZUh0bWxUYWdDbGFzcyIsImhhc0JvZHlUYWdJZCIsImdldFVyaVBhcmFtQnlOYW1lIiwibmFtZSIsInNhbml0aXplUmVzdWx0IiwicmVzdWx0cyIsImV4ZWMiLCJnZXRXaW5kb3dMb2NhdGlvbiIsInNlYXJjaCIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzRGVidWciLCJ0ZXN0IiwiY29va2llIiwiaXNEZWJ1Z1RyYWNlIiwiZ2V0RW52IiwibWF0Y2hlcyIsImlzTGl2ZUVudiIsImlzVGVzdEVudiIsInN0YWNrVHJhY2UiLCJlcnIiLCJFcnJvciIsImNvbnNvbGUiLCJzdGFjayIsImdldFBhcmVudEVsZW1lbnRCeUNsYXNzIiwiZGVwdGgiLCJpZ25vcmVCb2R5IiwidG9Mb3dlckNhc2UiLCJnZXRDbG9zZXN0RWxlbWVudEJ5VGFnTmFtZSIsImdldFBhcmVudEVsZW1lbnRCeUF0dHJpYnV0ZSIsImF0dHJpYnV0ZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJwYXJlbnRIYXNDbGFzcyIsImdldEFuY2hvclBvc2l0aW9uV2l0aGluRWxlbWVudCIsInBhcmVudCIsInRhZ3MiLCJocmVmUmVnZXgiLCJnZXRDbG9zZXN0RWxlbWVudFdpdGhBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhZGRFdmVudCIsIm9iaiIsImZuIiwiYXR0YWNoRXZlbnQiLCJldmVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudCIsImRldGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRyaWdnZXJFdmVudCIsInByZXZlbnREZWZhdWx0IiwidW5kZWZpbmVkIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJjYW5jZWxFdmVudCIsInJldHVyblZhbHVlIiwiaXNFdmVudERlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwidHJpbSIsInN0ciIsIm5hdmlnYXRlVG8iLCJ1cmkiLCJnZXRNZXRhTmFtZUNvbnRlbnQiLCJtZXRhcyIsImdldE1ldGFQcm9wZXJ0eUNvbnRlbnQiLCJwcm9wZXJ0eSIsInNldENvb2tpZSIsInZhbHVlIiwic2Vjb25kcyIsImRhdGUiLCJEYXRlIiwic2V0VGltZSIsImdldFRpbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b0dNVFN0cmluZyIsInB1c2giLCJnZXRDb29raWUiLCJwYXJ0cyIsInBvcCIsInNoaWZ0IiwiZGVsZXRlQ29va2llIiwiZ2VuZXJhdGVVdWlkVjQiLCJjIiwiciIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyIsImNyZWF0ZVdpbmRvd0xvY2F0aW9uIiwid2luZG93TG9jYXRpb24iLCJ3aXRob3V0UHJvdG9jb2wiLCJ3aXRob3V0UXVlcnlQYXJhbSIsInByb3RvY29sIiwiaG9zdCIsInBvcnQiLCJwYXRobmFtZSIsImhhc2giLCJzZWNvbmRzVG9NaWxsaVNlY29uZHMiLCJwYXJzZUZsb2F0IiwiZ2V0VHJhY2tDb29raWVWYWx1ZXMiLCJjb29raWVzQXJyIiwib3V0IiwidCIsImlzU3RyaW5nIiwidmFsIiwiU3RyaW5nIiwiY2xlYW5BcnJheSIsImFjdHVhbCIsIm5ld0FycmF5Iiwib3V0ZXJIVE1MIiwiZGl2IiwiaCIsImNsb25lTm9kZSIsImlubmVySFRNTCIsImRlYnVnIiwiTG9nRmFjdG9yeSIsIm5hbWVzcGFjZSIsInByZWZpeGVkTmFtZXNwYWNlIiwibG9nTGV2ZWxzIiwiZGVmYXVsdExvZ2dlciIsImNyZWF0ZUxvZ0xldmVsIiwibGV2ZWwiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJsb2dMZXZlbCIsImVuYWJsZSIsImRpc2FibGUiLCJlbmFibGVkIiwibGF5b3V0IiwiYnJlYWtwb2ludHMiLCJhZFJlZ2lzdGVyIiwiYWRVbml0IiwiYWRGaWx0ZXIiLCJrZXlWYWx1ZXMiLCJhZFN1aXRlcyIsImRmcHBSZXF1ZXN0IiwiQW5hbHl0aWNzSGVscGVyIiwicGFyYW1zIiwieCIsImxlbiIsIndpbmRvd0RvY3VtZW50IiwiZ2V0V2luZG93RG9jdW1lbnQiLCJhZHNUb0Rpc3BsYXkiLCJjbGFzc05hbWVzIiwiaXNBZHNFbmFibGVkIiwiaXNTcG9ydEFwcCIsImlzQWRzcG9ydGFwcEVuYWJsZWQiLCJpbml0Q2FsbGVkIiwiYnVpbGQiLCJyZWdpc3RlckFkIiwiZnJvbUNvbmZpZyIsImlzQXN5bmMiLCJnZXRBc3NldFByZWZpeCIsImlzSUU3IiwiZGlzYWJsZVJlc2V0IiwiaXNJRTgiLCJnZXRTZWN0aW9uIiwic2V0R3JvdXBTdGFydCIsImNvcHkiLCJnZXRHcm91cCIsInNldEdyb3VwIiwic2V0R3JvdXBGaW5pc2giLCJnZXRHcm91cHMiLCJjbGllbnRXaWR0aCIsInNldENsaWVudFdpZHRoIiwiY3VzdG9tQnJlYWtwb2ludHMiLCJzZXRHcm91cHMiLCJsb2NhbGVEYXRhIiwiaGFzT3duUHJvcGVydHkiLCJzZXQiLCJzZXRMb2NhbGUiLCJkb2N1bWVudEVsZW1lbnQiLCJsYW5nIiwidGl0bGUiLCJnZXRDbGllbnRXaWR0aCIsInNlcnZlcnNpZGVBZFVuaXRzMnRvOSIsImdldFNlY3Rpb25zIiwiZ2V0VHlwZSIsImNoZWNrVGhpcmRQYXJ0eUZpcnN0IiwiaXNMb3RhbWVFbmFibGVkIiwiaXNMb3RhbWVBY3RpdmUiLCJjb25zZW50Q2FsbGJhY2siLCJmb3JFYWNoIiwib24iLCJkYXRhIiwic2VuZERhdGEiLCJyZWNlaXZlTWVzc2FnZSIsImlzU2hlcmxvY2tBY3RpdmUiLCJpc1NoZXJsb2NrRW5hYmxlZCIsInRwIiwiX2NvbXNjb3JlS2V5VmFsdWVzIiwiYl9wYWdlX3R5cGUiLCJnZXRQYWdlVHlwZSIsInRyaWdnZXIiLCJwYWdlVHlwZSIsInByaW1hcnlBZFVuaXQiLCJnZXRBZFVuaXQxIiwic2Vjb25kYXJ5QWRVbml0IiwiZ2V0QWRVbml0czJ0bzkiLCJhZHNFbmFibGVkIiwiZSIsImVycm9yIiwiYWRzIiwiZ2V0QWRzIiwiZGlzYWJsZVNjcmVlblJlYWRlckZvckFkQ29udGVudCIsInJlc2V0IiwiQURTX0VOQUJMRURfSFRNTF9DTEFTUyIsIkFOQUxZVElDUyIsIkNPTVNDT1JFIiwiSFRUUFMiLCJXRUJTSVRFX1NVSVRFX0xJVkUiLCJXRUJTSVRFX1NVSVRFX1RFU1QiLCJBUFBfU1VJVEVfTElWRSIsIkFQUF9TVUlURV9URVNUIiwiQ1VTVE9NRVJfSURfTElWRSIsIkNVU1RPTUVSX0lEX1RFU1QiLCJTU0MiLCJXU1NJVEVTIiwiU0hFUkxPQ0tTSVRFUyIsIkxPVEFNRVdTU0lURVMiLCJfY29uZmlnIiwicmVmZXJyZXIiLCJnZXRXaW5Mb2MiLCJnZXRXaW5Eb2MiLCJzZXR0aW5ncyIsImNvbVNjb3JlIiwiaGVhZGxpbmUiLCJhc3luYyIsImRpc2FibGVBZHNJbml0aWFsTG9hZCIsImRheEVudmlyb25tZW50cyIsIm91dGJyYWluRW5hYmxlZCIsImxvdGFtZUVuYWJsZWQiLCJsb3RhbWVBY3RpdmUiLCJncmFwZXNob3RFbmFibGVkIiwiYWRzZW5zZUVuYWJsZWQiLCJhZHNwb3J0YXBwRW5hYmxlZCIsInBlcmNlbnRBY3RpdmUiLCJwbGF0aW51bUVuYWJsZWQiLCJ0bFNwb3J0SW5kZXhFbmFibGVkIiwidGxTcG9ydFN0b3J5RW5hYmxlZCIsInRsU3BvcnRGcEVuYWJsZWQiLCJ0aGlyZFBhcnR5RGlzYWJsZWQiLCJvcHRpbWl6ZWx5RW5hYmxlZCIsInNoZXJsb2NrRW5hYmxlZCIsInNoZXJsb2NrQWN0aXZlIiwiY29udGludW91c1BsYXlQYWdlIiwic3RpY2t5UGxheWVyUGFnZSIsImlzV29ybGRTZXJ2aWNlIiwiaXNFVSIsImlzTlBBIiwiaWVWZXJzaW9uIiwiaWU3IiwiaWU4IiwiaWU5IiwidmVyc2lvbiIsInByZWZpeGVzIiwiYXNzZXRQcmVmaXgiLCJqc1ByZWZpeCIsInN3ZlByZWZpeCIsImNzc1ByZWZpeCIsImZlYXR1cmVzIiwicGFsRW52IiwiUEFMX0VOVl9MSVZFIiwiYXBwTmFtZSIsIkNvbmZpZyIsInNlcnZlckNvbmYiLCJyZWh5ZHJhdGUiLCJzZXREYXRhIiwic2VsZiIsInRvcCIsInNldEFkc0VuYWJsZWQiLCJzZXRBbmFseXRpY3NFbmFibGVkIiwic2V0V2luZG93TG9jYXRpb24iLCJzZXRXaW5kb3dEb2N1bWVudCIsInNldFRsU3BvcnRTdG9yeUVuYWJsZWQiLCJzZXRUbFNwb3J0SW5kZXhFbmFibGVkIiwic2V0VGxTcG9ydEZwRW5hYmxlZCIsIlNFQVJDSEJPWCIsInZhcmlhbnQiLCJzZXRJc1dvcmxkU2VydmljZSIsInNldFNoZXJsb2NrQWN0aXZlIiwic2V0TG90YW1lQWN0aXZlIiwib3JiIiwic2V0UmVmZXJyZXIiLCJjb25mIiwic2V0U2VjdGlvbnMiLCJzZXRUeXBlIiwic2V0SGVhZGxpbmUiLCJzZXRUaGlyZFBhcnR5RGlzYWJsZWQiLCJhbGxvd0FkdmVydGlzaW5nIiwiYW5hbHl0aWNzRW5hYmxlZCIsImNvbVNjb3JlRW5hYmxlZCIsInNldENvbVNjb3JlRW5hYmxlZCIsImFzeW5jRW5hYmxlZCIsInNldEFzeW5jIiwic2V0T3B0aW1pemVseUVuYWJsZWQiLCJzZXRTaGVybG9ja0VuYWJsZWQiLCJkaXNhYmxlSW5pdGlhbExvYWQiLCJzZXREaXNhYmxlSW5pdGlhbExvYWQiLCJrZXl3b3JkIiwiYWRLZXl3b3JkIiwiYWRDYW1wYWlnbktleXdvcmQiLCJzZXRGZWF0dXJlcyIsInNldFBhbEVudiIsImFkdmVydGlzZW1lbnRUZXh0IiwiYWR2ZXJ0SW5mb1BhZ2VVcmwiLCJpbkFzc29jaWF0aW9uV2l0aFRleHQiLCJzcG9uc29yZWRCeVRleHQiLCJhZHNCeUdvb2dsZVRleHQiLCJpc0NvbnRpbnVvdXNQbGF5UGFnZSIsInNldENvbnRpbnVvdXNQbGF5UGFnZSIsImlzU3RpY2t5UGxheWVyUGFnZSIsInNldFN0aWNreVBsYXllclBhZ2UiLCJzdGF0c1Byb3ZpZGVyIiwibnVtUHJvdmlkZXJzIiwicHJvdmlkZXJzIiwicGFyc2VJbnQiLCJmbGFnIiwibyIsInNldE91dGJyYWluRW5hYmxlZCIsImQiLCJzZXRBZHNlbnNlRW5hYmxlZCIsImFzYSIsInNldEFkc3BvcnRhcHBFbmFibGVkIiwibCIsInNldExvdGFtZUVuYWJsZWQiLCJwIiwic2V0UGxhdGludW1FbmFibGVkIiwieiIsImciLCJzZXRHcmFwZXNob3RFbmFibGVkIiwic2giLCJzZWN0cyIsIkFycmF5IiwiaXNEaXNhYmxlQWRzSW5pdGlhbExvYWQiLCJzaXRlIiwia2V5IiwiaXNBY3RpdmUiLCJpc1RoaXJkUGFydHlEaXNhYmxlZEVVIiwiYmJjY29va2llcyIsInJlYWRQb2xpY3kiLCJib29sIiwiZGlzYWJsZWQiLCJ1cGRhdGVOUEEiLCJwcmVmaXgiLCJyZWYiLCJ2ZW5kb3IiLCJzc2NIZWxwZXIiLCJnZXRBbmFseXRpY3NMb2NhdGlvbiIsInRlc3RFbnYiLCJzZXRJRTciLCJzZXRJRTgiLCJzZXRBc3NldFByZWZpeCIsIlBBTF9FTlZfU1RBR0UiLCJQQUxfRU5WX1RFU1QiLCJQQUxfRU5WX0lOVCIsIlBBTF9FTlZfU0FOREJPWCIsImFkdmVydFNlY3Rpb25zIiwiYW5hbHl0aWNzU2VjdGlvbnMiLCJjbGVhbnVwUGF0aCIsInBhdGgiLCJ3c0xhbmciLCJidWlsZEFkdmVydFNlY3Rpb25zIiwiYnVpbGRBbmFseXRpY3NTZWN0aW9ucyIsImlzQ3VycmVudFVyaSIsIl9zZWN0aW9ucyIsIl9hZHZlcnRTZWN0aW9ucyIsIl9hbmFseXRpY3NTZWN0aW9ucyIsIlVOS05PV04iLCJnZXRVcmlGb3JTZWN0aW9ucyIsImdldEFycmF5Iiwib2Zmc2V0IiwicmVsb2FkRGF0YSIsImdldFNlY3Rpb25zRm9yVXJpIiwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHQiLCJhc3NvY2lhdGlvbkluZm9QYWdlVXJsIiwiZ29vZ2xlQWRzUGFnZVVybCIsImdldCIsImZpZWxkIiwidGV4dCIsImdldERhdGEiLCJlRGlnaXRhbFJlc2VhcmNoIiwiYSIsInN1cnZleUVuYWJsZWQiLCJzIiwiRURSU3VydmV5IiwibG9hZFNjcmlwdCIsImRvYyIsImNhbGxiYWNrIiwiYiIsInNldEF0dHJpYnV0ZSIsInNyYyIsIm9ubG9hZCIsIkNMQVNTX0JBU0UiLCJDTEFTU19TRVAiLCJjb25jYXQiLCJzbGljZSIsImFyciIsInJvb3RPdmVycmlkZSIsImZpbmFsUm9vdCIsInNlcnZpY2UiLCJjb21TY29yZUhlbHBlcnMiLCJMb3RhbWUiLCJjbGllbnRJZCIsImNvbnNlbnRDbGllbnRJZCIsImNvbnNlbnRPYmplY3QiLCJsb3RhbWVPYmplY3QiLCJub0NvbnNlbnQiLCJjcm9zc2RldmljZSIsImRhdGFzaGFyaW5nIiwidGFyZ2V0aW5nIiwiYWxsQ29uc2VudCIsInNldENvbnNlbnQiLCJib2R5Iiwic2VuZERlZmF1bHREYXRhIiwiY2xlYXJJbnRlcnZhbCIsImlzTG90YW1lTG9hZGVkSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImFuYWx5dGljc0tleVZhbHVlcyIsImFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzIiwiZ2V0Q29yZUtleVZhbHVlcyIsImFkdmVydHNLZXlWYWx1ZXMiLCJnZXRBbGwiLCJsb2FkRXh0cmEiLCJnZW5Qcm9wIiwiYmNwIiwiYWRkIiwiYXBwZW5kTm9uUGFnZUNvcmVLZXlWYWx1ZXMiLCJtZXRyaWNzQnVpbGRlciIsIk1ldHJpY3NCdWlsZGVyIiwibWFwTmFtZSIsInNlY3Rpb25TdHJpbmdzIiwidXNlclRyYWNraW5nQ29va2llIiwicHJlUmVxdWlzaXRlIiwiY29va2llc0VuYWJsZWRJRUZpeCIsInN5bmRpY2F0ZWRWaWRlb1NvdXJjZSIsImlzSW5kZXgiLCJpbmNsdWRlcyIsImlzTGl2ZSIsIm5DRSIsIm5hdmlnYXRvciIsImNvb2tpZUVuYWJsZWQiLCJ0ZXN0Q29va2llIiwibWV0cmljcyIsIk1hcCIsIm1ldHJpYyIsInBvc3RQcm9jZXNzIiwiZ2V0TWV0cmljSGVscGVyIiwiYXZhaWxhYmxlTWV0cmljcyIsIm91dHB1dCIsIm9wdGlvbnMiLCJnZXRNZXRyaWMiLCJtYXBOYW1lcyIsImdldEFkc0VuYWJsZWQiLCJnZXRBbmFseXRpY3NBY2NvdW50SUQiLCJnZXRBbmFseXRpY3NTdWl0ZSIsImdldEFwcE5hbWUiLCJnZXRBcHBUeXBlIiwiZ2V0QXJ0aWNsZUlEIiwiZ2V0QXJ0aWNsZUxlbmd0aCIsImdldEFydGljbGVQdWJsaXNoZWREYXRlIiwiZ2V0QXJ0aWNsZVRpdGxlIiwiZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlIiwiZ2V0Q29sbGVjdGlvbiIsImdldERheENvcnAiLCJnZXREb21haW5Gcm9tVXJsIiwiZ2V0RWRpdGlvbiIsImdldElzQXBwIiwiZ2V0UGFnZU5hbWUiLCJnZXRSZWZlcnJlciIsImdldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlIiwiZ2V0U2l0ZUNoYW5uZWwiLCJnZXRTaXRlU2VjdGlvbiIsImdldFNpdGVTdWJzZWN0aW9uMSIsImdldFNpdGVTdWJzZWN0aW9uMiIsImdldFRpbWVzdGFtcCIsImdldFRvcGljTmFtZXMiLCJnZXRWZXJzaW9uIiwiZ2V0UGFydG5lciIsImdldExpY2Vuc2UiLCJnZXRTZWN0aW9uU3RyaW5ncyIsImdldFN5bmRpY2F0ZWRWaWRlb1NvdXJjZSIsInNhbml0aXNlS2V5VmFsdWVzIiwic2FuaXRpc2VMYWJlbFZhbHVlIiwic2FuaXRpc2VQYWdlTmFtZSIsImdldEFuYWx5dGljc0FjY3RJZCIsImlzU2N3SGFuZGxlclVzZWQiLCJmaWciLCJOVUwiLCIkMSIsImFzc2V0Iiwic3RvcnlCb2R5IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50VGV4dExlbmd0aCIsImFydGljbGUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYXJ0aWNsZUVsZW1lbnQiLCJlbXBDb250ZW50IiwibGF5b3V0QSIsImxheW91dEFFbGVtZW50IiwiaW5uZXJUZXh0IiwidGV4dENvbnRlbnQiLCJhc1RpbWVzdGFtcCIsInNwb3J0RGVza3RvcERhdGUiLCJzcG9ydFJlc3BvbnNpdmVEYXRlIiwiZmlyc3RfY3JlYXRlZCIsInBhcnNlIiwiYWxyZWFkeUxpbmtlZCIsImNsaWNrTGlzdGVuZXIiLCJ2ZXJ0aWNhbHNSZWdleHAiLCJMSU5LX1RSQUNLSU5HX1NFQ1RJT05TIiwiVFJBQ0tJTkdfVElNRU9VVCIsImlzQkJDVXJpIiwiaXNMaXZlRXZlbnQiLCJyZSIsImlzRXh0ZXJuYWxSZWRpcmVjdFRvQkJDVXJpIiwiZGV0ZXJtaW5lU2VjdGlvbnMiLCJzZXBhcmF0b3IiLCJnZXRTdG9yeUhlYWRsaW5lIiwiY3BzSGVhZGxpbmUiLCJnZXRIZWFkbGluZSIsImdldFBhZ2VFZGl0aW9uIiwiZWRpdGlvbiIsImdldFZlcnRpY2FsIiwib25lc3BvcnQiLCJvbW5pdHVyZUFzc2V0VHlwZSIsImJiYyIsImZtdGoiLCJwYWdlIiwiYXNzZXRUeXBlIiwiZ2V0RW1iZWRQYWdlTmFtZSIsImFydGljbGVJZCIsImVtYmVkUGFnZU5hbWUiLCJpbmQiLCJvdmVycmlkZXMiLCJwYWdlTmFtZSIsImdldFBhZ2VOYW1lQ29tU2NvcmUiLCJwYXRoU2xhc2hlcyIsInBhdGhCaXRzIiwicmVzcG9uc2UiLCJ2ZXJ0aWNhbCIsImVuY29kZVZhbHVlIiwiZ2V0TGlua1RyYWNraW5nUHJvcGVydGllcyIsImxpbmtPYmoiLCJsaW5rU2VjdGlvbnMiLCJwcm9tb3RlZCIsInNhbml0aXNlTGlua05hbWUiLCJnZXRMaW5rTmFtZUZyb21VcmxGb3JWZXJ0aWNhbHMiLCJtYXRjaGVkIiwibGlua09ialRyYWNrIiwiZGF0YXNldCIsInRyYWNrIiwicmV2IiwiaHRtbFJldkFyciIsImxpbmtOYW1lIiwibGlua1Bvc2l0aW9uIiwiYXR0ck5hbWUiLCJtb2R1bGVOYW1lIiwicGFyZW50RWwiLCJ3aWRnZXRJZCIsIm1hcHBpbmciLCJtIiwibGlua0RldGFpbHMiLCJzZWN0aW9uIiwicG9zaXRpb24iLCJ0b3RhbCIsImdldEFuYWx5dGljc1VyaSIsImxvYWRUcmFja2luZ0ltYWdlIiwiaW1nIiwiSVNfR05MX0pTX1VOSVRfVEVTVCIsInByb2Nlc3NEZWxheVRyYWNraW5nQ29va2llIiwiZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUiLCJ0cmFja2luZ1JlcXVlc3RzIiwiY29va2llVmFsdWUiLCJ0cmFja0xpbmtCeURyb3BwaW5nQ29va2llIiwiZG9UcmFja0NhbGxiYWNrIiwiY3VzdG9tVHJhY2tpbmdLZXlWYWx1ZXMiLCJjb29raWVWYWwiLCJ0cmFja0xpbmtBbmRSZXN1bWVOYXZpZ2F0aW9uIiwiZXZlbnRIYW5kbGVkIiwidGltZW91dElkIiwicmVzdW1lIiwicmVzdW1lTmF2aWdhdGlvbiIsInRyYWNrZWQiLCJ0cmFja0xpbmsiLCJhcHBseUxpbmtUcmFja2luZ1RvUGFnZUVsZW1lbnRzIiwicHJvY2Vzc0xpbmtDYWxsYmFjayIsInJvb3RTZWN0aW9uIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImFzc2V0VXJpIiwiZ2V0QXZGb3JtYXRGcm9tS2luZCIsImtpbmQiLCJzdHJOYW1lIiwibmFtZVBhcnRzIiwiY2xlYW5LdnMiLCJpc05hTiIsImdldFNwb3J0UmVzcG9uc2l2ZVVwZGF0ZWRUaW1lc3RhbXAiLCJ0aW1lRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0aW1lc3RhbXAiLCJsYXN0X3VwZGF0ZWQiLCJrZXl3b3JkT2JqIiwiYXNzZXRUeXBlTWFwIiwic2V0U3RvcnlJZCIsIndpbmRvd0xvY2F0aW9uSHJlZiIsInNldENUeXBlIiwic2V0QXNzZXRUeXBlIiwibWF0Y2hBcnIiLCJyZWZTdHJpbmciLCJlc2NhcGUiLCJzZXRSZWZlcnJlckRvbWFpbiIsInJlZkRvbWFpbiIsInNldFJzaSIsInJzaV9zZWdzIiwic2Vnc19lbmQiLCJzZWdzX2JlZyIsInN1YnN0cmluZyIsInNldFdvcmxkU2VydmljZVRpdGxlIiwid2luZG93TG9jYXRpb25QYXRobmFtZSIsInNldEtleXdvcmRQYXJ0cyIsImtleXdvcmRQYXJ0cyIsInVuc2V0Iiwic2V0QXJyYXkiLCJnZXRLZXl3b3JkUGFydHMiLCJnZXREYXhFbnZpcm9ubWVudHMiLCJnZXREb21haW4iLCJzaXRlQ2F0YWx5c3RQYWdlVHlwZSIsIm1hcHBpbmdUYWJsZSIsInNpdGVDYXRhbHlzdENvb2tpZVZhbHVlIiwibm93IiwidG9waWNOYW1lcyIsInRvcGljTWFwIiwidG9waWMiLCJ0b3BpY0VsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImdldFVzZXJUcmFja2luZ0Nvb2tpZSIsIk9MRF9VU0VSX1RSQUNLSU5HX0NPT0tJRSIsIlVTRVJfVFJBQ0tJTkdfQ09PS0lFIiwiTkVXX1VTRVJfVFJBQ0tJTkdfQ09PS0lFIiwib2xkVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJuZXdWYWx1ZSIsImV4Y2x1c2lvbnMiLCJpbmNsdXNpb25zIiwicHJlZGljYXRlcyIsImFpcmxpbmUiLCJydWxlcyIsInZpb2xlbmNlIiwic2Vuc2l0aXZlIiwic2V0QWRFeGNsdXNpb24iLCJzZXRFeGNsdXNpb24iLCJnZXRFeGNsdXNpb25zIiwiZ2V0SW5jbHVzaW9ucyIsImNvbnRlbnRNZXRhRGF0YSIsIm51bWJlclRvTWF0Y2giLCJudW1iZXJNYXRjaGVkIiwiZXhwIiwiTG9nIiwiTGF5b3V0IiwiT2JqZWN0cyIsIktleVZhbHVlcyIsIkFkUmVnaXN0ZXIiLCJjbWQiLCJQdWJTdWIiLCJBZFVuaXQiLCJTZWN0aW9ucyIsIlNsb3REZWZlcnJlZCIsIkFkRmlsdGVyIiwiQnJlYWtwb2ludHMiLCJsYXp5TG9hZFNsb3RzIiwiZGVsYXllZFNjcm9sbCIsInRocm90dGxlIiwicHJldmlvdXMiLCJsZWFkaW5nIiwicmVtYWluaW5nIiwidHJhaWxpbmciLCJBRF9JRF9QUkVGSVgiLCJnZXRBZERhdGEiLCJhZE5hbWUiLCJhZCIsImFkU2l6ZXMiLCJnZXRBZEN1cnJlbnRHcm91cFNpemVzIiwiZG9tSWQiLCJzZXR1cFJlbmRlckVuZGVkQ2FsbGJhY2siLCJnb29nbGV0YWciLCJwdWJhZHMiLCJnZXRJbml0Q29tcGxldGUiLCJzZXRJbml0Q29tcGxldGUiLCJhZElkIiwic2xvdCIsImdldFRhcmdldGluZyIsImdldEFkIiwic2xvdEVsZW1lbnRJZCIsImdldFNsb3RFbGVtZW50SWQiLCJpc0VtcHR5IiwiaXNSZW5kZXJlZCIsImluamVjdEFkdmVydGlzZW1lbnRUZXh0Iiwic2V0UmVuZGVyZWQiLCJzZXRFdmVudFNpemUiLCJzaXplIiwicmVuZGVySWZSZWFkeSIsInJlcXVlc3REZWZlcnJlZEFkcyIsIkRGUFBSZXF1ZXN0Iiwic2xvdHMiLCJkZWZlcnJlZFNsb3RzIiwiaW5pdENvbXBsZXRlIiwiY2xlYXJUYXJnZXRpbmciLCJ1cGRhdGVDb3JyZWxhdG9yIiwicGVyZkNvb2tpZSIsInNldFByaXZhY3lTZXR0aW5ncyIsInNldFRhcmdldGluZyIsImdldFByZXZpZXdVaWQiLCJzZXRLZXlWYWx1ZXMiLCJzZXRMb3RhbWVEYXRhIiwic2V0R3JhcGVzaG90RGF0YSIsInNldFByb2dyYW1tZXNEYXRhIiwiY2hpbGRyZW4iLCJlbCIsImNsaWVudEhlaWdodCIsImVuYWJsZVNpbmdsZVJlcXVlc3QiLCJ1c2VyQWdlbnQiLCJwcGlkIiwic2V0UHVibGlzaGVyUHJvdmlkZWRJZCIsImVuYWJsZVN5bmNSZW5kZXJpbmciLCJzZXRSZXF1ZXN0Tm9uUGVyc29uYWxpemVkQWRzIiwicmVxdWVzdEFkcyIsImludGVyc3RpdGlhbEZsYWciLCJpc1Nsb3RFbmFibGVkIiwiYWREYXRhIiwiYWRTaXplIiwia2V5U2xvdHMiLCJrZXlzIiwiZ2V0QWRDb3VudCIsImRlZmluZU91dE9mUGFnZVNsb3QiLCJhZGRTZXJ2aWNlIiwiZW5hYmxlU2VydmljZXMiLCJnZXRBZElkIiwiaXNGbHVpZCIsImRlZmluZVNsb3QiLCJyZWZyZXNoQWQiLCJyZWZyZXNoIiwibW9kZSIsImdyb3VwcyIsImFkdmVydFRleHQiLCJzbG90c0FyciIsImJvb2xDb3JyZWxhdG9yIiwiY3VycmVudEdyb3VwSWQiLCJnZXRDdXJyZW50R3JvdXBJZCIsImJvb2xlYW5Db3JyZWxhdG9yIiwiaGFzQW55R3JvdXBBbHJlYWR5QmVlblJlZ2lzdGVyZWQiLCJzZXRBZFRleHQiLCJjaGFuZ2VDb3JyZWxhdG9yIiwiX2dyb3VwcyIsImV4Y2VwdGlvbiIsImlkIiwiaXNMYXp5TG9hZGVkU2xvdCIsIm1hcCIsIk51bWJlciIsInNjcm9sbEhhbmRsZXIiLCJzZWxlY3RvckVsZW1lbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzcGxpY2UiLCJsYXp5TG9hZEFkIiwic2VsZWN0b3IiLCJub2RlRWxlbWVudCIsInJlZ2lzdGVyQWRTbG90cyIsInZhbGlkYXRlR3JvdXBzIiwiZ3JvdXAiLCJmaWx0ZXIiLCJleHRyYWN0QWRQcm9wZXJ0aWVzIiwic2xvdElkIiwic2xvdFR5cGUiLCJzbG90R3JvdXBzIiwiZGFydENDS2V5IiwiZGFydENDIiwiY2NhdWRzIiwiY2NpIiwiUHJvZmlsZSIsIkF1ZGllbmNlcyIsIkF1ZGllbmNlIiwiYWJiciIsImdzS2V5IiwiZ3NfY2hhbm5lbHMiLCJzZXRDYXRlZ29yeUV4Y2x1c2lvbiIsImFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZSIsImFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZVdpdGhOb0JvcmRlciIsImluaXRpYWxHcm91cCIsImluaXRpYWxHcm91cElkIiwiY3VycmVudEdyb3VwIiwiY3VycmVudEdyb3VwU2l6ZXMiLCJsYXlvdXREaXNhYmxlUmVzZXQiLCJkZXRlcm1pbmVDdXJyZW50R3JvdXBBbmRTaXplcyIsInNsb3RTaXplcyIsImYiLCJpc0FkU2l6ZVN1aXRhYmxlRm9yQ3VycmVudEdyb3VwIiwic2xvdEluZGV4IiwiZ2V0QWROYW1lIiwibGVld2F5IiwiYWRUeXBlIiwiYWJzIiwiZ2V0V2lkdGgiLCJnZXRDcmVhdGl2ZUhlaWdodCIsInNob3VsZFNob3dBZCIsImN1cnJlbnRTbG90SGFzR3JvdXAiLCJzaG93T3JIaWRlQWRGb3JDdXJyZW50R3JvdXAiLCJpc1Jlc3BvbnNpdmUiLCJvcGVuIiwic2h1dCIsIm1vdmVBZCIsImZyb20iLCJ0byIsIndpZHRoIiwiZ2V0Q3VycmVudEdyb3VwIiwic2V0Q3VycmVudEdyb3VwSWQiLCJncm91cElkIiwiZ2V0Q3VycmVudEdyb3VwU2l6ZXMiLCJsYXN0SW5kZXhPZiIsIm92ZXJyaWRlR3JvdXBTaXplcyIsInJlZ2lzdGVyIiwiZmFjdG9yeSIsImN1cnJlbnRBZElkIiwiYWRDb25maWciLCJzZXRBZEZhY3RvcnkiLCJhZEZhY3RvcnkiLCJzZXRDb25maWciLCJzZXRDdXJyZW50QWRJZCIsImdldEN1cnJlbnRBZElkIiwiZ2V0Q3VycmVudEFkIiwic2V0QmFzZUNvbnRlbnQiLCJzaG93IiwiY2xvc2UiLCJrIiwiY291bnQiLCJkZWZpbmVQcm9wZXJ0eSIsImxpc3RlbmVycyIsImxpc3RlbmVyIiwiVHlwZUVycm9yIiwiZXZlbnRzIiwib2ZmIiwiY2xlYXIiLCJhZFVuaXRXZWJTZXJ2aWNlIiwiem9uZURhdGEiLCJERlBfSUQiLCJERlBfU1VJVEVfREVGQVVMVCIsIkRGUF9TVUlURV9ERVZJQ0VfV0lEVEhfU1dJVENIIiwiQURfVU5JVF9ERUZBVUxUIiwiQURfVU5JVF8yX0RFRkFVTFQiLCJDSEFOTkVMX0tFWSIsIlNFQ1RJT05fS0VZIiwiU1VCX1NFQ1RJT05fS0VZIiwiY3VzdG9tQWRVbml0IiwiZGZwU3VpdGUiLCJhZFVuaXRzMnRvOSIsInByZXZpZXdVaWQiLCJxdWVyeVN0cmluZ092ZXJyaWRlIiwiYWxsb3dlZFNpdGVzIiwibGl2ZSIsInd3dyIsInNwZWNpYWxzIiwicHJldmlldyIsImxpdmVfbW9iaWxlIiwid3d3X21vYmlsZSIsInNwZWNpYWxzX21vYmlsZSIsInByZXZpZXdfbW9iaWxlIiwidGVzdF9tb2JpbGUiLCJ0ZXN0X2FyYWJpYyIsInRlc3RfcnVzc2lhbiIsImxpdmVfZWFydGgiLCJ0ZXN0X2VhcnRoIiwidGVzdF9hbXBfbmV3cyIsImxpdmVfYW1wX25ld3MiLCJsaXZlX3Nwb3J0X2FwcCIsImxpdmVfZW1iZWQiLCJ0ZXN0X2VtYmVkIiwibGl2ZV9yZWVsIiwidGVzdF9yZWVsIiwiV09STERfU0VSVklDRV9BRF9VTklUX1BSRUZJWCIsImxpdmVfZGVza3RvcCIsInRlc3RfZGVza3RvcCIsIldPUkxEX1NFUlZJQ0VfQURfVU5JVF9TVUZGSVhfTUFQIiwiamFwYW5lc2UiLCJWRVJUSUNBTFNfQURfVU5JVFNfUFJFRklYIiwiQURfVU5JVDJfRVhDRVBUSU9OUyIsImFkU2VjdGlvbnMiLCJhc3NpZ25EZnBTdWl0ZSIsImdldFdvcmxkU2VydmljZUFkVW5pdFN1ZmZpeCIsImFkVW5pdFN1ZmZpeCIsImRlcml2ZUFkVW5pdDEiLCJtRG90UmVnRXhwIiwiYWRVbml0T3ZlcnJpZGUiLCJzaXRlT3ZlcnJpZGUiLCJ1aWRPdmVycmlkZSIsImRlcml2ZUFkVW5pdDJ0bzlGcm9tVXJpIiwicGF0dGVybiIsInVybFBhdGgiLCIkMiIsImRlcml2ZUFkVW5pdDJ0bzkiLCJwcm9jZXNzWm9uZURhdGEiLCJ6b25lcyIsInpvbmUiLCJhZFNlY3Rpb25zQXJyYXkiLCJzZWN0aW9uc0FycmF5Iiwic2V0VWlkIiwib3ZlcnJpZGVVaWQiLCJzZXRBZFVuaXQiLCJvdmVycmlkZUFkVW5pdCIsImVuZHNXaXRoIiwiYWRJRCIsInNsb3REb21DaGlsZEVsZW1lbnQiLCJyZWdpc3RlclNsb3RHcm91cHMiLCJzZXRDdXJyZW50U2xvdEdyb3VwcyIsImZpcnN0RWxlbWVudENoaWxkIiwiZmlyc3RDaGlsZCIsImdldERlcHJlY2F0ZWRTbG90TGlzdCIsImluZGV4Iiwic3ViX2luZGV4Iiwic3ViX3NlY3Rpb24iLCJvdXRCeVNlY3Rpb24iLCJleGNlcHRpb25zQnlTZWN0aW9uIiwiaXNUbFNwb3J0U3RvcnlFbmFibGVkIiwiaXNUbFNwb3J0SW5kZXhFbmFibGVkIiwiaXNUbFNwb3J0RnBFbmFibGVkIiwiaXNQbGF0aW51bUVuYWJsZWQiLCJsYXp5TG9hZEJ5U2VjdGlvbiIsImRlcHJlY2F0ZWRTbG90Iiwid2FsbHBhcGVyIiwibGVhZGVyYm9hcmQiLCJtcHUiLCJtcHVfbWlkZGxlIiwibXB1X2JvdHRvbSIsInNwb25zb3IiLCJtb2R1bGVfd29ybGRpbnBpY3R1cmVzIiwicHJvbW8iLCJhZF9mZWF0dXJlX3JjIiwiYWRzZW5zZSIsInBhcmFsbGF4IiwicHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlIiwic3BvbnNvcmJpZyIsImN1c3RvbUdyb3VwcyIsImN1c3RvbUdyb3VwIiwic3RyZWFtU2Vuc2UiLCJjb21TY29yZVN0cmVhbWluZyIsInNldE1ldHJpY092ZXJyaWRlIiwic2V0T3ZlcnJpZGUiLCJERUxBWV9UUkFDS0lOR19DT09LSUUiLCJDb21TY29yZSIsInBsYXlsaXN0Q291bnQiLCJ2aWRlb0V2ZW50Q291bnRlciIsImFsbG93TGlua1RyYWNraW5nIiwiaXNQbGF5bGlzdFN0YXJ0ZWQiLCJ1c2VyVHJhY2tpbmdDb29raWVWYWx1ZSIsImhlbHBlciIsInNldHVwU3RyZWFtU2Vuc2UiLCJpbml0QXBwUGFnZVRyYWNraW5nIiwic2V0QXBwIiwic2V0QXBwTmFtZSIsInNldEFwcFZlcnNpb25OdW1iZXIiLCJhcHBWZXJzaW9uIiwic2V0QXBwT3MiLCJhcHBPcyIsImFwcFRyYWNrUGFnZSIsImtleVZhbHVlIiwiYl9hcHBfbmFtZSIsImJfc2l0ZV9jaGFubmVsIiwiYl9hcHBfaW1wX3ZlciIsImJfYXBwX29zIiwidmlkZW9FdmVudHMiLCJpc0NvbVNjb3JlRW5hYmxlZCIsImM5IiwiZG9UcmFjayIsIm1lc3NhZ2UiLCJ2YXJzIiwiYl9saW5rIiwiYnVpbGRQaXBlRGVsaW1pdGVkS2V5IiwibWV0aG9kcyIsIm1ha2VJbWFnZVJlcXVlc3QiLCJpc0FuYWx5dGljc0VuYWJsZWQiLCJkZWZhdWx0QzIiLCJjMiIsImJfYXBwX3R5cGUiLCJhcHBfbmFtZSIsInByb2RfbmFtZSIsInBhZ2VfdHlwZSIsImNwc19hc3NldF9pZCIsImJfYXJ0aWNsZV9pZCIsIm5zX3N0X2VjIiwiYzciLCJjOCIsIkFEIiwiQ09OVEVOVCIsIk5VTEwiLCJTdHJlYW1TZW5zZVY2Iiwic2EiLCJjb250ZW50RHVyYXRpb24iLCJjdXJyZW50bHlQbGF5aW5nIiwiaXNQcmV2aWV3IiwidWlJbmZvTGFiZWxzIiwibnNfc3Rfd3MiLCJuc19zdF9jcyIsInZvbHVtZUxhYmVsIiwibnNfc3Rfdm8iLCJ2b2x1bWUiLCJhZFBsYXllZCIsIlN0cmVhbWluZ0FuYWx5dGljcyIsImxpdmVFbmRwb2ludFVSTCIsIm1ldGhvZCIsImdldFBsYXliYWNrU2Vzc2lvbiIsImdldExhYmVscyIsImdldEFzc2V0Iiwibm90aWZ5IiwibWVkaWFPZmZzZXQiLCJjMSIsIm1lZGlhUGxheWVyTmFtZSIsImMzIiwiYzQiLCJiX2F2X2FjdGlvbiIsIl9nZXRBVkFjdGlvbiIsInZpZGVvUGxheXNBdXRvbWF0aWNhbGx5IiwibnNfc3RfaXQiLCJuc19zdF9tcCIsIm5zX3N0X212IiwiYnVtcFZlcnNpb24iLCJuc19zdF9jcCIsImJfYXZfYWQiLCJiX2F2X2Zvcm1hdCIsImJfYXZfcGxpc3QiLCJiX2F2X21ldGhvZCIsImJfYXZfc291cmNlIiwiYl9wcmV2aWV3X2ZsYWciLCJjcmVhdGVQbGF5YmFja1Nlc3Npb24iLCJuc19zdF9ldiIsIm1lZGlhTmFtZSIsInNldEFzc2V0IiwibnNfc3RfYnIiLCJuc19zdF9jaSIsIm5zX3N0X2NsIiwiYWRMZW5ndGgiLCJuc19zdF9wdSIsIm5zX3N0X3ByIiwibnNfc3RfZXAiLCJuc19zdF9zbiIsIm5zX3N0X2VuIiwibnNfc3RfZ2UiLCJuc19zdF9jdCIsIm5zX3N0X3RpIiwibnNfc3RfaWEiLCJuc19zdF9kZHQiLCJuc19zdF90ZHQiLCJuc19zdF9zdCIsImM2IiwibnNfc3RfYWQiLCJuc19zdF9wbiIsIm5zX3N0X2NlIiwibnNfc3RfbGkiLCJtZWRpYUxlbmd0aCIsInNldExhYmVsIiwidWlpbmZvIiwiaXNGdWxsc2NyZWVuIiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0Iiwic2V0TGFiZWxzIiwicHJldmlld1N0b3BwZWRSZWFzb24iLCJhdl9hY3Rpb24iLCJnZXRPdmVycmlkZXMiLCJTU0NIZWxwZXIiLCJhbmFseXRpY3NDb25maWciLCJnZXRBbmFseXRpY3NDb25maWciLCJzc2NIb3N0IiwiaHR0cHMiLCJjb21TY29yZUhvc3QiLCJoYXNVc2VyVHJhY2tpbmdDb29raWUiLCJnZXRDb21TY29yZUJhc2VVcmwiLCJnZXRTc2NCYXNlVXJsIiwiaXNTZWN1cmUiLCJzdWl0ZXMiLCJkZnBwSWQiLCJ1aWQiLCJsYXJnZSIsImJpZyIsInN0YW5kYXJkIiwib3BhcXVlIiwiaW50ZXJzdGl0aWFsIiwiZW1wdHkiLCJub25lIiwibm9hZCIsInN1aXRlIiwiaW5pdGlhbERhdGEiLCJhZHNSZXF1ZXN0ZWQiLCJhZHNSZW5kZXJlZCIsImFkc0VtcHR5IiwiYWRzU2xvdHMiLCJhZHNTaHV0IiwiaGFuZGxlcnMiLCJ1bmJpbmQiLCJldmVudEhhbmRsZXJzIiwiaGFuZGxlciIsInJlZHVjZXIiLCJub3JtYWxpc2VkRXZlbnRzIiwiaXNBcnJheSIsIm5leHQiLCJmcmVlemUiLCJpbXBsZW1lbnRhdGlvbiIsIndpbmRvd09ubG9hZCIsImF0dGVtcHRUb1Nob3dTaWduaW4iLCJpc09uQXBwcm9wcmlhdGVQYWdlIiwidGhlbiIsImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwiaXNVc2VyRWxpZ2libGUiLCJpc0lkY3RhRmxhZ3BvbGVHcmVlbiIsImlzVGltZVRvRW5jb3VyYWdlIiwiZ2V0SWRDdGFCdXR0b25zIiwic2hvd1BvcHVwIiwic29tZUpzb24iLCJodG1sIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJjb250YWluZXIiLCJsYWJlbCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3RvcmFnZUF2YWlsYWJsZSIsInN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsIkRPTUV4Y2VwdGlvbiIsImNvZGUiLCJjaGVja3MiLCJiYmN1c2VyIiwiaXNTaWduZWRJbiIsImFsbG93c1BlcmZvcm1hbmNlQ29va2llcyIsImFsbCIsInNpZ25lZEluIiwicGVyZkNvb2tpZXMiLCJGTEFHUE9MRSIsIlNFQ1NfQUZURVJfRElTTUlTU19VTlRJTF9QUk9NUFRBQkxFIiwidGltZVN0YW1wIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkRJU01JU1NFRF9USU1FU1RBTVBfS0VZIiwidGltZVN0YW1wSW50IiwidGltZXN0YW1wSW5TZWNOb3ciLCJnZXRCcmVha3BvaW50IiwiYnV0dG9uQ29sb3VyIiwiYnV0dG9uU2l6ZSIsInVzZXJPcmlnaW4iLCJwdHJ0Iiwicm9vdCIsImZldGNoIiwianNvbiIsIm1hdGNoTWVkaWEiLCJfc2lnbmluQm94IiwiX2JhY2tncm91bmQiLCJfdGFiTGlzdCIsIl9jdXJyZW50VGFiIiwiVElUTEVfVEVYVCIsIldIWV9URVhUIiwiQ0xPU0VfQlROX1RFWFQiLCJjbG9zZVBvcHVwIiwiaGVhZGVyIiwiYnV0dG9ucyIsInNpZ25pbkJ1dHRvbiIsInJlZ2lzdGVyQnV0dG9uIiwiZm9jdXMiLCJjbG9zZUJ1dHRvbiIsImxpbmVicmVhayIsIndoeUxpbmsiLCJ3aHlJY29uIiwid2h5VGV4dFNwYW4iLCJrZXlIYW5kbGVyIiwia2V5Q29kZSIsIndoaWNoIiwidGwxIiwic2hpZnRLZXkiLCJyZW1vdmVDaGlsZCIsImFkQXN5bmNSZW5kZXJlciIsImFkUmVuZGVyZXIiLCJhZFRleHQiLCJicmFuZGluZyIsIm91dGJyYWluUmVuZGVyZXIiLCJzbG90QXN5bmMiLCJzbG90RGVmZXJyZWQiLCJzbG90SW5maW5pdGUiLCJCcmFuZGluZyIsIkFEX0hFSUdIVF9BREpVU1RNRU5UIiwiU0xPVF9QUkVGSVgiLCJBRF9JU19WSVNJQkxFIiwiQURfSVNfU0hVVF9DTEFTUyIsIkRJU1BMQVlfTk9ORV9DTEFTUyIsImFkVGV4dEtleSIsImdldENvbnRlbnRzIiwiZG9tQWQiLCJmbGV4RnJhbWVBZFVwZGF0ZSIsImxlYWRlcmJvYXJkRWwiLCJmbGV4ZnJhbWVFbCIsImFkRnJhbWVFbCIsInBhcmVudEVsZW1lbnQiLCJBZCIsImhlaWdodCIsInByZWxvYWRlZCIsImNsb3NlZCIsInJlbmRlcmVkIiwiZXZlbnRTaXplIiwiY29udGVudHMiLCJiYXNlIiwic2l6ZVNldCIsImFsbG93U2NyZWVuUmVhZGVyIiwiY3VycmVudFNsb3RHcm91cHMiLCJyZWdpc3RlcmVkU2xvdEdyb3VwcyIsInN0aWNreSIsImlzU3RpY2t5Iiwic2V0Q2xvc2VkIiwiaXNDbG9zZUFkIiwiZ2V0QmFzZUNvbnRlbnQiLCJjdXJyZW50U2xvdCIsImdldEN1cnJlbnRTbG90R3JvdXBzIiwiZ2V0UmVnaXN0ZXJlZFNsb3RHcm91cHMiLCJzZXRQcmVsb2FkZWQiLCJwcmVsb2FkIiwiaXNQcmVsb2FkZWQiLCJkb21FbGVtZW50IiwiZ2V0RG9tRWxlbWVudCIsImdldEFkdmVydERpbWVuc2lvbnMiLCJhZHZlcnQiLCJzZXRXaWR0aCIsInNldEhlaWdodCIsImdldEhlaWdodCIsInNldEFkRG9tSGVpZ2h0V2lkdGgiLCJpc0lmcmFtZVNldHRpbmdTaXplIiwiYWRQYWRIZWlnaHQiLCJzdHlsZSIsInNldElmcmFtZVNpemUiLCJhZElmcmFtZXMiLCJpbnNFbGVtZW50cyIsIm9wZW5Bc3luYyIsInNldFJlc3BvbnNpdmUiLCJyZXNwb25zaXZlIiwiZ2V0QWRUZXh0S2V5IiwiZ2V0QWRUZXh0IiwiaGFzQWRUZXh0IiwiZ2V0VGV4dCIsImdldEFkSW5mb1VybCIsImdldEluZm9VcmwiLCJqIiwibGlua3MiLCJpZnJhbWVzIiwiYWRTbG90cyIsInRhYkluZGV4IiwiaXNTaHV0Iiwic2V0VGl0bGVGb3JTcG9uc29yQWRzIiwic2V0Q3VycmVudFNsb3RWaXNpYmxlIiwic2xvdEVsZW1lbnQiLCJncm91cHNSZWdpc3RlcmVkIiwiYWRUZXh0SW50ZXJ2YWwiLCJhZEluZm9VcmwiLCJpbmplY3RUcnkiLCJ0cnlJbmplY3RBZFRleHQiLCJhVGFnIiwiaW5zZXJ0QmVmb3JlIiwiaGlkZUFkQ29udGFpbmVyIiwiZGlzcGxheSIsIm92ZXJmbG93IiwicGFkZGluZyIsIkFkVGV4dCIsImtleXdvcmRzIiwiYWx0VGl0bGUiLCJyZXF1aXJlanMiLCJuZXdzIiwiaW5kZXhUaXRsZSIsImluZGV4VGl0bGVTdHJpbmciLCJhZEluZm9MaW5rIiwic2V0VGl0bGVIdG1sIiwiZ2V0SW5kZXhUaXRsZSIsImZpbmQiLCJnZXRVcmwiLCJnZXRUaXRsZSIsIlNFQ1RJT05fT1ZFUlJJREVTIiwiQURfVEVYVF9LRVlfVE9fVVJMX0xPQ0FMRV9LRVlfTUFQIiwiREVGQVVMVF9JTkZPX1VSTF9MT0NBTEVfS0VZIiwib3ZlcnJpZGUiLCJsb2NhbGVLZXkiLCJzZXRTZWN0aW9uT3ZlcnJpZGVzIiwicmVuZGVyQWQiLCJhZEluZm8iLCJhZEVsZW1lbnQiLCJhZFNsb3RJZCIsImFkTm9kZSIsInByZXBlbmQiLCJjcmVhdGVBZCIsImFkVGVtcGxhdGUiLCJzdWJzdGl0dXRlRGF0YSIsIndyaXRlIiwidGVtcGxhdGUiLCJhZEh0bWwiLCJwcm9kdWN0U2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImRhdGFBZFNsb3QiLCJsb2FkR29vZ2xlQWRzZW5zZSIsImFkU2Vuc2VTY3JpcHQiLCJpbml0QWRzZW5zZSIsImFkc2J5Z29vZ2xlIiwicmVxdWVzdE5vblBlcnNvbmFsaXplZEFkcyIsImZpeGVkV2lkdGgiLCJhZHNlbnNlR3JvdXBzIiwibWF4R3JvdXAiLCJhZFNlbnNlRWxlbWVudCIsImFkU2Vuc2VSdW5TY3JpcHQiLCJhZFRleHRWYWx1ZSIsImlzRnVsbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJzbG90V2lkdGgiLCJtaW4iLCJzbG90SGVpZ2h0IiwicHJvZHVjdFRlbXBsYXRlcyIsInNwb3J0IiwiZmFsbGJhY2siLCJsb2FkU2NyaXB0Q2FsbGVkIiwic2FuaXRpc2VEYXRhU3JjIiwiZ2VuZXJhdGVIdG1sIiwicHJvZHVjdCIsImVsSWQiLCJpc091dGJyYWluRW5hYmxlZCIsImN1cnJlbnRTY3JpcHRUYWciLCJzbG90Q29uZmlnIiwic2NyaXB0VGFncyIsInNsb3REb21JZCIsImFkRG9tSWQiLCJUZW1wbGF0ZUZhY3RvcnkiLCJTbG90SW5maW5pdGUiLCJncm91cHNDbGFzcyIsInJlbmRlcmVkVGVtcGxhdGUiLCJnZXRUZW1wbGF0ZSIsInJlbmRlciIsInJlbmRlckludG9FbGVtZW50IiwiQVZBSUxBQkxFX1RFTVBMQVRFUyIsInRlbXBsYXRlcyIsInJlZHVjZSIsIm9iamVjdE1hcCIsInRlbXBsYXRlTmFtZSIsIm5vZGVTY3JpcHRSZXBsYWNlIiwibm9kZVNjcmlwdElzIiwicmVwbGFjZUNoaWxkIiwibm9kZVNjcmlwdENsb25lIiwiY2hpbGROb2RlcyIsInNjcmlwdCIsImF0dHJpYnV0ZXMiLCJsb2FkZWQiLCJpc05pZWxzZW5Mb2FkZWRJbnRlcnZhbCIsImxvYWROaWVsc2VuQXUiLCJub2xfdCIsImNpZCIsImNvbnRlbnQiLCJzZXJ2ZXIiLCJyZWNvcmQiLCJwb3N0IiwibG9hZE5pZWxzZW5OeiIsIkltYWdlIiwib25lcnJvciIsImVuY29kZVVSSSIsImVtIiwicG9zdFdyaXRlIiwiZ2V0TG9hZGVkIiwic3R1YkN1cnJlbnRTY3JpcHRUYWciLCJhc3luY1Nsb3QiLCJvcmlnaW4iLCJKU09OIiwic291cmNlIiwicG9zdE1lc3NhZ2UiLCJzdHJpbmdpZnkiLCJzdWNjZXNzIiwicmVnaXN0ZXJTbG90IiwiZ3JvdXBzU3RyaW5nIiwic2V0QWRLZXlWYWx1ZSIsInVuaXQiLCJzZXRHcm91cFN0YXJ0V2lkdGgiLCJnZXRGZWF0dXJlcyIsImdldEZlYXR1cmUiLCJhZFN0cmluZyIsImFkSWRQcmVmaXgiLCJrZXlWYWx1ZVN0cmluZyIsImFkU2xvdCIsImlGcmFtZSIsInNjcm9sbGluZyIsImJvcmRlciIsInRyYWNrRXZlbnQiLCJ0aGF0IiwiYm91bmRDYWxsYmFjayIsIkdEUFJfQ09VTlRSSUVTIiwiaXNUaGlyZFBhcnR5RGlzYWJsZWQiLCJnZXRDb3VudHJ5IiwiY291bnRyeUNvZGUiLCJzZXRFVSIsInJlSW5pdCIsInByZWRpY2F0ZSIsInN1bW1hcnkiLCJyZXNldFBhZ2UiLCJkaXNhYmxlQWRVbml0IiwiYmJjZG90Y29tQ29uZmlnIiwiZGVzY3JpcHRpb24iLCJmZWF0dXJlTmFtZSIsIkZlYXR1cmUiLCJmZWF0dXJlc0NvbmZpZyIsImdldFBhbEVudiIsImZlYXR1cmVEYXRhIiwiZW52cyIsImVudmlyb25tZW50IiwiaXNFbnZpcm9ubWVudEVuYWJsZWQiLCJnZXRPbiIsIm9wdGlvbiIsImdldE9wdGlvbnMiLCJTdGlja3lTdHVmZiIsInN0aWNraWVkRWxlbWVudHMiLCJoZWlnaHRMaW1pdCIsIm1ha2VTdGlja3kiLCJyZW1vdmUiLCJsaXN0IiwidHJpZ2dlclJlc2l6ZSIsInN0YXJ0U2Nyb2xsTGlzdGVuZXIiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsInVwZGF0ZSIsInN0YXJ0UmVzaXplTGlzdGVuZXIiLCJyZXNpemVUaW1lciIsIm91dGVyV2lkdGgiLCJzdGFydE9yaWVudGF0aW9uTGlzdGVuZXIiLCJBQk9WRSIsIk9WRVIiLCJCRUxPVyIsImFwcGx5VG8iLCJfc3RhdGUiLCJfaW5pdGlhbFRvcCIsIl90cmF2ZWwiLCJfbGVmdCIsIndhaXRpbmdGb3JGcmFtZSIsInNldFN0YXRlIiwic3RhdGUiLCJzZXRTdHlsZXNBYm92ZSIsInNldFN0eWxlc092ZXIiLCJzZXRTdHlsZXNQYXJhbGxheCIsInNldFN0eWxlc0JlbG93IiwibGVmdCIsInRyYW5zZm9ybSIsInpJbmRleCIsImdldFBhcmFsbGF4Iiwic2V0V3JhcHBlclN0eWxlIiwib2Zmc2V0SGVpZ2h0IiwidXBkYXRlVmFyaWFibGVzIiwiZ2V0SW5pdGlhbFRvcCIsImNhbGNUcmF2ZWwiLCJnZXRMZWZ0Iiwicm91bmQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm9mZnNldFRvcCIsIm9mZnNldFR5cGUiLCJzZXRQb3NpdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9zY3JvbGxUb3AiLCJkZWZpbmUiLCJhbWQiLCJfX3Byb3RvX18iLCJwYXJzZUJvb2xlYW4iLCJwYXJzZUludGVnZXIiLCJwYXJzZUxvbmciLCJleHRlbmQiLCJjbG9uZU9iamVjdCIsImNvcGllZE9iamVjdHMiLCJyZWN1cnNpdmVEZWVwQ29weSIsImRlZXBDb3B5IiwibWF4RGVwdGgiLCJOb2RlIiwibm9kZVR5cGUiLCJjb25zdHJ1Y3RvciIsImNhbkNvcHkiLCJjcmVhdGUiLCJwb3B1bGF0ZSIsImNhY2hlUmVzdWx0IiwiZ2V0Q2FjaGVkUmVzdWx0IiwiYXBwbHlEZWVwQ29waWVyIiwiRGVlcENvcGllciIsImRlZXBDb3BpZXJzIiwidW5zaGlmdCIsImdldE5hbWVzcGFjZSIsImlzTm90RW1wdHkiLCJzYWZlR2V0IiwiZXhpc3RzIiwiaXNUcnVlIiwicmVnaW9uTWF0Y2hlcyIsIm9uU3lzdGVtQ2xvY2tKdW1wIiwiaGFzUGFnZVZpc2liaWxpdHlBUElTdXBwb3J0IiwiaGlkZGVuIiwibW96SGlkZGVuIiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJnZXRQYWdlVmlzaWJpbGl0eUFQSSIsInZpc2liaWxpdHlDaGFuZ2UiLCJpc1RhYkluQmFja2dyb3VuZCIsImdldEJyb3dzZXJOYW1lIiwiZ2V0QnJvd3NlckZ1bGxWZXJzaW9uIiwiYnJvd3NlckFjY2VwdHNMYXJnZVVSTHMiLCJBY3RpdmVYT2JqZWN0IiwiaXNCcm93c2VyIiwiaXNXZWJTZWN1cmUiLCJoaWRlIiwibWF4IiwiYXBpQ2FsbCIsImluZm9Mb2ciLCJkZXByZWNhdGlvbiIsImdldExvZ0hpc3RvcnkiLCJoYXMiLCJkaXIiLCJhcHBlbmQiLCJkZWxldGVGaWxlIiwicmVhZCIsIlBMQVRGT1JNIiwiaHR0cEdldCIsImh0dHBQb3N0IiwiU3RvcmFnZSIsIklPIiwib25EYXRhRmV0Y2giLCJnZXRDcm9zc1B1Ymxpc2hlcklkIiwiVU5LTk9XTl9WQUxVRSIsImdldEFwcFZlcnNpb24iLCJnZXRWaXNpdG9ySWQiLCJnZXRWaXNpdG9ySWRTdWZmaXgiLCJnZXREZXZpY2VNb2RlbCIsImdldFBsYXRmb3JtVmVyc2lvbiIsImdldFBsYXRmb3JtTmFtZSIsImdldFJ1bnRpbWVOYW1lIiwiZ2V0UnVudGltZVZlcnNpb24iLCJnZXREaXNwbGF5UmVzb2x1dGlvbiIsIlVOS05PV05fUkVTT0xVVElPTiIsImdldEFwcGxpY2F0aW9uUmVzb2x1dGlvbiIsImdldExhbmd1YWdlIiwiZ2V0UGFja2FnZU5hbWUiLCJpc0Nvbm5lY3Rpb25BdmFpbGFibGUiLCJpc0NvbXBhdGlibGUiLCJhdXRvU2VsZWN0Iiwic2V0UGxhdGZvcm1BUEkiLCJpc0Nyb3NzUHVibGlzaGVySWRDaGFuZ2VkIiwiZ2V0RGV2aWNlQXJjaGl0ZWN0dXJlIiwiZ2V0Q29ubmVjdGlvblR5cGUiLCJnZXREZXZpY2VKYWlsQnJva2VuRmxhZyIsImlzQ29ubmVjdGlvblNlY3VyZSIsInByb2Nlc3NNZWFzdXJlbWVudExhYmVscyIsImpzb25PYmplY3RUb1N0cmluZ0RpY3Rpb25hcnkiLCJnZXRLZXlzIiwiZml4RXZlbnRUaW1lIiwibnNfdHMiLCJhZGROZXdQbGF5YmFja0ludGVydmFsIiwic3RhcnQiLCJlbmQiLCJzdGF0ZVRvU3RyaW5nIiwiSCIsIkludGVybmFsU3RhdGVzIiwiUExBWSIsIlBBVVNFIiwiUEFVU0VfT05fQlVGRkVSSU5HIiwiRU5EIiwiQlVGRkVSIiwiQlVGRkVSX1NUT1AiLCJLRUVQQUxJVkUiLCJIRUFSVEJFQVQiLCJDVVNUT00iLCJMT0FEIiwiRU5HQUdFIiwiU0VFS19TVEFSVCIsIkFEX1NLSVAiLCJDVEEiLCJFUlJPUiIsIlRSQU5TRkVSIiwiRFJNX0ZBSUxFRCIsIkRSTV9BUFBST1ZFRCIsIkRSTV9ERU5JRUQiLCJCSVRfUkFURSIsIlBMQVlCQUNLX1JBVEUiLCJWT0xVTUUiLCJXSU5ET1dfU1RBVEUiLCJBVURJTyIsIlZJREVPIiwiU1VCUyIsIkNETiIsIklETEUiLCJQTEFZQkFDS19OT1RfU1RBUlRFRCIsIlBMQVlJTkciLCJQQVVTRUQiLCJCVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLIiwiQlVGRkVSSU5HX0RVUklOR19QTEFZQkFDSyIsIkJVRkZFUklOR19EVVJJTkdfU0VFS0lORyIsIkJVRkZFUklOR19EVVJJTkdfUEFVU0UiLCJTRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyIsIlNFRUtJTkdfRFVSSU5HX1BMQVlCQUNLIiwiU0VFS0lOR19EVVJJTkdfQlVGRkVSSU5HIiwiU0VFS0lOR19EVVJJTkdfUEFVU0UiLCJQQVVTRURfRFVSSU5HX0JVRkZFUklORyIsIlNJTkdMRV9DTElQIiwiU0VHTUVOVEVEIiwiUkVEVUNFRCIsIlNUUkVBTUlOR0FOQUxZVElDU19WRVJTSU9OIiwiTU9ERUxfVkVSU0lPTiIsIkxPR19OQU1FU1BBQ0UiLCJERUZBVUxUX1BMQVlFUk5BTUUiLCJERUZBVUxUX0hFQVJUQkVBVF9JTlRFUlZBTCIsInBsYXlpbmd0aW1lIiwiaW50ZXJ2YWwiLCJERUZBVUxUX0tFRVBfQUxJVkVfSU5URVJWQUwiLCJERUZBVUxUX1BBVVNFRF9PTl9CVUZGRVJJTkdfSU5URVJWQUwiLCJDMV9WQUxVRSIsIkMxMF9WQUxVRSIsIk5TX0FQX0MxMk1fVkFMVUUiLCJOU19OQ19WQUxVRSIsIlBBR0VfTkFNRV9MQUJFTCIsIlJFU1RSSUNURURfVVJMX0xFTkdUSF9MSU1JVCIsIlVSTF9MRU5HVEhfTElNSVQiLCJUSFJPVFRMSU5HX0RFTEFZIiwiSU5URVJWQUxfTUVSR0VfVE9MRVJBTkNFIiwiU1lTVEVNX0NMT0NLX0pVTVBfREVURUNUSU9OX0RFRkFVTFRfSU5URVJWQUwiLCJTWVNURU1fQ0xPQ0tfSlVNUF9ERVRFQ1RJT05fTUlOSU1VTV9JTlRFUlZBTCIsIlNUQU5EQVJEX01FVEFEQVRBX0xBQkVMUyIsIkxBQkVMU19PUkRFUiIsIm5zX3N0X3RwIiwibnNfc3RfY24iLCJuc19zdF9za2QiLCJOYU4iLCJxIiwidyIsInUiLCJ5IiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkkiLCJKIiwiTiIsIk0iLCJRIiwiSyIsIkwiLCJPIiwiUCIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiJCIsIlIiLCJfIiwiYWEiLCJnZXRIYXNoIiwic2V0SGFzaCIsInNldFBsYXliYWNrSW50ZXJ2YWxNZXJnZVRvbGVyYW5jZSIsImdldFBsYXliYWNrSW50ZXJ2YWxNZXJnZVRvbGVyYW5jZSIsInNldEludGVybmFsTGFiZWwiLCJnZXRJbnRlcm5hbExhYmVsIiwiaGFzSW50ZXJuYWxMYWJlbCIsImdldExhYmVsIiwiaGFzTGFiZWwiLCJnZXRDbGlwTnVtYmVyIiwic2V0Q2xpcE51bWJlciIsImdldFBhcnROdW1iZXIiLCJjcmVhdGVMYWJlbHMiLCJuc19zdF9wdCIsImdldFBsYXliYWNrVGltZSIsIm5zX3N0X2RwdCIsIm5zX3N0X2lwdCIsIm5zX3N0X2V0IiwiZ2V0RWxhcHNlZFRpbWUiLCJuc19zdF9kZXQiLCJuc19zdF9idCIsImdldEJ1ZmZlcmluZ1RpbWUiLCJuc19zdF9kYnQiLCJuc19zdF9wbyIsImdldFNlZ21lbnRQbGF5YmFja0ludGVydmFscyIsImdldEFzc2V0UGxheWJhY2tJbnRlcnZhbHMiLCJuc19zdF91cGMiLCJuc19zdF9kdXBjIiwibnNfc3RfaXVwYyIsIm5zX3N0X2xwYyIsIm5zX3N0X2RscGMiLCJuc19zdF91cGEiLCJuc19zdF9kdXBhIiwibnNfc3RfaXVwYSIsIm5zX3N0X2xwYSIsIm5zX3N0X2RscGEiLCJuc19zdF9wYyIsImdldFBhdXNlcyIsIm5zX3N0X2RwYyIsIm5zX3N0X3NrYyIsImdldFNlZWtzIiwibnNfc3RfZHNrYyIsIm5zX3N0X2JjIiwiZ2V0QnVmZmVycyIsIm5zX3N0X2RiYyIsIm5zX3N0X3NrdCIsImdldFNlZWtpbmdUaW1lIiwibnNfc3RfZHNrdCIsIm5zX3N0X3NrYSIsImdldFNlZWtpbmdBbW91bnQiLCJuc19zdF9kc2thIiwibnNfc3Rfc3BjIiwibnNfc3RfYXBjIiwibnNfc3Rfc3EiLCJuc19zdF9hc3EiLCJuc19zdF9zYyIsInVwZGF0ZURlbHRhTGFiZWxzIiwic2V0U2Vla2luZ0RpcmVjdGlvbiIsInVwZGF0ZUluZGVwZW5kZW50TGFiZWxzIiwiZ2V0VmlkZW9UcmFjayIsInNldFZpZGVvVHJhY2siLCJnZXRBdWRpb1RyYWNrIiwic2V0QXVkaW9UcmFjayIsImdldFN1YnRpdGxlVHJhY2siLCJzZXRTdWJ0aXRsZVRyYWNrIiwiZ2V0Q0ROIiwic2V0Q0ROIiwic2V0QXNzZXRQbGF5YmFja0ludGVydmFscyIsImluY3JlbWVudFBhdXNlcyIsImluY3JlbWVudFNlZWtzIiwiaW5jcmVtZW50UGxheUNvdW50ZXIiLCJnZXRQbGF5Q291bnRlciIsInNldEJ1ZmZlcmluZ1RpbWUiLCJhZGRCdWZmZXJpbmdUaW1lIiwic2V0UGxheWJhY2tTdGFydFBvc2l0aW9uIiwiZ2V0UGxheWJhY2tTdGFydFBvc2l0aW9uIiwiYWRkSW50ZXJ2YWwiLCJzZXRFbGFwc2VkVGltZSIsImFkZEVsYXBzZWRUaW1lIiwiZ2V0RWxhcHNlZFRpbWVzdGFtcCIsInNldEVsYXBzZWRUaW1lc3RhbXAiLCJhZGRQbGF5YmFja1RpbWUiLCJzZXRQbGF5YmFja1RpbWUiLCJnZXRFeHBlY3RlZFBsYXliYWNrUG9zaXRpb24iLCJzZXRQbGF5YmFja1RpbWVPZmZzZXQiLCJnZXRQbGF5YmFja1RpbWVPZmZzZXQiLCJnZXRQbGF5YmFja1RpbWVzdGFtcCIsInNldFBsYXliYWNrVGltZXN0YW1wIiwic2V0UHJldmlvdXNQbGF5YmFja1RpbWUiLCJzZXRQcmV2aW91c1BsYXliYWNrVGltZXN0YW1wIiwiZ2V0QnVmZmVyaW5nVGltZXN0YW1wIiwic2V0QnVmZmVyaW5nVGltZXN0YW1wIiwic2V0UGF1c2VzIiwic2V0U2Vla3MiLCJzZXRTZWVraW5nIiwiaXNTZWVraW5nIiwic2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lIiwiaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUiLCJzZXRBc3NldFN0YXJ0ZWQiLCJpc0Fzc2V0U3RhcnRlZCIsInNldFBsYXliYWNrU3RhcnRlZCIsImlzUGxheWJhY2tTdGFydGVkIiwic2V0U2Vla2luZ1RpbWVzdGFtcCIsImdldFNlZWtpbmdUaW1lc3RhbXAiLCJhZGRTZWVraW5nVGltZSIsInNldFNlZWtpbmdUaW1lIiwic2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQiLCJnZXRTZWVraW5nVGltZUJlZm9yZUVuZCIsInNldFNlZWtTdGFydFBvc2l0aW9uIiwiZ2V0U2Vla1N0YXJ0UG9zaXRpb24iLCJzZXRTZWVraW5nQW1vdW50IiwiYWRkU2Vla2luZ0Ftb3VudCIsImdldFNlZWtpbmdEaXJlY3Rpb24iLCJyZXNldEFzc2V0TGlmZWN5Y2xlTGFiZWxzIiwiaW5jcmVtZW50U2VnbWVudFBsYXliYWNrQ291bnRlciIsImluY3JlbWVudEFzc2V0TG9hZENvdW50ZXIiLCJpbmNyZW1lbnRBc3NldFBsYXliYWNrQ291bnRlciIsImdldFByZXZpb3VzVW5pcXVlUGxheWJhY2tJbnRlcnZhbCIsInNldFByZXZpb3VzVW5pcXVlUGxheWJhY2tJbnRlcnZhbCIsImdldFByZXZpb3VzRXZlbnRJbmRlcGVuZGVudFVuaXF1ZVBsYXliYWNrSW50ZXJ2YWwiLCJzZXRQcmV2aW91c0V2ZW50SW5kZXBlbmRlbnRVbmlxdWVQbGF5YmFja0ludGVydmFsIiwic2V0UHJldmlvdXNMb25nZXN0UGxheWJhY2tJbnRlcnZhbCIsImdldFByZXZpb3VzTG9uZ2VzdFBsYXliYWNrSW50ZXJ2YWwiLCJyZXNldEFzc2V0UGxheWJhY2tJbnRlcnZhbHMiLCJzZXRTZWdtZW50UGxheWJhY2tDb3VudGVyIiwic2V0QXNzZXRMb2FkQ291bnRlciIsInNldEFzc2V0UGxheWJhY2tDb3VudGVyIiwic2V0TG93ZXN0UGFydE51bWJlclBsYXllZCIsImdldFNlZ21lbnRQbGF5YmFja0NvdW50ZXIiLCJnZXRBc3NldExvYWRDb3VudGVyIiwiZ2V0QXNzZXRQbGF5YmFja0NvdW50ZXIiLCJnZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkIiwiaW5jcmVtZW50QnVmZmVyQ291bnQiLCJnZXRQcmV2aW91c0J1ZmZlcmluZ1RpbWUiLCJzZXRQbGF5U2VxdWVuY2VDb3VudGVyIiwiaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlciIsImdldFBsYXlTZXF1ZW5jZUNvdW50ZXIiLCJpc1BsYXliYWNrU2Vzc2lvbkxvb3BpbmciLCJzZXRQbGF5YmFja1Nlc3Npb25Mb29waW5nIiwiZW5hYmxlQXV0b0NhbGN1bGF0ZVBvc2l0aW9ucyIsImlzQXV0b0NhbGN1bGF0ZVBvc2l0aW9uc0VuYWJsZWQiLCJyZXNldEFzc2V0IiwibnNfc3RfaWQiLCJoYXNoRXhpc3RzIiwic3RvcmVIYXNoIiwicmVtb3ZlSGFzaCIsInN0b3JlQXNzZXRQbGF5YmFja0NvdW50ZXJzIiwiY2xpcE51bWJlciIsInNlZ21lbnRQbGF5YmFja0NvdW50ZXIiLCJhc3NldExvYWRDb3VudGVyIiwiYXNzZXRQbGF5YmFja0NvdW50ZXIiLCJsb3dlc3RQYXJ0TnVtYmVyUGxheWVkIiwic2Vla2luZyIsInNlZWtpbmdUaW1lQmVmb3JlRW5kIiwic2Vla2luZ1N0YXJ0UG9zaXRpb24iLCJzZWdtZW50UGxheWJhY2tJbnRlcnZhbHMiLCJ2aWRlb1RyYWNrIiwiYXVkaW9UcmFjayIsInN1YnRpdGxlVHJhY2siLCJjZG4iLCJwbGF5U2VxdWVuY2VDb3VudGVyIiwicHJldmlvdXNVbmlxdWVQbGF5YmFja0ludGVydmFsIiwicHJldmlvdXNFdmVudEluZGVwZW5kZW50VW5pcXVlUGxheWJhY2tJbnRlcnZhbCIsInByZXZpb3VzTG9uZ2VzdFBsYXliYWNrSW50ZXJ2YWwiLCJnZXRTdG9yZWRBc3NldFJlZ2lzdGVycyIsImdldE1heENsaXBOdW1iZXIiLCJzdG9yZUNsaXBOdW1iZXIiLCJhZGRJbnRlcm5hbEVycm9yRmxhZyIsIm5zX3N0X3BhIiwibnNfc3RfcHAiLCJuc19zdF9zcCIsIm5zX3N0X2JwIiwibnNfc3RfcGIiLCJuc19zdF9wcGMiLCJuc19zdF9wc3EiLCJuc19zdF9pZSIsImlzUGxheWJhY2tTZXNzaW9uU3RhcnRlZCIsInNldFBsYXliYWNrU2Vzc2lvblN0YXJ0ZWQiLCJnZXRQbGF5YmFja0NvdW50ZXIiLCJpbmNyZW1lbnRQbGF5YmFja0NvdW50ZXIiLCJzZXRGaXJzdEV2ZW50U2VudCIsImdldFBsYXliYWNrU2Vzc2lvbklEIiwiZ2V0TG9nZ2luZyIsImdldFN0YXRlTWFjaGluZSIsImdldEN1cnJlbnRTdGF0ZSIsImdldFN0YUNvcmUiLCJuZXdFdmVudCIsInJlc2V0UGxheWJhY2tTZXNzaW9uIiwiZ2V0TGl2ZUVuZHBvaW50VVJMIiwiZ2V0QXBwQ29yZSIsImlzUHJvcGVybHlJbml0aWFsaXplZCIsImdldEV4cG9ydHMiLCJldCIsImdldE1lYXN1cmVtZW50RGlzcGF0Y2hlciIsInNlbmQiLCJISURERU4iLCJhbSIsIm5ld0FwcGxpY2F0aW9uTWVhc3VyZW1lbnQiLCJnZXRRdWV1ZSIsIm9mZmVyIiwiZ2V0UGxhdGZvcm1BUEkiLCJwcmVwYXJlVXJsIiwiZXZlbnRMYWJlbHMiLCJldmVudFR5cGUiLCJpbmNyZW1lbnRFdmVudENvdW50ZXIiLCJhZGRNZWFzdXJlbWVudExpc3RlbmVyIiwicmVtb3ZlTWVhc3VyZW1lbnRMaXN0ZW5lciIsImdldEV2ZW50Q291bnRlciIsInNldEV2ZW50Q291bnRlciIsImdldE1lYXN1cmVtZW50U25hcHNob3QiLCJuc19zdF9oYyIsImdldEhlYXJ0YmVhdCIsImdldENvdW50IiwiZ2V0RXZlbnRNYW5hZ2VyIiwic2V0SW50ZXJ2YWxzIiwiZ2V0SW50ZXJ2YWwiLCJnZXRJbnRlcnZhbHMiLCJwYXVzZSIsIm5ld1BzZXVkb0V2ZW50Iiwic3RvcCIsImV2ZW50VHlwZVRvU3RhdGUiLCJnZXRQcmV2aW91c1N0YXRlIiwiZ2V0TGFzdFN0YXRlQ2hhbmdlVGltZXN0YW1wIiwib25TZWVrU3RhcnRXaGVuUGF1c2VkT3JCdWZmZXJpbmdEdXJpbmdQYXVzZSIsIm9uQnVmZmVyV2hlblNlZWtpbmdPclBhdXNlZCIsIm9uUGxheVdoZW5TZWVraW5nRHVyaW5nQnVmZmVyaW5nT3JTZWVraW5nRHVyaW5nUGF1c2UiLCJnZXRLZWVwQWxpdmUiLCJvbkJ1ZmZlclN0b3BXaGVuQnVmZmVyaW5nRHVyaW5nU2Vla2luZ09yQnVmZmVyaW5nRHVyaW5nUGF1c2UiLCJvblBhdXNlV2hlblNlZWtpbmdEdXJpbmdQbGF5YmFja09yU2Vla2luZ0R1cmluZ1BhdXNlIiwib25FbmRPckFkU2tpcFdoZW5TZWVraW5nRHVyaW5nQnVmZmVyaW5nT3JTZWVraW5nRHVyaW5nUGF1c2UiLCJyZXNldEhlYXJ0YmVhdCIsIm5zX3N0X3BlIiwib25CdWZmZXJTdG9wV2hlblNlZWtpbmdEdXJpbmdCdWZmZXJpbmdPclNlZWtpbmdEdXJpbmdQYXVzZSIsIm9uQnVmZmVyU3RvcE9yT25QbGF5V2hlbkJ1ZmZlcmluZ0R1cmluZ1BsYXliYWNrIiwic3RvcFBhdXNlZE9uQnVmZmVyaW5nVGltZXIiLCJvbkVuZE9yQWRTa2lwIiwib25CdWZmZXJTdG9wIiwib25TZWVrU3RhcnQiLCJvblBhdXNlIiwib25QbGF5IiwiaXNMb2FkaW5nVGltZVNlbnQiLCJuc19zdF9sdCIsImdldExvYWRUaW1lT2Zmc2V0IiwiZ2V0SW5pdFRpbWVzdGFtcCIsInNldExvYWRpbmdUaW1lU2VudCIsIm9uRW5kQW5kU2tpcCIsIm9uUGF1c2VPbkJ1ZmZlcmluZyIsIm9uQnVmZmVyIiwiZXZlbnRUaW1lc3RhbXAiLCJpc1BhdXNlT25CdWZmZXJpbmdFbmFibGVkIiwic3RhcnRQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyIiwiZWEiLCJmYSIsInNldEFwcENvcmUiLCJwdWJsaXNoZXJJZCIsInNlY3VyZSIsInNldExpdmVFbmRwb2ludFVSTCIsInNldEtlZXBBbGl2ZSIsInNldEhlYXJ0YmVhdCIsInNldEV2ZW50TWFuYWdlciIsInNldFN0YXRlTWFjaGluZSIsInNldExvZ2dpbmciLCJzZXRQbGF5YmFja1Nlc3Npb24iLCJzeXN0ZW1DbG9ja0p1bXBEZXRlY3Rpb24iLCJlbmFibGVTeXN0ZW1DbG9ja0p1bXBzRGV0ZWN0aW9uIiwic3lzdGVtQ2xvY2tKdW1wRGV0ZWN0aW9uSW50ZXJ2YWwiLCJuc19zdF91aSIsImthIiwidW5lc2NhcGUiLCJsYSIsIlVSTCIsImJhIiwiY2EiLCJkYSIsImdhIiwiaGEiLCJpYSIsImphIiwiZ2V0Q29uZmlndXJhdGlvbiIsIm5zX3N0X3ViIiwibnNfc3Rfc3YiLCJuc19zdF9zbXYiLCJuc190eXBlIiwibnNfc3Rfa2kiLCJzdG9wRGVsYXllZFRyYW5zaXRpb25UaW1lciIsImlzVGhyb3R0bGluZ0VuYWJsZWQiLCJnZXRUaHJvdHRsaW5nRGVsYXkiLCJuc19zdF9lciIsIm5zX3N0X3JwIiwibmV3U3RhdGUiLCJnZXRTdGF0ZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJnZXRBcHBDb250ZXh0IiwiZ2V0U2FsdCIsImdldFBpeGVsVVJMIiwic2V0VGhyb3R0bGluZ0RlbGF5Iiwic2V0VGhyb3R0bGluZ0VuYWJsZWQiLCJzZXRMb2FkVGltZU9mZnNldCIsInNldFBhdXNlT25CdWZmZXJpbmdJbnRlcnZhbCIsImdldFBhdXNlT25CdWZmZXJpbmdJbnRlcnZhbCIsInNldFBhdXNlT25CdWZmZXJpbmdFbmFibGVkIiwibnNfcCIsIm5zX3BpeGVsVXJsIiwiZ2V0U3RhU00iLCJub3RpZnlFbmQiLCJzZXRLZWVwQWxpdmVJbnRlcnZhbCIsImdldEtlZXBBbGl2ZUludGVydmFsIiwic2V0SGVhcnRiZWF0SW50ZXJ2YWxzIiwibm90aWZ5UGxheSIsIm5vdGlmeVBhdXNlIiwibm90aWZ5QnVmZmVyU3RhcnQiLCJub3RpZnlCdWZmZXJTdG9wIiwibm90aWZ5TG9hZCIsIm5vdGlmeUVuZ2FnZSIsIm5vdGlmeVNlZWtTdGFydCIsIm5vdGlmeVNraXBBZCIsIm5vdGlmeUNhbGxUb0FjdGlvbiIsIm5vdGlmeUVycm9yIiwibm90aWZ5VHJhbnNmZXJQbGF5YmFjayIsIm5vdGlmeURybUZhaWwiLCJub3RpZnlEcm1BcHByb3ZlIiwibm90aWZ5RHJtRGVueSIsIm5vdGlmeUNoYW5nZUJpdHJhdGUiLCJub3RpZnlDaGFuZ2VQbGF5YmFja1JhdGUiLCJuc19zdF9ydCIsIm5vdGlmeUNoYW5nZVZvbHVtZSIsIm5vdGlmeUNoYW5nZVdpbmRvd1N0YXRlIiwibm90aWZ5Q2hhbmdlQXVkaW9UcmFjayIsIm5zX3N0X2F0Iiwibm90aWZ5Q2hhbmdlVmlkZW9UcmFjayIsIm5zX3N0X3Z0Iiwibm90aWZ5Q2hhbmdlU3VidGl0bGVUcmFjayIsIm5zX3N0X3R0Iiwibm90aWZ5Q2hhbmdlQ2RuIiwibnNfc3RfY2RuIiwibm90aWZ5Q3VzdG9tRXZlbnQiLCJzZXRFeGl0RW5kRXZlbnRFbmFibGVkIiwiaXNFeGl0RW5kRXZlbnRFbmFibGVkIiwiX2dldExvZ0hpc3RvcnkiLCJQbGF5ZXJFdmVudHMiLCJJbXBsZW1lbnRhdGlvblR5cGUiLCJDb25zdGFudHMiLCJSZWR1Y2VkUmVxdWlyZW1lbnRzU3RyZWFtaW5nQW5hbHl0aWNzIiwiTG9uZ0Zvcm1PbkRlbWFuZCIsIlNob3J0Rm9ybU9uRGVtYW5kIiwiTGl2ZSIsIlVzZXJHZW5lcmF0ZWRMb25nRm9ybU9uRGVtYW5kIiwiVXNlckdlbmVyYXRlZFNob3J0Rm9ybU9uRGVtYW5kIiwiVXNlckdlbmVyYXRlZExpdmUiLCJCdW1wZXIiLCJPdGhlciIsIkxpbmVhck9uRGVtYW5kUHJlUm9sbCIsIkxpbmVhck9uRGVtYW5kTWlkUm9sbCIsIkxpbmVhck9uRGVtYW5kUG9zdFJvbGwiLCJMaW5lYXJMaXZlIiwiQnJhbmRlZE9uRGVtYW5kUHJlUm9sbCIsIkJyYW5kZWRPbkRlbWFuZE1pZFJvbGwiLCJCcmFuZGVkT25EZW1hbmRQb3N0Um9sbCIsIkJyYW5kZWRPbkRlbWFuZENvbnRlbnQiLCJCcmFuZGVkT25EZW1hbmRMaXZlIiwiY3VzdG9tZXJDMiIsIm5zX3N0X2FuIiwiTm9uZSIsIkF1ZGlvQ29udGVudCIsIlZpZGVvQ29udGVudCIsInBsYXlWaWRlb0FkdmVydGlzZW1lbnQiLCJwbGF5QXVkaW9BZHZlcnRpc2VtZW50IiwicGxheVZpZGVvQ29udGVudFBhcnQiLCJwbGF5QXVkaW9Db250ZW50UGFydCIsIkNvbnRlbnRUeXBlIiwiQWRUeXBlIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDdENBLG9CQUFBQSxDQUFRLENBQVI7O0FBRUEsS0FBSUMsWUFBWSxtQkFBQUQsQ0FBUSxHQUFSLENBQWhCO0FBQ0EsS0FBSUUsT0FBTyxtQkFBQUYsQ0FB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Q0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUSxzQ0FBc0M7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUMzQkE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFDOzs7Ozs7O0FDVEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBQzs7Ozs7OztBQ2REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVSxXQUFXO0FBQ3JCO0FBQ0E7QUFDQSxFQUFDOzs7Ozs7O0FDckJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFrQjtBQUNsQixFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFXLE9BQU87QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0EsSUFBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQVksT0FBTztBQUNuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUc7QUFDSDs7Ozs7Ozs7QUN4TEE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQSxFQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFVBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDRCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw2QkFBNEIsVUFBVTs7Ozs7Ozs7QUN0THRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtB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QyxlQUFHcUIsQ0FBSCxFQUFLO0FBQUNxL0MsZUFBRXhILE9BQUYsQ0FBVSxzQkFBVixFQUFpQ3BtQyxDQUFqQyxFQUFtQzlTLENBQW5DLEVBQXNDLElBQUl3SCxJQUFFLEVBQUM0MEIsVUFBUyxJQUFWLEVBQU4sQ0FBc0JwOEIsSUFBRXdILEVBQUU0MEIsUUFBRixHQUFXLE9BQUtwOEIsQ0FBbEIsR0FBb0IwZ0QsRUFBRW5tRCxJQUFGLENBQU8seUZBQVAsQ0FBcEIsRUFBc0h5RixLQUFHZ1AsRUFBRW1wRCxJQUFMLElBQVduNEQsS0FBR2dQLEVBQUVzcEQsaUJBQWhCLEtBQW9DOXdELEVBQUVzMUIsUUFBRixHQUFXLEdBQS9DLENBQXRILEVBQTBLaHFCLEtBQUdPLEVBQUVvakMsTUFBRixDQUFTanZDLENBQVQsRUFBV3NMLENBQVgsQ0FBN0ssRUFBMkx4RCxFQUFFOUgsQ0FBRixFQUFJbTVDLEVBQUUwWSxZQUFOLENBQTNMO0FBQStNO0FBQUMsVUFBdHRDLEVBQXV0Q2pKLE1BQUssZ0JBQVU7QUFBQy91RCxpQkFBSXEvQyxFQUFFeEgsT0FBRixDQUFVLE1BQVYsR0FBa0I3M0MsRUFBRTAwRCxXQUFGLEVBQXRCO0FBQXVDLFVBQTl3QyxFQUFkLEdBQSt4Qy9tQyxHQUEveEM7QUFBbXlDLE1BQWhnRyxDQUFpZ0csT0FBT0EsRUFBRTJxQyxXQUFGLEdBQWMzcUQsQ0FBZCxFQUFnQmdnQixFQUFFNHFDLE1BQUYsR0FBU3B5RCxDQUF6QixFQUEyQnduQixDQUFsQztBQUFvQyxJQUFoakcsRUFId3NILEVBR3JwQmxjLENBSDhvQjtBQUc1b0IsRUFIaG5SLENBQUQsQzs7Ozs7Ozs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJiYmNkb3Rjb20uZGV2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNTQ0Yzg2ZDg5OGE3NDUxZWE4NzgiLCJyZXF1aXJlKCdwb2x5ZmlsbCcpO1xuXG52YXIgYm9vdHN0cmFwID0gcmVxdWlyZSgnYm9vdHN0cmFwJyk7XG52YXIgaW5pdCA9IHJlcXVpcmUoJ2luaXQnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBhZHZlcnRzID0gcmVxdWlyZSgnYWR2ZXJ0cycpO1xudmFyIGFuYWx5dGljcyA9IHJlcXVpcmUoJ2FuYWx5dGljcycpO1xudmFyIGFuYWx5dGljc0hlbHBlciA9IHJlcXVpcmUoJ2FuYWx5dGljcy9oZWxwZXInKTtcbnZhciBVdGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgc2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIGxvY2FsZSA9IHJlcXVpcmUoJ2xvY2FsZScpO1xudmFyIGN1cnJlbmN5UHJvdmlkZXJzID0gcmVxdWlyZSgnY3VycmVuY3lQcm92aWRlcnMnKTtcbnZhciBhZGRMb2FkRXZlbnQgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciBhcGkgPSByZXF1aXJlKCdhcGknKTtcbnZhciBvYmplY3RzID0gcmVxdWlyZSgnb2JqZWN0cycpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc2VzJyk7XG52YXIgcHVic3ViID0gcmVxdWlyZSgncHVic3ViJyk7XG52YXIgbG90YW1lID0gcmVxdWlyZSgnbG90YW1lJyk7XG52YXIgUHJlZGljYXRlID0gcmVxdWlyZSgncHJlZGljYXRlJyk7XG52YXIgU3RhdHMgPSByZXF1aXJlKCdzdGF0cycpO1xudmFyIFN1cnZleSA9IHJlcXVpcmUoJ3N1cnZleScpO1xudmFyIGxvZ2dlciA9IHJlcXVpcmUoJ2xvZ2dlcicpO1xudmFyIHN0aWNreUFkdmVydCA9IHJlcXVpcmUoJ3N0aWNreUFkdmVydCcpO1xudmFyIGlkY3RhID0gcmVxdWlyZSgnaWRjdGEvaWRjdGEnKTtcblxuLy8gZ3JyIHdlYnBhY2sgYW5kIGNvbXNjb3JlLnN0cmVhbWluZy5taW4gbW9kdWxlIGltcGxtZW50YXRpb24gZG9uJ3Qgd29yayB0b2dldGhlclxudmFyIGNvbXNjb3JlU3RyZWFtaW5nID0gcmVxdWlyZShcImltcG9ydHM/ZGVmaW5lPT5mYWxzZSEuLi92ZW5kb3IvY29tc2NvcmUvY29tc2NvcmUuc3RyZWFtaW5nLm1pblwiKTtcblxudmFyIGxvZyA9IGxvZ2dlcignaW5kZXgnKTtcbmxvZy5pbmZvKCdVc2luZyBXZWJwYWNrJyk7XG5cbk9iamVjdC5hc3NpZ24oXG4gICAgd2luZG93LmJiY2RvdGNvbSxcbiAgICB7XG4gICAgICAgIG9iamVjdHM6IG9iamVjdHMsXG4gICAgICAgIGRvbUxvYWRlZDogZmFsc2UsXG4gICAgICAgIGFkZExvYWRFdmVudDogYWRkTG9hZEV2ZW50LFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgY3VycmVuY3lQcm92aWRlcnM6IGN1cnJlbmN5UHJvdmlkZXJzLFxuICAgICAgICB1dGlsczogVXRpbHMsXG4gICAgICAgIGFkdmVydHM6IGFkdmVydHMsXG4gICAgICAgIGFuYWx5dGljczogYW5hbHl0aWNzLFxuICAgICAgICBhbmFseXRpY3NIZWxwZXI6IGFuYWx5dGljc0hlbHBlcixcbiAgICAgICAgc2VjdGlvbnM6IHNlY3Rpb25zLFxuICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgbG90YW1lOiBsb3RhbWUsXG4gICAgICAgIHB1YnN1YjogcHVic3ViLFxuICAgICAgICBQcmVkaWNhdGU6IFByZWRpY2F0ZSxcbiAgICAgICAgc3RhdHM6IFN0YXRzLFxuICAgICAgICBzdXJ2ZXk6IFN1cnZleSxcbiAgICAgICAgTG9nZ2VyOiBsb2dnZXIsXG4gICAgICAgIHN0aWNreUFkdmVydDogc3RpY2t5QWR2ZXJ0LFxuICAgICAgICBpZGN0YTogaWRjdGFcbiAgICB9XG4pO1xuXG5ib290c3RyYXAoKTtcblxud2luZG93LmJiY2RvdGNvbS5pbml0ID0gaW5pdC5iaW5kKHdpbmRvdy5iYmNkb3Rjb20pO1xuXG5PYmplY3QuYXNzaWduKHdpbmRvdy5iYmNkb3Rjb20sIGFwaSk7XG5cbm1vZHVsZS5leHBvcnRzID0gd2luZG93LmJiY2RvdGNvbTtcbndpbmRvdy5uc18gPSBjb21zY29yZVN0cmVhbWluZztcbndpbmRvdy5nb29nbGVfYWRfcmVxdWVzdF9kb25lID0gd2luZG93LmJiY2RvdGNvbS5hZHZlcnRzLmFkc2Vuc2VSZW5kZXJlci5nb29nbGVfYWRfcmVxdWVzdF9kb25lO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvd2VicGFjay1lbnRyeS5qcyIsInJlcXVpcmUoJ2NvcmUtanMvZXM1Jyk7XG5yZXF1aXJlKCdjb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCdjb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJ2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJ2NvcmUtanMvZXM2L3N5bWJvbCcpO1xucmVxdWlyZSgnY29yZS1qcy9mbi9zeW1ib2wvaXRlcmF0b3InKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9wb2x5ZmlsbC5qcyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9lczUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuMTEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanNcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgU1JDID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxuICBtb2RlOiByZXF1aXJlKCcuL19saWJyYXJ5JykgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAyMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHBzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19jb2YuanNcbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLWxlbmd0aC5qc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2VudW0tYnVnLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faHRtbC5qc1xuLy8gbW9kdWxlIGlkID0gMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qc1xuLy8gbW9kdWxlIGlkID0gNTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzXG4vLyBtb2R1bGUgaWQgPSA1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHsgYmluZDogcmVxdWlyZSgnLi9fYmluZCcpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDYwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qc1xuLy8gbW9kdWxlIGlkID0gNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XG4gICAgdmFyIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuKTtcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xuICAgIHZhciBjbG9uZWQgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zbGljZS5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvcnQuanNcbi8vIG1vZHVsZSBpZCA9IDY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbi8vIG1vZHVsZSBpZCA9IDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL193a3MuanNcbi8vIG1vZHVsZSBpZCA9IDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNvbWUuanNcbi8vIG1vZHVsZSBpZCA9IDc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5LmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qc1xuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzXG4vLyBtb2R1bGUgaWQgPSA4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzXG4vLyBtb2R1bGUgaWQgPSA4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qc1xuLy8gbW9kdWxlIGlkID0gODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qc1xuLy8gbW9kdWxlIGlkID0gODdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xudmFyICR0b0lTT1N0cmluZyA9IERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nO1xuXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XG4gIGlmICghaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSkgdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIHZhciBkID0gdGhpcztcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG59IDogJHRvSVNPU3RyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzXG4vLyBtb2R1bGUgaWQgPSA5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzXG4vLyBtb2R1bGUgaWQgPSA5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0LmpzXG4vLyBtb2R1bGUgaWQgPSA5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanNcbi8vIG1vZHVsZSBpZCA9IDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanNcbi8vIG1vZHVsZSBpZCA9IDEwMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGlzRW51bS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qc1xuLy8gbW9kdWxlIGlkID0gMTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDEwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanNcbi8vIG1vZHVsZSBpZCA9IDExMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMTEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXJhdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMTE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gMTIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qc1xuLy8gbW9kdWxlIGlkID0gMTIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL2VzNi9zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRHT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nICYmICEhJEdPUFMuZjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgJEdPUFMuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSAkZmFpbHMoZnVuY3Rpb24gKCkgeyAkR09QUy5mKDEpOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBGQUlMU19PTl9QUklNSVRJVkVTLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiAkR09QUy5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDEzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL2ZuL3N5bWJvbC9pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIga2luZCA9IHRoaXMuX2s7XG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBVdGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG5cbnZhciBCb290c3RyYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgVXRpbHMuYWRkSHRtbFRhZ0NsYXNzKCdiYmNkb3Rjb20nKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQm9vdHN0cmFwO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2Jvb3RzdHJhcC5qcyIsIi8qanNsaW50IGJpdHdpc2U6IHRydWUgKi9cbi8qXG4gKiBBTFdBWVMgUkVRVUlSRUQgSU5URVJOQVRJT05BTCBmb3IgYW5hbHl0aWNzLmpzLCBpcnJlc3BlY3RpdmUgb2YgYWRzIGJlaW5nIGVuYWJsZWRcbiAqL1xuXG5cbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgndXRpbHMnKTtcblxudmFyIHRyYWNrQ29va2llID0gW107ICAvLyBoYWNrIHRvIG1ha2UgdW5pdCB0ZXN0aW5nIGVhc2llciBhcyBubyBlYXN5IHdheSB0byBESSBpbiBvdGhlciBvYmplY3RzIHlldCA6KFxuXG5cbi8qKlxuICogU3RhbmRhcmQgbWV0aG9kcyB0byBjaGVjayB0aGUgY2xhc3NlcyBvbiBhbiBlbGVtZW50XG4gKiBAcGFyYW0gRE9NRWxlbWVudCBlbGVtZW50XG4gKiBAcGFyYW0gc3RyaW5nIGNsYXNzTmFtZVxuICogQHJldHVybiBib29sO1xuICovXG52YXIgaGFzQXRycmlidXRlID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cmlidXRlS2V5LCBhdHRyaWJ1dGVWYWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZWxlbWVudCAhPT0gJycgJiYgZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgYXR0cmlidXRlVmFsdWUgKyAnKFxcXFxzfCQpJyk7XG4gICAgICAgIHJldHVybiBlbGVtZW50W2F0dHJpYnV0ZUtleV0ubWF0Y2gocmVnZXgpO1xuICAgIH1cbn07XG5cbnZhciBoYXNUYWdJZCA9IGZ1bmN0aW9uKHRhZ05hbWUsIGlkTmFtZSkge1xuICAgIHZhciBhdHRyaWJ1dGVNYXRjaCxcbiAgICAgICAgdGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSlbMF07XG4gICAgaWYgKHR5cGVvZiB0YWcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHRhZyAhPT0gJycgJiZcbiAgICAgICAgdGFnICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBpZE5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGF0dHJpYnV0ZU1hdGNoID0gaGFzQXRycmlidXRlKHRhZywgJ2lkJywgaWROYW1lKTtcbiAgICAgICAgcmV0dXJuIChhdHRyaWJ1dGVNYXRjaCAhPT0gbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogR2l2ZW4gYSBET00gbm9kZSwgc2VhcmNoIHVwIHRoZSB0cmVlIGFuZCBmaW5kIHRoZSBuZWFyZXN0IGFuY2VzdG9yXG4gKiBub2RlIHdoaWNoIHBhc3NlcyB0aGUgbWF0Y2hlciBmdW5jdGlvbi4gVGhlIG1hdGNoZXIgZnVuY3Rpb24gc2hvdWxkXG4gKiByZXR1cm4gemVybywgYSBuZWdhdGl2ZSB2YWx1ZSBvciBhIHBvc2l0aXZlIHZhbHVlLlxuICogIC0gemVybzogbWF0Y2ggZmFpbGVkLCBrZWVwIHNlYXJjaGluZ1xuICogIC0gbmVnYXRpdmU6IG1hdGNoIGZhaWxlZCwgc3RvcCBzZWFyY2hpbmdcbiAqICAtIHBvc2l0aXZlOiBtYXRjaCBzdWNjZWVkZWQsIHJldHVybiBjdXJyZW50IG5vZGVcbiAqXG4gKiBAcGFyYW0gbm9kZSBUaGUgc3RhcnRpbmcgRE9NIG5vZGVcbiAqIEBwYXJhbSBtYXRjaGVyIFRoZSBtYXRjaGVyIGZ1bmN0aW9uLCBzZWUgYWJvdmUgZm9yIHJldHVybiB2YWx1ZXNcbiAqIEBwYXJhbSBbaW5jbHVkZVNlbGZdIFdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgY3VycmVudCBub2RlIGluIHNlYXJjaFxuICogQHBhcmFtIFtsaW1pdF0gVGhlIHNlYXJjaCBsaW1pdCAoZGVmYXVsdHMgdG8gMTApXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xudmFyIHNlYXJjaFRyZWVVcHdhcmRzID0gZnVuY3Rpb24gKG5vZGUsIG1hdGNoZXIsIGluY2x1ZGVTZWxmLCBsaW1pdCkge1xuICAgIHZhciBjdXJyZW50LFxuICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgaXRlcmF0aW9uID0gMDtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgbGltaXQgPSB0eXBlb2YgbGltaXQgPT09ICdudW1iZXInID8gbGltaXQgOiAxMDtcbiAgICBpbmNsdWRlU2VsZiA9IGluY2x1ZGVTZWxmID09PSB0cnVlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIGN1cnJlbnQgPSBpbmNsdWRlU2VsZiA/IG5vZGUgOiBub2RlLnBhcmVudE5vZGU7XG5cbiAgICB3aGlsZSAoY3VycmVudCAmJiBpdGVyYXRpb24gPCBsaW1pdCkge1xuICAgICAgICB2YXIgbWF0Y2hlclJlc3VsdCA9IG1hdGNoZXIoY3VycmVudCk7XG4gICAgICAgIGlmIChtYXRjaGVyUmVzdWx0ID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3VycmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXJSZXN1bHQgPCAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgICAgICBpdGVyYXRpb24rKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBnZXRDb29raWVEb21haW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5pbmRleE9mKCcuYmJjLmNvbScpICE9PSAtMVxuICAgICAgICA/ICdiYmMuY29tJ1xuICAgICAgICA6ICh3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuaW5kZXhPZignLmJiYy5jby51aycpICE9PSAtMVxuICAgICAgICA/ICdiYmMuY28udWsnXG4gICAgICAgIDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkZWJvdW5jZTogZnVuY3Rpb24oZnVuYywgd2FpdCwgaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgeyBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gICAgICAgICAgICBpZiAoY2FsbE5vdykgeyBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpOyB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhcHBlbmRMaW5rVG9IZWFkOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sXG4gICAgICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuXG4gICAgICAgIGxpbmsudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XG5cbiAgICAgICAgaGVhZC5hcHBlbmRDaGlsZChsaW5rKTtcbiAgICB9LFxuICAgIGNhcGl0YWxpemU6IGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciBpLCBuLCBwaWVjZXMgPSBzdHJpbmcuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBpZWNlcy5sZW5ndGg7IGkrKyApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaWYgKHBpZWNlc1tpXS5sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG4gPSBwaWVjZXNbaV0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHBpZWNlc1tpXSA9IG4gKyBwaWVjZXNbaV0uc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwaWVjZXMuam9pbihcIiBcIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgcmVxdWlyZSgnbG9nZ2VyJylcbiAgICAgKi9cbiAgICBsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nLndhcm4oJ3V0aWxzLmxvZyBpcyBkZXByZWNhdGVkJywgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGFkZFRhZ0NsYXNzOiBmdW5jdGlvbih0YWcsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gJycgJiZcbiAgICAgICAgICAgIHRhZyAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgY2xhc3NOYW1lICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKCFoYXNBdHJyaWJ1dGUodGFnLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRhZy5jbGFzc05hbWUgPSB0YWcuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhZy5jbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZVRhZ0NsYXNzOiBmdW5jdGlvbih0YWcsIGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgcmVneDtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWcgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0YWcgIT09ICcnICYmXG4gICAgICAgICAgICB0YWcgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjbGFzc05hbWUgPT09ICdzdHJpbmcnICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIGlmIChoYXNBdHJyaWJ1dGUodGFnLCAnY2xhc3NOYW1lJywgY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJlZ3ggPSBSZWdFeHAoY2xhc3NOYW1lKydcXFxcYicpO1xuICAgICAgICAgICAgICAgIHRhZy5jbGFzc05hbWUgPSB0YWcuY2xhc3NOYW1lLnJlcGxhY2UocmVneCwgJycpLnJlcGxhY2UoJyAgJywgJyAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YWcuY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRCb2R5VGFnQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVGFnQ2xhc3ModGFnLCBjbGFzc05hbWUpO1xuICAgIH0sXG4gICAgcmVtb3ZlQm9keVRhZ0NsYXNzOiBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgdmFyIHRhZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZVRhZ0NsYXNzKHRhZywgY2xhc3NOYW1lKTtcbiAgICB9LFxuICAgIGFkZEh0bWxUYWdDbGFzczogZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgIHZhciB0YWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaHRtbCcpWzBdO1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRUYWdDbGFzcyh0YWcsIGNsYXNzTmFtZSk7XG4gICAgfSxcbiAgICByZW1vdmVIdG1sVGFnQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgdGFnID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2h0bWwnKVswXTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlVGFnQ2xhc3ModGFnLCBjbGFzc05hbWUpO1xuICAgIH0sXG4gICAgaGFzQm9keVRhZ0lkOiBmdW5jdGlvbihpZE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGhhc1RhZ0lkKCdib2R5JywgaWROYW1lKTtcbiAgICB9LFxuXG4gICAgZ2V0VXJpUGFyYW1CeU5hbWU6IGZ1bmN0aW9uKG5hbWUsIHNhbml0aXplUmVzdWx0KSB7XG4gICAgICAgIHNhbml0aXplUmVzdWx0ID0gc2FuaXRpemVSZXN1bHQgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgXCJcXFxcW1wiKS5yZXBsYWNlKC9bXFxdXS8sIFwiXFxcXF1cIik7XG4gICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbXFxcXD8mXVwiICsgbmFtZSArIFwiPShbXiYjXSopXCIpLFxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWMoYmJjZG90Y29tLmNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLnNlYXJjaCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2FuaXRpemVSZXN1bHQgPyByZXN1bHRzWzFdLnJlcGxhY2UoL1teYS16QS1aMC05XFwtX10vZywgJycpIDogcmVzdWx0c1sxXSk7XG4gICAgfSxcbiAgICBpc0RlYnVnOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICgvWz98Jl1hZHMtZGVidWcvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCdhZHMtZGVidWc9JykgIT09IC0xKTtcbiAgICB9LFxuICAgIGlzRGVidWdUcmFjZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoL1s/fCZdYWRzLWRlYnVnLXRyYWNlLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB8fCBkb2N1bWVudC5jb29raWUuaW5kZXhPZignYWRzLWRlYnVnLXRyYWNlPScpICE9PSAtMSk7XG4gICAgfSxcbiAgICBnZXRFbnY6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSBiYmNkb3Rjb20uY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCk7XG4gICAgICAgIGlmICgvW2Etel0rXFwtdGVzdFswLTldK1xcLmJiYy4qXFwuY29tLy50ZXN0KGxvY2F0aW9uLmhyZWYpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3Rlc3QnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXRjaGVzID0gbG9jYXRpb24uaHJlZi5tYXRjaCgvKHNhbmRib3h8aW50fHRlc3R8c3RhZ2UpKC5kZXYpKi5iYmMuY28qLyk7XG4gICAgICAgIHJldHVybiBtYXRjaGVzID09PSBudWxsID8gJ2xpdmUnIDogbWF0Y2hlc1sxXTtcbiAgICB9LFxuICAgIGlzTGl2ZUVudjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVudigpID09PSAnbGl2ZSc7XG4gICAgfSxcbiAgICBpc1Rlc3RFbnY6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFbnYoKSAhPT0gJ2xpdmUnICYmIHRoaXMuZ2V0RW52KCkgIT09ICdzdGFnZSc7XG4gICAgfSxcbiAgICBzdGFja1RyYWNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcigpO1xuICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coZXJyLnN0YWNrKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIGVnIGdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ25hdmlnYXRpb24nKTtcbiAgICAgKiBlZyBnZXRQYXJlbnRFbGVtZW50QnlDbGFzcyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vJyksICduYXZpZ2F0aW9uJywgMTApO1xuICAgICAqIGVnIGdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ25hdmlnYXRpb24nLCAxMCwgdHJ1ZSk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0gb2JqZWN0IG5vZGUgRWxlbWVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0gc3RyaW5nIGNsYXNzTmFtZSBDbGFzcyBuYW1lIGxvb2tpbmcgZm9yIGluIHBhcmVudCBlbGVtZW50c1xuICAgICAqIEBwYXJhbSBpbnRlZ2VyIGRlcHRoIEhvdyBmYXIgdXAgdGhlIERPTSB0cmVlIHNob3VsZCB3ZSBzZWFyY2guICBTbWFsbGVyIG51bWJlciBpcyBtb3JlIHBlcmZvcm1hbnQuXG4gICAgICogQHBhcmFtIGJvb2xlYW4gaWdub3JlQm9keSBXaGV0aGVyIHRoaXMgdXRpbGl0eSBzaG91bGQgY3Jhd2wgdXAgdG8gPGJvZHk+IGFuZCA8aHRtbD4gb3Igc3RvcCBiZWxvdyA8Ym9keT5cbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gUmV0dXJucyBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0UGFyZW50RWxlbWVudEJ5Q2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzTmFtZSwgZGVwdGgsIGlnbm9yZUJvZHkpIHtcbiAgICAgICAgaWdub3JlQm9keSA9IHR5cGVvZiBpZ25vcmVCb2R5ICE9PSAndW5kZWZpbmVkJyAmJiBpZ25vcmVCb2R5ID09PSB0cnVlID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBsaW1pdCA9ICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnIHx8IGRlcHRoID09PSAwID8gNSA6IGRlcHRoKSxcbiAgICAgICAgICAgIG1hdGNoZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIGlmICghbm9kZSB8fCB0eXBlb2Ygbm9kZS5jbGFzc05hbWUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBub2RlLnRhZ05hbWUgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgICAgICAgICAgIChpZ25vcmVCb2R5ICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuY2xhc3NOYW1lLmluZGV4T2YoY2xhc3NOYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VhcmNoVHJlZVVwd2FyZHMobm9kZSwgbWF0Y2hlciwgZmFsc2UsIGxpbWl0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYW4gZWxlbWVudCBhbmQgYSB0YWcgbmFtZSwgdHJhdmVyc2VzIHVwIHRoZSBET00gdHJlZSBsb29raW5nXG4gICAgICogZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGVsZW1lbnQgd2l0aCB0aGF0IHRhZyBuYW1lXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbm9kZSBUaGUgc3RhcnRpbmcgbm9kZVxuICAgICAqIEBwYXJhbSB0YWdOYW1lIFRoZSB0YWcgbmFtZSB0byBzZWFyY2ggZm9yXG4gICAgICogQHBhcmFtIFtpbmNsdWRlU2VsZl0gSW5jbHVkZSBzZWxmIGluIHNlYXJjaFxuICAgICAqIEBwYXJhbSBbbGltaXRdIEhvdyBmYXIgdXAgdGhlIHRyZWUgdG8gc2VhcmNoXG4gICAgICogQHJldHVybnMge31cbiAgICAgKi9cbiAgICBnZXRDbG9zZXN0RWxlbWVudEJ5VGFnTmFtZTogZnVuY3Rpb24obm9kZSwgdGFnTmFtZSwgaW5jbHVkZVNlbGYsIGxpbWl0KSB7XG4gICAgICAgIHJldHVybiBzZWFyY2hUcmVlVXB3YXJkcyhub2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUgJiYgbm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWdOYW1lID8gMSA6IDA7XG4gICAgICAgIH0sIGluY2x1ZGVTZWxmLCBsaW1pdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvYmplY3Qgbm9kZSBFbGVtZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSBzdHJpbmcgYXR0cmlidXRlTmFtZSBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgd2UncmUgbG9va2luZyBmb3IgaW4gcGFyZW50IGVsZW1lbnRzXG4gICAgICogQHBhcmFtIGludGVnZXIgZGVwdGggSG93IGZhciB1cCB0aGUgRE9NIHRyZWUgc2hvdWxkIHdlIHNlYXJjaC5cbiAgICAgKiBAcmV0dXJuIGJvb2xlYW4gUmV0dXJucyBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0UGFyZW50RWxlbWVudEJ5QXR0cmlidXRlOiBmdW5jdGlvbihub2RlLCBhdHRyaWJ1dGVOYW1lLCBkZXB0aCkge1xuICAgICAgICByZXR1cm4gc2VhcmNoVHJlZVVwd2FyZHMobm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlICYmIG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpICE9PSBudWxsID8gMSA6IDA7XG4gICAgICAgIH0sIGRlcHRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZWcgcGFyZW50SGFzQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicpO1xuICAgICAqIGVnIHBhcmVudEhhc0NsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ25hdmlnYXRpb24nLCAxMCk7XG4gICAgICogZWcgcGFyZW50SGFzQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnbmF2aWdhdGlvbicsIDEwLCB0cnVlKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3Qgbm9kZSBFbGVtZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSBzdHJpbmcgY2xhc3NOYW1lIENsYXNzIG5hbWUgbG9va2luZyBmb3IgaW4gcGFyZW50IGVsZW1lbnRzXG4gICAgICogQHBhcmFtIGludGVnZXIgZGVwdGggSG93IGZhciB1cCB0aGUgRE9NIHRyZWUgc2hvdWxkIHdlIHNlYXJjaC4gIFNtYWxsZXIgbnVtYmVyIGlzIG1vcmUgcGVyZm9ybWFudC5cbiAgICAgKiBAcGFyYW0gYm9vbGVhbiBpZ25vcmVCb2R5IFdoZXRoZXIgdGhpcyB1dGlsaXR5IHNob3VsZCBjcmF3bCB1cCB0byA8Ym9keT4gYW5kIDxodG1sPiBvciBzdG9wIGJlbG93IDxib2R5PlxuICAgICAqIEByZXR1cm4gYm9vbGVhbiBSZXR1cm5zIHRydWUgaWYgY2xhc3Mgd2FzIGZvdW5kIGluIHRoZSBuZXN0ZWQgcGFyZW50IHRhZ3NcbiAgICAgKi9cbiAgICBwYXJlbnRIYXNDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3NOYW1lLCBkZXB0aCwgaWdub3JlQm9keSkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0UGFyZW50RWxlbWVudEJ5Q2xhc3Mobm9kZSwgY2xhc3NOYW1lLCBkZXB0aCwgaWdub3JlQm9keSkgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byB3b3JrIG91dCB3aGVyZSBhIGxpbmsgaXMgd2l0aGluIGEgbW9kdWxlIHNvIGVkaXRvcmlhbCBrbm93IHdoZXRoZXIgdGhlIGxpbmsgd2FzIHRoZSBmaXJzdCBsaW5rLFxuICAgICAqIHNlY29uZCBsaW5rIGV0Y1xuICAgICAqIGVnIGdldEFuY2hvclBvc2l0aW9uV2l0aGluRWxlbWVudChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnVzaW5lc3MtbW9kdWxlJyksICcvbmV3cy9idXNpbmVzcy0xMjM0NTY3OCcpO1xuICAgICAqXG4gICAgICogQHBhcmFtIG9iamVjdCBwYXJlbnQgRWxlbWVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0gc3RyaW5nIGhyZWYgZWcgL25ld3MvYnVzaW5lc3MtMTIzNDU2N1xuICAgICAqIEByZXR1cm5zIG51bWJlciAwLTIwXG4gICAgICovXG4gICAgZ2V0QW5jaG9yUG9zaXRpb25XaXRoaW5FbGVtZW50OiBmdW5jdGlvbihwYXJlbnQsIGhyZWYpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICB0YWdzLFxuICAgICAgICAgICAgaHJlZlJlZ2V4O1xuICAgICAgICBpZiAocGFyZW50ICYmIGhyZWYpIHtcbiAgICAgICAgICAgIHRhZ3MgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcbiAgICAgICAgICAgIGhyZWZSZWdleCA9IG5ldyBSZWdFeHAoaHJlZisnJCcpO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFnc1tpXS5ocmVmICE9PSAndW5kZWZpbmVkJyAmJiBocmVmICE9PSAnJyAmJiB0YWdzW2ldLmhyZWYubWF0Y2goaHJlZlJlZ2V4KSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gd29yayBvdXQgd2hlcmUgYSBsaW5rIGlzIHdpdGhpbiBhIG1vZHVsZSBzbyBlZGl0b3JpYWwga25vdyB3aGV0aGVyIHRoZSBsaW5rIHdhcyB0aGUgZmlyc3QgbGluayxcbiAgICAgKiBzZWNvbmQgbGluayBldGNcbiAgICAgKiBlZyBnZXRBbmNob3JQb3NpdGlvbldpdGhpbkVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1c2luZXNzLW1vZHVsZScpLCAnL25ld3MvYnVzaW5lc3MtMTIzNDU2NzgnKTtcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgcGFyZW50IEVsZW1lbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHN0cmluZyBocmVmIGVnIC9uZXdzL2J1c2luZXNzLTEyMzQ1NjdcbiAgICAgKiBAcmV0dXJucyBudW1iZXIgMC0yMFxuICAgICAqL1xuICAgIGdldENsb3Nlc3RFbGVtZW50V2l0aEF0dHJpYnV0ZTogZnVuY3Rpb24ocGFyZW50LCBhdHRyaWJ1dGUpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICB0YWdzLFxuICAgICAgICAgICAgaHJlZlJlZ2V4O1xuICAgICAgICBpZiAocGFyZW50ICYmIGhyZWYpIHtcbiAgICAgICAgICAgIHRhZ3MgPSBwYXJlbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKTtcbiAgICAgICAgICAgIGhyZWZSZWdleCA9IG5ldyBSZWdFeHAoaHJlZisnJCcpO1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFnc1tpXS5ocmVmICE9PSAndW5kZWZpbmVkJyAmJiBocmVmICE9PSAnJyAmJiB0YWdzW2ldLmhyZWYubWF0Y2goaHJlZlJlZ2V4KSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVnIGFkZEV2ZW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb28nKSwgJ2NsaWNrJywgZnVuY3Rpb24oKXt9KTtcbiAgICAgKiBzb3VyY2U6IGh0dHA6Ly9lam9obi5vcmcvcHJvamVjdHMvZmxleGlibGUtamF2YXNjcmlwdC1ldmVudHNcbiAgICAgKi9cbiAgICBhZGRFdmVudDogZnVuY3Rpb24ob2JqLCB0eXBlLCBmbikge1xuICAgICAgICBpZiAob2JqLmF0dGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBvYmpbJ2UnICsgdHlwZSArIGZuXSA9IGZuO1xuICAgICAgICAgICAgb2JqW3R5cGUgKyBmbl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvYmpbJ2UnICsgdHlwZSArIGZuXSh3aW5kb3cuZXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9iai5hdHRhY2hFdmVudCgnb24nICsgdHlwZSwgb2JqW3R5cGUgKyBmbl0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogZWcgcmVtb3ZlRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnY2xpY2snLCBmdW5jdGlvbigpe30pO1xuICAgICAqIHNvdXJjZTogaHR0cDovL2Vqb2huLm9yZy9wcm9qZWN0cy9mbGV4aWJsZS1qYXZhc2NyaXB0LWV2ZW50c1xuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50OiBmdW5jdGlvbihvYmosIHR5cGUsIGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqLmRldGFjaEV2ZW50KSB7XG4gICAgICAgICAgICBvYmouZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIG9ialt0eXBlICsgZm5dKTtcbiAgICAgICAgICAgIG9ialt0eXBlICsgZm5dID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iai5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBlZyB0cmlnZ2VyRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZvbycpLCAnY2xpY2snKTtcbiAgICAgKiBzb3VyY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3NhbXBsZXMvZG9tcmVmL2Rpc3BhdGNoRXZlbnQuaHRtbFxuICAgICAqL1xuICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24ob2JqLCB0eXBlLCBwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBwcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogcHJldmVudERlZmF1bHQ7XG4gICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgIGV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcblxuICAgIGNhbmNlbEV2ZW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBldmVudC5wcmV2ZW50RGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNFdmVudERlZmF1bHRQcmV2ZW50ZWQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZCB8fCBldmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gICAgfSxcblxuICAgIHRyaW06IGZ1bmN0aW9uKHN0cikge1xuICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXltcXHNcXHhBMF0rLywgJycpLnJlcGxhY2UoL1tcXHNcXHhBMF0rJC8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZVRvOiBmdW5jdGlvbiAodXJpKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgPG1ldGE+IHRhZyBuYW1lIHZhbHVlLCBmb3IgZXhhbXBsZTpcbiAgICAgKiBIdG1sOiAgIDxtZXRhIG5hbWU9XCJEQ1RFUk1TLmNyZWF0ZWRcIiBjb250ZW50PVwiMjAxNS0wMS0wNlQxMjowMDowMFwiIC8+XG4gICAgICogTWV0aG9kOiBiYmNkb3Rjb20udXRpbHMuZ2V0TWV0YU5hbWVDb250ZW50KCdEQ1RFUk1TLmNyZWF0ZWQnKTtcbiAgICAgKi9cbiAgICBnZXRNZXRhTmFtZUNvbnRlbnQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ21ldGEnKSxcbiAgICAgICAgICAgIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKG1ldGFzW2ldLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0YXNbaV0uZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBHZXQgPG1ldGE+IHRhZyBwcm9wZXJ0eSB2YWx1ZSwgZm9yIGV4YW1wbGU6XG4gICAgICogSHRtbDogICA8bWV0YSBwcm9wZXJ0eT1cInd3aHAtZWRpdGlvblwiIGNvbnRlbnQ9XCJpbnRlcm5hdGlvbmFsXCIgLz5cbiAgICAgKiBNZXRob2Q6IGJiY2RvdGNvbS51dGlscy5nZXRNZXRhUHJvcGVydHlDb250ZW50KCd3d2hwLWVkaXRpb24nKTtcbiAgICAgKi9cbiAgICBnZXRNZXRhUHJvcGVydHlDb250ZW50OiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICB2YXIgbWV0YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbWV0YScpLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAobWV0YXNbaV0uZ2V0QXR0cmlidXRlKFwicHJvcGVydHlcIikgPT09IHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFzW2ldLmdldEF0dHJpYnV0ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG4gICAgc2V0Q29va2llOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgc2Vjb25kcykge1xuICAgICAgICB2YXIgZGF0ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJyAmJiBuYW1lICE9PSAnJyAmJiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWNvbmRzID09PSAndW5kZWZpbmVkJyB8fCBzZWNvbmRzID09PSBudWxsIHx8IHNlY29uZHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIDM2NSBkYXlzICg2MCAqIDYwICogMjQgPSAxIGRheSlcbiAgICAgICAgICAgICAgICBzZWNvbmRzID0gNjAgKiA2MCAqIDI0ICogMzY1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBkYXRlLnNldFRpbWUoZGF0ZS5nZXRUaW1lKCkgKyAoc2Vjb25kcyAqIDEwMDApKTsgIC8vIGVnIDEyMHMgKiAxMDAwID0gMTIwLDAwMG1zXG4gICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZSkrJz0nK2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkrJzsgZXhwaXJlcz0nK2RhdGUudG9HTVRTdHJpbmcoKVxuICAgICAgICAgICAgICAgICsnOyBkb21haW49LicrZ2V0Q29va2llRG9tYWluKCkrJzsgcGF0aD0vJztcbiAgICAgICAgICAgIHRyYWNrQ29va2llLnB1c2goWydzZXQnLCBuYW1lLCB2YWx1ZSwgc2Vjb25kc10pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRDb29raWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9ICc7ICcgKyBkb2N1bWVudC5jb29raWUsXG4gICAgICAgICAgICBwYXJ0cyA9IGNvb2tpZS5zcGxpdCgnOyAnICsgZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpICsgJz0nKSxcbiAgICAgICAgICAgIHZhbHVlO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0cy5wb3AoKS5zcGxpdCgnOycpLnNoaWZ0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrQ29va2llLnB1c2goWydnZXQnLCBuYW1lLCB2YWx1ZV0pO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBkZWxldGVDb29raWU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpKyc9OyBleHBpcmVzPVRodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UOyBkb21haW49LicrZ2V0Q29va2llRG9tYWluKCkrJzsgcGF0aD0vJztcbiAgICAgICAgdHJhY2tDb29raWUucHVzaChbJ2RlbGV0ZScsIG5hbWVdKTtcbiAgICB9LFxuICAgIGdlbmVyYXRlVXVpZFY0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgdmFyIHIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqMTYpLCB2ID0gYyA9PT0gJ3gnID8gciA6IChyJjB4MyB8IDB4OCk7XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHN0cmluZyBVcmkgZWcgaHR0cDovL3d3dy50ZXN0LmJiYy5jb20vbmV3cy93b3JsZD9oZWxsbz13b3JsZCNoZWxwXG4gICAgICovXG4gICAgY3JlYXRlV2luZG93TG9jYXRpb246IGZ1bmN0aW9uKHVyaSkge1xuICAgICAgICB2YXIgd2luZG93TG9jYXRpb24sXG4gICAgICAgICAgICB3aXRob3V0UHJvdG9jb2wsXG4gICAgICAgICAgICB3aXRob3V0UXVlcnlQYXJhbSA9IHVyaTtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmkgPT09ICd1bmRlZmluZWQnIHx8IHVyaSA9PT0gbnVsbCB8fCB1cmkgPT09ICcnKSB7XG4gICAgICAgICAgICB3aW5kb3dMb2NhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBocmVmICAgICA6ICcnLFxuICAgICAgICAgICAgICAgIHByb3RvY29sIDogJycsXG4gICAgICAgICAgICAgICAgaG9zdCAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICBob3N0bmFtZSA6ICcnLFxuICAgICAgICAgICAgICAgIHBvcnQgICAgIDogJycsXG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgOiAnJyxcbiAgICAgICAgICAgICAgICBzZWFyY2ggICA6ICcnLFxuICAgICAgICAgICAgICAgIGhhc2ggICAgIDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodXJpLmluZGV4T2YoJz8nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB3aXRob3V0UXVlcnlQYXJhbSA9IHVyaS5zdWJzdHIoMCwgdXJpLmluZGV4T2YoJz8nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aXRob3V0UHJvdG9jb2wgPSB3aXRob3V0UXVlcnlQYXJhbS5zdWJzdHIod2l0aG91dFF1ZXJ5UGFyYW0uaW5kZXhPZignOicpKzMpO1xuICAgICAgICAgICAgd2luZG93TG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgaHJlZiAgICAgOiB1cmksICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3d3dy50ZXN0LmJiYy5jb20vbmV3cy93b3JsZD9oZWxsbz13b3JsZCNoZWxwXG4gICAgICAgICAgICAgICAgcHJvdG9jb2wgOiB1cmkuc3Vic3RyKDAsIHVyaS5pbmRleE9mKCc6JykrMSksICAvLyBodHRwOlxuICAgICAgICAgICAgICAgIGhvc3QgICAgIDogd2l0aG91dFByb3RvY29sLnN1YnN0cigwLCB3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSwgICAgICAgIC8vIHd3dy50ZXN0LmJiYy5jb206ODg4OFxuICAgICAgICAgICAgICAgIGhvc3RuYW1lIDogd2l0aG91dFByb3RvY29sLnN1YnN0cigwLCB3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSwgICAgICAgIC8vIHd3dy50ZXN0LmJiYy5jb21cbiAgICAgICAgICAgICAgICBwb3J0ICAgICA6ICcnLFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lIDogd2l0aG91dFByb3RvY29sLnN1YnN0cih3aXRob3V0UHJvdG9jb2wuaW5kZXhPZignLycpKSxcbiAgICAgICAgICAgICAgICBzZWFyY2ggICA6IHVyaS5zdWJzdHIodXJpLmluZGV4T2YoJz8nKSksXG4gICAgICAgICAgICAgICAgaGFzaCAgICAgOiAnJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2luZG93TG9jYXRpb247XG4gICAgfSxcbiAgICBzZWNvbmRzVG9NaWxsaVNlY29uZHM6IGZ1bmN0aW9uKHNlY29uZHMpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IocGFyc2VGbG9hdChzZWNvbmRzLCAxMCkqMTAwMCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZyBvbmx5XG4gICAgICovXG4gICAgcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRyYWNrQ29va2llID0gW107XG4gICAgfSxcbiAgICBnZXRUcmFja0Nvb2tpZVZhbHVlczogZnVuY3Rpb24oY29va2llc0Fycikge1xuICAgICAgICBpZiAodHlwZW9mIGNvb2tpZXNBcnIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhY2tDb29raWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IFtdLFxuICAgICAgICAgICAgdDtcbiAgICAgICAgZm9yICh0ID0gMDsgdCA8IHRyYWNrQ29va2llLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICBpZiAoY29va2llc0Fyci5pbmRleE9mKHRyYWNrQ29va2llW3RdWzFdKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdXQucHVzaCh0cmFja0Nvb2tpZVt0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9LFxuXG4gICAgaXNTdHJpbmc6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnIHx8IHZhbCBpbnN0YW5jZW9mIFN0cmluZztcbiAgICB9LFxuXG4gICAgY2xlYW5BcnJheTogZnVuY3Rpb24gKGFjdHVhbCkge1xuICAgICAgICB2YXIgbmV3QXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGZvcihpID0gMDsgaTxhY3R1YWwubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYgKGFjdHVhbFtpXSB8fCBhY3R1YWxbaV0gPT09IDApe1xuICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goYWN0dWFsW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3QXJyYXk7XG4gICAgfSxcblxuICAgIG91dGVySFRNTDogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlmIElFLCBDaHJvbWUgdGFrZSB0aGUgaW50ZXJuYWwgbWV0aG9kIG90aGVyd2lzZSBidWlsZCBvbmVcbiAgICAgICAgcmV0dXJuIG5vZGUub3V0ZXJIVE1MIHx8IChcbiAgICAgICAgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgICAgICBoO1xuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKG4uY2xvbmVOb2RlKHRydWUpKTtcbiAgICAgICAgICAgIGggPSBkaXYuaW5uZXJIVE1MO1xuICAgICAgICAgICAgZGl2ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBoO1xuICAgICAgICB9KG5vZGUpKTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3V0aWxzLmpzIiwiLyoqXG4gKiBAbW9kdWxlIExvZ0ZhY3RvcnlcbiAqXG4gKiBVc2U6XG4gKlxuICogdmFyIGxvZyA9IGJiY2RvdGNvbS5Mb2dnZXIoJ215Om5hbWVzcGFjZScpO1xuICpcbiAqIGxvZygnc2FtZSBhcyBsb2cubG9nJylcbiAqIGxvZy5sb2coJ3NhbWUgYXMgbG9nKCknKTtcbiAqIGxvZy5pbmZvKCdpbmZvJylcbiAqIGxvZy5kZWJ1ZygnZGVidWcnLCBvYmplY3QpO1xuICogbG9nLndhcm4oJ3dhcm5pbmcnKTtcbiAqIGxvZy5lcnJvcignZXJyb3InLCBFcnJvcik7XG4gKlxuICogRW5hYmxpbmc6XG4gKlxuICogd2luZG93LmJiY2RvdGNvbS5Mb2dnZXIuZW5hYmxlKCcqJyk7IC8vIEZpcnN0IGFyZ3VtZW50IGlzIHRoZSBuYW1lc3BhY2UgdG8gZW5hYmxlXG4gKlxuICogRGlzYWJsaW5nOlxuICpcbiAqIHdpbmRvdy5iYmNkb3Rjb20uTG9nZ2VyLmRpc2FibGUoKTsgLy8gRGlzYWJsZXMgYWxsIG5hbWVzcGFjZXNcbiAqL1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJyk7XG5cbmZ1bmN0aW9uIExvZ0ZhY3RvcnkobmFtZXNwYWNlKSB7XG5cbiAgICBjb25zdCBwcmVmaXhlZE5hbWVzcGFjZSA9IGBiYmNkb3Rjb206JHtuYW1lc3BhY2V9YDtcblxuICAgIGNvbnN0IGxvZ0xldmVscyA9IFtcbiAgICAgICAgJ2xvZycsXG4gICAgICAgICdpbmZvJyxcbiAgICAgICAgJ3dhcm4nLFxuICAgICAgICAnZXJyb3InLFxuICAgICAgICAnZGVidWcnLFxuICAgIF07XG5cbiAgICBjb25zdCBkZWZhdWx0TG9nZ2VyID0gZGVidWcocHJlZml4ZWROYW1lc3BhY2UpO1xuXG4gICAgZnVuY3Rpb24gTG9nZ2VyKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXIoLi4uYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9nTGV2ZWwobGV2ZWwpIHtcbiAgICAgICAgTG9nZ2VyW2xldmVsXSA9IGRlYnVnKHByZWZpeGVkTmFtZXNwYWNlKTtcbiAgICAgICAgTG9nZ2VyW2xldmVsXS5sb2cgPSBmdW5jdGlvbiBsb2coLi4uYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cuY29uc29sZSA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgICAgICAgICB3aW5kb3cuY29uc29sZVtsZXZlbF0gJiZcbiAgICAgICAgICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh3aW5kb3cuY29uc29sZVtsZXZlbF0sIHdpbmRvdy5jb25zb2xlLCBhcmdzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGxvZ0xldmVsIG9mIGxvZ0xldmVscykge1xuICAgICAgICBjcmVhdGVMb2dMZXZlbChsb2dMZXZlbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIExvZ2dlcjtcbn1cblxuTG9nRmFjdG9yeS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUoLi4uYXJncykge1xuICAgIGRlYnVnLmVuYWJsZSguLi5hcmdzKTtcbiAgICBkZWJ1ZygnYmJjZG90Y29tJykoJ0RlYnVnZ2luZyBlbmFibGVkJywgYXJncyk7XG59O1xuTG9nRmFjdG9yeS5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSguLi5hcmdzKSB7XG4gICAgZGVidWcoJ2JiY2RvdGNvbScpKCdEZWJ1Z2dpbmcgZGlzYWJsZWQnKTtcbiAgICBkZWJ1Zy5kaXNhYmxlKC4uLmFyZ3MpO1xufTtcblxuaWYgKC9bP3wmXWFkcy1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikgfHwgZG9jdW1lbnQuY29va2llLmluZGV4T2YoJ2Fkcy1kZWJ1Zz0nKSAhPT0gLTEpIHtcbiAgICBMb2dGYWN0b3J5LmVuYWJsZSgnYmJjZG90Y29tKicpO1xufSBlbHNlIGlmIChkZWJ1Zy5lbmFibGVkKCdiYmNkb3Rjb20qJykpIHtcbiAgICBkZWJ1ZygnYmJjZG90Y29tJykoJ1RvIGRpc2FibGUgZGVidWdnaW5nOiBgYmJjZG90Y29tLkxvZ2dlci5kaXNhYmxlKClgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9nRmFjdG9yeTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9sb2dnZXIuanMiLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICdsaWdodHNlYWdyZWVuJyxcbiAgJ2ZvcmVzdGdyZWVuJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdkb2RnZXJibHVlJyxcbiAgJ2RhcmtvcmNoaWQnLFxuICAnY3JpbXNvbidcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlzIHdlYmtpdD8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTY0NTk2MDYvMzc2NzczXG4gIC8vIGRvY3VtZW50IGlzIHVuZGVmaW5lZCBpbiByZWFjdC1uYXRpdmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC1uYXRpdmUvcHVsbC8xNjMyXG4gIHJldHVybiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlKSB8fFxuICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzNcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pICYmIHBhcnNlSW50KFJlZ0V4cC4kMSwgMTApID49IDMxKSB8fFxuICAgIC8vIGRvdWJsZSBjaGVjayB3ZWJraXQgaW4gdXNlckFnZW50IGp1c3QgaW4gY2FzZSB3ZSBhcmUgaW4gYSB3b3JrZXJcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2FwcGxld2Via2l0XFwvKFxcZCspLykpO1xufVxuXG4vKipcbiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiAnW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06ICcgKyBlcnIubWVzc2FnZTtcbiAgfVxufTtcblxuXG4vKipcbiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGZvcm1hdEFyZ3MoYXJncykge1xuICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7XG5cbiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpXG4gICAgKyB0aGlzLm5hbWVzcGFjZVxuICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKVxuICAgICsgYXJnc1swXVxuICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKVxuICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpO1xuXG4gIGlmICghdXNlQ29sb3JzKSByZXR1cm47XG5cbiAgdmFyIGMgPSAnY29sb3I6ICcgKyB0aGlzLmNvbG9yO1xuICBhcmdzLnNwbGljZSgxLCAwLCBjLCAnY29sb3I6IGluaGVyaXQnKVxuXG4gIC8vIHRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG4gIC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cbiAgLy8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0QyA9IDA7XG4gIGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBmdW5jdGlvbihtYXRjaCkge1xuICAgIGlmICgnJSUnID09PSBtYXRjaCkgcmV0dXJuO1xuICAgIGluZGV4Kys7XG4gICAgaWYgKCclYycgPT09IG1hdGNoKSB7XG4gICAgICAvLyB3ZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcbiAgICAgIC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG4gICAgICBsYXN0QyA9IGluZGV4O1xuICAgIH1cbiAgfSk7XG5cbiAgYXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLlxuICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhIFwiZnVuY3Rpb25cIi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvZygpIHtcbiAgLy8gdGhpcyBoYWNrZXJ5IGlzIHJlcXVpcmVkIGZvciBJRTgvOSwgd2hlcmVcbiAgLy8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24gZG9lc24ndCBoYXZlICdhcHBseSdcbiAgcmV0dXJuICdvYmplY3QnID09PSB0eXBlb2YgY29uc29sZVxuICAgICYmIGNvbnNvbGUubG9nXG4gICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogU2F2ZSBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuICB0cnkge1xuICAgIGlmIChudWxsID09IG5hbWVzcGFjZXMpIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5yZW1vdmVJdGVtKCdkZWJ1ZycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UuZGVidWcgPSBuYW1lc3BhY2VzO1xuICAgIH1cbiAgfSBjYXRjaChlKSB7fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvYWQoKSB7XG4gIHZhciByO1xuICB0cnkge1xuICAgIHIgPSBleHBvcnRzLnN0b3JhZ2UuZGVidWc7XG4gIH0gY2F0Y2goZSkge31cblxuICAvLyBJZiBkZWJ1ZyBpc24ndCBzZXQgaW4gTFMsIGFuZCB3ZSdyZSBpbiBFbGVjdHJvbiwgdHJ5IHRvIGxvYWQgJERFQlVHXG4gIGlmICghciAmJiB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgJ2VudicgaW4gcHJvY2Vzcykge1xuICAgIHIgPSBwcm9jZXNzLmVudi5ERUJVRztcbiAgfVxuXG4gIHJldHVybiByO1xufVxuXG4vKipcbiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuXG4gKi9cblxuZXhwb3J0cy5lbmFibGUobG9hZCgpKTtcblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2RlYnVnL3NyYy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vcHJvY2Vzcy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogUHJldmlvdXMgbG9nIHRpbWVzdGFtcC5cbiAqL1xuXG52YXIgcHJldlRpbWU7XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vZGVidWcvc3JjL2RlYnVnLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9tcy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgc2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIGxvY2FsZSA9IHJlcXVpcmUoJ2xvY2FsZScpO1xudmFyIHN1cnZleSA9IHJlcXVpcmUoJ3N1cnZleScpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc2VzJyk7XG52YXIgbG90YW1lID0gcmVxdWlyZSgnbG90YW1lJyk7XG5cbnZhciBQcmVkaWNhdGUgPSByZXF1aXJlKCdwcmVkaWNhdGUnKTtcblxudmFyIGFuYWx5dGljcyA9IHJlcXVpcmUoJ2FuYWx5dGljcycpO1xuXG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9sYXlvdXQnKTtcbnZhciBicmVha3BvaW50cyA9IHJlcXVpcmUoJ2FkdmVydHMvYnJlYWtwb2ludHMnKTtcbnZhciBhZFJlZ2lzdGVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlZ2lzdGVyJyk7XG52YXIgYWRVbml0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFVuaXQnKTtcbnZhciBhZEZpbHRlciA9IHJlcXVpcmUoJ2FkdmVydHMvYWRGaWx0ZXInKTtcbnZhciBrZXlWYWx1ZXMgPSByZXF1aXJlKCdhZHZlcnRzL2tleVZhbHVlcycpO1xudmFyIGFkU3VpdGVzID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFN1aXRlcycpO1xudmFyIGRmcHBSZXF1ZXN0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9kZnBwUmVxdWVzdCcpO1xudmFyIHB1YnN1YiA9IHJlcXVpcmUoJ3B1YnN1YicpO1xudmFyIFN0YXRzID0gcmVxdWlyZSgnc3RhdHMnKTtcbnZhciBBbmFseXRpY3NIZWxwZXIgPSByZXF1aXJlKCdhbmFseXRpY3MvaGVscGVyJyk7XG5cbnZhciBhZGRMb2FkRXZlbnQgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnaW5pdCcpO1xuXG52YXIgaWRjdGEgPSByZXF1aXJlKCdpZGN0YS9pZGN0YScpO1xuXG4vKipcbiAqIEluaXRpYWxpc2UgYmJjZG90Y29tLiBDYWxsZWQgaW4gdGhlIHNjb3BlIG9mIHRoZSBtYWluIGJiY2RvdGNvbSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gcGFyYW1zXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5pdCAocGFyYW1zKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgIHRyeSB7XG4gICAgICAgIHZhciB4LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGxlbixcbiAgICAgICAgICAgIHdpbmRvd0xvY2F0aW9uID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCksXG4gICAgICAgICAgICB3aW5kb3dEb2N1bWVudCA9IGNvbmZpZy5nZXRXaW5kb3dEb2N1bWVudCgpLFxuICAgICAgICAgICAgYWRzVG9EaXNwbGF5O1xuXG4gICAgICAgIGxvZy5pbmZvKCdiYmNkb3Rjb20uaW5pdCgpIHdpdGggcGFyYW1zOiAnLCBwYXJhbXMpO1xuXG4gICAgICAgIHV0aWxzLmFkZEh0bWxUYWdDbGFzcyhjbGFzc2VzLmNsYXNzTmFtZXMoJ2luaXQnLCAncmVzcG9uc2l2ZScpKTtcbiAgICAgICAgU3RhdHMuaW5pdCgpO1xuXG4gICAgICAgIGlmIChjb25maWcuaXNBZHNFbmFibGVkKCkgJiYgKCFjb25maWcuaXNTcG9ydEFwcCgpIHx8IChjb25maWcuaXNTcG9ydEFwcCgpICYmIGNvbmZpZy5pc0Fkc3BvcnRhcHBFbmFibGVkKCkpKSkge1xuXG4gICAgICAgICAgICBpZihiYmNkb3Rjb20uaW5pdENhbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmKHBhcmFtcy5hZHNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRzVG9EaXNwbGF5ID0gYWRGaWx0ZXIuYnVpbGQocGFyYW1zLmFkc1RvRGlzcGxheSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZHNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5iYmNkb3Rjb20uYWRzVG9EaXNwbGF5ID0gYWRzVG9EaXNwbGF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpPTAsbGVuPWFkc1RvRGlzcGxheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkUmVnaXN0ZXIucmVnaXN0ZXJBZChhZHNUb0Rpc3BsYXlbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZy5pbml0KHBhcmFtcyk7XG5cbiAgICAgICAgICAgIHV0aWxzLmFkZEh0bWxUYWdDbGFzcyhjbGFzc2VzLmZyb21Db25maWcoY29uZmlnLCB3aW5kb3cpKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMb2FkIHN0eWxlc2hlZXRzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNBc3luYygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKC8oc2FuZGJveHxpbnQpKC5kZXYpKi5iYmMuY28qLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB8fCAvWz98Jl1hZHMtZGVidWcvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCdhZHMtZGVidWc9JykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwcGVuZExpbmtUb0hlYWQoY29uZmlnLmdldEFzc2V0UHJlZml4KCkgKyAnc3R5bGUvZGlzdC9iYmNkb3Rjb20tYXN5bmMuZGV2LmNzcycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwcGVuZExpbmtUb0hlYWQoY29uZmlnLmdldEFzc2V0UHJlZml4KCkgKyAnc3R5bGUvZGlzdC9iYmNkb3Rjb20tYXN5bmMuY3NzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb25maWcuaXNBc3luYygpICYmIGNvbmZpZy5pc0lFNygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKC8oc2FuZGJveHxpbnQpKC5kZXYpKi5iYmMuY28qLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSB8fCAvWz98Jl1hZHMtZGVidWcvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpIHx8IGRvY3VtZW50LmNvb2tpZS5pbmRleE9mKCdhZHMtZGVidWc9JykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwcGVuZExpbmtUb0hlYWQoY29uZmlnLmdldEFzc2V0UHJlZml4KCkgKyAnc3R5bGUvZGlzdC9iYmNkb3Rjb20uZGV2LmNzcycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFwcGVuZExpbmtUb0hlYWQoY29uZmlnLmdldEFzc2V0UHJlZml4KCkgKyAnc3R5bGUvZGlzdC9iYmNkb3Rjb20uY3NzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxheW91dC5kaXNhYmxlUmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEaXNhYmxlIHJlc2l6ZSBpbiBvbGRlciBJRSBicm93c2Vyc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoY29uZmlnLmlzSUU4KCkpIHtcbiAgICAgICAgICAgICAgICBsYXlvdXQuZGlzYWJsZVJlc2V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogU2VjdGlvbnNcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2VjdGlvbnMuYnVpbGQodHJ1ZSk7XG4gICAgICAgICAgICBpZiAoc2VjdGlvbnMuZ2V0U2VjdGlvbigwKSA9PT0gJ3Nwb3J0Jykge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnRzLnNldEdyb3VwU3RhcnQoNCwgOTAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhcmFtcy5sYXlvdXQgPT09ICdncm91cDUnKXtcbiAgICAgICAgICAgICAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGJyZWFrcG9pbnRzLmdldEdyb3VwKDQpKTtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50cy5zZXRHcm91cCg1LCBjb3B5KTtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50cy5zZXRHcm91cEZpbmlzaCg0LCAxMjc5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBMYXlvdXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbGF5b3V0LmluaXQoYnJlYWtwb2ludHMuZ2V0R3JvdXBzKCkpO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5jbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgICAgIC8vIEEgaGFjayB0byBhbGxvdyB1cyB0byBzcGVjaWZ5IHRoZSBjbGllbnRXaWR0aCBpbiB1bml0IHRlc3RpbmdcbiAgICAgICAgICAgICAgICBsYXlvdXQuc2V0Q2xpZW50V2lkdGgocGFyYW1zLmNsaWVudFdpZHRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBCcmVha3BvaW50IG92ZXJyaWRlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAocGFyYW1zLmN1c3RvbUJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHMuc2V0R3JvdXBzKHBhcmFtcy5jdXN0b21CcmVha3BvaW50cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxvdGFtZS5pbml0KCk7XG5cbiAgICAgICAgICAgIGlmKHBhcmFtcy5hZHNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBhZHNUb0Rpc3BsYXkgPSBhZEZpbHRlci5idWlsZChwYXJhbXMuYWRzVG9EaXNwbGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBERlBQIFJlZ2lzdGVyIGFkc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoYWRzVG9EaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmJiY2RvdGNvbS5hZHNUb0Rpc3BsYXkgPSBhZHNUb0Rpc3BsYXk7XG4gICAgICAgICAgICAgICAgZm9yIChpPTAsbGVuPWFkc1RvRGlzcGxheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhZFJlZ2lzdGVyLnJlZ2lzdGVyQWQoYWRzVG9EaXNwbGF5W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogTG9jYWxlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwYXJhbXMubG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAoeCBpbiBwYXJhbXMubG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmxvY2FsZURhdGEuaGFzT3duUHJvcGVydHkoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZS5zZXQoeCwgcGFyYW1zLmxvY2FsZURhdGFbeF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUuc2V0TG9jYWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5sYW5nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBZCBFeGNsdXNpb25zXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIChuZXcgUHJlZGljYXRlKCkpLnNldCh3aW5kb3dEb2N1bWVudC50aXRsZSArICcgJyArIHV0aWxzLmdldE1ldGFOYW1lQ29udGVudCgnZGVzY3JpcHRpb24nKSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWQgVW5pdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhZFVuaXQuaW5pdChsYXlvdXQuZ2V0Q2xpZW50V2lkdGgoKSwgdGhpcy5zZXJ2ZXJzaWRlQWRVbml0czJ0bzksIHNlY3Rpb25zLmdldFNlY3Rpb25zKCdhZHZlcnQnKSwgc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogS2V5IFZhbHVlc1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBrZXlWYWx1ZXMuaW5pdCh3aW5kb3dMb2NhdGlvbiwgd2luZG93RG9jdW1lbnQsIGNvbmZpZy5nZXRUeXBlKCkpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMua2V5VmFsdWVzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGZvciAoeCBpbiBwYXJhbXMua2V5VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMua2V5VmFsdWVzLmhhc093blByb3BlcnR5KHgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlWYWx1ZXMuc2V0KHgsIHBhcmFtcy5rZXlWYWx1ZXNbeF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFkIFN1aXRlcyAtIHVzZWQgdG8gZGlzcGxheSBhIGNlcnRhaW4gc2V0IG9mIGFkcyBhbGwgdGhlIHRpbWUgdXNpbmcgP2Fkcz1iaWdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgYWRTdWl0ZXMuaW5pdCh3aW5kb3dMb2NhdGlvbi5ocmVmKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBERlBQIFJlcXVlc3RzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGJiY2RvdGNvbS5jaGVja1RoaXJkUGFydHlGaXJzdChkZnBwUmVxdWVzdC5pbml0LCBkZnBwUmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNMb3RhbWVFbmFibGVkKCkgJiYgY29uZmlnLmlzTG90YW1lQWN0aXZlKCkpe1xuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5jaGVja1RoaXJkUGFydHlGaXJzdChsb3RhbWUuY29uc2VudENhbGxiYWNrLCBsb3RhbWUpO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNMb3RhbWVFbmFibGVkKCkgJiYgY29uZmlnLmlzTG90YW1lQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICBbJ3VzZXJQbGF5JywgJ3N0YXJ0UHJvZ3JhbW1lJywgJ2VuZFByb2dyYW1tZSddLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgYmJjZG90Y29tLnB1YnN1Yi5vbihldmVudCwgZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmV2ZW50ID0gZXZlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb3RhbWUuc2VuZERhdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5yZWNlaXZlTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJRTggb3IgZWFybGllclxuICAgICAgICAgICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb25tZXNzYWdlJywgdGhpcy5yZWNlaXZlTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiorXG4gICAgICAgICAgKiBTdXJ2ZXlcbiAgICAgICAgKi9cbiAgICAgICAgc3VydmV5LmluaXQoKTtcblxuICAgICAgICBhbmFseXRpY3MuaW5pdCgpO1xuXG4gICAgICAgIC8vIFBpYW5vIHRhZ3NcbiAgICAgICAgaWYgKGNvbmZpZy5pc1NoZXJsb2NrQWN0aXZlKCkgJiYgY29uZmlnLmlzU2hlcmxvY2tFbmFibGVkKCkgJiYgd2luZG93LnRwKSB7XG4gICAgICAgICAgICBpZiAod2luZG93Ll9jb21zY29yZUtleVZhbHVlcyAmJiBfY29tc2NvcmVLZXlWYWx1ZXMuYl9wYWdlX3R5cGUpIHtcbiAgICAgICAgICAgICAgICB0cC5wdXNoKFtcInNldFRhZ3NcIiwgW19jb21zY29yZUtleVZhbHVlcy5iX3BhZ2VfdHlwZV1dKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHAucHVzaChbXCJzZXRUYWdzXCIsIFtBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKV1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaWdnZXIgYW4gaW5pdCBldmVudCB3aXRoIHVzZWZ1bCBpbmZvcm1hdGlvblxuICAgICAgICBwdWJzdWIudHJpZ2dlcignYmJjZG90Y29tOmluaXQ6Y29tcGxldGUnLCB7XG4gICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgIC8vIFN0YXRzIGlzIHVzZWQgdG8gdXBkYXRlIGJiY2RvdGNvbS5zdGF0cy5kYXRhIGZvciBKUyB2YXJpYWJsZSBjb2xsZWN0aW9uIGJ5IG1QdWxzZVxuICAgICAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICAgICAgICBwYWdlVHlwZTogQW5hbHl0aWNzSGVscGVyLmdldFBhZ2VUeXBlKCksXG4gICAgICAgICAgICAgICAgcHJpbWFyeUFkVW5pdDogYWRVbml0LmdldEFkVW5pdDEoKSxcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlBZFVuaXQ6IGFkVW5pdC5nZXRBZFVuaXRzMnRvOSgpLFxuICAgICAgICAgICAgICAgIGFkc0VuYWJsZWQ6IGNvbmZpZy5pc0Fkc0VuYWJsZWQoKSxcbiAgICAgICAgICAgICAgICBpc0FzeW5jOiBjb25maWcuaXNBc3luYygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgICBpZGN0YS5pbml0KCk7XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChsb2cgJiYgbG9nLmVycm9yKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aW5kb3cuY29uc29sZS5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRMb2FkRXZlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHgsIGFkcyA9IGFkUmVnaXN0ZXIuZ2V0QWRzKCk7XG4gICAgICAgICAgICB0aGlzLmRvbUxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5pc0FzeW5jKCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHggaW4gYWRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZHMuaGFzT3duUHJvcGVydHkoeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkc1t4XS5kaXNhYmxlU2NyZWVuUmVhZGVyRm9yQWRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICB1dGlscy5sb2coZSk7XG4gICAgICAgIH1cbiAgICB9LmJpbmQodGhpcykpXG5cbiAgICBiYmNkb3Rjb20uaW5pdENhbGxlZCA9IHRydWU7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2luaXQuanMiLCIvKlxuICogQUxXQVlTIFJFUVVJUkVEIElOVEVSTkFUSU9OQUwgZm9yIGFuYWx5dGljcy5qcywgaXJyZXNwZWN0aXZlIG9mIGFkcyBiZWluZyBlbmFibGVkXG4gKi9cbmltcG9ydCB7UEFMX0VOVl9MSVZFfSBmcm9tICdjb21tb24vZmVhdHVyZVN3aXRjaC9jb25zdHMnO1xudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdjb25maWcnKTtcblxuY29uc3QgQURTX0VOQUJMRURfSFRNTF9DTEFTUyA9ICdhZHMtZW5hYmxlZCc7XG5jb25zdCBBTkFMWVRJQ1MgPSB7XG4gICAgQ09NU0NPUkU6IHtcbiAgICAgICAgSFRUUFM6ICdodHRwczovL3NiLnNjb3JlY2FyZHJlc2VhcmNoLmNvbS9iJyxcbiAgICAgICAgV0VCU0lURV9TVUlURV9MSVZFOiAnYmJjJyxcbiAgICAgICAgV0VCU0lURV9TVUlURV9URVNUOiAnYmJjLWdsb2JhbC10ZXN0JyxcbiAgICAgICAgQVBQX1NVSVRFX0xJVkU6ICdiYmMnLFxuICAgICAgICBBUFBfU1VJVEVfVEVTVDogJ2JiYy1nbG9iYWwtdGVzdCcsXG4gICAgICAgIENVU1RPTUVSX0lEX0xJVkU6IDE5MjkzODc0LFxuICAgICAgICBDVVNUT01FUl9JRF9URVNUOiAxODg5NzYxMlxuICAgIH0sXG4gICAgU1NDOiB7XG4gICAgICAgIEhUVFBTOiAnaHR0cHM6Ly9zc2MuYXBpLmJiYy5jb20nXG4gICAgfVxufTtcbmNvbnN0IFdTU0lURVMgPSBuZXcgUmVnRXhwKCdeXFwvKGFmYWFub3JvbW9vfGFmcmlxdWV8YW1oYXJpY3xhcmFiaWN8YXplcml8YmVuZ2FsaXxidXJtZXNlfGdhaHV6YXxndWphcmF0aSdcbiAgICArJ3xoYXVzYXxoaW5kaXxpZ2JvfGluZG9uZXNpYXxrb3JlYW58a3lyZ3l6fGphcGFuZXNlfG1hcmF0aGl8bXVuZG98bmFpZGhlYWNoZGFufG5lcGFsaXxwYXNodG98cGVyc2lhbidcbiAgICArJ3xwaWRnaW58cG9ydHVndWVzZXxwdW5qYWJpfHJ1c3NpYW58c2VyYmlhbnxzaW5oYWxhfHNvbWFsaXxzd2FoaWxpfHRhamlrfHRhbWlsfHRlbHVndXx0aGFpfHRpZ3JpbnlhJ1xuICAgICsnfHR1cmtjZXx1a2NoaW5hfHVrcmFpbmlhbnx1cmR1fHV6YmVrfHZpZXRuYW1lc2V8eW9ydWJhfHpob25nd2VuKScpO1xuY29uc3QgU0hFUkxPQ0tTSVRFUyA9IG5ldyBSZWdFeHAoJ15cXC8oJHx3d2hwfG5ld3N8c3BvcnR8d2VhdGhlcidcbiAgICArJ3xyZWVsfGN1bHR1cmV8Y2FwaXRhbHxmdXR1cmV8dHJhdmVsfGF1dG9zfGVhcnRoKScpO1xuY29uc3QgTE9UQU1FV1NTSVRFUyA9IG5ldyBSZWdFeHAoJ15cXC8oYWZyaXF1ZXxhcmFiaWN8YXplcml8YmVuZ2FsaXxidXJtZXNlfGdhaHV6YXxoYXVzYXxoaW5kaXxpbmRvbmVzaWF8a3lyZ3l6J1xuICAgICsnfG11bmRvfG5lcGFsaXxwYXNodG98cGVyc2lhbnxwb3J0dWd1ZXNlfHJ1c3NpYW58c2luaGFsYXxzb21hbGl8c3dhaGlsaXx0YW1pbHx0dXJrY2V8dWtjaGluYXx1a3JhaW5pYW4nXG4gICAgKyd8dXJkdXx1emJla3x2aWV0bmFtZXNlKScpO1xuXG5cbi8qKlxuICogSW5pdGlhbCBEZWZhdWx0IENvbmZpZ1xuICogQHByaXZhdGVcbiAqL1xudmFyIF9jb25maWcgPSB7XG4gICAgcmVmZXJyZXI6ICcnLFxuICAgIHdpbmRvd0xvY2F0aW9uOiBnZXRXaW5Mb2MoKSxcbiAgICB3aW5kb3dEb2N1bWVudDogZ2V0V2luRG9jKCksXG4gICAgc2V0dGluZ3M6IHtcbiAgICAgICAgYWRzOiB0cnVlLFxuICAgICAgICBhbmFseXRpY3M6IHRydWUsICAgICAgLy8gR2xvYmFsIEN1cnJlbmN5IFByb3ZpZGVyc1xuICAgICAgICBjb21TY29yZTogdHJ1ZSAgICAgIC8vIENvbVNjb3JlIG9ubHlcbiAgICB9LFxuICAgIHNlY3Rpb25zOiBbXSxcbiAgICBwYWdlVHlwZTogJycsXG4gICAgaGVhZGxpbmU6ICcnLFxuICAgIGFzeW5jOiBmYWxzZSxcbiAgICBkaXNhYmxlQWRzSW5pdGlhbExvYWQ6IGZhbHNlLFxuICAgIGRheEVudmlyb25tZW50czogW1xuICAgICAgICAnYmJjLWdsb2JhbCdcbiAgICBdLFxuICAgIG91dGJyYWluRW5hYmxlZDogdHJ1ZSxcbiAgICBsb3RhbWVFbmFibGVkOiB0cnVlLFxuICAgIGxvdGFtZUFjdGl2ZTogZmFsc2UsXG4gICAgZ3JhcGVzaG90RW5hYmxlZDogdHJ1ZSxcbiAgICBhZHNlbnNlRW5hYmxlZDogdHJ1ZSxcbiAgICBhZHNwb3J0YXBwRW5hYmxlZDogZmFsc2UsXG4gICAgcGVyY2VudEFjdGl2ZTogMCxcbiAgICBwbGF0aW51bUVuYWJsZWQ6IGZhbHNlLFxuICAgIHRsU3BvcnRJbmRleEVuYWJsZWQ6IGZhbHNlLFxuICAgIHRsU3BvcnRTdG9yeUVuYWJsZWQ6IGZhbHNlLFxuICAgIHRsU3BvcnRGcEVuYWJsZWQ6IGZhbHNlLFxuICAgIHRoaXJkUGFydHlEaXNhYmxlZDogZmFsc2UsXG4gICAgb3B0aW1pemVseUVuYWJsZWQ6IGZhbHNlLFxuICAgIHNoZXJsb2NrRW5hYmxlZDogZmFsc2UsXG4gICAgc2hlcmxvY2tBY3RpdmU6IGZhbHNlLFxuICAgIGNvbnRpbnVvdXNQbGF5UGFnZTogZmFsc2UsXG4gICAgc3RpY2t5UGxheWVyUGFnZTogZmFsc2UsXG4gICAgaXNXb3JsZFNlcnZpY2U6IGZhbHNlLFxuICAgIGlzRVU6IHVuZGVmaW5lZCxcbiAgICBpc05QQTogZmFsc2UsXG4gICAgaWVWZXJzaW9uOiB7XG4gICAgICAgIGllNzogZmFsc2UsXG4gICAgICAgIGllODogZmFsc2UsXG4gICAgICAgIGllOTogZmFsc2VcbiAgICB9LFxuICAgIHZlcnNpb246ICcnLFxuICAgIHByZWZpeGVzOiB7XG4gICAgICAgIGFzc2V0UHJlZml4OiAnJyxcbiAgICAgICAganNQcmVmaXg6ICcnLFxuICAgICAgICBzd2ZQcmVmaXg6ICcnLFxuICAgICAgICBjc3NQcmVmaXg6ICcnXG4gICAgfSxcbiAgICBmZWF0dXJlczoge30sXG4gICAgcGFsRW52OiBQQUxfRU5WX0xJVkUsXG4gICAgYXBwTmFtZTogbnVsbFxufTtcblxuY2xhc3MgQ29uZmlnIHtcblxuICAgIGluaXQoc2VydmVyQ29uZiwgZGF0YSwgbG9jYXRpb24sIGRvY3VtZW50KSB7XG5cbiAgICAgICAgaWYgKC9eXFwvbmV3c1xcL2VsZWN0aW9uXFwvdXMyMDE2Ly50ZXN0KF9jb25maWcud2luZG93TG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20udXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGJiY2RvdGNvbS5jbGFzc2VzLmNsYXNzTmFtZXMoJ25ld3MtZWxlY3Rpb24tdXMyMDE2JykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2VydmVyQ29uZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMucmVoeWRyYXRlKHNlcnZlckNvbmYpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXREYXRhKGRhdGEpO1xuXG4gICAgICAgIC8qIE5vIGFkcy9hbmFseXRpY3MgaW4gYW1wIGVtYmVkIGlmcmFtZSAoR05MQURBUFBTLTE0OTMpICovXG4gICAgICAgIGlmICggKHdpbmRvdy5zZWxmICE9PSB3aW5kb3cudG9wKSAmJiBuZXcgUmVnRXhwKCdcXC9lbWJlZFxcLy4qXFw/LiphbXA9MScpLnRlc3QoX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5ocmVmKSl7XG4gICAgICAgICAgICB0aGlzLnNldEFkc0VuYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRBbmFseXRpY3NFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIGxvZyhcImRpc2FibGluZyBhZHMvYW5hbHl0aWNzLCBhbXAtaWZyYW1lIFwiLHdpbmRvdy5zZWxmLmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0V2luZG93TG9jYXRpb24obG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFdpbmRvd0RvY3VtZW50KGRvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Fkc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgYmJjZG90Y29tLnV0aWxzLmFkZEh0bWxUYWdDbGFzcyhBRFNfRU5BQkxFRF9IVE1MX0NMQVNTKTtcbiAgICAgICAgfVxuICAgICAgICBpZigvdGxzcG9ydHN0b3J5L2kudGVzdChfY29uZmlnLndpbmRvd0xvY2F0aW9uLmhyZWYpKXtcbiAgICAgICAgICAgIHRoaXMuc2V0VGxTcG9ydFN0b3J5RW5hYmxlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZigvdGxzcG9ydGluZGV4L2kudGVzdChfY29uZmlnLndpbmRvd0xvY2F0aW9uLmhyZWYpKXtcbiAgICAgICAgICAgIHRoaXMuc2V0VGxTcG9ydEluZGV4RW5hYmxlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZigvdGxzcG9ydGZwL2kudGVzdChfY29uZmlnLndpbmRvd0xvY2F0aW9uLmhyZWYpKXtcbiAgICAgICAgICAgIHRoaXMuc2V0VGxTcG9ydEZwRW5hYmxlZCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKFdTU0lURVMudGVzdChfY29uZmlnLndpbmRvd0xvY2F0aW9uLnBhdGhuYW1lKSB8fCAod2luZG93LlNFQVJDSEJPWCAmJiB3aW5kb3cuU0VBUkNIQk9YLnZhcmlhbnQgJiYgd2luZG93LlNFQVJDSEJPWC52YXJpYW50ID09PSAnd29ybGRzZXJ2aWNlJykpe1xuICAgICAgICAgICAgdGhpcy5zZXRJc1dvcmxkU2VydmljZSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdOTEFEQVBQUy0xMDg3XG4gICAgICAgIGlmKFNIRVJMT0NLU0lURVMudGVzdChfY29uZmlnLndpbmRvd0xvY2F0aW9uLnBhdGhuYW1lKSAmJiBkYXRhICYmIGRhdGEuYWRzID09PSAxKXtcbiAgICAgICAgICAgIHRoaXMuc2V0U2hlcmxvY2tBY3RpdmUodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZihMT1RBTUVXU1NJVEVTLnRlc3QoX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5wYXRobmFtZSkgfHwgKGRhdGEgJiYgZGF0YS5zdGF0cyA9PT0gMSkpe1xuICAgICAgICAgICAgdGhpcy5zZXRMb3RhbWVBY3RpdmUodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmZXJyZXIgPSAodHlwZW9mIHdpbmRvdy5vcmIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cub3JiLnJlZmVycmVyICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICB3aW5kb3cub3JiLnJlZmVycmVyIDogX2NvbmZpZy53aW5kb3dEb2N1bWVudC5yZWZlcnJlcik7XG4gICAgICAgIHRoaXMuc2V0UmVmZXJyZXIocmVmZXJyZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlcyB0aGUgY2xpZW50LXNpZGUgY29uZmlnIHdpdGggY29uZmlnIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICogQ2FsbGVkIGZyb20gYmJjZG90Y29tLmFwaS5zZXRDb25maWdcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb25mIC0gU2VydmVyLXNpZGUgcHJvdmlkZWQgY29uZmlnXG4gICAgICovXG4gICAgcmVoeWRyYXRlKGNvbmYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNlY3Rpb25zXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5zZWN0aW9ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VjdGlvbnMoY29uZi5zZWN0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFnZSBUeXBlXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi50eXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRUeXBlKGNvbmYudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU3RvcnkgSGVhZGxpbmVcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmhlYWRsaW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRIZWFkbGluZShjb25mLmhlYWRsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGlyZCBQYXJ0eSBEaXNhYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGNvbmYudGhpcmRQYXJ0eURpc2FibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRUaGlyZFBhcnR5RGlzYWJsZWQoY29uZi50aGlyZFBhcnR5RGlzYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkcyBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5hZHNFbmFibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRBZHNFbmFibGVkKGNvbmYuYWRzRW5hYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWxsb3cgQWR2ZXJ0aXNpbmcgLSB2YXJpYWJsZSBuYW1lIHVzZWQgaW4gQ2FuZHkgaXMgYWxsb3dBZHZlcnRpc2luZ1xuICAgICAgICBpZiAodHlwZW9mIGNvbmYuYWxsb3dBZHZlcnRpc2luZyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWRzRW5hYmxlZChjb25mLmFsbG93QWR2ZXJ0aXNpbmcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFuYWx5dGljcyBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5hbmFseXRpY3NFbmFibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRBbmFseXRpY3NFbmFibGVkKGNvbmYuYW5hbHl0aWNzRW5hYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29tU2NvcmUgRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGNvbmYuY29tU2NvcmVFbmFibGVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRDb21TY29yZUVuYWJsZWQoY29uZi5jb21TY29yZUVuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFzeW5jIEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLmFzeW5jRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXN5bmMoY29uZi5hc3luY0VuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE9wdGltaXplbHkgRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGNvbmYub3B0aW1pemVseUVuYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldE9wdGltaXplbHlFbmFibGVkKGNvbmYub3B0aW1pemVseUVuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNoZXJsb2NrIEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLnNoZXJsb2NrRW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2hlcmxvY2tFbmFibGVkKGNvbmYuc2hlcmxvY2tFbmFibGVkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb2FkIGFkcyBpbml0aWFsbHkgZGlzYWJsZWQsIHVzZWQgb25seSBpbiBhc3luYyBtb2RlXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5kaXNhYmxlSW5pdGlhbExvYWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldERpc2FibGVJbml0aWFsTG9hZChjb25mLmRpc2FibGVJbml0aWFsTG9hZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWQgS2V5d29yZCAtIHZhcmlhYmxlIG5hbWUgdXNlZCBpbiBDYW5keSBpcyBhZENhbXBhaWduS2V5d29yZFxuICAgICAgICB2YXIga2V5d29yZCA9ICh0eXBlb2YgY29uZi5hZEtleXdvcmQgIT09ICd1bmRlZmluZWQnKSA/IGNvbmYuYWRLZXl3b3JkIDogY29uZi5hZENhbXBhaWduS2V5d29yZDtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXl3b3JkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYmJjZG90Y29tLmFkdmVydHMua2V5VmFsdWVzLnNldCgna2V5d29yZCcsIGtleXdvcmQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdpbmRvdyBMb2NhdGlvblxuICAgICAgICBpZiAodHlwZW9mIGNvbmYudXJsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRXaW5kb3dMb2NhdGlvbihiYmNkb3Rjb20udXRpbHMuY3JlYXRlV2luZG93TG9jYXRpb24oY29uZi51cmwpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGZWF0dXJlc1xuICAgICAgICBpZiAodHlwZW9mIGNvbmYuZmVhdHVyZXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldEZlYXR1cmVzKGNvbmYuZmVhdHVyZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFBBTCBFTlZcbiAgICAgICAgaWYgKHR5cGVvZiBjb25mLnBhbEVudiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGFsRW52KGNvbmYucGFsRW52KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMb2NhbGVcbiAgICAgICAgaWYgKGJiY2RvdGNvbS5sb2NhbGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZi5hZHZlcnRpc2VtZW50VGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ubG9jYWxlLnNldCgnYWR2ZXJ0aXNlbWVudFRleHQnLCBjb25mLmFkdmVydGlzZW1lbnRUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZi5hZHZlcnRJbmZvUGFnZVVybCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ubG9jYWxlLnNldCgnYWR2ZXJ0SW5mb1BhZ2VVcmwnLCBjb25mLmFkdmVydEluZm9QYWdlVXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZi5pbkFzc29jaWF0aW9uV2l0aFRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLmxvY2FsZS5zZXQoJ2luQXNzb2NpYXRpb25XaXRoVGV4dCcsIGNvbmYuaW5Bc3NvY2lhdGlvbldpdGhUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZi5zcG9uc29yZWRCeVRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLmxvY2FsZS5zZXQoJ3Nwb25zb3JlZEJ5VGV4dCcsIGNvbmYuc3BvbnNvcmVkQnlUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uZi5hZHNCeUdvb2dsZVRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLmxvY2FsZS5zZXQoJ2Fkc0J5R29vZ2xlVGV4dCcsIGNvbmYuYWRzQnlHb29nbGVUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJcyBDb250aW51b3VzIFBsYXkgUGFnZSAod2ViYXBwL3Byb2R1Y3QgcHJvdmlkZXMpXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5pc0NvbnRpbnVvdXNQbGF5UGFnZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udGludW91c1BsYXlQYWdlKGNvbmYuaXNDb250aW51b3VzUGxheVBhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElzIFN0aWNreSBQbGF5ZXIgUGFnZSAod2ViYXBwL3Byb2R1Y3QgcHJvdmlkZXMpXG4gICAgICAgIGlmICh0eXBlb2YgY29uZi5pc1N0aWNreVBsYXllclBhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0aWNreVBsYXllclBhZ2UoY29uZi5pc1N0aWNreVBsYXllclBhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Q29uZmlnKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZztcbiAgICB9XG5cbiAgICBzZXREYXRhKGRhdGEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGRhdGEuYWRzICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgdHlwZW9mIGRhdGEuc3RhdHMgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0eXBlb2YgZGF0YS5zdGF0c1Byb3ZpZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdmFyIG51bVByb3ZpZGVycyA9IDUsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzID0gcGFyc2VJbnQoZGF0YS5zdGF0c1Byb3ZpZGVyLCAxMCkudG9TdHJpbmcoMik7XG4gICAgICAgICAgICBpZiAocHJvdmlkZXJzLmxlbmd0aCAhPT0gbnVtUHJvdmlkZXJzKSB7XG4gICAgICAgICAgICAgICAgLy8gUGFkIGJpbmFyeSBsaXN0IG9mIHByb3ZpZGVyc1xuICAgICAgICAgICAgICAgIC8vIGVnIGRlY2ltYWwgPSAzLCB0aGVyZWZvcmUgaW4gYmluYXJ5ID0gMTEsIG5vdCAwMDAxMSB3aGljaCB3ZSBuZWVkIGJlbG93IGZvciBzdWJzdHJpbmdcbiAgICAgICAgICAgICAgICB3aGlsZSAocHJvdmlkZXJzLmxlbmd0aCA8IG51bVByb3ZpZGVycykge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnMgPSAnMCcgKyBwcm92aWRlcnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFN0YXRzIFByb3ZpZGVyIFZhbHVlczpcbiAgICAgICAgICAgICAqIC0gMSAgQUdPRlxuICAgICAgICAgICAgICogLSAyICBTaXRlc3RhdCAgICBSZW1vdmVkIChCQkNDT00tNTY3NClcbiAgICAgICAgICAgICAqIC0gNCAgTmllbHNlbiBVU1xuICAgICAgICAgICAgICogLSA4ICBOaWVsc2VuIE5aXG4gICAgICAgICAgICAgKiAtIDE2IE5pZWxzZW4gQVVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgX2NvbmZpZy5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgICAgICAnYWRzJzogKGRhdGEuYWRzID09PSAxICYmIF9jb25maWcuc2V0dGluZ3MuYWRzICE9PSBmYWxzZSksXG4gICAgICAgICAgICAgICAgJ2FuYWx5dGljcyc6IChkYXRhLnN0YXRzID09PSAxICYmIF9jb25maWcuc2V0dGluZ3MuYW5hbHl0aWNzICE9PSBmYWxzZSksXG4gICAgICAgICAgICAgICAgLy8gSW5zdHJ1Y3Rpb25zOiB3aGVuIGFkZGluZyBuZXcsIGluY3JlYXNlIG51bVByb3ZpZGVycyBhYm92ZSwgdXBkYXRlIHRoZSBcInZhciBzZXR0aW5nc1wiIGRlZmF1bHRzIGF0IHRvcCBvZiBwYWdlIGFuZCBhZGQgdG8gd3dzY3JpcHRzLmluaSBpbiB0aGUgc2FtZSBvcmRlclxuICAgICAgICAgICAgICAgICduaWVsc2VuLWF1JzogKGRhdGEuc3RhdHMgPT09IDEgJiYgcGFyc2VJbnQocHJvdmlkZXJzLnN1YnN0cigwLCAxKSwgMTApKSxcbiAgICAgICAgICAgICAgICAnbmllbHNlbi1ueic6IChkYXRhLnN0YXRzID09PSAxICYmIHBhcnNlSW50KHByb3ZpZGVycy5zdWJzdHIoMSwgMSksIDEwKSksXG4gICAgICAgICAgICAgICAgJ25pZWxzZW4tdXMnOiAoZGF0YS5zdGF0cyA9PT0gMSAmJiBwYXJzZUludChwcm92aWRlcnMuc3Vic3RyKDIsIDEpLCAxMCkpLFxuICAgICAgICAgICAgICAgICdzaXRlc3RhdCc6IDAsICAvLyByZW1vdmVkIChCQkNDT00tNTY3NClcbiAgICAgICAgICAgICAgICAnYWdvZic6IDAsICAvLyByZW1vdmUgKEJCQ0NPTS03MDQ2KVxuICAgICAgICAgICAgICAgIC8vIEluc3RydWN0aW9uczogd2hlbiBhZGRpbmcgbmV3LCBpbmNyZWFzZSBudW1Qcm92aWRlcnMgYWJvdmUsIHVwZGF0ZSB0aGUgXCJ2YXIgc2V0dGluZ3NcIiBkZWZhdWx0cyBhdCB0b3Agb2YgcGFnZSBhbmQgYWRkIHRvIHd3c2NyaXB0cy5pbmkgaW4gdGhlIHNhbWUgb3JkZXJcbiAgICAgICAgICAgICAgICAnY29tU2NvcmUnOiBfY29uZmlnLnNldHRpbmdzLmNvbVNjb3JlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0RmxhZ3BvbGVzKGZsYWcpIHtcbiAgICAgICAgLy8gVGhpcmQgUGFydHkgRGlzYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBmbGFnLnRwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRUaGlyZFBhcnR5RGlzYWJsZWQoZmxhZy50cCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3V0YnJhaW5cbiAgICAgICAgaWYgKHR5cGVvZiBmbGFnLm8gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldE91dGJyYWluRW5hYmxlZChmbGFnLm8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkc2Vuc2UgRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGZsYWcuZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWRzZW5zZUVuYWJsZWQoZmxhZy5kKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZHNwb3J0YXBwIEVuYWJsZWRcbiAgICAgICAgaWYgKHR5cGVvZiBmbGFnLmFzYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QWRzcG9ydGFwcEVuYWJsZWQoZmxhZy5hc2EpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExvdGFtZSBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgZmxhZy5sICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRMb3RhbWVFbmFibGVkKGZsYWcubCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGxhdGludW0gRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGZsYWcucCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0UGxhdGludW1FbmFibGVkKGZsYWcucCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3B0aW1pemVseSBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgZmxhZy56ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRPcHRpbWl6ZWx5RW5hYmxlZChmbGFnLnopO1xuICAgICAgICB9XG4gICAgICAgIC8vIEdyYXBlc2hvdCBFbmFibGVkXG4gICAgICAgIGlmICh0eXBlb2YgZmxhZy5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpcy5zZXRHcmFwZXNob3RFbmFibGVkKGZsYWcuZyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hlcmxvY2sgRW5hYmxlZFxuICAgICAgICBpZiAodHlwZW9mIGZsYWcuc2ggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNoZXJsb2NrRW5hYmxlZChmbGFnLnNoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9mZmVycyB0aGUgYWJpbGl0eSBmb3IgYSBwcm9kdWN0IHRvIHNwZWNpZnkgd2hhdCBzZWN0aW9ucyBzaG91bGQgYmUgYW5kIGZvciB1cyBub3RcbiAgICAgKiB0byBkZXJpdmUgdGhlIHNlY3Rpb25zIGZyb20gdGhlIHBhZ2UgVXJpLiAgVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VkIHdpdGhpbiBiYmNkb3Rjb20uc2VjdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgc2V0U2VjdGlvbnMoc2VjdHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZWN0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChzZWN0cyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgX2NvbmZpZy5zZWN0aW9ucyA9IHNlY3RzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfY29uZmlnLnNlY3Rpb25zID0gc2VjdHMuc3BsaXQoJy8nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9jb25maWcuc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNlY3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5zZWN0aW9ucztcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIFBhZ2UgVHlwZSBlZyBTVE9SWSwgSU5ERVgsIFZJREVPXG4gICAgICovXG4gICAgc2V0VHlwZSh0eXBlKSB7XG4gICAgICAgIF9jb25maWcucGFnZVR5cGUgPSB0eXBlLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcucGFnZVR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmVhdHVyZSBTd2l0Y2hcbiAgICAgKi9cbiAgICBzZXRGZWF0dXJlcyhmZWF0dXJlcykge1xuICAgICAgICBfY29uZmlnLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGdldEZlYXR1cmVzKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5mZWF0dXJlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQQUwgRU5WXG4gICAgICovXG4gICAgc2V0UGFsRW52KHBhbEVudikge1xuICAgICAgICBfY29uZmlnLnBhbEVudiA9IHBhbEVudjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0UGFsRW52KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5wYWxFbnY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcnkgSGVhZGxpbmVcbiAgICAgKi9cbiAgICBzZXRIZWFkbGluZShzdHIpIHtcbiAgICAgICAgX2NvbmZpZy5oZWFkbGluZSA9IHN0cjtcbiAgICB9XG5cbiAgICBnZXRIZWFkbGluZSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuaGVhZGxpbmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzZXQgdGhlIGxvYWRpbmcgb2YgYWRzIGluIERGUCB0byBiZSBkb25lIEFzeW5jaHJvbm91c2x5XG4gICAgICogQHBhcmFtIGlzQXN5bmNcbiAgICAgKi9cbiAgICBzZXRBc3luYyhpc0FzeW5jKSB7XG4gICAgICAgIF9jb25maWcuYXN5bmMgPSBpc0FzeW5jO1xuICAgIH1cblxuICAgIGlzQXN5bmMoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmFzeW5jO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZGlzYWJsZSBhZHMgbG9hZGluZyBpbml0aWFsbHkgaW4gREZQIHVudGlsIHRoZSByZWZyZXNoIG1ldGhvZCBpcyBjYWxsZWQgKE9ubHkgYXZhaWxhYmxlIGluIEFzeW5jIE1vZGUpXG4gICAgICogQHBhcmFtIGlzRGlzYWJsZUFkc0luaXRpYWxMb2FkXG4gICAgICovXG4gICAgc2V0RGlzYWJsZUluaXRpYWxMb2FkKGlzRGlzYWJsZUFkc0luaXRpYWxMb2FkKSB7XG4gICAgICAgIF9jb25maWcuZGlzYWJsZUFkc0luaXRpYWxMb2FkID0gaXNEaXNhYmxlQWRzSW5pdGlhbExvYWQ7XG4gICAgfVxuXG4gICAgaXNEaXNhYmxlSW5pdGlhbExvYWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmRpc2FibGVBZHNJbml0aWFsTG9hZDtcbiAgICB9XG5cblxuICAgIGlzVG9wTGV2ZWxTaXRlKHNpdGUpIHtcbiAgICAgICAgdmFyIHBhdGhuYW1lID0gX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgcGF0aG5hbWUgIT09ICd1bmRlZmluZWQnICYmIHBhdGhuYW1lLmluZGV4T2YoJy8nICsgc2l0ZSkgPT09IDApO1xuICAgIH1cblxuICAgIGlzU3BvcnRBcHAoKSB7XG4gICAgICAgIHZhciBwYXRobmFtZSA9IF9jb25maWcud2luZG93TG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgICBocmVmID0gX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5ocmVmO1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBwYXRobmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgKHBhdGhuYW1lLmluZGV4T2YoJy5hcHAnKSAhPT0gLTEgfHwgKHR5cGVvZiBocmVmICE9PSAndW5kZWZpbmVkJyAmJiAoaHJlZi5pbmRleE9mKCcuYXBwJykgIT09IC0xKSkpICYmXG4gICAgICAgIChwYXRobmFtZS5pbmRleE9mKCcvc3BvcnQnKSA9PT0gMCB8fCAodHlwZW9mIGhyZWYgIT09ICd1bmRlZmluZWQnICYmIChocmVmLmluZGV4T2YoJ2FuYWx5dGljcy1kZWJ1ZycpICE9PSAtMSkpKSk7XG4gICAgfVxuXG4gICAgaXNSZWVsKCkge1xuICAgICAgdmFyIHBhdGhuYW1lID0gX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgIHJldHVybiAodHlwZW9mIHBhdGhuYW1lICE9PSAndW5kZWZpbmVkJyAmJiAocGF0aG5hbWUuaW5kZXhPZignL3JlZWwnKSA9PT0gMCkpO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKGtleSkge1xuICAgICAgICByZXR1cm4gKHR5cGVvZiBfY29uZmlnLnNldHRpbmdzW2tleV0gIT09ICd1bmRlZmluZWQnID8gX2NvbmZpZy5zZXR0aW5nc1trZXldIDogZmFsc2UpO1xuICAgIH1cblxuICAgIGlzQWRzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUoJ2FkcycpICYmICF0aGlzLmlzVGhpcmRQYXJ0eURpc2FibGVkRVUoKTtcbiAgICB9XG5cbiAgICBzZXRBZHNFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5zZXR0aW5ncy5hZHMgPSAoZW5hYmxlZCAhPT0gMCAmJiBlbmFibGVkICE9PSBmYWxzZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG5cbiAgICBzZXRBbmFseXRpY3NFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgLyogT25jZSBpdCBoYXMgYmVlbiBkaXNhYmxlIHRvIG5vdCBhbGxvdyBpdCB0byBiZSBlbmFibGVkICovXG4gICAgICAgIF9jb25maWcuc2V0dGluZ3MuYW5hbHl0aWNzID0gKGVuYWJsZWQgIT09IDAgJiYgZW5hYmxlZCAhPT0gZmFsc2UpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzQW5hbHl0aWNzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBY3RpdmUoJ2FuYWx5dGljcycpICYmICF0aGlzLmlzVGhpcmRQYXJ0eURpc2FibGVkRVUoKTtcbiAgICB9XG5cblxuICAgIHNldENvbVNjb3JlRW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIC8qIE9uY2UgaXQgaGFzIGJlZW4gZGlzYWJsZSB0byBub3QgYWxsb3cgaXQgdG8gYmUgZW5hYmxlZCAqL1xuICAgICAgICBfY29uZmlnLnNldHRpbmdzLmNvbVNjb3JlID0gKGVuYWJsZWQgIT09IDAgJiYgZW5hYmxlZCAhPT0gZmFsc2UpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzQ29tU2NvcmVFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0FjdGl2ZSgnY29tU2NvcmUnKSAmJiB0aGlzLmlzQWN0aXZlKCdhbmFseXRpY3MnKSAmJiAhdGhpcy5pc1RoaXJkUGFydHlEaXNhYmxlZEVVKCk7XG4gICAgfVxuXG4gICAgc2V0T3V0YnJhaW5FbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5vdXRicmFpbkVuYWJsZWQgPSAoZW5hYmxlZCAhPT0gMCAmJiBlbmFibGVkICE9PSBmYWxzZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNPdXRicmFpbkVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLm91dGJyYWluRW5hYmxlZCAmJiAhdGhpcy5pc1RoaXJkUGFydHlEaXNhYmxlZEVVKCkgJiYgKHdpbmRvdy5iYmNjb29raWVzICYmIGJiY2Nvb2tpZXMucmVhZFBvbGljeSAmJiBiYmNjb29raWVzLnJlYWRQb2xpY3koJ3BlcmZvcm1hbmNlJykpO1xuICAgIH1cblxuICAgIHNldEFkc2Vuc2VFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5hZHNlbnNlRW5hYmxlZCA9IChlbmFibGVkICE9PSAwICYmIGVuYWJsZWQgIT09IGZhbHNlKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc0Fkc2Vuc2VFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5hZHNlbnNlRW5hYmxlZCAmJiAhdGhpcy5pc1RoaXJkUGFydHlEaXNhYmxlZEVVKCk7XG4gICAgfVxuXG4gICAgc2V0QWRzcG9ydGFwcEVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICBfY29uZmlnLmFkc3BvcnRhcHBFbmFibGVkID0gKGVuYWJsZWQgIT09IDAgJiYgZW5hYmxlZCAhPT0gZmFsc2UpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzQWRzcG9ydGFwcEVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmFkc3BvcnRhcHBFbmFibGVkO1xuICAgIH1cblxuICAgIHNldExvdGFtZUVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICBfY29uZmlnLmxvdGFtZUVuYWJsZWQgPSAoZW5hYmxlZCAhPT0gMCAmJiBlbmFibGVkICE9PSBmYWxzZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNMb3RhbWVFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5sb3RhbWVFbmFibGVkICYmICF0aGlzLmlzVGhpcmRQYXJ0eURpc2FibGVkRVUoKTtcbiAgICB9XG5cbiAgICBzZXRMb3RhbWVBY3RpdmUoYm9vbCkge1xuICAgICAgICBfY29uZmlnLmxvdGFtZUFjdGl2ZSA9IChib29sICE9PSAwICYmIGJvb2wgIT09IGZhbHNlKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc0xvdGFtZUFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcubG90YW1lQWN0aXZlO1xuICAgIH1cblxuICAgIHNldENvbnRpbnVvdXNQbGF5UGFnZSh2YWx1ZSkge1xuICAgICAgICBfY29uZmlnLmNvbnRpbnVvdXNQbGF5UGFnZSA9ICh2YWx1ZSA9PT0gdHJ1ZSk7XG4gICAgfVxuXG4gICAgaXNDb250aW51b3VzUGxheVBhZ2UoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmNvbnRpbnVvdXNQbGF5UGFnZTtcbiAgICB9XG5cbiAgICBzZXRQbGF0aW51bUVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICBfY29uZmlnLnBsYXRpbnVtRW5hYmxlZCA9IChlbmFibGVkICE9PSAwICYmIGVuYWJsZWQgIT09IGZhbHNlKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc1BsYXRpbnVtRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcucGxhdGludW1FbmFibGVkO1xuICAgIH1cblxuICAgIHNldFRsU3BvcnRJbmRleEVuYWJsZWQoZW5hYmxlZCkge1xuICAgICAgICBfY29uZmlnLnRsU3BvcnRJbmRleEVuYWJsZWQgPSBlbmFibGVkO1xuICAgIH1cblxuICAgIGlzVGxTcG9ydEluZGV4RW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcudGxTcG9ydEluZGV4RW5hYmxlZDtcbiAgICB9XG5cbiAgICBzZXRUbFNwb3J0U3RvcnlFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy50bFNwb3J0U3RvcnlFbmFibGVkID0gZW5hYmxlZDtcbiAgICB9XG5cbiAgICBpc1RsU3BvcnRTdG9yeUVuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnRsU3BvcnRTdG9yeUVuYWJsZWQ7XG4gICAgfVxuXG4gICAgc2V0VGxTcG9ydEZwRW5hYmxlZChlbmFibGVkKSB7XG4gICAgICAgIF9jb25maWcudGxTcG9ydEZwRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgfVxuXG4gICAgaXNUbFNwb3J0RnBFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy50bFNwb3J0RnBFbmFibGVkO1xuICAgIH1cblxuICAgIHNldE9wdGltaXplbHlFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5vcHRpbWl6ZWx5RW5hYmxlZCA9IChlbmFibGVkICE9PSAwICYmIGVuYWJsZWQgIT09IGZhbHNlKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpc09wdGltaXplbHlFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5vcHRpbWl6ZWx5RW5hYmxlZDtcbiAgICB9XG5cbiAgICBzZXRHcmFwZXNob3RFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5ncmFwZXNob3RFbmFibGVkID0gKGVuYWJsZWQgIT09IDAgJiYgZW5hYmxlZCAhPT0gZmFsc2UpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzR3JhcGVzaG90RW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuZ3JhcGVzaG90RW5hYmxlZCAmJiAhdGhpcy5pc1RoaXJkUGFydHlEaXNhYmxlZEVVKCk7XG4gICAgfVxuXG4gICAgc2V0U2hlcmxvY2tFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgX2NvbmZpZy5zaGVybG9ja0VuYWJsZWQgPSAoZW5hYmxlZCAhPT0gMCAmJiBlbmFibGVkICE9PSBmYWxzZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgaXNTaGVybG9ja0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnNoZXJsb2NrRW5hYmxlZCAmJiAhdGhpcy5pc1RoaXJkUGFydHlEaXNhYmxlZEVVKCk7XG4gICAgfVxuXG4gICAgc2V0U2hlcmxvY2tBY3RpdmUoYm9vbCkge1xuICAgICAgICBfY29uZmlnLnNoZXJsb2NrQWN0aXZlID0gKGJvb2wgIT09IDAgJiYgYm9vbCAhPT0gZmFsc2UpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIGlzU2hlcmxvY2tBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnNoZXJsb2NrQWN0aXZlO1xuICAgIH1cblxuICAgIHNldElzV29ybGRTZXJ2aWNlKGJvb2wpIHtcbiAgICAgICAgX2NvbmZpZy5pc1dvcmxkU2VydmljZSA9IGJvb2w7XG4gICAgfVxuXG4gICAgaXNXb3JsZFNlcnZpY2UoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmlzV29ybGRTZXJ2aWNlO1xuICAgIH1cblxuICAgIHNldFRoaXJkUGFydHlEaXNhYmxlZChkaXNhYmxlZCkge1xuICAgICAgICBfY29uZmlnLnRoaXJkUGFydHlEaXNhYmxlZCA9IChkaXNhYmxlZCAhPT0gMSAmJiBkaXNhYmxlZCAhPT0gdHJ1ZSAmJiBfY29uZmlnLnRoaXJkUGFydHlEaXNhYmxlZCAhPT0gdHJ1ZSkgPyBmYWxzZSA6IHRydWU7XG4gICAgfVxuXG4gICAgaXNUaGlyZFBhcnR5RGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnRoaXJkUGFydHlEaXNhYmxlZDtcbiAgICB9XG5cbiAgICBpc1RoaXJkUGFydHlEaXNhYmxlZEVVKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy50aGlyZFBhcnR5RGlzYWJsZWQgJiYgX2NvbmZpZy5pc0VVO1xuICAgIH1cblxuICAgIHNldFN0aWNreVBsYXllclBhZ2UodmFsdWUpIHtcbiAgICAgICAgX2NvbmZpZy5zdGlja3lQbGF5ZXJQYWdlID0gKHZhbHVlID09PSB0cnVlKTtcbiAgICB9XG5cbiAgICBpc1N0aWNreVBsYXllclBhZ2UoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLnN0aWNreVBsYXllclBhZ2U7XG4gICAgfVxuXG4gICAgc2V0SUU3KHZhbHVlKSB7XG4gICAgICAgIF9jb25maWcuaWVWZXJzaW9uLmllNyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlzSUU3KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5pZVZlcnNpb24uaWU3O1xuICAgIH1cblxuICAgIHNldElFOCh2YWx1ZSkge1xuICAgICAgICBfY29uZmlnLmllVmVyc2lvbi5pZTggPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBpc0lFOCgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuaWVWZXJzaW9uLmllODtcbiAgICB9XG5cbiAgICBzZXRJRTkodmFsdWUpIHtcbiAgICAgICAgX2NvbmZpZy5pZVZlcnNpb24uaWU5ID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaXNJRTkoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmllVmVyc2lvbi5pZTk7XG4gICAgfVxuXG4gICAgc2V0RVUoYm9vbCkge1xuICAgICAgICBfY29uZmlnLmlzRVUgPSAoYm9vbCAhPT0gMCAmJiBib29sICE9PSBmYWxzZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIHRoaXMudXBkYXRlTlBBKCk7XG4gICAgfVxuXG4gICAgaXNFVSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuaXNFVTtcbiAgICB9XG5cbiAgICB1cGRhdGVOUEEoKSB7XG4gICAgICAgIGlmIChfY29uZmlnLmlzRVUpIHtcbiAgICAgICAgICAgIF9jb25maWcuaXNOUEEgPSB3aW5kb3cuYmJjY29va2llcyAmJiBiYmNjb29raWVzLnJlYWRQb2xpY3kgJiYgYmJjY29va2llcy5yZWFkUG9saWN5KCdwZXJmb3JtYW5jZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNOUEEoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmlzTlBBO1xuICAgIH1cblxuICAgIC8vIFRPRE8gLSBLQiAxNDAyMjUgSW52ZXN0aWdhdGUgd2hlcmUgdGhlc2UgcHJlZml4IGFyZSBzZXQgYW5kIHJlbW92ZSB3aGVuIGFwcHJvcHJpYXRlLlxuICAgIHNldEFzc2V0UHJlZml4KHByZWZpeCkge1xuICAgICAgICBfY29uZmlnLnByZWZpeGVzLmFzc2V0UHJlZml4ID0gcHJlZml4O1xuICAgIH1cblxuICAgIGdldEFzc2V0UHJlZml4KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy5wcmVmaXhlcy5hc3NldFByZWZpeDtcbiAgICB9XG5cbiAgICBzZXRBcHBOYW1lKGFwcE5hbWUpIHtcbiAgICAgICAgX2NvbmZpZy5hcHBOYW1lID0gYXBwTmFtZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0QXBwTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcuYXBwTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUT0RPIC0gS0IgMTUwNjI5IERlcHJlY2F0ZSB0aGUgZm9sbG93aW5nIGFuZCBqdXN0IHVzZSBnZXQvc2V0QXNzZXRQcmVmaXgoKSwgaGF2aW5nIG9uZSBmb3IgZWFjaCBmb2xkZXIgaXMgcmVkdW5kYW50XG4gICAgICogTiZLIHVzZXMgdGhlc2UgYXMgZmlsZXMgYXJlIHVwbG9hZGVkIHRvIGRpZmZlcmVudCBkaXJlY3Rvcmllc1xuICAgICAqL1xuICAgIHNldEpzUHJlZml4KHByZWZpeCkge1xuICAgICAgICBfY29uZmlnLnByZWZpeGVzLmpzUHJlZml4ID0gcHJlZml4O1xuICAgIH1cblxuICAgIGdldEpzUHJlZml4KCkge1xuICAgICAgICByZXR1cm4gKF9jb25maWcucHJlZml4ZXMuanNQcmVmaXggIT09ICcnID8gX2NvbmZpZy5wcmVmaXhlcy5qc1ByZWZpeCA6IHRoaXMuZ2V0QXNzZXRQcmVmaXgoKSArICdzY3JpcHQnKTtcbiAgICB9XG5cbiAgICBzZXRTd2ZQcmVmaXgocHJlZml4KSB7XG4gICAgICAgIF9jb25maWcucHJlZml4ZXMuc3dmUHJlZml4ID0gcHJlZml4O1xuICAgIH1cblxuICAgIGdldFN3ZlByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIChfY29uZmlnLnByZWZpeGVzLnN3ZlByZWZpeCAhPT0gJycgPyBfY29uZmlnLnByZWZpeGVzLnN3ZlByZWZpeCA6IHRoaXMuZ2V0QXNzZXRQcmVmaXgoKSArICdzd2YnKTtcbiAgICB9XG5cbiAgICBzZXRDc3NQcmVmaXgocHJlZml4KSB7XG4gICAgICAgIF9jb25maWcucHJlZml4ZXMuY3NzUHJlZml4ID0gcHJlZml4O1xuICAgIH1cblxuICAgIGdldENzc1ByZWZpeCgpIHtcbiAgICAgICAgcmV0dXJuIChfY29uZmlnLnByZWZpeGVzLmNzc1ByZWZpeCAhPT0gJycgPyBfY29uZmlnLnByZWZpeGVzLmNzc1ByZWZpeCA6IHRoaXMuZ2V0QXNzZXRQcmVmaXgoKSArICdzdHlsZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRPRE8gRU5EIC0gRGVwcmVjYXRlIHRoZSBmb2xsb3dpbmcgYW5kIGp1c3QgdXNlIGdldC9zZXRBc3NldFByZWZpeCgpLCBoYXZpbmcgb25lIGZvciBlYWNoIGZvbGRlciBpcyByZWR1bmRhbnRcbiAgICAgKi9cblxuICAgIHNldFZlcnNpb24odikge1xuICAgICAgICBfY29uZmlnLnZlcnNpb24gPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRWZXJzaW9uKCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZy52ZXJzaW9uO1xuICAgIH1cblxuICAgIHNldFdpbmRvd0xvY2F0aW9uKGxvY2F0aW9uKSB7XG4gICAgICAgIF9jb25maWcud2luZG93TG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0V2luZG93TG9jYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLndpbmRvd0xvY2F0aW9uO1xuICAgIH1cblxuICAgIHNldFdpbmRvd0RvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgICAgIF9jb25maWcud2luZG93RG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0V2luZG93RG9jdW1lbnQoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLndpbmRvd0RvY3VtZW50O1xuICAgIH1cblxuICAgIHNldFJlZmVycmVyKHJlZikge1xuICAgICAgICBfY29uZmlnLnJlZmVycmVyID0gcmVmO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRSZWZlcnJlcigpIHtcbiAgICAgICAgcmV0dXJuIF9jb25maWcucmVmZXJyZXI7XG4gICAgfVxuXG4gICAgZ2V0QW5hbHl0aWNzQ29uZmlnKCkge1xuICAgICAgICByZXR1cm4gQU5BTFlUSUNTO1xuICAgIH1cblxuICAgIGdldEFuYWx5dGljc1VyaSh2ZW5kb3IpIHtcbiAgICAgICAgcmV0dXJuIGJiY2RvdGNvbS5hbmFseXRpY3MuY29tU2NvcmUuc3NjSGVscGVyLmdldEFuYWx5dGljc0xvY2F0aW9uKCk7XG4gICAgfVxuXG4gICAgc2V0RGF4RW52aXJvbm1lbnRzKGRheEVudmlyb25tZW50cyA9IFtdKSB7XG4gICAgICAgIF9jb25maWcuZGF4RW52aXJvbm1lbnRzID0gZGF4RW52aXJvbm1lbnRzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXREYXhFbnZpcm9ubWVudHMoKSB7XG4gICAgICAgIHJldHVybiBfY29uZmlnLmRheEVudmlyb25tZW50cztcbiAgICB9XG5cbiAgICBnZXRBbmFseXRpY3NTdWl0ZSh2ZW5kb3IpIHtcbiAgICAgICAgdmFyIHRlc3RFbnYgPSBpc1Rlc3RFbnYoX2NvbmZpZy53aW5kb3dMb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgaWYgKHRoaXMuaXNTcG9ydEFwcCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRlc3RFbnYgPyBBTkFMWVRJQ1MuQ09NU0NPUkUuQVBQX1NVSVRFX1RFU1QgOiBBTkFMWVRJQ1MuQ09NU0NPUkUuQVBQX1NVSVRFX0xJVkUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGVzdEVudiA/IEFOQUxZVElDUy5DT01TQ09SRS5XRUJTSVRFX1NVSVRFX1RFU1QgOiBBTkFMWVRJQ1MuQ09NU0NPUkUuV0VCU0lURV9TVUlURV9MSVZFKTtcbiAgICB9XG5cbiAgICBnZXRBbmFseXRpY3NBY2N0SWQoKSB7XG4gICAgICAgIHJldHVybiAoaXNUZXN0RW52KF9jb25maWcud2luZG93TG9jYXRpb24uaHJlZikgPyBBTkFMWVRJQ1MuQ09NU0NPUkUuQ1VTVE9NRVJfSURfVEVTVCA6IEFOQUxZVElDUy5DT01TQ09SRS5DVVNUT01FUl9JRF9MSVZFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0aW5nIG9ubHlcbiAgICAgKi9cbiAgICByKCkge1xuICAgICAgICB0aGlzLnNldFdpbmRvd0xvY2F0aW9uKGdldFdpbkxvYygpKTtcbiAgICAgICAgdGhpcy5zZXRXaW5kb3dEb2N1bWVudChnZXRXaW5Eb2MoKSk7XG4gICAgICAgIHRoaXMuc2V0UmVmZXJyZXIoJycpO1xuICAgICAgICB0aGlzLnNldFNlY3Rpb25zKFtdKTtcbiAgICAgICAgX2NvbmZpZy5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGFkczogdHJ1ZSxcbiAgICAgICAgICAgIGFuYWx5dGljczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbVNjb3JlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2V0SUU3KGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRJRTgoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldEFzc2V0UHJlZml4KCcnKTtcbiAgICAgICAgdGhpcy5zZXRPdXRicmFpbkVuYWJsZWQodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0QWRzZW5zZUVuYWJsZWQodHJ1ZSk7XG4gICAgICAgIHRoaXMuc2V0QWRzcG9ydGFwcEVuYWJsZWQoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFN0aWNreVBsYXllclBhZ2UoZmFsc2UpO1xuICAgICAgICB0aGlzLnNldENvbnRpbnVvdXNQbGF5UGFnZShmYWxzZSk7XG4gICAgICAgIHRoaXMuc2V0TG90YW1lQWN0aXZlKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXRIZWFkbGluZSgnJyk7XG4gICAgICAgIHRoaXMuc2V0VHlwZSgnJyk7XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBDb25maWc7XG5cbmZ1bmN0aW9uIGdldFdpbkxvYygpIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5Eb2MoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudDtcbn1cblxuZnVuY3Rpb24gaXNUZXN0RW52KGhyZWYpIHtcbiAgICByZXR1cm4gKC8oc2FuZGJveHxpbnR8dGVzdHxzdGFnZSkoLmRldikqLmJiYy5jbyovKS50ZXN0KGhyZWYpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NvbmZpZy5qcyIsImV4cG9ydCBjb25zdCBQQUxfRU5WX0xJVkUgPSAnbGl2ZSc7XG5leHBvcnQgY29uc3QgUEFMX0VOVl9TVEFHRSA9ICdzdGFnZSc7XG5leHBvcnQgY29uc3QgUEFMX0VOVl9URVNUID0gJ3Rlc3QnO1xuZXhwb3J0IGNvbnN0IFBBTF9FTlZfSU5UID0gJ2ludCc7XG5leHBvcnQgY29uc3QgUEFMX0VOVl9TQU5EQk9YID0gJ3NhbmRib3gnO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NvbW1vbi9mZWF0dXJlU3dpdGNoL2NvbnN0cy5qcyIsIi8qXG4gKiBBTFdBWVMgUkVRVUlSRUQgSU5URVJOQVRJT05BTCBmb3IgYW5hbHl0aWNzLmpzLCBpcnJlc3BlY3RpdmUgb2YgYWRzIGJlaW5nIGVuYWJsZWRcbiAqL1xuXG4vKipcbiAqIFRoZXJlIGFyZSBzdWJ0bGUgZGlmZmVyZW5jZXMgb2Ygc2VjdGlvbi9zdWJzZWN0aW9uIGNsYXNzaWZpY2F0aW9ucyBiZXR3ZWVuIGFkdmVydGlzaW5nIGFuZCBhbmFseXRpY3NcbiAqIGJhc2VkIG9uIERvdWJsZWNsaWNrIHRhcmdldHRpbmcgYW5kIEFuYWx5dGljcyB0cmFja2luZyByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gW107XG52YXIgYWR2ZXJ0U2VjdGlvbnMgPSBbXTtcbnZhciBhbmFseXRpY3NTZWN0aW9ucyA9IFtdO1xuXG4vKipcbiAqIFN0YW5kYXJkaXNlIFVyaSBpbmNvbnNpc3RlbmNpZXNcbiAqL1xudmFyIGNsZWFudXBQYXRoID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIHZhciB3c0xhbmcgPSBuZXcgUmVnRXhwKCdeKGFmYWFub3JvbW9vfGFmcmlxdWV8YW1oYXJpY3xhcmFiaWN8YXplcml8YmVuZ2FsaXxidXJtZXNlfGdhaHV6YXxndWphcmF0aSdcbiAgICAgICAgKyd8aGF1c2F8aGluZGl8aWdib3xpbmRvbmVzaWF8a29yZWFufGt5cmd5enxqYXBhbmVzZXxtYXJhdGhpfG11bmRvfG5haWRoZWFjaGRhbnxuZXBhbGl8bmV3eWRkaW9ufHBhc2h0bydcbiAgICAgICAgKyd8cGVyc2lhbnxwaWRnaW58cG9ydHVndWVzZXxwdW5qYWJpfHJ1c3NpYW58c2VyYmlhbnxzaW5oYWxhfHNvbWFsaXxzd2FoaWxpfHRhamlrfHRhbWlsfHRlbHVndXx0aGFpJ1xuICAgICAgICArJ3x0aWdyaW55YXx0dXJrY2V8dWtjaGluYXx1a3JhaW5pYW58dXJkdXx1emJla3x2aWV0bmFtZXNlfHlvcnViYXx6aG9uZ3dlbiknKTtcblxuICAgIHJldHVybiBwYXRoXG4gICAgICAgIC5yZXBsYWNlKC9cXD8uKiQvLCAnJykgICAgICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZXZlcnl0aGluZyBhZnRlciA/IGluIHVybFxuICAgICAgICAucmVwbGFjZSgvXFwjLiokLywgJycpICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZXJ5dGhpbmcgYWZ0ZXIgIyBpbiB1cmxcbiAgICAgICAgLnJlcGxhY2UoL15uZXdzXFwvMC8sICduZXdzJykgICAgICAgICAgICAgICAvLyByZW1vdmUgLzAvXG4gICAgICAgIC5yZXBsYWNlKC9ed2VhdGhlclxcLzAvLCAnd2VhdGhlcicpICAgICAgICAgICAgICAgLy8gcmVtb3ZlIC8wL1xuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC8odWt8d29ybGR8dXN8YXNpYSlcXC8oaGVhbHRoKSg/IS0pLywgXCJuZXdzLyQyXCIpLy8gY29udmVydCAvbmV3cy91ay9oZWFsdGggdG8gL25ld3MvaGVhbHRoIChyZW0gZWRpdGlvbiwgb25seSBvbiBpbmRleCwgbm90IG9uIHN0b3J5KVxuICAgICAgICAucmVwbGFjZSgvXihuZXdzXFwvYXZcXC8pKC4qKVxcL1teXFwvXSskLywnJDEkMicpLy8gY29udmVydCAvbmV3cy9hdi8qL3RpdGxlIHRvIC9uZXdzL2F2LyogKHJlbSBzdG9yeSB0aXRsZSBhZnRlciBsYXN0IHNsYXNoKVxuICAgICAgICAucmVwbGFjZSgvXm5ld3NcXC9hdlxcLy8sIFwibmV3cy9cIikvLyBjb252ZXJ0IC9uZXdzL2F2LyogdG8gL25ld3MvKiAocmVtICdhdicpXG4gICAgICAgIC5yZXBsYWNlKC8oX3xcXC18XFwvKT9bQS1aMC05XXs3LDh9JC8sICcnKSAgICAgLy8gcmVtb3ZlIHN0b3J5IElkIC8xMjM0NTY3OCwgXzEyMzQ1Njc4IG9yIC0xMjM0NTY3OFxuICAgICAgICAucmVwbGFjZSgvXFwvW2EtejAtOV0rXFwuc3RtLywgJycpICAgICAgICAgICAgIC8vIHJlbW92ZSBmcm9tIG9sZCBDUFMgcGFnZXMgZWcgL2RlZmF1bHQuc3RtXG4gICAgICAgIC5yZXBsYWNlKC9fYW5kXy8sICctJykgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgZW50ZXJ0YWlubWVudF9hbmRfYXJ0cyB0byBlbnRlcnRhaW5tZW50LWFydHNcbiAgICAgICAgLnJlcGxhY2UoL18vZywgJy0nKSAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2FudCBjb25zaXN0ZW5jeSBiZXR3ZWVuIGRlc2t0b3AgYW5kIHJlc3BvbnNpdmVcbiAgICAgICAgLnJlcGxhY2UoL15uZXdzXFwvKGVuZ2xhbmR8bm9ydGhlcm4taXJlbGFuZHxzY290bGFuZHx3YWxlcykoJHwtfFxcLykvLCBcIm5ld3MvdWsvJDEkMlwiKSAgIC8vIGFkZCAnL3VrLydcbiAgICAgICAgLnJlcGxhY2UoL15uZXdzXFwvdWstKFthLXpdKykoLShbYS16XSspKT8vLCBcIm5ld3MvdWsvJDEvJDNcIikgIC8vIGNvbnZlcnQgL25ld3MvdWstd2FsZXMtc291dGgtZWFzdC13YWxlcyB0byAvbmV3cy91ay93YWxlcy9zb3V0aC1lYXN0LXdhbGVzXG4gICAgICAgIC5yZXBsYWNlKC9ebmV3c1xcLyh3b3JsZCktKGFmcmljYXxhc2lhfGV1cm9wZSkoLShbYS16XSspKT8vLCBcIm5ld3MvJDEvJDIvJDRcIikgIC8vIGNvbnZlcnQgL25ld3Mvd29ybGQtYXNpYSB0byAvbmV3cy93b3JsZC9hc2lhICAobm8gaHlwaGVuIGluIG5hbWUpXG4gICAgICAgIC5yZXBsYWNlKC9ebmV3c1xcLyh3b3JsZCktKFthLXpcXC1dKykvLCBcIm5ld3MvJDEvJDIvXCIpICAvLyBjb252ZXJ0IC9uZXdzL3dvcmxkLWxhdGluLWFtZXJpY2EgdG8gL25ld3Mvd29ybGQvbGF0aW4tYW1lcmljYSAoaHlwaGVuIGluIG5hbWUpXG4gICAgICAgIC5yZXBsYWNlKC9eKG5ld3NiZWF0KSgkfC18XFwvKS8sIFwibmV3cy8kMSQyXCIpICAgICAvLyBjb252ZXJ0IC9uZXdzYmVhdC8xMjM0NSB0byAvbmV3cy9uZXdzYmVhdC8xMjM0NVxuICAgICAgICAucmVwbGFjZSgvXnNwb3J0XFwvMC8sICdzcG9ydCcpICAgICAgICAgICAgICAgLy8gcmVtb3ZlIC8wL1xuICAgICAgICAucmVwbGFjZSgvXnNwb3J0XFwvYmV0YS8sICdzcG9ydCcpICAgICAgICAgICAgLy8gcmVtb3ZlIC9iZXRhL1xuICAgICAgICAucmVwbGFjZSgvXnNwb3J0XFwvYXZcXC8vLCBcInNwb3J0L1wiKSAgICAgICAgICAgLy8gY29udmVydCAvc3BvcnQvYXYvKiB0byAvc3BvcnQvKiAocmVtICdhdicpXG4gICAgICAgIC5yZXBsYWNlKC9ec3BvcnRcXC8od29ybGR8dWspLywgJ3Nwb3J0JykgICAgICAgICAgICAvLyBHTkxBREFQUFMtNzU1IC0tIHJlbW92ZSAvd29ybGQvIGFuZCAvdWsvIGZyb20gc3BvcnQgcGF0aHNcbiAgICAgICAgLnJlcGxhY2UoL15zcG9ydFxcLyguKilcXC9zcG9ydHMoJHxcXC8pLywgXCJzcG9ydC8kMSQyXCIpIC8vIHJlcGxhY2UgL3Nwb3J0L19fXy9zcG9ydHMvIHdpdGggL3Nwb3J0L19fXy9cbiAgICAgICAgLnJlcGxhY2UoL21hcmtldC1kYXRhXFwvb3ZlcnZpZXcvLCAnbWFya2V0LWRhdGEnKSAgLy8gbWFya2V0IGRhdGEgZnJvbnQtcGFnZSBpcyAnL292ZXJ2aWV3J1xuICAgICAgICAucmVwbGFjZSgvXihwcm9ncmFtbWVzKS8sIFwibmV3cy8kMVwiKSAgICAgICAgIC8vIGNvbnZlcnQgL3Byb2dyYW1tZXMvY2xpY2sgdG8gL25ld3MvcHJvZ3JhbW1lcy9jbGlja1xuICAgICAgICAucmVwbGFjZSh3c0xhbmcsIFwid29ybGRzZXJ2aWNlLyQxXCIpICAgICAgICAgIC8vIGNvbnZlcnQgL2FyYWJpYyB0byAvd29ybGRzZXJ2aWNlL2FyYWJpY1xuICAgICAgICAucmVwbGFjZSgvXnd3aHAvLCAnJykgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IC93d2hwIHRvIC9cbiAgICAgICAgLnJlcGxhY2UoL1xcLmFwcCQvLCAnJykgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSAnLmFwcCcgZWcgL3Nwb3J0L2Zvb3RiYWxsLmFwcCBmb3IgUGhvbmVHYXBcbiAgICAgICAgLnJlcGxhY2UoLzpcXGQrKD89XFwvKS8sICcnKSAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgYW55IHBvcnQgbnVtYmVyc1xuICAgICAgICAucmVwbGFjZSgvXFwvKyQvLCAnJyk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNsYXNoXG59O1xuXG4vKipcbiAqIFNlY3Rpb24gZXhjZXB0aW9ucyBmb3IgYWR2ZXJ0XG4gKi9cbnZhciBidWlsZEFkdmVydFNlY3Rpb25zID0gZnVuY3Rpb24ocGF0aCkge1xuICAgIHBhdGggPSBwYXRoXG4gICAgICAgIC5yZXBsYWNlKC9ebmV3c1xcL3dvcmxkXFwvKFthLXpdKykoLShbYS16XSspKT8vLCBcIm5ld3Mvd29ybGQkMSQzXCIpICAgLy8gL25ld3Mvd29ybGQvdXMtY2FuYWRhLyAtPiAvbmV3cy93b3JsZHVzY2FuYWRhL1xuICAgICAgICAucmVwbGFjZSgvcHJvZ3JhbW1lc1xcL2FzaWFidXNpbmVzc3JlcG9ydC8sICdhc2lhYnVzaW5lc3MnKSAgICAgICAgIC8vIC9wcm9ncmFtbWVzL2FzaWFidXNpbmVzc3JlcG9ydCAtPiAvYXNpYWJ1c2luZXNzXG4gICAgICAgIC5yZXBsYWNlKC9wcm9ncmFtbWVzXFwvY2xpY2skLywgXCJjbGlja29ubGluZVwiKSAgICAgICAgICAgICAgICAgICAgICAvLyAvcHJvZ3JhbW1lcy9jbGljayAtPiAvY2xpY2tvbmxpbmVcbiAgICAgICAgLnJlcGxhY2UoL3dvcmxkc2VydmljZVxcLy8sIFwiXCIpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC93b3JsZHNlcnZpY2UvYXJhYmljIC0+IC9hcmFiaWNcbiAgICByZXR1cm4gcGF0aC5zcGxpdCgnLycpO1xufTtcblxuLyoqXG4gKiBTZWN0aW9uIGV4Y2VwdGlvbnMgZm9yIGFuYWx5dGljc1xuICovXG52YXIgYnVpbGRBbmFseXRpY3NTZWN0aW9ucyA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gcGF0aFxuICAgICAgICAucmVwbGFjZSgvXnNwZWNpYWxmZWF0dXJlcy8sIFwibmV3cy9zcGVjaWFsZmVhdHVyZXNcIikgIC8vIC9zcGVjaWFsZmVhdHVyZXMvIC0+IC9uZXdzL3NwZWNpYWxmZWF0dXJlcy9cbiAgICAgICAgLnJlcGxhY2UoL15zcG9ydFxcLyguKilcXC8oMjBbMC05XXsyfSkoJHxcXC8pLywgXCJzcG9ydC8kMS0kMiQzXCIpOyAgLy8gcmVwbGFjZSAvc3BvcnQvYmxhaC8yMDE0LyB3aXRoIC9zcG9ydC9ibGFoLTIwMTQvXG4gICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKTtcbn07XG5cbi8qKlxuICogQnVpbGQgdXAgYW4gYXJyYXkgb2Ygc2VjdGlvbnNcbiAqL1xudmFyIGJ1aWxkID0gZnVuY3Rpb24oaXNDdXJyZW50VXJpLCBocmVmKSB7XG4gICAgdmFyIHBhdGggPSAnJyxcbiAgICAgICAgX3NlY3Rpb25zID0gW10sXG4gICAgICAgIF9hZHZlcnRTZWN0aW9ucyA9IFtdLFxuICAgICAgICBfYW5hbHl0aWNzU2VjdGlvbnMgPSBbXSxcbiAgICAgICAgVU5LTk9XTiA9ICd1bmtub3duJyxcbiAgICAgICAgcmVzdWx0O1xuICAgIGlmICh0eXBlb2YgaHJlZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmVzdWx0ID0gaHJlZi5tYXRjaCgvaHR0cCh8cyk6XFwvXFwvW2EtejAtOVxcLS5dKyguY29tfC5jby51a3wubmV0KShcXC8pPyguKik/Lyk7XG4gICAgICAgIGlmIChyZXN1bHQpIHsgICAgICAgICAgICAvLyBlZyBodHRwOi8vd3d3LmJiYy5jb20vaGVsbG8vd29ybGQgPT4gaGVsbG8vd29ybGRcbiAgICAgICAgICAgIHBhdGggPSByZXN1bHRbcmVzdWx0Lmxlbmd0aC0xXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhyZWYubWF0Y2goL15cXC8oLiopPy8pO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIC8vIGVnIC8gPT4gJydcbiAgICAgICAgICAgICAgICAvLyBlZyAvaGVsbG8vd29ybGQgPT4gaGVsbG8vd29ybGRcbiAgICAgICAgICAgICAgICBwYXRoID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGgtMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhdGggPSBVTktOT1dOO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKGNvbmZpZy5nZXRTZWN0aW9ucygpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgc2VjdGlvbnMgZnJvbSBVcmlcbiAgICAgICAgdmFyIHVyaSA9IGJiY2RvdGNvbS5hbmFseXRpY3NIZWxwZXIuZ2V0VXJpRm9yU2VjdGlvbnMoKTtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmkgPT09ICd1bmRlZmluZWQnIHx8IHVyaSA9PT0gJycgfHwgdXJpID09PSBudWxsIHx8IHVyaS5pbmRleE9mKCdodHRwJykgIT09IDApIHtcbiAgICAgICAgICAgIC8vIFVua25vd24gd2luZG93LmxvY2F0aW9uXG4gICAgICAgICAgICBwYXRoID0gVU5LTk9XTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHVyaS5tYXRjaCgvaHR0cCh8cyk6XFwvXFwvW2EtejAtOVxcLS5dKyguY29tfC5jby51a3wubmV0KShcXC8pPyguKik/Lyk7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcGF0aCA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoLTFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXRoID0gVU5LTk9XTjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVzZSBzZWN0aW9ucyBkZWZpbmVkIGluIHRoZSBIdG1sIHBhZ2UgKGxpa2VseSBpbmplY3RlZCB3aXRoIHNlcnZlci1zaWRlIHZhbHVlcylcbiAgICAgICAgLy8gQ29udmVydCBhcnJheSBlZyBbXCJuZXdzXCIsIFwid29ybGRcIiwgXCJhc2lhXCIsIFwiaW5kaWFcIl0gdG8gdXJpIHBhdGggZWcgXCIvbmV3cy93b3JsZC9hc2lhL2luZGlhXCJcbiAgICAgICAgcGF0aCA9IGNvbmZpZy5nZXRTZWN0aW9ucygpLmpvaW4oJy8nKTtcbiAgICB9XG4gICAgcGF0aCA9IHBhdGggfHwgJyc7XG4gICAgcGF0aCA9IGNsZWFudXBQYXRoKHBhdGgpO1xuICAgIGlmIChwYXRoID09PSAnJykge1xuICAgICAgICAvLyBIb21lcGFnZVxuICAgICAgICBfc2VjdGlvbnMgPSBfYWR2ZXJ0U2VjdGlvbnMgPSBfYW5hbHl0aWNzU2VjdGlvbnMgPSBbJ2hvbWVwYWdlJ107XG4gICAgfSBlbHNlIHtcbiAgICAgICAgX3NlY3Rpb25zID0gcGF0aC5zcGxpdCgnLycpO1xuICAgICAgICBfYWR2ZXJ0U2VjdGlvbnMgPSBidWlsZEFkdmVydFNlY3Rpb25zKHBhdGgpO1xuICAgICAgICBfYW5hbHl0aWNzU2VjdGlvbnMgPSBidWlsZEFuYWx5dGljc1NlY3Rpb25zKHBhdGgpO1xuICAgIH1cbiAgICBpZiAoaXNDdXJyZW50VXJpKSB7XG4gICAgICAgIC8vIFBlcnNpc3QgY3VycmVudCBwYWdlJ3Mgc2VjdGlvbnMgYXMgZ2xvYmFsc1xuICAgICAgICBzZWN0aW9ucyA9IF9zZWN0aW9ucztcbiAgICAgICAgYWR2ZXJ0U2VjdGlvbnMgPSBfYWR2ZXJ0U2VjdGlvbnM7XG4gICAgICAgIGFuYWx5dGljc1NlY3Rpb25zID0gX2FuYWx5dGljc1NlY3Rpb25zO1xuICAgIH1cbiAgICByZXR1cm4gW19zZWN0aW9ucywgX2FkdmVydFNlY3Rpb25zLCBfYW5hbHl0aWNzU2VjdGlvbnNdO1xufTtcblxuLyoqXG4gKiBMb2FkIGNvcnJlY3QgYXJyYXkgZWcgJ3NlY3Rpb25zJywgJ2FkdmVydFNlY3Rpb25zJywgJ2FuYWx5dGljc1NlY3Rpb25zJ1xuICovXG52YXIgZ2V0QXJyYXkgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdHlwZSA9ICh0eXBlb2YgdHlwZSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IHR5cGUpO1xuICAgIHJldHVybiAodHlwZSA9PT0gJ2FkdmVydCcgPyBhZHZlcnRTZWN0aW9ucyA6ICh0eXBlID09PSAnYW5hbHl0aWNzJyA/IGFuYWx5dGljc1NlY3Rpb25zIDogc2VjdGlvbnMpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGJ1aWxkOiBidWlsZCxcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc2VjdGlvbiBvZiB0aGUgaGllcmFyY2h5XG4gICAgICpcbiAgICAgKiBXaXRoIGEgaGVpcmFyY2h5IG9mIFwibmV3cz53b3JsZD5hc2lhXCI6XG4gICAgICogZWcgZ2V0U2VjdGlvbigwKSAgICAgICAgICAgICAgICAgID0+ICduZXdzJ1xuICAgICAqIGVnIGdldFNlY3Rpb24oMSwgJ2FuYWx5dGljcycpOyAgICA9PiAnd29ybGRhc2lhJ1xuICAgICAqIGVnIGdldFNlY3Rpb24oMSwgJ2FkdmVydCcsIHRydWUpOyA9PiAnd29ybGQnXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW50ZWdlciBvZmZzZXQgV2hpY2ggc2VjdGlvblxuICAgICAqIEBwYXJhbSBzdHJpbmcgdHlwZSAob3B0aW9uYWwpIFdoZXRoZXIgdG8gZ3JhYiBzZWN0aW9uIGZvciAnYWR2ZXJ0JyBvciAnYW5hbHl0aWNzJ1xuICAgICAqIEBwYXJhbSBib29sZWFuIHJlbG9hZERhdGEgKG9wdGlvbmFsKSBSZWJ1aWxkIHNlY3Rpb25zIGRhdGEgYmFzZWQgb24gbmV3L2N1cnJlbnQgd2luZG93LmxvY2F0aW9uXG4gICAgICogQHJldHVybiBtaXhlZCBzdHJpbmd8Ym9vbGVhbiBSZXR1cm5zIGZhbHNlIGlmIG9mZnNldCBkb2VzIG5vdCBleGlzdFxuICAgICAqL1xuICAgIGdldFNlY3Rpb246IGZ1bmN0aW9uKG9mZnNldCwgdHlwZSwgcmVsb2FkRGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIG9mZnNldCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICgodHlwZW9mIHJlbG9hZERhdGEgIT09ICd1bmRlZmluZWQnICYmIHJlbG9hZERhdGEgPT09IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgYnVpbGQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvZmZzZXQgPSBwYXJzZUludChvZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZ2V0QXJyYXkodHlwZSkgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgJiYgdHlwZW9mIGdldEFycmF5KHR5cGUpW29mZnNldF0gIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgJiYgZ2V0QXJyYXkodHlwZSlbb2Zmc2V0XSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QXJyYXkodHlwZSlbb2Zmc2V0XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBoaWVyYXJjaHkgaW4gYSBzZWN0aW9ucyBhcnJheVxuICAgICAqXG4gICAgICogV2l0aCBhIGhpZXJhcmNoeSBvZiBcIm5ld3M+d29ybGQ+YXNpYVwiOlxuICAgICAqIGVnIGdldFNlY3Rpb25zKCkgICAgICAgICAgICAgICAgICA9PiBhcnJheSgnbmV3cycsICd3b3JsZCcsICdhc2lhJylcbiAgICAgKiBlZyBnZXRTZWN0aW9ucygnYW5hbHl0aWNzJyk7ICAgICAgPT4gYXJyYXkoJ25ld3MnLCAnd29ybGRhc2lhJylcbiAgICAgKiBlZyBnZXRTZWN0aW9ucygnYWR2ZXJ0JywgdHJ1ZSk7ICAgPT4gYXJyYXkoJ25ld3MnLCAnd29ybGQnLCAnYXNpYScpXG4gICAgICogZWcgZ2V0U2VjdGlvbnMoKVsyXSAgICAgICAgICAgICAgID0+ICdhc2lhJ1xuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZyB0eXBlIChvcHRpb25hbCkgV2hldGhlciB0byBncmFiIHNlY3Rpb24gZm9yICdhZHZlcnQnIG9yICdhbmFseXRpY3MnXG4gICAgICogQHBhcmFtIGJvb2xlYW4gcmVsb2FkRGF0YSAob3B0aW9uYWwpIFJlYnVpbGQgc2VjdGlvbnMgZGF0YSBiYXNlZCBvbiBuZXcvY3VycmVudCB3aW5kb3cubG9jYXRpb25cbiAgICAgKiBAcmV0dXJuIGFycmF5IFNlY3Rpb24ocykgZm9yIGdpdmVuIGxpbmtcbiAgICAgKi9cbiAgICBnZXRTZWN0aW9uczogZnVuY3Rpb24odHlwZSwgcmVsb2FkRGF0YSkge1xuICAgICAgICBpZiAoKHR5cGVvZiByZWxvYWREYXRhICE9PSAndW5kZWZpbmVkJyAmJiByZWxvYWREYXRhID09PSB0cnVlKSkge1xuICAgICAgICAgICAgYnVpbGQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEFycmF5KHR5cGUpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBoaWVyYXJjaHkgaW4gYSBzZWN0aW9ucyBhcnJheSBmb3IgYSBnaXZlbiBVcmkuICBTb21ldGltZXMgdXNlZCBmb3IgdHJhbnNsYXRpbmcgYSBsaW5rJ3MgaHJlZlxuICAgICAqIGludG8gc2VjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyaW5nIHVyaSBlZyBodHRwOi8vd3d3LmJiYy5jb20vaGVsbG8vd29ybGQgb3IgL2hlbGxvL3dvcmxkXG4gICAgICogQHBhcmFtIHN0cmluZyB0eXBlIChvcHRpb25hbCkgV2hldGhlciB0byBncmFiIHNlY3Rpb24gZm9yICdhZHZlcnQnIG9yICdhbmFseXRpY3MnXG4gICAgICogQHJldHVybiBhcnJheSBTZWN0aW9uKHMpIGZvciBnaXZlbiBsaW5rXG4gICAgICovXG4gICAgZ2V0U2VjdGlvbnNGb3JVcmk6IGZ1bmN0aW9uKHVyaSwgdHlwZSkge1xuICAgICAgICB1cmkgPSAodHlwZW9mIHVyaSA9PT0gJ3VuZGVmaW5lZCcgfHwgdXJpID09PSBudWxsID8gJycgOiB1cmkpO1xuICAgICAgICB0eXBlID0gKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJyA/ICcnIDogdHlwZSk7XG4gICAgICAgIHZhciBkYXRhID0gYnVpbGQoZmFsc2UsIHVyaSk7XG4gICAgICAgIHJldHVybiAodHlwZSA9PT0gJ2FkdmVydCcgPyBkYXRhWzFdIDogKHR5cGUgPT09ICdhbmFseXRpY3MnID8gZGF0YVsyXSA6IGRhdGFbMF0pKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZvciB0ZXN0aW5nIG9ubHkuXG4gICAgICovXG4gICAgcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlY3Rpb25zID0gW107XG4gICAgICAgIGFkdmVydFNlY3Rpb25zID0gW107XG4gICAgICAgIGFuYWx5dGljc1NlY3Rpb25zID0gW107XG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zZWN0aW9ucy5qcyIsInZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnbG9jYWxlJyk7XG52YXIgZGF0YSA9IHtcbiAgICBhZHZlcnRpc2VtZW50VGV4dDogICAgICAgICAgXCJBZHZlcnRpc2VtZW50XCIsXG4gICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAgICAgIFwiaW4gYXNzb2NpYXRpb24gd2l0aFwiLFxuICAgIHNwb25zb3JlZEJ5VGV4dDogICAgICAgICAgICBcImlzIHNwb25zb3JlZCBieVwiLFxuICAgIGFkdmVydGlzaW5nUGFydG5lcnNUZXh0OiAgICBcIkFkdmVydGlzaW5nIFBhcnRuZXJzXCIsXG4gICAgYWRzQnlHb29nbGVUZXh0OiAgICAgICAgICAgIFwiQWRzIGJ5IEdvb2dsZVwiLFxuICAgIGFkdmVydEluZm9QYWdlVXJsOiAgICAgICAgICBcImh0dHBzOi8vd3d3LmJiYy5jb20vcHJpdmFjeS9jb29raWVzL2ludGVybmF0aW9uYWwvXCIsXG4gICAgYXNzb2NpYXRpb25JbmZvUGFnZVVybDogICAgIFwiaHR0cHM6Ly9hZHZlcnRpc2luZy5iYmN3b3JsZHdpZGUuY29tL2JiYy1zdG9yeXdvcmtzLWNvbnRlbnQtZGVmaW5pdGlvbnMvXCIsXG4gICAgZ29vZ2xlQWRzUGFnZVVybDogICAgICAgICAgIFwiaHR0cHM6Ly93d3cuYmJjLmNvLnVrL2JiYy5jb20vZmFxL2Fkc19ieV9nb29nbGUuc2h0bWxcIlxufTtcblxudmFyIGxvY2FsZURhdGEgPSB7XG4gICAgXCJhbVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi4Yib4Yi14Ymz4YuI4YmC4YurXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vZmFxLmV4dGVybmFsLmJiYy5jby51ay9xdWVzdGlvbnMvYmJjX29ubGluZS9hZHZlcnRzX2dlbmVyYWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLhjIvhiK0g4Ymg4YiY4Ymw4Ymj4Ymg4YitXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi4Yiw4Y2W4YqV4Yiw4YitIOGLq+GLsOGIqOGMiOGLiS/hib3hi4kv4YyJ4Ym1XCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLhiqDhjIvhiK7hib1cIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLhi6jhjInhjI3hiI0g4Yib4Yi14Ymz4YuI4YmC4Yur4YuO4Ym9XCJcbiAgICB9LFxuICAgIFwiYXJcIjoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi2KXYudmE2KfZhlwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL2FyYWJpYy9pbnN0aXR1dGlvbmFsLzIwMTIvMDYvMTIwNDEwX2ZhcV9oZWxwX2JiY19hcmFiaWNcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLYqNin2YTYqti52KfZiNmGINmF2LlcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLYqNix2LnYp9mK2KlcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIti02LHZg9in2KEg2KfZhNil2LnZhNin2YZcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLYpdi52YTYp9mG2KfYqiDZhdmGINi62YjYutmEXCJcbiAgICB9LFxuICAgIFwiYXpcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIlJla2xhbVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL2F6ZXJpL2luc3RpdHV0aW9uYWwvMjAxNS8xMC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwiaWzJmSBiaXJnyZlcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCJTcG9uc29yOiBcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIlJla2xhbSBwYXJ0bnlvcmxhcsSxXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiR29vZ2xlIHJla2xhbcSxXCJcbiAgICB9LFxuICAgIFwiYm5cIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuCmrOCmv+CmnOCnjeCmnuCmvuCmquCmqFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL2JlbmdhbGkvaW5zdGl0dXRpb25hbC8yMDE1LzEwLzAwMDAwMF9hZHZlcnRpc2luZ19mYXEuc2h0bWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLgpo/gprAg4Ka44Ka54Kav4KeL4KaX4Ka/4Kak4Ka+4KefXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi4KaP4KawIOCmuOCnjOCmnOCmqOCnjeCmr+Cnh1wiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi4Kas4Ka/4Kac4KeN4Kae4Ka+4Kaq4KaoIOCmuOCmueCmr+Cni+Cml+CngFwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIuCml+CngeCml+Cmsi3gpo/gprAg4Kas4Ka/4Kac4KeN4Kae4Ka+4Kaq4KaoXCJcbiAgICB9LFxuICAgIFwiZXNcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIlB1YmxpY2lkYWRcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9tdW5kby9pbnN0aXR1Y2lvbmFsLzIwMTIvMDYvMDAwMDAwX2F5dWRhX3NvYnJlX3B1YmxpY2lkYWRcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCJFbiBhc29jaWFjacOzbiBjb25cIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCJQYXRyb2NpbmFkbyBwb3JcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIkFudW5jaWFudGVzXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiQXZpc29zIGRlIEdvb2dsZVwiXG4gICAgfSxcbiAgICBcImZhXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLYotqv2YfbjFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL3d3dy5iYmMuY29tL3BlcnNpYW4vaW5zdGl0dXRpb25hbC8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXFcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCJpbkFzc29jaWF0aW9uV2l0aFwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcInNwb25zb3JlZEJ5XCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCJhZHZlcnRpc2luZ1BhcnRuZXJzXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiYWRzQnlHb29nbGVcIlxuICAgIH0sXG4gICAgXCJmclwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiUHVibGljaXTDqXNcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9hZnJpcXVlL2luc3RpdHV0aW9uZWxsZXMvMjAxNS8wOC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwiaW5Bc3NvY2lhdGlvbldpdGhcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCJzcG9uc29yZWRCeVwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1wiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcImFkc0J5R29vZ2xlXCJcbiAgICB9LFxuICAgIFwiZ3VcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuCqnOCqvuCqueCrh+CqsOCqvuCqpFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL2ZhcS5leHRlcm5hbC5iYmMuY28udWsvcXVlc3Rpb25zL2JiY19vbmxpbmUvYWR2ZXJ0c19nZW5lcmFsXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4Kqo4Kq+IOCquOCqueCqr+Cri+Cql+CqpeCrgFwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIuCqquCrjeCqsOCqvuCqr+Cri+CqnOCqlVwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi4Kqq4Kq+4Kqw4KuN4Kqf4Kqo4Kqw4KuN4Kq4XCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiR29vZ2xlIOCqpuCrjeCqteCqvuCqsOCqvuCqnOCqvuCqueCrh+CqsOCqvuCqpOCri1wiXG4gICAgfSxcbiAgICBcImhhXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCJUYWxsYVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL3d3dy5iYmMuY28udWsvaGF1c2EvaW5zdGl0dXRpb25hbC8yMDE1LzAxLzAwMDAwMF9hZHZlcnRpc2luZ19mYXFzXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwiRGEgaGFkaW4gZ3dpd2FyXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwiV2FuZGEgeWEgZGF1a2kgbmF1eWlcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIkFib2thbiBodWxkYVwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIlRhbGxhY2UtdGFsbGFjZSBkYWdhIEdvb2dsZVwiXG4gICAgfSxcbiAgICBcImhpXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLgpLXgpL/gpJzgpY3gpJ7gpL7gpKrgpKhcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvLnVrL2hpbmRpL2luc3RpdHV0aW9uYWwvMjAxNS8wMS8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxc1wiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIuCkleClhyDgpLjgpL7gpKVcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLgpKrgpY3gpLDgpL7gpK/gpYvgpJzgpJVcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIuCkquCkvuCksOCljeCkn+CkqOCksFwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIuCkl+ClguCkl+CksiDgpJXgpYcg4KS14KS/4KSc4KWN4KSe4KS+4KSq4KSoXCJcbiAgICB9LFxuICAgIFwiaWRcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIklrbGFuXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vd3d3LmJiYy5jb20vaW5kb25lc2lhL2luc3RpdHV0aW9uYWwvMjAxNS8wOC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiYWRzQnlHb29nbGVcIlxuICAgIH0sXG4gICAgXCJpZ1wiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiTWdiYXNhIG96aVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL2ZhcS5leHRlcm5hbC5iYmMuY28udWsvcXVlc3Rpb25zL2JiY19vbmxpbmUvYWR2ZXJ0c19nZW5lcmFsXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwiTmEgbmppa+G7jXRhIG5rZVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIkFrd2Fkb3JvIHNpdGUgbidha2FcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIk5k4buLIG1tZWvhu41cIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCJNZ2Jhc2Egb3ppIG5rZSBHb29nbGVcIlxuICAgIH0sXG4gICAgXCJqYVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi5bqD5ZGKXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCIvamFwYW5lc2UvaGVscC0zNDI4NzM1NFwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIuaPkOaQujpcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLmj5Dkvps6XCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLjg5Hjg7zjg4jjg4rjg7w6XCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiQWRzIGJ5IEdvb2dsZVwiXG4gICAgfSxcbiAgICBcImtvXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLqtJHqs6BcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly9mYXEuZXh0ZXJuYWwuYmJjLmNvLnVrL3F1ZXN0aW9ucy9iYmNfb25saW5lL2FkdmVydHNfZ2VuZXJhbFwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIuq0gOugqCDrgrTsmqlcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLtm4Tsm5DsgqxcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIu2YkeugpeyCrFwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIkdvb2dsZSDqtJHqs6BcIlxuICAgIH0sXG4gICAgXCJreVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi0JbQsNGA0L3QsNC80LBcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9reXJneXovaW5zdGl0dXRpb25hbC8yMDE1LzEwLzAwMDAwMF9hZHZlcnRpc2luZ19mYXEuc2h0bWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLQvNC10L3QtdC9INC60YvQt9C80LDRgtGC0LDRiNGC0YvQutGC0LAgXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi0KHQv9C+0L3RgdC+0YBcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcItCW0LDRgNC90LDQvNCwINC/0LDRgNGC0L3RkdGA0LvQvtGA0YNcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCJHb29nbGUg0LbQsNGA0L3QsNC80LDRgdGLXCJcbiAgICB9LFxuICAgIFwibXJcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuCknOCkvuCkueCkv+CksOCkvuCkpFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL2ZhcS5leHRlcm5hbC5iYmMuY28udWsvcXVlc3Rpb25zL2JiY19vbmxpbmUvYWR2ZXJ0c19nZW5lcmFsXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4KSa4KWN4KSv4KS+IOCkuOCkguCkr+ClgeCkleCljeCkpCDgpLXgpL/gpKbgpY3gpK/gpK7gpL7gpKjgpYdcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLgpJrgpY3gpK/gpL4g4KS44KWM4KSc4KSo4KWN4KSv4KS+4KSo4KWHXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLgpK3gpL7gpJfgpYDgpKbgpL7gpLBcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCJHb29nbGUg4KSm4KWN4KS14KS+4KSw4KWHIOCknOCkvuCkueCkv+CksOCkvuCkpOClgFwiXG4gICAgfSxcbiAgICBcIm15XCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLhgIDhgLzhgLHhgKzhgLrhgIThgLzhgKxcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9idXJtZXNlL2luc3RpdHV0aW9uYWwvMjAxNS8xMC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4YCU4YC+4YCE4YC64YC3IOGAleGAsOGAuOGAkOGAveGAsuGAneGAlOGAuuGAhuGAseGArOGAhOGAuuGBjVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIuGAgOGAmeGAgOGAkeGAleGAvOGAr+GAnuGAsFwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi4YCV4YCw4YC44YCQ4YC94YCy4YCd4YCU4YC64YCG4YCx4YCs4YCE4YC64YCe4YCw4YCZ4YC74YCs4YC4XCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi4YCC4YCw4YCC4YCy4YCc4YC6IOGAgOGAvOGAseGArOGAuuGAhOGAvOGArFwiXG4gICAgfSxcbiAgICBcIm5lXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLgpLXgpL/gpJzgpY3gpJ7gpL7gpKrgpKhcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9uZXBhbGkvaW5zdGl0dXRpb25hbC8yMDE1LzEwLzAwMDAwMF9hZHZlcnRpc2luZ19mYXEuc2h0bWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLgpLjgpL7gpKXgpK7gpL5cIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLgpKrgpY3gpLDgpL7gpK/gpYvgpJzgpJVcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIuCkquCljeCksOCkvuCkr+Cli+CknOCklVwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIuCkl+ClgeCkl+CksuCkleCliyDgpLXgpL/gpJzgpY3gpJ7gpL7gpKrgpKhcIlxuICAgIH0sXG4gICAgXCJvbVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiQmVla3NpaXNhXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vZmFxLmV4dGVybmFsLmJiYy5jby51ay9xdWVzdGlvbnMvYmJjX29ubGluZS9hZHZlcnRzX2dlbmVyYWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCIuLi5XYWxpaW4gdGEndXVuLlwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIklzcG9vbnNhcmEga2FuIGdvZGhlLi4uXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCJXYWFoaWxsYW5cIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCJCZWVrc2lhIEdvb2dsZSduXCJcbiAgICB9LFxuICAgIFwicGFcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuCoh+CotuCopOCov+CoueCovuCosFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL2ZhcS5leHRlcm5hbC5iYmMuY28udWsvcXVlc3Rpb25zL2JiY19vbmxpbmUvYWR2ZXJ0c19nZW5lcmFsXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4KiH4Ki4IOCopuCphyDgqLjgqLngqL/gqK/gqYvgqJcg4Kio4Ki+4KiyXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi4KiH4Ki4IOCopuCpgeCohuCosOCoviDgqKrgqY3gqLDgqL7gqK/gqYvgqJzgqL/gqKRcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIuCoreCovuCoiOCoteCovuCoslwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIkdvb2dsZSDgqKbgqYHgqIbgqLDgqL4g4KiH4Ki24Kik4Ki/4Ki54Ki+4KiwXCJcbiAgICB9LFxuICAgIFwicGNtXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCJUb3JpIHdlIGRlbSBwYXkgZm9yXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vZmFxLmV4dGVybmFsLmJiYy5jby51ay9xdWVzdGlvbnMvYmJjX29ubGluZS9hZHZlcnRzX2dlbmVyYWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCJFIGpvaW4gaGFuZCB3aXRoXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwiRGUgcGVyc29uIHdlIHNwb25zb3IgYW1cIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcIlBhcnRuZXIgZGVtXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiQWRzIHdlIEdvb2dsZSBkb1wiXG4gICAgfSxcbiAgICBcInBzXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLYp9i52YTYp9mGXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCIvcGFzaHRvL2luc3RpdHV0aW9uYWwvMjAxNS8xMC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi2b7ZhyDaq9qJ2YdcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLZvtmHINmF2YTYp9iq2pNcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcItmF2YTaq9ix2YpcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLYryDaq9mI2qvZhCDYp9i52YTYp9mG2YjZhtmHXCJcbiAgICB9LFxuICAgIFwicHRcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIlB1YmxpY2lkYWRlXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vd3d3LmJiYy5jby51ay9wb3J0dWd1ZXNlL2luc3RpdHV0aW9uYWwvMjAxNS8wMS8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxc1wiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIkVtIHBhcmNlcmlhIGNvbVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIkNvbSBwYXRyb2PDrW5pbyBkZVwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwiUGFyY2Vpcm9zXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiQW7Dum5jaW9zIGRvIEdvb2dsZVwiXG4gICAgfSxcbiAgICBcInJ1XCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLQoNC10LrQu9Cw0LzQsFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL3J1c3NpYW4vaW5zdGl0dXRpb25hbC8yMDEyLzEyLzAwMDAwMF9hZHZlcnRfdWtfZmFxXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi0JIg0YHQvtGC0YDRg9C00L3QuNGH0LXRgdGC0LLQtSDRgVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcItCh0L/QvtC90YHQvtGAOlwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi0KDQtdC60LvQsNC80L3Ri9C1INC/0LDRgNGC0L3QtdGA0YtcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLQoNC10LrQu9Cw0LzQsCBHb29nbGVcIlxuICAgIH0sXG4gICAgXCJydS1VS1wiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi0KDQtdC60LvQsNC80LBcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIlwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcItCSINGB0L7RgtGA0YPQtNC90LjRh9C10YHRgtCy0LUg0YFcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLQodC/0L7QvdGB0L7RgDpcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcItCg0LXQutC70LDQvNC90YvQtSDQv9Cw0YDRgtC90LXRgNGLXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi0KDQtdC60LvQsNC80LAgR29vZ2xlXCJcbiAgICB9LFxuICAgIFwicndcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIkt3YW1hbWF6YVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL2dhaHV6YS9pYmluZGlfd2lmYXNoaXNoYS8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXEuc2h0bWxcIlxuICAgIH0sXG4gICAgXCJzaVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi4LeA4LeZ4LeF4LeZ4LazIOC2r+C3kOC2seC3iuC3gOC3k+C2uOC2muC3iiBcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi9zaW5oYWxhL2luc3RpdHV0aW9uYWwvMjAxNS8xMC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4LeD4LeE4La34LeP4Lac4LeS4Lat4LeK4LeA4La6IOC2h+C2reC3kuC3gCBcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLgtoXgtrHgt5Tgtpzgt4rigI3gtrvgt4/gt4Tgtprgtq3gt4rgt4DgtrogXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLgtq/gt5DgtrHgt4rgt4Dgt5Pgtrjgt4og4LaF4Lax4LeU4Lac4LeK4oCN4La74LeP4LeE4Laa4La64LedXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi4Lac4LeW4Lac4La94LeKIOC3gOC3meC3heC3meC2syDgtq/gt5DgtrHgt4rgt4Dgt5Pgtrjgt4pcIlxuICAgIH0sXG4gICAgXCJzb1wiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiWGF5ZXlzaWluXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCIvc29tYWxpL2hheWFkZWVkLzIwMTUvMDgvMDAwMDAwX2FkdmVydGlzaW5nX2ZhcS5zaHRtbFwiXG4gICAgfSxcbiAgICBcInN3XCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCJNYXRhbmdhem9cIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvLnVrL3N3YWhpbGkvdGFhc2lzaS8yMDE1LzAxLzAwMDAwMF9hZHZlcnRpc2luZ19mYXFzXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwiS3dhIHVzaGlyaWtpYW5vIG5hXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwiSW1lZGhhbWluaXdhIG5hXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCJXYXNoaXJpa2FcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCJNYXRhbmdhem8geWEgYmlhc2hhcmEgeWEgR29vZ2xlXCJcbiAgICB9LFxuICAgIFwidGFcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuCuteCuv+Cus+CuruCvjeCuquCusOCuruCvjVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL3RhbWlsL2luc3RpdHV0aW9uYWwvMjAxNS8xMC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxLnNodG1sXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4K6J4K6f4K6p4K+NIOCuh+Cuo+CviOCuqOCvjeCupOCvgVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIuCuieCupOCuteCuv+Cur+CvgeCun+CuqeCvjVwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi4K6V4K+C4K6f4K+N4K6f4K6+4K6z4K6/4K6V4K6z4K+NXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi4K6V4K+C4K6V4K6/4K6z4K+NIOCuteCuv+Cus+CuruCvjeCuquCusOCumeCvjeCuleCus+CvjVwiXG4gICAgfSxcbiAgICBcInRlXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLgsLXgsY3gsK/gsL7gsKrgsL7gsLAg4LCq4LGN4LCw4LCV4LCf4LCoXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vZmFxLmV4dGVybmFsLmJiYy5jby51ay9xdWVzdGlvbnMvYmJjX29ubGluZS9hZHZlcnRzX2dlbmVyYWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCLgsLXgsYDgsLDgsL8g4LC44LC54LCV4LC+4LCw4LCC4LCk4LGLXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi4LCq4LGN4LCw4LC+4LCv4LGL4LCc4LC/4LCk4LGB4LCy4LGBXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLgsK3gsL7gsJfgsLjgsY3gsLXgsL7gsK7gsYHgsLLgsYFcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLgsJfgsYLgsJfgsYHgsLLgsY0g4LC44LCu4LCw4LGN4LCq4LC/4LCkIOCwquCxjeCwsOCwleCwn+CwqOCwsuCxgVwiXG4gICAgfSxcbiAgICBcInRoXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLguYLguIbguKnguJPguLJcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly9mYXEuZXh0ZXJuYWwuYmJjLmNvLnVrL3F1ZXN0aW9ucy9iYmNfb25saW5lL2FkdmVydHNfZ2VuZXJhbFwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIuC4lOC5ieC4p+C4ouC4hOC4p+C4suC4oeC4o+C5iOC4p+C4oeC4oeC4t+C4reC4geC4seC4mlwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIuC4quC4meC4seC4muC4quC4meC4uOC4meC5guC4lOC4olwiLFxuICAgICAgICBcImFkdmVydGlzaW5nUGFydG5lcnNUZXh0XCIgOlwi4Lig4Liy4LiE4Li14LiC4Lit4LiH4LmA4Lij4LiyXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi4LmC4LiG4Lip4LiT4Liy4LmC4LiU4Lii4LiB4Li54LmA4LiB4Li04LilXCJcbiAgICB9LFxuICAgIFwidGlcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcIuGImOGIi+GIiOGLqlwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL2ZhcS5leHRlcm5hbC5iYmMuY28udWsvcXVlc3Rpb25zL2JiY19vbmxpbmUvYWR2ZXJ0c19nZW5lcmFsXCIsXG4gICAgICAgIFwiaW5Bc3NvY2lhdGlvbldpdGhUZXh0XCIgOlwi4Yml4Yid4Ym14YiV4YyN4YyL4YudXCIsXG4gICAgICAgIFwic3BvbnNvcmVkQnlUZXh0XCIgOlwi4YiY4YuL4YiKXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLhiJjhiIvhjY3hipXhibXhipNcIixcbiAgICAgICAgXCJhZHNCeUdvb2dsZVRleHRcIiA6XCLhiqPhiaUg4YyO4YyN4YiNIOGLneGLiOGNgCDhiJjhiZPhiI3hiJVcIlxuICAgIH0sXG4gICAgXCJ0clwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiUmVrbGFtXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCJodHRwOi8vd3d3LmJiYy5jby51ay90dXJrY2Uva3VydW1zYWwvMjAxNS8wMS8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxc1wiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcIkluIGFzc29jaWF0aW9uIHdpdGhcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCJTcG9uc29yXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCJPcnRha2xhXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiR29vZ2xlIHJla2xhbWxhclwiXG4gICAgfSxcbiAgICBcInVrXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLQoNC10LrQu9Cw0LzQsFwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiL3VrcmFpbmlhbi9pbnN0aXR1dGlvbmFsLzIwMTUvMTAvMDAwMDAwX2FkdmVydGlzaW5nX2ZhcS5zaHRtbFwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcItCjINC/0LDRgNGC0L3QtdGA0YHRgtCy0ZYg0LdcIixcbiAgICAgICAgXCJzcG9uc29yZWRCeVRleHRcIiA6XCLQodC/0L7QvdGB0L7RgDogXCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCLQn9Cw0YDRgtC90LXRgNC4XCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwi0KDQtdC60LvQsNC80LAgR29vZ2xlXCJcbiAgICB9LFxuICAgIFwidXJcIiA6IHtcbiAgICAgICAgXCJhZHZlcnRpc2VtZW50VGV4dFwiIDpcItin2LTYqtuB2KfYsVwiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL3d3dy5iYmMuY29tL3VyZHUvaW5zdGl0dXRpb25hbC8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXFcIlxuICAgIH0sXG4gICAgXCJ1elwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwi0KDQtdC60LvQsNC80LBcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcIi91emJlay9pbnN0aXR1dGlvbmFsLzIwMTUvMTAvMDAwMDAwX2FkdmVydGlzaW5nX2ZhcS5zaHRtbFwiLFxuICAgICAgICBcImluQXNzb2NpYXRpb25XaXRoVGV4dFwiIDpcItCx0LjQu9Cw0L0g0rPQsNC80LrQvtGA0LvQuNC60LTQsFwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcItKy0L7QvNC40LlcIixcbiAgICAgICAgXCJhZHZlcnRpc2luZ1BhcnRuZXJzVGV4dFwiIDpcItCg0LXQutC70LDQvNCwINCx0Z7QudC40YfQsCDRiNC10YDQuNC60LvQsNGAXCIsXG4gICAgICAgIFwiYWRzQnlHb29nbGVUZXh0XCIgOlwiR29vZ2xlINGA0LXQutC70LDQvNCw0YHQuFwiXG4gICAgfSxcbiAgICBcInV6LWxhdGluXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCJSZWtsYW1hXCIsXG4gICAgICAgIFwiYWR2ZXJ0SW5mb1BhZ2VVcmxcIiA6XCIvdXpiZWsvaW5zdGl0dXRpb25hbC8yMDE1LzEwLzAwMDAwMF9hZHZlcnRpc2luZ19mYXEuc2h0bWxcIixcbiAgICAgICAgXCJpbkFzc29jaWF0aW9uV2l0aFRleHRcIiA6XCJiaWxhbiBoYW1rb3JsaWtkYVwiLFxuICAgICAgICBcInNwb25zb3JlZEJ5VGV4dFwiIDpcIkhvbWl5XCIsXG4gICAgICAgIFwiYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHRcIiA6XCJSZWtsYW1hIGJvJ3lpY2hhIHNoZXJpa2xhclwiLFxuICAgICAgICBcImFkc0J5R29vZ2xlVGV4dFwiIDpcIkdvb2dsZSByZWtsYW1hc2lcIlxuICAgIH0sXG4gICAgXCJ2aVwiIDoge1xuICAgICAgICBcImFkdmVydGlzZW1lbnRUZXh0XCIgOlwiUXVhzIluZyBjYcyBb1wiLFxuICAgICAgICBcImFkdmVydEluZm9QYWdlVXJsXCIgOlwiaHR0cDovL3d3dy5iYmMuY29tL3ZpZXRuYW1lc2UvaW5zdGl0dXRpb25hbC8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXFcIlxuICAgIH0sXG4gICAgXCJ6aC1IYW5zXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLlub/lkYpcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvbS96aG9uZ3dlbi9zaW1wL2luc3RpdHV0aW9uYWwvMjAxNS8wOC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxXCJcbiAgICB9LFxuICAgIFwiemgtSGFucy1VS0NOXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLlub/lkYpcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvbS91a2NoaW5hL3NpbXAvaW5zdGl0dXRpb25hbC8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXFcIlxuICAgIH0sXG4gICAgXCJ6aC1IYW50XCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLlu6PlkYpcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvbS96aG9uZ3dlbi90cmFkL2luc3RpdHV0aW9uYWwvMjAxNS8wOC8wMDAwMDBfYWR2ZXJ0aXNpbmdfZmFxXCJcbiAgICB9LFxuICAgIFwiemgtSGFudC1VS0NOXCIgOiB7XG4gICAgICAgIFwiYWR2ZXJ0aXNlbWVudFRleHRcIiA6XCLlu6PlkYpcIixcbiAgICAgICAgXCJhZHZlcnRJbmZvUGFnZVVybFwiIDpcImh0dHA6Ly93d3cuYmJjLmNvbS91a2NoaW5hL3RyYWQvaW5zdGl0dXRpb25hbC8yMDE1LzA4LzAwMDAwMF9hZHZlcnRpc2luZ19mYXFcIlxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBkYXRhW2ZpZWxkXTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGZpZWxkLCB0ZXh0KSB7XG4gICAgICAgIGRhdGFbZmllbGRdID0gdGV4dDtcbiAgICB9LFxuICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICBzZXRMb2NhbGU6IGZ1bmN0aW9uIChsYW5nKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBsYW5nICYmIGxvY2FsZURhdGFbbGFuZ10sIHg7XG4gICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdzZXR0aW5nIGFkIHRleHQgdG8gbG9jYWxlIDogJywgbGFuZyk7XG4gICAgICAgICAgICBmb3IgKHggaW4gbG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZS5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh4LCBsb2NhbGVbeF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2xvY2FsZS5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHByb3ZpZGVyczoge1xuICAgICAgICBlRGlnaXRhbFJlc2VhcmNoOiB7XG4gICAgICAgICAgICBrZXk6ICdJTlMtdnQyOS02NjYxODg5NTQnLFxuICAgICAgICAgICAgdXJsOiBiYmNkb3Rjb20uYXNzZXRQcmVmaXggKyAnc2NyaXB0L3ZlbmRvci9lZHIvZWRyLm1pbi5qcydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRzRW5hYmxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGJiY2RvdGNvbS5kYXRhICE9PSB1bmRlZmluZWQpICYmICgoYmJjZG90Y29tLmRhdGEuYSAhPT0gdW5kZWZpbmVkICYmIGJiY2RvdGNvbS5kYXRhLmEgPT09IDEpXG4gICAgICAgICAgICB8fCAgKGJiY2RvdGNvbS5kYXRhLmFkcyAhPT0gdW5kZWZpbmVkICYmIGJiY2RvdGNvbS5kYXRhLmFkcyA9PT0gMSkpO1xuICAgIH0sXG4gICAgc3VydmV5RW5hYmxlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYmJjZG90Y29tLmZsYWcgIT09IHVuZGVmaW5lZCAmJiBiYmNkb3Rjb20uZmxhZy5zID09PSAxO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoYmJjZG90Y29tLnN1cnZleS5hZHNFbmFibGVkKCkgJiYgYmJjZG90Y29tLnN1cnZleS5zdXJ2ZXlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93LkVEUlN1cnZleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBiYmNkb3Rjb20uc3VydmV5LmxvYWRTY3JpcHQoZG9jdW1lbnQsIGJiY2RvdGNvbS5zdXJ2ZXkucHJvdmlkZXJzLmVEaWdpdGFsUmVzZWFyY2gudXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbG9hZFNjcmlwdDogZnVuY3Rpb24gKGRvYywgcGF0aCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHMgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksXG4gICAgICAgICAgICBhID0gJ2FzeW5jJyxcbiAgICAgICAgICAgIGIgPSAnZGVmZXInO1xuICAgICAgICBzLnNldEF0dHJpYnV0ZShhLCBhKTtcbiAgICAgICAgcy5zZXRBdHRyaWJ1dGUoYiwgYik7XG4gICAgICAgIHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICBzLnNyYyA9IHBhdGg7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHMub25sb2FkID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQocyk7XG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zdXJ2ZXkuanMiLCIvKipcbiAqIEBtb2R1bGUgQ2xhc3Nlc1xuICpcbiAqL1xuXG52YXIgQ0xBU1NfQkFTRSA9ICdiYmNkb3Rjb20nO1xudmFyIENMQVNTX1NFUCA9ICctJztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcblxuLyoqXG4gKiBHaXZlbiBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIHN0cmluZyBhcmd1bWVudHMsIHJldHVybiBhIGNsYXNzIG5hbWUgY29udGFpbmluZyBhbGwgb2YgdGhlIGFyZ3VtZW50c1xuICogcHJlZml4ZWQgd2l0aCBDTEFTU19CQVNFIGFuZCBjb25jYXRlbmF0ZWQgdXNpbmcgQ0xBU1NfU0VQXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2xhc3NOYW1lKCkge1xuICAgIHJldHVybiBbQ0xBU1NfQkFTRV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpLmpvaW4oQ0xBU1NfU0VQKTtcbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBhcmJpdHJhcnkgbnVtYmVyIG9mIHN0cmluZyBvciBhcnJheSBhcmd1bWVudHMsIHJldHVybiBhIHNwYWNlLWNvbmNhdGVuYXRlZCBsaXN0IG9mIGNsYXNzZXNcbiAqIGNyZWF0ZWQgYnkgcGFzc2luZyBlYWNoIGFyZ3VtZW50IHRocm91Z2ggY2xhc3NOYW1lKClcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuICAgIHZhciBpLCBjbGFzc2VzID0gW10sIGFyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbGFzc2VzLnB1c2goY2xhc3NOYW1lLmFwcGx5KG51bGwsIHV0aWxzLmlzU3RyaW5nKGFycltpXSkgPyBbYXJyW2ldXSA6IGFycltpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3Nlcy5qb2luKCcgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuXG4gICAgY2xhc3NOYW1lczogY2xhc3NOYW1lcyxcblxuICAgIC8qKlxuICAgICAqIEdpdmVuIHRoZSBiYmNkb3Rjb20uY29uZmlnIG9iamVjdCBhbmQgb3B0aW9uYWxseSB0aGUgY3VycmVudCByb290IGNvbnRleHQgKHdpbmRvdylcbiAgICAgKiByZXR1cm4gYSBzcGFjZS1jb25jYXRlbmF0ZWQgbGlzdCBvZiBjbGFzc2VzIHdoaWNoIHNob3VsZCBiZSBhZGRlZCB0byBzb21lIHRvcCBsZXZlbCBET00gZWxlbWVudFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEBwYXJhbSByb290T3ZlcnJpZGVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGZyb21Db25maWc6IGZ1bmN0aW9uIChjb25maWcsIHJvb3RPdmVycmlkZSkge1xuICAgICAgICB2YXIgZmluYWxSb290ID0gcm9vdE92ZXJyaWRlIHx8IHdpbmRvdztcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcblxuICAgICAgICBpZiAoY29uZmlnLmlzQXN5bmMoKSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdhc3luYycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5pc0Fkc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdhZHMtZW5hYmxlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZpbmFsUm9vdC5jb25maWcgJiYgZmluYWxSb290LmNvbmZpZy5zZXJ2aWNlKSB7XG4gICAgICAgICAgICBjbGFzc2VzLnB1c2goWydzZXJ2aWNlJywgZmluYWxSb290LmNvbmZpZy5zZXJ2aWNlXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lcy5hcHBseShudWxsLCBjbGFzc2VzKTtcbiAgICB9XG59O1xuXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jbGFzc2VzLmpzIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBjb21TY29yZUhlbHBlcnMgPSByZXF1aXJlKCdhbmFseXRpY3MvY29tU2NvcmVIZWxwZXJzJyk7XG52YXIgbG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2xvdGFtZScpO1xuXG52YXIgTG90YW1lID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmNsaWVudElkID0gJzEwODE2JztcbiAgICB0aGlzLmNvbnNlbnRDbGllbnRJZCA9ICcxMDgxNSc7XG4gICAgdGhpcy5jb25zZW50T2JqZWN0ID0gJ0xPVENDJztcbiAgICB0aGlzLmxvdGFtZU9iamVjdCA9ICdMT1RDQ18nK3RoaXMuY2xpZW50SWQ7XG4gICAgdGhpcy5ub0NvbnNlbnQgPSB7YW5hbHl0aWNzOmZhbHNlLCBjcm9zc2RldmljZTpmYWxzZSwgZGF0YXNoYXJpbmc6ZmFsc2UsIHRhcmdldGluZzpmYWxzZX07XG4gICAgdGhpcy5hbGxDb25zZW50ID0ge2FuYWx5dGljczp0cnVlLCBjcm9zc2RldmljZTp0cnVlLCBkYXRhc2hhcmluZzp0cnVlLCB0YXJnZXRpbmc6dHJ1ZX07XG59O1xuXG5Mb3RhbWUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNvbmZpZy5pc1dvcmxkU2VydmljZSgpIHx8IHNlY3Rpb25zLmdldFNlY3Rpb24oMCkgPT09ICd3b3JsZHNlcnZpY2UnKSB7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSAnMTA4MjYnO1xuICAgICAgICB0aGlzLmxvdGFtZU9iamVjdCA9ICdMT1RDQ18nICsgdGhpcy5jbGllbnRJZDtcbiAgICB9XG59O1xuXG5Mb3RhbWUucHJvdG90eXBlLmNhbGxiYWNrID0gZnVuY3Rpb24oKXtcbiAgICAvLyBkZXByZWNhdGVkXG59O1xuXG5Mb3RhbWUucHJvdG90eXBlLmNvbnNlbnRDYWxsYmFjayA9IGZ1bmN0aW9uKCl7XG4gICAgaWYgKGNvbmZpZy5pc1Nwb3J0QXBwKCkgfHwgIWNvbmZpZy5pc0xvdGFtZUVuYWJsZWQoKSB8fCAhY29uZmlnLmlzTG90YW1lQWN0aXZlKCkgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zZW50Q2FsbGJhY2soKSB7XG4gICAgICAgIGlmKHR5cGVvZiB3aW5kb3dbdGhpcy5jb25zZW50T2JqZWN0XSAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93W3RoaXMuY29uc2VudE9iamVjdF0uc2V0Q29uc2VudCAmJiBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQpe1xuICAgICAgICAgICAgaWYoY29uZmlnLmlzTlBBKCkpe1xuICAgICAgICAgICAgICAgIHdpbmRvd1t0aGlzLmNvbnNlbnRPYmplY3RdLnNldENvbnNlbnQodGhpcy5zZW5kRGVmYXVsdERhdGEuYmluZCh0aGlzKSwgdGhpcy5jb25zZW50Q2xpZW50SWQsIHRoaXMubm9Db25zZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93W3RoaXMuY29uc2VudE9iamVjdF0uc2V0Q29uc2VudCh0aGlzLnNlbmREZWZhdWx0RGF0YS5iaW5kKHRoaXMpLCB0aGlzLmNvbnNlbnRDbGllbnRJZCwgdGhpcy5hbGxDb25zZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwod2luZG93LmlzTG90YW1lTG9hZGVkSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgd2luZG93LmlzTG90YW1lTG9hZGVkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjb25zZW50Q2FsbGJhY2suYmluZCh0aGlzKSwgNTAwKTtcblxufTtcblxuTG90YW1lLnByb3RvdHlwZS5zZW5kRGVmYXVsdERhdGEgPSBmdW5jdGlvbihkYXRhKXtcbiAgICBpZiAoY29uZmlnLmlzU3BvcnRBcHAoKSB8fCAhY29uZmlnLmlzTG90YW1lRW5hYmxlZCgpIHx8ICFjb25maWcuaXNMb3RhbWVBY3RpdmUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZyhcIkxvdGFtZSBDb25zZW50IENhbGxiYWNrOiBcIiwgZGF0YSk7XG4gICAgdmFyIGFuYWx5dGljc0tleVZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbVNjb3JlSGVscGVycy5hcHBlbmRQYWdlQ29yZUtleVZhbHVlcyhjb21TY29yZUhlbHBlcnMuZ2V0Q29yZUtleVZhbHVlcygpKSk7IC8vZGF4IGtleSB2YWx1ZXNcbiAgICB2YXIgYWR2ZXJ0c0tleVZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIGJiY2RvdGNvbS5hZHZlcnRzLmtleVZhbHVlcy5nZXRBbGwoKSk7XG5cbiAgICBhZHZlcnRzS2V5VmFsdWVzWydzbG90J10gPSBiYmNkb3Rjb20uYWRzVG9EaXNwbGF5O1xuICAgIGFkdmVydHNLZXlWYWx1ZXNbJ2FkLXVuaXQtMSddID0gYmJjZG90Y29tLmFkdmVydHMuYWRVbml0LmdldEFkVW5pdDEoKTtcbiAgICBhZHZlcnRzS2V5VmFsdWVzWydhZC11bml0LTInXSA9IGJiY2RvdGNvbS5hZHZlcnRzLmFkVW5pdC5nZXRBZFVuaXRzMnRvOSgpO1xuXG4gICAgdGhpcy5zZW5kRGF0YShhbmFseXRpY3NLZXlWYWx1ZXMpO1xuICAgIHRoaXMuc2VuZERhdGEoYWR2ZXJ0c0tleVZhbHVlcyk7XG5cbn07XG5cbkxvdGFtZS5wcm90b3R5cGUubG9hZEV4dHJhID0gZnVuY3Rpb24oZGF0YSwga2V5KXtcbiAgICB0aGlzLnNlbmREYXRhKGRhdGEsIGtleSk7XG59O1xuXG5Mb3RhbWUucHJvdG90eXBlLnNlbmREYXRhID0gZnVuY3Rpb24oZGF0YSwga2V5KXtcbiAgICBpZiAoY29uZmlnLmlzU3BvcnRBcHAoKSB8fCAhY29uZmlnLmlzTG90YW1lRW5hYmxlZCgpIHx8ICFjb25maWcuaXNMb3RhbWVBY3RpdmUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBnZW5Qcm9wID0gZGF0YSB8fCBbXTsgLy9leHRyYSBkYXRhXG5cbiAgICBpZiAod2luZG93W3RoaXMubG90YW1lT2JqZWN0XSkge1xuICAgICAgICB3aW5kb3dbdGhpcy5sb3RhbWVPYmplY3RdLmJjcCgpO1xuICAgICAgICBpZiAodHlwZW9mIGdlblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHdpbmRvd1t0aGlzLmxvdGFtZU9iamVjdF0uYWRkKFwiZ2VucFwiLCAoIHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIgPyBrZXkgOiBcIlwiICkgKyAnOicgKyBlbmNvZGVVUklDb21wb25lbnQoZ2VuUHJvcCkgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIGUgaW4gZ2VuUHJvcCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd1t0aGlzLmxvdGFtZU9iamVjdF0uYWRkKFwiZ2VucFwiLCAoIHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIgPyBrZXkgOiBlICkgKyAnOicgKyBlbmNvZGVVUklDb21wb25lbnQoZ2VuUHJvcFtlXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBMb3RhbWU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvbG90YW1lLmpzIiwiaW1wb3J0IE1ldHJpY3NCdWlsZGVyIGZyb20gJ2FuYWx5dGljcy9tZXRyaWNzL21ldHJpY3NCdWlsZGVyJztcbmltcG9ydCBnZXRVc2VyVHJhY2tpbmdDb29raWUgZnJvbSAnYW5hbHl0aWNzL3V0aWxzL2dldFVzZXJUcmFja2luZ0Nvb2tpZSc7XG5pbXBvcnQgZ2V0U2VjdGlvblN0cmluZ3MgZnJvbSAnYW5hbHl0aWNzL3V0aWxzL2dldFNlY3Rpb25TdHJpbmdzJztcbmltcG9ydCBnZXRQYWdlVHlwZSBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0UGFnZVR5cGUnO1xuaW1wb3J0IGdldFN5bmRpY2F0ZWRWaWRlb1NvdXJjZSBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0U3luZGljYXRlZFZpZGVvU291cmNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvcmVLZXlWYWx1ZXMoa2V5VmFsdWVzID0ge30pIHtcbiAgICBjb25zdCBtZXRyaWNzQnVpbGRlciA9IG5ldyBNZXRyaWNzQnVpbGRlcjtcblxuICAgIC8vIFN0YXRpY3MgKHNldCB2YWx1ZXMpXG4gICAgbWV0cmljc0J1aWxkZXJcbiAgICAgICAgLndpdGgoJ2JfaW1wX3NyYycsIHt2YWx1ZTogJ2dubCd9KVxuICAgICAgICAud2l0aCgnYl92c191bicsIHt2YWx1ZTogJ2JjJ30pXG4gICAgICAgIC53aXRoKCduc19jJywge3ZhbHVlOiAnVVRGLTgnfSk7XG5cbiAgICAvLyBVc2UgSGVscGVyc1xuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCdkYXhDb3JwJywge21hcE5hbWU6ICdiX2RheGNvcnAnfSlcbiAgICAgICAgLndpdGgoJ2Fkc0VuYWJsZWQnLCB7bWFwTmFtZTogJ2JfYWRfZW5hYmxlZCd9KVxuICAgICAgICAud2l0aCgnYXBwVHlwZScsIHttYXBOYW1lOiBbJ2JfYXBwX3R5cGUnLCAnYXBwX3R5cGUnXX0pXG4gICAgICAgIC53aXRoKCdpc0FwcCcsIHttYXBOYW1lOiAnYl9pc19hcHAnfSlcbiAgICAgICAgLndpdGgoJ3JlZmVycmVyJywge21hcE5hbWU6ICdiX2M5J30pXG4gICAgICAgIC53aXRoKCdjb2xsZWN0aW9uJywge21hcE5hbWU6ICdiX2NvbGxlY3Rpb24nfSlcbiAgICAgICAgLndpdGgoJ2VkaXRpb24nLCB7bWFwTmFtZTogJ2JfZWRpdGlvbid9KVxuICAgICAgICAud2l0aCgndmVyc2lvbicsIHttYXBOYW1lOiAnYl9pbXBfdmVyJ30pXG4gICAgICAgIC53aXRoKCdzaXRlQ2F0YWx5c3RDb29raWVWYWx1ZScsIHttYXBOYW1lOiAnYl9zX3ZpJ30pXG4gICAgICAgIC53aXRoKCdwYWdlTmFtZScsIHttYXBOYW1lOiBbJ25hbWUnLCAnYl9hcnRpY2xlX3RpdGxlJ119KVxuICAgICAgICAud2l0aCgnYW5hbHl0aWNzQWNjb3VudElEJywge21hcE5hbWU6ICdjMid9KVxuICAgICAgICAud2l0aCgnYW5hbHl0aWNzU3VpdGUnLCB7bWFwTmFtZTogWyduc19zaXRlJ119KVxuICAgICAgICAud2l0aCgnYXBwTmFtZScsIHttYXBOYW1lOiBbJ25zX2FwX2FuJywgJ2FwcF9uYW1lJ119KVxuICAgICAgICAud2l0aCgncGFydG5lcicsIHttYXBOYW1lOiAnYl9hcnRpY2xlX3BhcnRuZXInfSlcbiAgICAgICAgLndpdGgoJ2xpY2Vuc2UnLCB7bWFwTmFtZTogJ2JfYXJ0aWNsZV9saWNlbnNlJ30pO1xuXG4gICAgLy8gVXNlIEhlbHBlcnMgJiBwYXNzIGFyZ3NcbiAgICBjb25zdCBzZWN0aW9uU3RyaW5ncyA9IGdldFNlY3Rpb25TdHJpbmdzKCk7XG4gICAgbWV0cmljc0J1aWxkZXJcbiAgICAgICAgLndpdGgoJ2JfYXBwX25hbWUnLCB7dmFsdWU6IGAke3NlY3Rpb25TdHJpbmdzWzBdfXx3ZWJgfSlcbiAgICAgICAgLndpdGgoJ3NpdGVDaGFubmVsJywge21hcE5hbWU6IFsnYl9zaXRlX2NoYW5uZWwnLCAnYmJjX3NpdGUnLCAncHJvZF9uYW1lJ10sIGFyZ3M6IFtzZWN0aW9uU3RyaW5nc119KVxuICAgICAgICAud2l0aCgnc2l0ZVNlY3Rpb24nLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zZWN0aW9uJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pXG4gICAgICAgIC53aXRoKCdzaXRlU3Vic2VjdGlvbjEnLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zdWJzZWMxJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pXG4gICAgICAgIC53aXRoKCdzaXRlU3Vic2VjdGlvbjInLCB7bWFwTmFtZTogJ2Jfc2l0ZV9zdWJzZWMyJywgYXJnczogW3NlY3Rpb25TdHJpbmdzXX0pO1xuXG4gICAgLy8gQ29uZGl0aW9uYWwgbWV0cmljc1xuICAgIGNvbnN0IHVzZXJUcmFja2luZ0Nvb2tpZSA9IGdldFVzZXJUcmFja2luZ0Nvb2tpZSgpO1xuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCduc19hbGlhcycsIHtcbiAgICAgICAgICAgIHByZVJlcXVpc2l0ZTogKCkgPT4gdXNlclRyYWNraW5nQ29va2llICE9PSBmYWxzZSAmJiBjb29raWVzRW5hYmxlZElFRml4KCksXG4gICAgICAgICAgICB2YWx1ZTogdXNlclRyYWNraW5nQ29va2llXG4gICAgICAgIH0pO1xuXG4gICAgY29uc3Qgc3luZGljYXRlZFZpZGVvU291cmNlID0gZ2V0U3luZGljYXRlZFZpZGVvU291cmNlKCk7XG4gICAgbWV0cmljc0J1aWxkZXJcbiAgICAgICAgLndpdGgoJ3YzNycsIHtcbiAgICAgICAgICAgIHByZVJlcXVpc2l0ZTogKCkgPT4gc3luZGljYXRlZFZpZGVvU291cmNlLFxuICAgICAgICAgICAgdmFsdWU6IHN5bmRpY2F0ZWRWaWRlb1NvdXJjZVxuICAgICAgICB9KTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBrZXlWYWx1ZXMsIG1ldHJpY3NCdWlsZGVyLmJ1aWxkKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kUGFnZUNvcmVLZXlWYWx1ZXMoa2V5VmFsdWVzID0ge30pIHtcbiAgICBjb25zdCBtZXRyaWNzQnVpbGRlciA9IG5ldyBNZXRyaWNzQnVpbGRlcjtcbiAgICBjb25zdCBwYWdlVHlwZSA9IGdldFBhZ2VUeXBlKCk7XG4gICAgY29uc3QgaXNJbmRleCA9IHBhZ2VUeXBlLmluY2x1ZGVzKCdpZHgnKTtcbiAgICBjb25zdCBpc0xpdmUgPSBwYWdlVHlwZS5pbmNsdWRlcygnbGl2Jyk7XG5cbiAgICBtZXRyaWNzQnVpbGRlclxuICAgICAgICAud2l0aCgncGFnZVR5cGUnLCB7bWFwTmFtZTogJ2JfcGFnZV90eXBlJywgdmFsdWU6IHBhZ2VUeXBlfSk7XG5cbiAgICAvLyBDb25kaXRpb25hbFxuICAgIG1ldHJpY3NCdWlsZGVyXG4gICAgICAgIC53aXRoKCdhcnRpY2xlSUQnLCB7bWFwTmFtZTogJ2JfYXJ0aWNsZV9pZCcsIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzSW5kZXh9KVxuICAgICAgICAud2l0aCgnYXJ0aWNsZVRpdGxlJywge21hcE5hbWU6ICdiX2FydGljbGVfdGl0bGUnLCBwcmVSZXF1aXNpdGU6ICgpID0+ICFpc0luZGV4ICYmICFpc0xpdmV9KVxuICAgICAgICAud2l0aCgnYXJ0aWNsZVVwZGF0ZWREYXRlJywge21hcE5hbWU6ICdiX2FydGljbGVfdXBkYXRlJywgcHJlUmVxdWlzaXRlOiAoKSA9PiAhaXNJbmRleCwgYXJnczogW3RydWVdfSlcbiAgICAgICAgLndpdGgoJ2FydGljbGVQdWJsaXNoZWREYXRlJywge21hcE5hbWU6ICdiX2FydGljbGVfZGF0ZScsIHByZVJlcXVpc2l0ZTogKCkgPT4gIWlzSW5kZXgsIGFyZ3M6IFt0cnVlXX0pXG4gICAgICAgIC53aXRoKCdhcnRpY2xlTGVuZ3RoJywge21hcE5hbWU6ICdiX2FydGljbGVfbGVuZ3RoJywgcHJlUmVxdWlzaXRlOiAoKSA9PiAhaXNJbmRleH0pXG4gICAgICAgIC53aXRoKCd0b3BpY05hbWVzJywge21hcE5hbWU6ICdiX3RvcGljX25hbWVzJywgcHJlUmVxdWlzaXRlOiAoKSA9PiAhaXNJbmRleCAmJiAhaXNMaXZlfSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwga2V5VmFsdWVzLCBtZXRyaWNzQnVpbGRlci5idWlsZCgpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZE5vblBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyA9IHt9KSB7XG4gICAgY29uc3QgbWV0cmljc0J1aWxkZXIgPSBuZXcgTWV0cmljc0J1aWxkZXI7XG5cbiAgICBtZXRyaWNzQnVpbGRlclxuICAgICAgICAud2l0aCgndGltZXN0YW1wJywge21hcE5hbWU6ICduc19fdCd9KVxuICAgICAgICAud2l0aCgnbnNfdHlwZScsIHt2YWx1ZTogJ2hpZGRlbid9KTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBrZXlWYWx1ZXMsIG1ldHJpY3NCdWlsZGVyLmJ1aWxkKCkpO1xufTtcblxuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQUklWQVRFIE1FVEhPRFNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuZnVuY3Rpb24gY29va2llc0VuYWJsZWRJRUZpeCgpIHtcbiAgICB2YXIgbkNFID0gbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQsIHRlc3RDb29raWU7XG4gICAgaWYgKG5DRSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5DRTtcbiAgICB9XG5cbiAgICAvLyBzdG9sZW4gZnJvbSBtb2Rlcm5penJcbiAgICBkb2N1bWVudC5jb29raWUgPSBcImNvb2tpZXRlc3Q9MVwiOyAvLyBzZXQgZXhwZXJpbWVudGFsIGNvb2tpZVxuICAgIHRlc3RDb29raWUgPSBkb2N1bWVudC5jb29raWUuaW5kZXhPZihcImNvb2tpZXRlc3Q9XCIpICE9PSAtMTtcbiAgICBkb2N1bWVudC5jb29raWUgPSBcImNvb2tpZXRlc3Q9MTsgZXhwaXJlcz1UaHUsIDAxLUphbi0xOTcwIDAwOjAwOjAxIEdNVFwiOyAvLyAuLi5hbmQgZGVsZXRlIGl0IGFnYWluXG4gICAgcmV0dXJuIHRlc3RDb29raWU7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZUhlbHBlcnMuanMiLCJpbXBvcnQgYXZhaWxhYmxlTWV0cmljcyBmcm9tICcuL2luZGV4JztcbmltcG9ydCBMb2dnZXIgZnJvbSAnbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlcignYW5hbHl0aWNzOm1ldHJpY3M6bWV0cmljc0J1aWxkZXInKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWV0cmljc0J1aWxkZXIge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubWV0cmljcyA9IG5ldyBNYXA7XG4gICAgfVxuXG4gICAgd2l0aChtZXRyaWMgPSBudWxsLFxuICAgICAgICB7XG4gICAgICAgICAgICBtYXBOYW1lID0gbnVsbCxcbiAgICAgICAgICAgIHBvc3RQcm9jZXNzID0gbnVsbCxcbiAgICAgICAgICAgIHByZVJlcXVpc2l0ZSA9IG51bGwsXG4gICAgICAgICAgICBhcmdzID0gW10sXG4gICAgICAgICAgICB2YWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICB9ID0ge30pIHtcbiAgICAgICAgaWYgKG1ldHJpYykge1xuICAgICAgICAgICAgdGhpcy5tZXRyaWNzLnNldChtZXRyaWMsIHttYXBOYW1lLCBwb3N0UHJvY2VzcywgYXJncywgcHJlUmVxdWlzaXRlLCB2YWx1ZX0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0TWV0cmljKG1ldHJpYywgYXJncyA9IFtdKSB7XG4gICAgICAgIGNvbnN0IGdldE1ldHJpY0hlbHBlciA9IGBnZXQke21ldHJpYy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG1ldHJpYy5zbGljZSgxKX1gO1xuICAgICAgICBpZiAoYXZhaWxhYmxlTWV0cmljcy5oYXNPd25Qcm9wZXJ0eShnZXRNZXRyaWNIZWxwZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXZhaWxhYmxlTWV0cmljc1tnZXRNZXRyaWNIZWxwZXJdKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gbWV0cmljIGhlbHBlciBmb3IgJHttZXRyaWN9ICgke2dldE1ldHJpY0hlbHBlcn0pYCk7XG4gICAgfVxuXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuXG4gICAgICAgIHRoaXMubWV0cmljcy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25zLCBtZXRyaWMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMucHJlUmVxdWlzaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5wcmVSZXF1aXNpdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMudmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbnMudmFsdWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5nZXRNZXRyaWMobWV0cmljLCBvcHRpb25zLmFyZ3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBvc3RQcm9jZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG9wdGlvbnMucG9zdFByb2Nlc3MocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5tYXBOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtYXBOYW1lcyA9IG9wdGlvbnMubWFwTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzQXJyYXkobWFwTmFtZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBOYW1lcyA9IFttYXBOYW1lc107XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtYXBOYW1lcy5mb3JFYWNoKG1hcE5hbWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W21hcE5hbWVdID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbWV0cmljXSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGxvZy53YXJuKGBVbmFibGUgdG8gYnVpbGQgbWV0cmljICR7bWV0cmljfWAsIGVycilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9tZXRyaWNzL21ldHJpY3NCdWlsZGVyLmpzIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL2lzQXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xuXG5sZXQge1xuICAgIGdldEFkc0VuYWJsZWQsXG4gICAgZ2V0QW5hbHl0aWNzQWNjb3VudElELFxuICAgIGdldEFuYWx5dGljc1N1aXRlLFxuICAgIGdldEFwcE5hbWUsXG4gICAgZ2V0QXBwVHlwZSxcbiAgICBnZXRBcnRpY2xlSUQsXG4gICAgZ2V0QXJ0aWNsZUxlbmd0aCxcbiAgICBnZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSxcbiAgICBnZXRBcnRpY2xlVGl0bGUsXG4gICAgZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlLFxuICAgIGdldENvbGxlY3Rpb24sXG4gICAgZ2V0RGF4Q29ycCxcbiAgICBnZXREb21haW5Gcm9tVXJsLFxuICAgIGdldEVkaXRpb24sXG4gICAgZ2V0SXNBcHAsXG4gICAgZ2V0UGFnZU5hbWUsXG4gICAgZ2V0UGFnZVR5cGUsXG4gICAgZ2V0UmVmZXJyZXIsXG4gICAgZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUsXG4gICAgZ2V0U2l0ZUNoYW5uZWwsXG4gICAgZ2V0U2l0ZVNlY3Rpb24sXG4gICAgZ2V0U2l0ZVN1YnNlY3Rpb24xLFxuICAgIGdldFNpdGVTdWJzZWN0aW9uMixcbiAgICBnZXRUaW1lc3RhbXAsXG4gICAgZ2V0VG9waWNOYW1lcyxcbiAgICBnZXRWZXJzaW9uLFxuICAgIGdldFBhcnRuZXIsXG4gICAgZ2V0TGljZW5zZVxufSA9IHV0aWxzO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgZ2V0QWRzRW5hYmxlZCxcbiAgICBnZXRBbmFseXRpY3NBY2NvdW50SUQsXG4gICAgZ2V0QW5hbHl0aWNzU3VpdGUsXG4gICAgZ2V0QXBwTmFtZSxcbiAgICBnZXRBcHBUeXBlLFxuICAgIGdldEFydGljbGVJRCxcbiAgICBnZXRBcnRpY2xlTGVuZ3RoLFxuICAgIGdldEFydGljbGVQdWJsaXNoZWREYXRlLFxuICAgIGdldEFydGljbGVUaXRsZSxcbiAgICBnZXRBcnRpY2xlVXBkYXRlZERhdGUsXG4gICAgZ2V0Q29sbGVjdGlvbixcbiAgICBnZXREYXhDb3JwLFxuICAgIGdldERvbWFpbkZyb21VcmwsXG4gICAgZ2V0RWRpdGlvbixcbiAgICBnZXRJc0FwcCxcbiAgICBnZXRQYWdlTmFtZSxcbiAgICBnZXRQYWdlVHlwZSxcbiAgICBnZXRSZWZlcnJlcixcbiAgICBnZXRTaXRlQ2F0YWx5c3RDb29raWVWYWx1ZSxcbiAgICBnZXRTaXRlQ2hhbm5lbCxcbiAgICBnZXRTaXRlU2VjdGlvbixcbiAgICBnZXRTaXRlU3Vic2VjdGlvbjEsXG4gICAgZ2V0U2l0ZVN1YnNlY3Rpb24yLFxuICAgIGdldFRpbWVzdGFtcCxcbiAgICBnZXRUb3BpY05hbWVzLFxuICAgIGdldFZlcnNpb24sXG4gICAgZ2V0UGFydG5lcixcbiAgICBnZXRMaWNlbnNlXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9tZXRyaWNzL2luZGV4LmpzIiwiaW1wb3J0IGdldEFkc0VuYWJsZWQgZnJvbSAnLi9nZXRBZHNFbmFibGVkJztcbmltcG9ydCBnZXRBbmFseXRpY3NBY2NvdW50SUQgZnJvbSAnLi9nZXRBbmFseXRpY3NBY2NvdW50SUQnO1xuaW1wb3J0IGdldEFuYWx5dGljc1N1aXRlIGZyb20gJy4vZ2V0QW5hbHl0aWNzU3VpdGUnO1xuaW1wb3J0IGdldEFwcE5hbWUgZnJvbSAnLi9nZXRBcHBOYW1lJztcbmltcG9ydCBnZXRBcHBUeXBlIGZyb20gJy4vZ2V0QXBwVHlwZSc7XG5pbXBvcnQgZ2V0QXJ0aWNsZUlEIGZyb20gJy4vZ2V0QXJ0aWNsZUlEJztcbmltcG9ydCBnZXRBcnRpY2xlTGVuZ3RoIGZyb20gJy4vZ2V0QXJ0aWNsZUxlbmd0aCc7XG5pbXBvcnQgZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUgZnJvbSAnLi9nZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSc7XG5pbXBvcnQgZ2V0QXJ0aWNsZVRpdGxlIGZyb20gJy4vZ2V0QXJ0aWNsZVRpdGxlJztcbmltcG9ydCBnZXRBcnRpY2xlVXBkYXRlZERhdGUgZnJvbSAnLi9nZXRBcnRpY2xlVXBkYXRlZERhdGUnO1xuaW1wb3J0IGdldENvbGxlY3Rpb24gZnJvbSAnLi9nZXRDb2xsZWN0aW9uJztcbmltcG9ydCBnZXREYXhDb3JwIGZyb20gJy4vZ2V0RGF4Q29ycCc7XG5pbXBvcnQgZ2V0RG9tYWluRnJvbVVybCBmcm9tICcuL2dldERvbWFpbkZyb21VcmwnO1xuaW1wb3J0IGdldEVkaXRpb24gZnJvbSAnLi9nZXRFZGl0aW9uJztcbmltcG9ydCBnZXRJc0FwcCBmcm9tICcuL2dldElzQXBwJztcbmltcG9ydCBnZXRQYWdlTmFtZSBmcm9tICcuL2dldFBhZ2VOYW1lJztcbmltcG9ydCBnZXRQYWdlVHlwZSBmcm9tICcuL2dldFBhZ2VUeXBlJztcbmltcG9ydCBnZXRSZWZlcnJlciBmcm9tICcuL2dldFJlZmVycmVyJztcbmltcG9ydCBnZXRTZWN0aW9uU3RyaW5ncyBmcm9tICcuL2dldFNlY3Rpb25TdHJpbmdzJztcbmltcG9ydCBnZXRTaXRlQ2F0YWx5c3RDb29raWVWYWx1ZSBmcm9tICcuL2dldFNpdGVDYXRhbHlzdENvb2tpZVZhbHVlJztcbmltcG9ydCBnZXRTaXRlQ2hhbm5lbCBmcm9tICcuL2dldFNpdGVDaGFubmVsJztcbmltcG9ydCBnZXRTaXRlU2VjdGlvbiBmcm9tICcuL2dldFNpdGVTZWN0aW9uJztcbmltcG9ydCBnZXRTaXRlU3Vic2VjdGlvbjEgZnJvbSAnLi9nZXRTaXRlU3Vic2VjdGlvbjEnO1xuaW1wb3J0IGdldFNpdGVTdWJzZWN0aW9uMiBmcm9tICcuL2dldFNpdGVTdWJzZWN0aW9uMic7XG5pbXBvcnQgZ2V0U3luZGljYXRlZFZpZGVvU291cmNlIGZyb20gJy4vZ2V0U3luZGljYXRlZFZpZGVvU291cmNlJztcbmltcG9ydCBnZXRUaW1lc3RhbXAgZnJvbSAnLi9nZXRUaW1lc3RhbXAnO1xuaW1wb3J0IGdldFRvcGljTmFtZXMgZnJvbSAnLi9nZXRUb3BpY05hbWVzJztcbmltcG9ydCBnZXRWZXJzaW9uIGZyb20gJy4vZ2V0VmVyc2lvbic7XG5pbXBvcnQgZ2V0UGFydG5lciBmcm9tICcuL2dldFBhcnRuZXInO1xuaW1wb3J0IGdldExpY2Vuc2UgZnJvbSAnLi9nZXRMaWNlbnNlJztcblxuaW1wb3J0IHtcbiAgICBzYW5pdGlzZUtleVZhbHVlcyxcbiAgICBzYW5pdGlzZUxhYmVsVmFsdWUsXG4gICAgc2FuaXRpc2VQYWdlTmFtZVxufSBmcm9tICcuL3Nhbml0aXNlVmFsdWVzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGdldEFkc0VuYWJsZWQsXG4gICAgZ2V0QW5hbHl0aWNzQWNjb3VudElELFxuICAgIGdldEFuYWx5dGljc1N1aXRlLFxuICAgIGdldEFwcE5hbWUsXG4gICAgZ2V0QXBwVHlwZSxcbiAgICBnZXRBcnRpY2xlSUQsXG4gICAgZ2V0QXJ0aWNsZUxlbmd0aCxcbiAgICBnZXRBcnRpY2xlUHVibGlzaGVkRGF0ZSxcbiAgICBnZXRBcnRpY2xlVGl0bGUsXG4gICAgZ2V0QXJ0aWNsZVVwZGF0ZWREYXRlLFxuICAgIGdldENvbGxlY3Rpb24sXG4gICAgZ2V0RGF4Q29ycCxcbiAgICBnZXREb21haW5Gcm9tVXJsLFxuICAgIGdldEVkaXRpb24sXG4gICAgZ2V0SXNBcHAsXG4gICAgZ2V0UGFnZU5hbWUsXG4gICAgZ2V0UGFnZVR5cGUsXG4gICAgZ2V0UmVmZXJyZXIsXG4gICAgZ2V0U2VjdGlvblN0cmluZ3MsXG4gICAgZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUsXG4gICAgZ2V0U2l0ZUNoYW5uZWwsXG4gICAgZ2V0U2l0ZVNlY3Rpb24sXG4gICAgZ2V0U2l0ZVN1YnNlY3Rpb24xLFxuICAgIGdldFNpdGVTdWJzZWN0aW9uMixcbiAgICBnZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UsXG4gICAgZ2V0VGltZXN0YW1wLFxuICAgIGdldFRvcGljTmFtZXMsXG4gICAgZ2V0VmVyc2lvbixcbiAgICBzYW5pdGlzZUtleVZhbHVlcyxcbiAgICBzYW5pdGlzZUxhYmVsVmFsdWUsXG4gICAgc2FuaXRpc2VQYWdlTmFtZSxcbiAgICBnZXRQYXJ0bmVyLFxuICAgIGdldExpY2Vuc2Vcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvaW5kZXguanMiLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFkc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5pc0Fkc0VuYWJsZWQoKSA/IDEgOiAwO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBZHNFbmFibGVkLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbmFseXRpY3NBY2NvdW50SUQoKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5nZXRBbmFseXRpY3NBY2N0SWQoKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QW5hbHl0aWNzQWNjb3VudElELmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbmFseXRpY3NTdWl0ZSgpIHtcbiAgICByZXR1cm4gY29uZmlnLmdldEFuYWx5dGljc1N1aXRlKCk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFuYWx5dGljc1N1aXRlLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcHBOYW1lKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0QXBwTmFtZSgpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcHBOYW1lLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcHBUeXBlKCkge1xuICAgIGlmIChjb25maWcuaXNTcG9ydEFwcCgpIHx8IGJiY2RvdGNvbS5hbmFseXRpY3MuaXNTY3dIYW5kbGVyVXNlZCkge1xuICAgICAgICByZXR1cm4gJ21vYmlsZS1hcHAnO1xuICAgIH0gZWxzZSBpZiAoKHR5cGVvZiBvcmIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcmIuZmlnID09PSAnZnVuY3Rpb24nICYmIG9yYi5maWcoJ21iJykgPT09IDEpXG4gICAgICAgIHx8IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLmhvc3RuYW1lLnNlYXJjaCgvbS4qLmJiYy5jby8pID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnbW9iaWxlLXdlYic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICd3ZWInO1xuICAgIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXBwVHlwZS5qcyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcblxuY29uc3QgTlVMID0gJ25hJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QXJ0aWNsZUlEKGhyZWYpIHtcbiAgICBpZiAodHlwZW9mIGhyZWYgPT09ICd1bmRlZmluZWQnIHx8IGhyZWYgPT09ICcnKSB7XG4gICAgICAgIGhyZWYgPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5ocmVmO1xuICAgIH1cbiAgICBpZiAoLy4qW1xcLVxcL10oXFxkezcsOX0pKCR8KFxcL1thLXpdKikpLy50ZXN0KGhyZWYpKSB7XG4gICAgICAgIHJldHVybiBSZWdFeHAuJDE7XG4gICAgfVxuICAgIHJldHVybiBOVUw7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVJRC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVMZW5ndGgoKSB7XG5cbiAgICAvKiogUmVzcG9uc2l2ZSBOZXdzICovXG4gICAgaWYgKFxuICAgICAgICB0eXBlb2Ygd2luZG93LmNvbmZpZyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LmNvbmZpZy5hc3NldC5sZW5ndGggIT09IG51bGxcbiAgICApIHtcbiAgICAgICAgLy8gUmVzcG9uc2l2ZSBOZXdzXG4gICAgICAgIHJldHVybiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKiogT25lU3BvcnQgKi9cbiAgICB2YXIgc3RvcnlCb2R5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0b3J5LWJvZHknKTtcbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBzdG9yeUJvZHkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHN0b3J5Qm9keSAhPT0gbnVsbFxuICAgICkge1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgoc3RvcnlCb2R5KTtcbiAgICB9XG5cbiAgICAvKiogT2xkIFNwb3J0ICovXG4gICAgdmFyIGFydGljbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhcnRpY2xlJyk7XG4gICAgaWYgKFxuICAgICAgICB0eXBlb2YgYXJ0aWNsZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgYXJ0aWNsZSAhPT0gbnVsbCAmJlxuICAgICAgICBhcnRpY2xlLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgICB2YXIgYXJ0aWNsZUVsZW1lbnQgPSBhcnRpY2xlWzBdO1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgoYXJ0aWNsZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8qKiBPbGQgU3BvcnQgTWFwICovXG4gICAgdmFyIGVtcENvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZW1wLWNvbnRlbnQnKTtcbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBlbXBDb250ZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICBlbXBDb250ZW50ICE9PSBudWxsXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBnZXRFbGVtZW50VGV4dExlbmd0aChlbXBDb250ZW50KTtcbiAgICB9XG5cbiAgICAvKiogT2xkIFdlYXRoZXIgKi9cbiAgICB2YXIgbGF5b3V0QSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xheW91dC1ibG9jay1hJyk7XG4gICAgaWYgKFxuICAgICAgICB0eXBlb2YgbGF5b3V0QSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgbGF5b3V0QSAhPT0gbnVsbCAmJlxuICAgICAgICBsYXlvdXRBLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgICB2YXIgbGF5b3V0QUVsZW1lbnQgPSBsYXlvdXRBWzBdO1xuICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFRleHRMZW5ndGgobGF5b3V0QUVsZW1lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gZ2V0RWxlbWVudFRleHRMZW5ndGgoZWxlbWVudCkge1xuXG4gICAgLy8gQ2hlY2sgdGhlIGVsZW1lbnRcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IGVsZW1lbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdHJ5IHtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZWxlbWVudC5pbm5lclRleHQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBlbGVtZW50LmlubmVyVGV4dCAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGVsZW1lbnQuaW5uZXJUZXh0Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQuaW5uZXJUZXh0Lmxlbmd0aCAhPT0gbnVsbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIFVzZSBpbm5lclRleHQgYXMgd2UgbmVlZCB0byB0YWtlIGludG8gY29uc2lkZXJhdGlvbiBsYXlvdXQsIGRpc2NvdW50aW5nIGhpZGRlbiBlbGVtZW50cyBldGNcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmlubmVyVGV4dC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgZWxlbWVudC50ZXh0Q29udGVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBlbGVtZW50LnRleHRDb250ZW50Lmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQubGVuZ3RoICE9PSBudWxsXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gaW5uZXJUZXh0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gRmlyZWZveCwgc28gdXNlIHRleHRDb250ZW50XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRBcnRpY2xlTGVuZ3RoLmpzIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxuLyoqXG4gKiBAcmV0dXJucyB7Kn0gSHVtYW4tcmVhZGFibGUgKGVnIFwiMjAxMS8xMi8xMiAxMTo1NjoxMFwiKSBPUiBzZWNvbmQgdGltZXN0YW1wXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVQdWJsaXNoZWREYXRlKGFzVGltZXN0YW1wKSB7XG4gICAgdmFyIGRhdGUgPSBudWxsLFxuICAgICAgICBzcG9ydERlc2t0b3BEYXRlID0gdXRpbHMuZ2V0TWV0YU5hbWVDb250ZW50KCdEQ1RFUk1TLmNyZWF0ZWQnKSxcbiAgICAgICAgc3BvcnRSZXNwb25zaXZlRGF0ZSA9IHV0aWxzLmdldE1ldGFQcm9wZXJ0eUNvbnRlbnQoJ3JuZXdzOmRhdGVQdWJsaXNoZWQnKTtcblxuICAgIGlmICh3aW5kb3cuY29uZmlnICYmIHdpbmRvdy5jb25maWcuYXNzZXQgJiYgd2luZG93LmNvbmZpZy5hc3NldC5maXJzdF9jcmVhdGVkICYmIHdpbmRvdy5jb25maWcuYXNzZXQuZmlyc3RfY3JlYXRlZC5kYXRlKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICAvLyBlZyAyMDE1LTAxLTA4IDAzOjQ0OjMxXG4gICAgICAgIGRhdGUgPSB3aW5kb3cuY29uZmlnLmFzc2V0LmZpcnN0X2NyZWF0ZWQuZGF0ZTtcbiAgICB9IGVsc2UgaWYgKHNwb3J0RGVza3RvcERhdGUgIT09ICcnKSB7XG4gICAgICAgIC8vIFNwb3J0IERlc2t0b3BcbiAgICAgICAgLy8gZWcgMjAxMS8xMi8xMlQxMTo1NjoxMCswMDowMFxuICAgICAgICBkYXRlID0gc3BvcnREZXNrdG9wRGF0ZS5yZXBsYWNlKCdUJywgJyAnKS5yZXBsYWNlKCcrMDA6MDAnLCAnJyk7XG4gICAgfSBlbHNlIGlmIChzcG9ydFJlc3BvbnNpdmVEYXRlICE9PSAnJykge1xuICAgICAgICAvLyBTcG9ydCBSZXNwb25zaXZlXG4gICAgICAgIC8vIGVnIDIwMTUvMDkvMjMgOTo0NTozNlxuICAgICAgICBkYXRlID0gc3BvcnRSZXNwb25zaXZlRGF0ZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0ZSA9PT0gbnVsbCB8fCBkYXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBkYXRlID0gZGF0ZS5yZXBsYWNlKC8tL2csICcvJyk7XG5cbiAgICBpZiAodHlwZW9mIGFzVGltZXN0YW1wICE9PSAndW5kZWZpbmVkJyAmJiBhc1RpbWVzdGFtcCA9PT0gdHJ1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIChEYXRlLnBhcnNlKGRhdGUpKSAvIDEwMDA7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0QXJ0aWNsZVB1Ymxpc2hlZERhdGUuanMiLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuaW1wb3J0IHtzYW5pdGlzZUxhYmVsVmFsdWV9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFydGljbGVUaXRsZSgpIHtcbiAgICByZXR1cm4gc2FuaXRpc2VMYWJlbFZhbHVlKGFuYWx5dGljc0hlbHBlci5nZXRQYWdlTmFtZSgpKS5yZXBsYWNlKC9bXFxzXS9nLCAnXycpLnJlcGxhY2UoL197Mix9L2csICdfJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVUaXRsZS5qcyIsIi8qIGdsb2JhbCB3aW5kb3csIGRvY3VtZW50LCBiYmNkb3Rjb20sIG9yYiwgc2NyZWVuICovXG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnYW5hbHl0aWNzOmhlbHBlcicpO1xudmFyIG9iamVjdHMgPSByZXF1aXJlKCdvYmplY3RzJyk7XG52YXIgZ2V0QXJ0aWNsZUlEID0gcmVxdWlyZSgnYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVJRCcpO1xuXG52YXIgc2VjdGlvblN0cmluZ3MgPSBbJycsICcnLCAnJywgJyddLFxuICAgIGFscmVhZHlMaW5rZWQgPSBmYWxzZSxcbiAgICBjbGlja0xpc3RlbmVyLCAgICAgIC8vIHJlbW92ZSBtZSwgSSBkYXJlIHlvdSA6LW9cbiAgICB2ZXJ0aWNhbHNSZWdleHAgPSAvXihhdXRvc3xjYXBpdGFsfGN1bHR1cmV8ZWFydGh8ZnV0dXJlfHRyYXZlbCkkLyxcbiAgICBMSU5LX1RSQUNLSU5HX1NFQ1RJT05TID0gWydob21lcGFnZScsICduZXdzJywgJ3Nwb3J0JywgJ3d3c2NyaXB0cycsICdyZWVsJ10sICAvLyBUTERzIG9uIHdlYnNpdGUgcGVybWl0dGVkIHRvIGhhdmUgbGluay10cmFja2luZ1xuICAgIFRSQUNLSU5HX1RJTUVPVVQgPSA1MDAsXG4gICAgTlVMID0gJ25hJztcblxudmFyIGlzQkJDVXJpID0gZnVuY3Rpb24gKHVyaSkge1xuICAgIHJldHVybiAoL15odHRwKHxzKTpcXC9cXC9bYS16MC05XFwtLl0rLmJiYy5jbyhtfC51aykoXFwvKT8oLiopPy8pLnRlc3QodXJpKTtcbn07XG5cbnZhciBpc0xpdmVFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBUaGlzIGlzIGJhZCwgd2Ugc2hvdWxkIGJlIGdldHRpbmcgdGhlIHNpdGVzIHRvIHJlcG9ydCB0aGlzIGluc3RlYWQgb2YgaW5zcGVjdGluZyB0aGUgVVJJLlxuICAgIHZhciByZSA9IC8obmV3c3xzcG9ydClcXC9saXZlXFwvLztcbiAgICByZXR1cm4gcmUuZXhlYyhzZWN0aW9ucy5nZXRTZWN0aW9ucygpLmpvaW4oXCIvXCIpKSAhPT0gbnVsbDtcbn07XG5cbi8qKlxuICogT3V0YnJhaW4gbGlua3MgdG8gdHJhZmZpYy5vdXRicmFpbi5jb20gYnV0IGNvbWVzIGJhY2sgdG8gdGhlIGJiYy5jb20gKHRoZXJlZm9yZSB1c2UgdGhlIGxpbmsgdHJhY2tpbmcgXCJjb29raWUgZHJvcFwiXG4gKiBtZXRob2Qgb2YgdHJhY2tpbmcpXG4gKiBlZyA8YSBocmVmPVwiaHR0cDovL3RyYWZmaWMub3V0YnJhaW4uY29tL3JlZGlyZWN0Pz1odHRwOi8vd3d3LmJiYy5jb20vbmV3cy9zdG9yeS0xMjM0NVwiPlxuICovXG52YXIgaXNFeHRlcm5hbFJlZGlyZWN0VG9CQkNVcmkgPSBmdW5jdGlvbiAodXJpKSB7XG4gICAgcmV0dXJuICgvXmh0dHAofHMpOlxcL1xcL3RyYWZmaWNcXC5vdXRicmFpblxcLmNvbS8pLnRlc3QodXJpKTtcbn07XG5cbi8qKlxuICogVXNlcyB3aW5kb3cubG9jYXRpb24gb3IgY29uZmlnLnNldFNlY3Rpb25zKFtdKSB0byBkZXJpdmUgdjYsIHY3IGFuZCB2OCBzZWN0aW9uIHZhbHVlc1xuICovXG52YXIgZGV0ZXJtaW5lU2VjdGlvbnMgPSBmdW5jdGlvbiAoc2VwYXJhdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBzZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlcGFyYXRvciA9ICc+JztcbiAgICB9XG4gICAgdmFyIHNlY3RzID0gc2VjdGlvbnMuZ2V0U2VjdGlvbnMoJ2FuYWx5dGljcycsIHRydWUpO1xuICAgIHNlY3Rpb25TdHJpbmdzID0gWycnLCAnJywgJycsICcnXTtcbiAgICAvLyBlZyB2Nj1uZXdzIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3c1xuICAgIHNlY3Rpb25TdHJpbmdzWzBdID0gc2VjdHNbMF07XG4gICAgaWYgKHR5cGVvZiBzZWN0c1sxXSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VjdHNbMV0pIHtcbiAgICAgICAgaWYgKHNlY3RzWzBdID09PSAnbmV3cycgJiYgKHNlY3RzWzFdLmluZGV4T2YoJ3dvcmxkJykgPT09IDAgfHwgc2VjdHNbMV0gPT09ICdzcGVjaWFsZmVhdHVyZXMnKSkge1xuICAgICAgICAgICAgLy8gR29lcyB1cCB0byA0IGRlZXAgZWcgL25ld3Mvd29ybGQvYXNpYS9pbmRpYVxuICAgICAgICAgICAgLy8gT25seSAvbmV3cy93b3JsZC8qICYgL25ld3Mvc3BlY2lhbGZlYXR1cmVzLypcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VjdHNbM10gIT09ICd1bmRlZmluZWQnICYmIHNlY3RzWzNdICYmIHNlY3RzWzJdKSB7XG4gICAgICAgICAgICAgICAgLy8gZWcgdjc9bmV3cz53b3JsZD5hc2lhICAgICAgIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3cy93b3JsZC9hc2lhL2luZGlhXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9bmV3cz53b3JsZD5hc2lhPmluZGlhIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3cy93b3JsZC9hc2lhL2luZGlhXG4gICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0c1swXSArIHNlcGFyYXRvciArIHNlY3RzWzFdICsgc2VwYXJhdG9yICsgc2VjdHNbMl07XG4gICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMl0gPSBzZWN0aW9uU3RyaW5nc1sxXSArIHNlcGFyYXRvciArIHNlY3RzWzNdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VjdHNbMl0gIT09ICd1bmRlZmluZWQnICYmIHNlY3RzWzJdKSB7XG4gICAgICAgICAgICAgICAgLy8gZWcgdjc9bmV3cz53b3JsZD5hc2lhIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3cy93b3JsZC9hc2lhXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9bmV3cz53b3JsZD5hc2lhIGZvciBodHRwOi8vd3d3LmJiYy5jb20vbmV3cy93b3JsZC9hc2lhXG4gICAgICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0c1swXSArIHNlcGFyYXRvciArIHNlY3RzWzFdICsgc2VwYXJhdG9yICsgc2VjdHNbMl07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVnIHY3PW5ld3M+d29ybGQgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL3dvcmxkXG4gICAgICAgICAgICAgICAgLy8gZWcgdjg9bmV3cz53b3JsZCBmb3IgaHR0cDovL3d3dy5iYmMuY29tL25ld3Mvd29ybGRcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1sxXSA9IHNlY3RzWzBdICsgc2VwYXJhdG9yICsgc2VjdHNbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2VjdHNbMF0gPT09ICdzcG9ydCcpIHtcbiAgICAgICAgICAgIC8vIEdvZXMgdXAgdG8gNSBkZWVwIC0gVFJZIFRPIEtFRVAgVEhJUyBHRU5FUklDIFBMRUFTRSAtIE5PIEVWRU5UIFNQRUNJRklDIFJVTEVTISFcbiAgICAgICAgICAgIC8vIGVnIC9zcG9ydC9jb21tb253ZWFsdGgtZ2FtZXMvMjAxNC9yZXN1bHRzL3Nwb3J0cy9ib3hpbmcvbWVucy1oZWF2eS05MWtnXG5cbiAgICAgICAgICAgIC8vIGVnIHY3PXNwb3J0PmZvb3RiYWxsIGZvciBodHRwOi8vd3d3LmJiYy5jb20vc3BvcnQvZm9vdGJhbGwvdGVhbXMvWFlaXG4gICAgICAgICAgICAvLyBlZyB2Nz1zcG9ydD5jb21tb253ZWFsdGgtZ2FtZXMtMjAxNFxuICAgICAgICAgICAgc2VjdGlvblN0cmluZ3NbMV0gPSBzZWN0c1swXSArIHNlcGFyYXRvciArIHNlY3RzWzFdO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWN0c1syXSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VjdHNbMl0pIHtcbiAgICAgICAgICAgICAgICAvLyBlZyB2OD1zcG9ydD5mb290YmFsbD50ZWFtcyBmb3IgaHR0cDovL3d3dy5iYmMuY29tL3Nwb3J0L2Zvb3RiYWxsL3RlYW1zL1hZWlxuICAgICAgICAgICAgICAgIC8vIGVnIHY4PXNwb3J0PmNvbW1vbndlYWx0aC1nYW1lcy0yMDE0PnJlc3VsdHNcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1syXSA9IHNlY3Rpb25TdHJpbmdzWzFdICsgc2VwYXJhdG9yICsgc2VjdHNbMl07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZWN0c1s0XSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VjdHNbNF0gJiYgc2VjdHNbM10gJiYgc2VjdHNbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZWcgdjk9c3BvcnQ+Y29tbW9ud2VhbHRoLWdhbWVzLTIwMTQ+cmVzdWx0cz5ib3hpbmc+bWVucy1oZWF2eS05MWtnXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzNdID0gc2VjdGlvblN0cmluZ3NbMl0gKyBzZXBhcmF0b3IgKyBzZWN0c1szXSArIHNlcGFyYXRvciArIHNlY3RzWzRdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNlY3RzWzNdICE9PSAndW5kZWZpbmVkJyAmJiBzZWN0c1szXSAmJiBzZWN0c1syXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlZyB2OT1zcG9ydD5mb290YmFsbD50ZWFtcz5YWVpcbiAgICAgICAgICAgICAgICAgICAgLy8gZWcgdjk9c3BvcnQ+Y29tbW9ud2VhbHRoLWdhbWVzLTIwMTQ+cmVzdWx0cz5ib3hpbmc+bWVucy1oZWF2eS05MWtnXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzNdID0gc2VjdGlvblN0cmluZ3NbMl0gKyBzZXBhcmF0b3IgKyBzZWN0c1szXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTdGFuZGFyZCwgZG9uJ3QgZ28gYXMgZGVlcCAtIG9ubHkgMyBkZWVwXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNlY3RzWzJdICE9PSAndW5kZWZpbmVkJyAmJiBzZWN0c1syXSkge1xuICAgICAgICAgICAgICAgIC8vIGVnIHY3PW5ld3M+YnVzaW5lc3MgICAgICAgICAgICAgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL2J1c2luZXNzL21hcmtldF9kYXRhL292ZXJ2aWV3L1xuICAgICAgICAgICAgICAgIC8vIGVnIHY4PW5ld3M+YnVzaW5lc3M+bWFya2V0X2RhdGEgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL2J1c2luZXNzL21hcmtldF9kYXRhL292ZXJ2aWV3L1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzFdID0gc2VjdHNbMF0gKyBzZXBhcmF0b3IgKyBzZWN0c1sxXTtcbiAgICAgICAgICAgICAgICBzZWN0aW9uU3RyaW5nc1syXSA9IHNlY3Rpb25TdHJpbmdzWzFdICsgc2VwYXJhdG9yICsgc2VjdHNbMl07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGVnIHY3PW5ld3M+YnVzaW5lc3MgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL2J1c2luZXNzL1xuICAgICAgICAgICAgICAgIC8vIGVnIHY4PW5ld3M+YnVzaW5lc3MgZm9yIGh0dHA6Ly93d3cuYmJjLmNvbS9uZXdzL2J1c2luZXNzL1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TdHJpbmdzWzFdID0gc2VjdHNbMF0gKyBzZXBhcmF0b3IgKyBzZWN0c1sxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2VjdGlvblN0cmluZ3NbMV0gPT09ICcnKSB7XG4gICAgICAgIHNlY3Rpb25TdHJpbmdzWzFdID0gc2VjdGlvblN0cmluZ3NbMF07XG4gICAgfVxuICAgIGlmIChzZWN0aW9uU3RyaW5nc1syXSA9PT0gJycpIHtcbiAgICAgICAgc2VjdGlvblN0cmluZ3NbMl0gPSBzZWN0aW9uU3RyaW5nc1sxXTtcbiAgICB9XG4gICAgcmV0dXJuIHNlY3Rpb25TdHJpbmdzO1xufTtcblxudmFyIGdldFN0b3J5SGVhZGxpbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNwc0hlYWRsaW5lLFxuICAgICAgICBoZWFkbGluZSA9IGNvbmZpZy5nZXRIZWFkbGluZSgpO1xuICAgIGlmIChoZWFkbGluZSAhPT0gJycpIHtcbiAgICAgICAgLy8gUG9wdWxhdGVkIGJ5IHdlYnNlcnZpY2Ugb3IgdmlhIFwiY29uZmlnLnNldEhlYWRsaW5lKCdUaGUgc3RvcnkgaGVhZGxpbmUnKVwiXG4gICAgICAgIHJldHVybiBoZWFkbGluZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuY29uZmlnICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmNvbmZpZy5hc3NldCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQuaGVhZGxpbmUgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25maWcuYXNzZXQuaGVhZGxpbmUgIT09ICcnXG4gICAgKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICByZXR1cm4gd2luZG93LmNvbmZpZy5hc3NldC5oZWFkbGluZTtcbiAgICB9XG4gICAgY3BzSGVhZGxpbmUgPSB1dGlscy5nZXRNZXRhTmFtZUNvbnRlbnQoJ0hlYWRsaW5lJyk7XG4gICAgaWYgKGNwc0hlYWRsaW5lICE9PSAnJykge1xuICAgICAgICAvLyBEZXNrdG9wIE5ld3MgJiBTcG9ydCAoQ1BTIHN0YWNrKVxuICAgICAgICByZXR1cm4gY3BzSGVhZGxpbmU7XG4gICAgfVxuICAgIHJldHVybiAnbmEnO1xufTtcblxudmFyIGdldFBhZ2VFZGl0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBlZGl0aW9uO1xuXG4gICAgLy8gRG8gbm90IHJldHVybiBlZGl0aW9uIGZvciBqYXBhbmVzZSBbQkJDQ09NLTc4NDJdXG4gICAgaWYgKGdldFZlcnRpY2FsKCkgPT09ICdqYXBhbmVzZScpIHtcbiAgICAgICAgcmV0dXJuIE5VTDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5jb25maWcgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAmJiB0eXBlb2Ygd2luZG93LmNvbmZpZy5hc3NldC5lZGl0aW9uICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uZmlnLmFzc2V0LmVkaXRpb24gIT09ICcnXG4gICAgKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICByZXR1cm4gd2luZG93LmNvbmZpZy5hc3NldC5lZGl0aW9uO1xuICAgIH1cbiAgICBlZGl0aW9uID0gdXRpbHMuZ2V0TWV0YU5hbWVDb250ZW50KCdDUFNfQVVESUVOQ0UnKTtcbiAgICBpZiAoZWRpdGlvbiAhPT0gJycpIHtcbiAgICAgICAgLy8gRGVza3RvcCBOZXdzICYgRGVza3RvcCBTcG9ydCAoQ1BTIHN0YWNrKSAgQUxTTyBSZXNwb25zaXZlIE5ld3NcbiAgICAgICAgcmV0dXJuIGVkaXRpb247XG4gICAgfVxuICAgIGVkaXRpb24gPSB1dGlscy5nZXRNZXRhUHJvcGVydHlDb250ZW50KCd3d2hwLWVkaXRpb24nKTtcbiAgICBpZiAoZWRpdGlvbiAhPT0gJycpIHtcbiAgICAgICAgLy8gSW50ZXJuYXRpb25hbCBob21lcGFnZSBlZGl0aW9uXG4gICAgICAgIHJldHVybiBlZGl0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gTlVMO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYWdlIHR5cGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9IGVnIHN0b3J5LCBpbmRleCwgdmlkZW8sIHN0b3J5LXZpZGVvXG4gKi9cbnZhciBnZXRQYWdlVHlwZSA9IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgaHJlZiA9IGhyZWYgfHwgY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkuaHJlZjtcbiAgICB2YXIgcyA9IHNlY3Rpb25zLmdldFNlY3Rpb25zRm9yVXJpKGhyZWYsICdhbmFseXRpY3MnKTtcbiAgICB2YXIgdHlwZSA9IGNvbmZpZy5nZXRUeXBlKCk7XG5cbiAgICBpZiAoc1swXSA9PT0gJ2hvbWVwYWdlJykge1xuICAgICAgICB0eXBlID0gJ0lOREVYJztcbiAgICB9IGVsc2UgaWYoc1swXSA9PT0gJ3JlZWwnICYmIHMubGVuZ3RoPjEpe1xuICAgICAgICB0eXBlID0gJ01BUCc7XG4gICAgfSBlbHNlIGlmIChpc0xpdmVFdmVudCgpKSB7XG4gICAgICAgIHR5cGUgPSAnTElWRS1FVkVOVCc7XG4gICAgfSBlbHNlIGlmIChjb25maWcuaXNTdGlja3lQbGF5ZXJQYWdlKCkpIHtcbiAgICAgICAgdHlwZSA9ICdWSURFTy1TVElDS1knO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJycpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5jb25maWcgJiYgd2luZG93LmNvbmZpZy5hc3NldCAmJiB3aW5kb3cuY29uZmlnLmFzc2V0LnR5cGUpIHtcbiAgICAgICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICAgICAgdHlwZSA9IHdpbmRvdy5jb25maWcuYXNzZXQudHlwZTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cub25lc3BvcnQgJiYgd2luZG93Lm9uZXNwb3J0LmNvbmZpZyAmJiB3aW5kb3cub25lc3BvcnQuY29uZmlnLm9tbml0dXJlQXNzZXRUeXBlKSB7XG4gICAgICAgICAgICAvLyBSZXNwb25zaXZlIFNwb3J0IChvbmVzcG9ydClcbiAgICAgICAgICAgIHR5cGUgPSB3aW5kb3cub25lc3BvcnQuY29uZmlnLm9tbml0dXJlQXNzZXRUeXBlOyAvLyBlZyBTVE9SWSwgSU5ERVgsIE1BUFxuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5iYmMgJiYgYmJjLmZtdGogJiYgYmJjLmZtdGoucGFnZSAmJiBiYmMuZm10ai5wYWdlLmFzc2V0VHlwZSkge1xuICAgICAgICAgICAgLy8gT2xkIE4mSy9DUFMgTmV3cyAmIFNwb3J0IGRlc2t0b3BcbiAgICAgICAgICAgIHR5cGUgPSBiYmMuZm10ai5wYWdlLmFzc2V0VHlwZTtcbiAgICAgICAgfSBlbHNlIGlmICgoc1swXSA9PT0gJ3Nwb3J0JyAmJiBzWzFdID09PSAnYXYnKSB8fCAoc1swXSA9PT0gJ3Nwb3J0JyAmJiBocmVmLmluZGV4T2YoJy9zcG9ydC9hdicpID4gMCkpIHtcbiAgICAgICAgICAgIC8vIFNwb3J0IHBhZ2VzIG1pc3Npbmcgb25lc3BvcnQgdmFyXG4gICAgICAgICAgICB0eXBlID0gJ0FWJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHR5cGUgaXMgbm90IGEgc3RyaW5nIGF0IHRoaXMgcG9pbnQsIG1ha2Ugc3VyZSBpdCBpcyBhbmQgY29udmVydCBpdCB0byB1cHBlciBjYXNlXG4gICAgdHlwZSA9IHV0aWxzLmlzU3RyaW5nKHR5cGUpID8gdHlwZS50b1VwcGVyQ2FzZSgpIDogJyc7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnQVYnOlxuICAgICAgICBjYXNlICdNQVAnOlxuICAgICAgICBjYXNlICdNRURJQV9BU1NFVCc6XG4gICAgICAgICAgICB0eXBlID0gJ1ZJREVPJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTVFknOlxuICAgICAgICAgICAgdHlwZSA9ICdTVE9SWSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnSURYJzpcbiAgICAgICAgICAgIHR5cGUgPSAnSU5ERVgnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0xFUCc6XG4gICAgICAgICAgICB0eXBlID0gJ0xJVkUtRVZFTlQnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0xJVkVfRVZFTlQnOlxuICAgICAgICAgICAgdHlwZSA9ICdMSVZFLUVWRU5UJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdTVE9SWScgJiYgY29uZmlnLmlzQ29udGludW91c1BsYXlQYWdlKCkpIHtcbiAgICAgICAgdHlwZSA9ICdTVE9SWS1WSURFTyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGUgfHwgKC8uKigtfFxcLykoXFxkezcsOX0pJC8udGVzdChocmVmKSA/ICdTVE9SWScgOiAnSU5ERVgnKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgcGFnZSB0eXBlXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBlZyBzdG9yeSwgaW5kZXgsIHZpZGVvLCBzdG9yeS12aWRlb1xuICovXG52YXIgZ2V0RW1iZWRQYWdlTmFtZSA9IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgaHJlZiA9IGhyZWYgfHwgY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkuaHJlZjtcbiAgICBocmVmID0gaHJlZi5zcGxpdCgvWz8jXS8pWzBdO1xuICAgIHZhciBzID0gc2VjdGlvbnMuZ2V0U2VjdGlvbnNGb3JVcmkoaHJlZiwgJ2FuYWx5dGljcycpLFxuICAgICAgICBwYWdlVHlwZSA9IGdldFBhZ2VUeXBlKCkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgYXJ0aWNsZUlkID0gZ2V0QXJ0aWNsZUlEKGhyZWYpLFxuICAgICAgICBlbWJlZFBhZ2VOYW1lID0gcy5qb2luKFwiLlwiKSxcbiAgICAgICAgaW5kLFxuICAgICAgICBvdmVycmlkZXMgPSB7XG4gICAgICAgICAgICBcIi5saXZlXCI6XCJcIixcbiAgICAgICAgICAgIFwid29ybGQtYWZyaWNhXCI6XCJ3b3JsZC5hZnJpY2FcIixcbiAgICAgICAgICAgIFwiZW50ZXJ0YWlubWVudC1hcnRzXCI6XCJlbnRlcnRhaW5tZW50X2FuZF9hcnRzXCIsXG4gICAgICAgICAgICBcInVzLWNhbmFkYVwiOlwidXNfYW5kX2NhbmFkYVwiLFxuICAgICAgICAgICAgXCJ2aWRlby1hdWRpb1wiOlwidmlkZW9fYW5kX2F1ZGlvXCIsXG4gICAgICAgICAgICBcIndvcmxkLnJhZGlvLXR2XCI6XCJ3b3JsZF9yYWRpb19hbmRfdHZcIixcbiAgICAgICAgICAgIFwiYmxvZ3MtdGhlLXBhcGVyc1wiOlwiYmxvZ3MudGhlLXBhcGVyc1wiLFxuICAgICAgICAgICAgXCJ3b3JsZHNlcnZpY2UuXCI6IFwiXCJcbiAgICAgICAgfTtcblxuICAgIHN3aXRjaCAocGFnZVR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29ycl9zdG9yeScgOlxuICAgICAgICAgICAgcGFnZVR5cGUgPSBcIi5jb3JyZXNwb25kZW50X3N0b3J5XCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaW5kZXgnIDpcbiAgICAgICAgICAgIHBhZ2VUeXBlID0gXCJcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsaXZlLWV2ZW50JyA6XG4gICAgICAgICAgICBwYWdlVHlwZSA9IFwiLmxpdmVfY292ZXJhZ2VcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcGFnZVR5cGUgPSBcIi5cIiArIHBhZ2VUeXBlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGZvciAoaW5kIGluIG92ZXJyaWRlcykge1xuICAgICAgICBlbWJlZFBhZ2VOYW1lID0gZW1iZWRQYWdlTmFtZS5yZXBsYWNlKGluZCwgb3ZlcnJpZGVzW2luZF0pO1xuICAgIH1cbiAgICByZXR1cm4gZW1iZWRQYWdlTmFtZS5yZXBsYWNlKC8tL2csICdfJykgKyBwYWdlVHlwZSArIChhcnRpY2xlSWQgIT09IE5VTCA/IFwiLlwiICsgYXJ0aWNsZUlkIDogJycpICsgXCIuXCIgKyBcInBhZ2VcIjtcbn07XG5cbnZhciBzYW5pdGlzZVBhZ2VOYW1lID0gZnVuY3Rpb24gKHBhZ2VOYW1lKSB7XG4gICAgcGFnZU5hbWUgPSBwYWdlTmFtZS5yZXBsYWNlKC9cIi9nLCBcIidcIik7IC8vIHJlbW92ZSBkb3VibGUgcXVvdGVzXG4gICAgcGFnZU5hbWUgPSBwYWdlTmFtZS5yZXBsYWNlKC8oXmJiYyAobmV3c3xzcG9ydCkgXFwtICkvaSwgJycpOyAvLyBSZW1vdmUgJ2JiYyBuZXdzIC0gdGl0bGUnIGV0Y1xuICAgIHBhZ2VOYW1lID0gcGFnZU5hbWUucmVwbGFjZSgvKCBcXC0gYmJjIChuZXdzfHNwb3J0KSQpL2ksICcnKTsgLy8gUmVtb3ZlICd0aXRsZSAtIGJiYyBuZXdzJyBldGNcbiAgICBwYWdlTmFtZSA9IHBhZ2VOYW1lLnJlcGxhY2UoLyggXFwtIEJCQ+ODi+ODpeODvOOCuSQpL2ksICcnKTsgLy8gUmVtb3ZlIEphcGFuZXNlIHRpdGxlXG4gICAgLy8gcGFnZU5hbWUgPSBwYWdlTmFtZS5yZXBsYWNlKC9ed2VhdGhlclxcLzAvLCAnd2VhdGhlcicpOyAvLyBUcmVhdCAvMCBwYWdlcyBsaWtlIG5vcm1hbCBwYWdlc1xuICAgIHJldHVybiBwYWdlTmFtZS50b0xvd2VyQ2FzZSgpO1xufTtcblxuLyoqXG4gKiBVc2UgZG9jdW1lbnQudGl0bGUgdG8gZ2V0IHRpdGxlIG9mIHBhZ2VcbiAqL1xudmFyIGdldFBhZ2VOYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcuZ2V0V2luZG93RG9jdW1lbnQoKS50aXRsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzYW5pdGlzZVBhZ2VOYW1lKGNvbmZpZy5nZXRXaW5kb3dEb2N1bWVudCgpLnRpdGxlKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFVzZSB1cmwgdG8gZ2V0IHBhZ2UgcGFyYW1ldGVyIHVzZWQgYnkgY29tU2NvcmVcbiAqL1xudmFyIGdldFBhZ2VOYW1lQ29tU2NvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5wYXRobmFtZS5yZXBsYWNlKC9cXC5hcHAkLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9uZXdzXFwvYXZcXC8vLCBcIm5ld3MvXCIpXG4gICAgICAgIC5yZXBsYWNlKC9eXFwvd2VhdGhlclxcLzAvLCAnL3dlYXRoZXInKVxuICAgICAgICAucmVwbGFjZSgvXlxcL3Nwb3J0XFwvKHVrfHdvcmxkKS8sICcvc3BvcnQnKSwgLy8gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICAgIHBhdGhTbGFzaGVzID0gcGF0aC50b0xvd2VyQ2FzZSgpLnNsaWNlKDEpOyAvLyB0cmltIGxlYWRpbmcgc2xhc2hcblxuICAgIGlmIChwYXRoU2xhc2hlcy5zbGljZSgtMSkgPT09ICcvJykgeyAvLyB0cmltIHRyYWlsaW5nIHNsYXNoXG4gICAgICAgIHBhdGhTbGFzaGVzID0gcGF0aFNsYXNoZXMuc2xpY2UoMCwgLTEpO1xuICAgIH1cblxuICAgIGxldCBwYXRoQml0cyA9IHBhdGhTbGFzaGVzLnNwbGl0KCcvJyk7XG4gICAgbGV0IHJlc3BvbnNlO1xuXG4gICAgY29uc3QgdmVydGljYWwgPSBnZXRWZXJ0aWNhbCgpO1xuICAgIGlmIChwYXRoQml0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHZlcnRpY2FsID09PSAnJyB8fCB2ZXJ0aWNhbCA9PT0gJ3d3aHAnKSB7IC8vIGhvbWVwYWdlXG4gICAgICAgICAgICByZXNwb25zZSA9ICdob21lcGFnZS5ob21lJztcbiAgICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ25ld3MnIHx8IHZlcnRpY2FsID09PSAnd2VhdGhlcicgfHwgdmVydGljYWwgPT09ICdzcG9ydCcgfHwgdmVydGljYWwgPT09ICdqYXBhbmVzZScgfHwgdmVydGljYWwgPT09ICdyZWVsJykge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB2ZXJ0aWNhbCArICcuaG9tZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zZSA9IGdldFBhZ2VOYW1lKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodmVydGljYWwgPT09ICdzcG9ydCcgJiYgcGF0aEJpdHMubGVuZ3RoID4gMSAmJiBwYXRoQml0c1sxXSA9PT0gJzAnKSB7IC8vIHRyaW0gLzBcbiAgICAgICAgICAgIGlmIChwYXRoQml0cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHBhdGhCaXRzWzBdICsgJy5ob21lJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBwYXRoQml0c1swXSArICcuJyArIHBhdGhCaXRzLnNsaWNlKDIpLmpvaW4oJy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2ZXJ0aWNhbCA9PT0gJ3dlYXRoZXInIHx8IHZlcnRpY2FsID09PSAnc3BvcnQnICkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSBwYXRoQml0cy5qb2luKCcuJykucmVwbGFjZSgvXm5ld3NcXC4odWt8d29ybGR8dXN8YXNpYSlcXC4oaGVhbHRoKSg/IS0pLywgXCJuZXdzLiQyXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAnbmV3cycgfHwgdmVydGljYWwgPT09ICdqYXBhbmVzZScpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlID0gZ2V0RW1iZWRQYWdlTmFtZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnRpY2FsID09PSAncmVlbCcpIHtcbiAgICAgICAgICByZXNwb25zZSA9IHBhdGhCaXRzLmpvaW4oJy4nKVxuICAgICAgICB9IGVsc2UgeyAvLyBub3QgR05MLCB1c2Ugb2xkIHZhbHVlIGJhc2VkIG9uIHRpdGxlXG4gICAgICAgICAgICByZXNwb25zZSA9IGdldFBhZ2VOYW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG59O1xuXG52YXIgZ2V0VmVydGljYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcGF0aCA9IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLnBhdGhuYW1lLnJlcGxhY2UoL1xcLmFwcCQvLCAnJyk7IC8vIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZVxuICAgIGxldCBwYXRoU2xhc2hlcyA9IHBhdGgudG9Mb3dlckNhc2UoKS5zbGljZSgxKTsgLy8gdHJpbSBsZWFkaW5nIHNsYXNoXG5cbiAgICBpZiAocGF0aFNsYXNoZXMuc2xpY2UoLTEpID09PSAnLycpIHsgLy8gdHJpbSB0cmFpbGluZyBzbGFzaFxuICAgICAgICBwYXRoU2xhc2hlcyA9IHBhdGhTbGFzaGVzLnNsaWNlKDAsIC0xKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXRoQml0cyA9IHBhdGhTbGFzaGVzLnNwbGl0KCcvJyk7XG4gICAgcmV0dXJuIHBhdGhCaXRzLmxlbmd0aCA+IDAgPyBwYXRoQml0c1swXSA6ICcnO1xufVxuXG5cbi8qKlxuICogVXJpIGVuY29kZSB2YWx1ZXMgLSBBbGwgdmFsdWVzIGFyZSBlbmNvZGVkIGV4Y2VwdCB0aG9zZSB3aGljaCBhcmUgcmVwbGFjZWFibGUgZWcgXCJ7ZXZlbnRzfVwiXG4gKi9cbnZhciBlbmNvZGVWYWx1ZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAoL15cXHtbYS16QS1aMC05XFwtX10rXFx9JC8udGVzdChzdHIpKSB7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5pbmcgd2hhdCB0eXBlIG9mIGxpbmsgd2FzIGNsaWNrZWQgYW5kIHdoYXQgZXZlbnQgYW5kIGxpbmtUcmFja2luZ05hbWUgc2hvdWxkIGJlIHVzZWRcbiAqXG4gKiBAcGFyYW0gb2JqZWN0IGxpbmtPYmogVGhlIGVsZW1lbnQgY2xpY2tlZFxuICovXG52YXIgZ2V0TGlua1RyYWNraW5nUHJvcGVydGllcyA9IGZ1bmN0aW9uIChsaW5rT2JqKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgbGlua1NlY3Rpb25zID0gc2VjdGlvbnMuZ2V0U2VjdGlvbnNGb3JVcmkobGlua09iai5ocmVmLCAnYW5hbHl0aWNzJyk7XG4gICAgaWYgKHR5cGVvZiBsaW5rT2JqLnRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRleHQgPSBsaW5rT2JqLnRleHQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGlua09iai5pbm5lclRleHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRleHQgPSBsaW5rT2JqLmlubmVyVGV4dDtcbiAgICB9XG4gICAgdmFyIHByb21vdGVkID0gbGlua1NlY3Rpb25zWzBdOyAgLy8gZWcgL3Nwb3J0L2JsYWggPT4gJ3Nwb3J0J1xuICAgIHByb21vdGVkID0gKHByb21vdGVkID09PSAndW5rbm93bicgPyAnZXh0ZXJuYWwnIDogcHJvbW90ZWQpO1xuICAgIC8vIEVuc3VyZXMgdGhhdCBpZiB0aGUgbmFtZSBjb250YWlucyA0eCBoeXBoZW5zLCB0cmltIHRoZSByZXN0IG9mIHRoZSB0aXRsZVxuICAgIHZhciBzYW5pdGlzZUxpbmtOYW1lID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICBzdHIgPSB1dGlscy50cmltKHN0cikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJy0nKTtcbiAgICAgICAgcmV0dXJuIChzdHIuaW5kZXhPZignLS0tLScpID09PSAtMSA/IHN0ciA6IHN0ci5zdWJzdHIoMCwgc3RyLmluZGV4T2YoJy0tLS0nKSkpO1xuICAgIH07XG4gICAgdmFyIGdldExpbmtOYW1lRnJvbVVybEZvclZlcnRpY2FscyA9IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gaHJlZi5tYXRjaCgvLipcXC9bMC05XStcXC0oW15cXC9dKykvKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaGVkICE9PSBudWxsID8gbWF0Y2hlZFsxXSA6IGxpbmtTZWN0aW9ucy5qb2luKCc+JykpO1xuICAgIH07XG4gICAgLy8gcmV2IG9yIGRhdGEtdHJhY2tcbiAgICB2YXIgbGlua09ialRyYWNrID0gJyc7XG4gICAgaWYgKHR5cGVvZiBsaW5rT2JqLmRhdGFzZXQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBsaW5rT2JqLmRhdGFzZXQudHJhY2sgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICYmIGxpbmtPYmouZGF0YXNldC50cmFjayAhPT0gJycgIC8vIE5PVEU6IFVuaXQgdGVzdHMgYXJlIG1vY2tpbmcgbGlua09iaiB0aGVyZWZvcmUgbGlua09iai5kYXRhc2V0Wyd0cmFjayddIG5vdCB3b3JrXG4gICAgKSB7XG4gICAgICAgIC8vIFVzZSBkYXRhLXRyYWNrIGF0dHJpYnV0ZVxuICAgICAgICBsaW5rT2JqVHJhY2sgPSBsaW5rT2JqLmRhdGFzZXQudHJhY2s7XG4gICAgfSBlbHNlIGlmIChsaW5rT2JqLmdldEF0dHJpYnV0ZSgnZGF0YS10cmFjaycpKSB7XG4gICAgICAgIC8vIElFMTAgYW5kIGxvd2VyIGRvbid0IHN1cHBvcnQgZGF0YXNldFxuICAgICAgICBsaW5rT2JqVHJhY2sgPSBsaW5rT2JqLmdldEF0dHJpYnV0ZSgnZGF0YS10cmFjaycpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpbmtPYmoucmV2ICE9PSAndW5kZWZpbmVkJyAmJiBsaW5rT2JqLnJldiAhPT0gJycpIHtcbiAgICAgICAgLy8gVXNlIHJldiBhdHRyaWJ1dGVcbiAgICAgICAgbGlua09ialRyYWNrID0gbGlua09iai5yZXY7XG4gICAgfVxuICAgIC8vIENvbmRpdGlvbmFscyB0byBkZXRlcm1pbmUgd2hhdCBpbmZvcm1hdGlvbiB0byBjb2xsZWN0XG4gICAgaWYgKGxpbmtPYmouY2xhc3NOYW1lLmluZGV4T2YoJ2V4dGVybmFsLWxpbmsnKSAhPT0gLTEpIHtcblxuICAgICAgICAvLyBFeHRlcm5hbCBsaW5rXG4gICAgICAgIC8vIGVnIDxhIGNsYXNzPVwiZXh0ZXJuYWwtbGlua1wiIHJldj1cIlwiPlxuICAgICAgICAvLyBlZyA8YSBjbGFzcz1cImV4dGVybmFsLWxpbmtcIj5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdldmVudHMnOiBmYWxzZSxcbiAgICAgICAgICAgICdwcm9tb3RlZCc6ICdleHRlcm5hbCcsXG4gICAgICAgICAgICAnbGlua05hbWUnOiBzYW5pdGlzZUxpbmtOYW1lKHRleHQpLFxuICAgICAgICAgICAgJ21vZHVsZU5hbWUnOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgfSBlbHNlIGlmICgoc2VjdGlvblN0cmluZ3NbMF0gPT09ICdob21lcGFnZScgfHwgc2VjdGlvblN0cmluZ3NbMF0gPT09ICd3d3NjcmlwdHMnKVxuICAgICAgICAmJiBsaW5rT2JqVHJhY2suaW5kZXhPZignfCcpICE9PSAtMVxuICAgICkge1xuICAgICAgICAvLyBIb21lcGFnZSBMaW5rIFRyYWNraW5nXG4gICAgICAgIC8vIGVnIDxhIHJldj1cInNwb3RsaWdodHx2aWRlb1wiPlxuICAgICAgICAvLyBlZyA8YSBkYXRhLXRyYWNrPVwic3BvdGxpZ2h0fHZpZGVvXCI+XG4gICAgICAgIC8vIDxtb2R1bGVOYW1lPnw8bGlua0Fzc2V0VHlwZT5cbiAgICAgICAgdmFyIGh0bWxSZXZBcnIgPSBsaW5rT2JqVHJhY2suc3BsaXQoJ3wnKTtcbiAgICAgICAgdmFyIGxpbmtOYW1lID0gKGxpbmtTZWN0aW9uc1swXS5tYXRjaCh2ZXJ0aWNhbHNSZWdleHApXG4gICAgICAgICAgICA/IGdldExpbmtOYW1lRnJvbVVybEZvclZlcnRpY2FscyhsaW5rT2JqLmhyZWYpIDogc2FuaXRpc2VMaW5rTmFtZSh0ZXh0KSk7XG4gICAgICAgIHZhciBwYXJlbnQgPSB1dGlscy5nZXRQYXJlbnRFbGVtZW50QnlDbGFzcyhsaW5rT2JqLCAnbW9kdWxlMicpOyAgLy8gZGVza3RvcCA8ZGl2IGNsYXNzPVwibW9kdWxlMlwiPlxuICAgICAgICBpZiAocGFyZW50ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcGFyZW50ID0gdXRpbHMuZ2V0Q2xvc2VzdEVsZW1lbnRCeVRhZ05hbWUobGlua09iaiwgJ3NlY3Rpb24nKTsgIC8vIHJlc3BvbnNpdmUgPHNlY3Rpb24+XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmtQb3NpdGlvbiA9IHV0aWxzLmdldEFuY2hvclBvc2l0aW9uV2l0aGluRWxlbWVudChwYXJlbnQsIGxpbmtPYmouaHJlZik7XG4gICAgICAgIGlmIChodG1sUmV2QXJyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ2V2ZW50cyc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICdwcm9tb3RlZCc6IHByb21vdGVkLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgJ2xpbmtOYW1lJzogbGlua05hbWUsXG4gICAgICAgICAgICAgICAgJ21vZHVsZU5hbWUnOiBodG1sUmV2QXJyWzBdLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICAgICAgJ2xpbmtUeXBlJzogKHR5cGVvZiBodG1sUmV2QXJyWzFdID09PSAnc3RyaW5nJyA/IGh0bWxSZXZBcnJbMV0udG9Mb3dlckNhc2UoKSA6IE5VTCksXG4gICAgICAgICAgICAgICAgJ2xpbmtQb3NpdGlvbic6IChsaW5rUG9zaXRpb24gIT09IGZhbHNlICYmIGxpbmtQb3NpdGlvbiAhPT0gMCA/IGxpbmtQb3NpdGlvbiA6IE5VTClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ2JiY2NvbV9hZHNlbnNlJywgdW5kZWZpbmVkLCB0cnVlKSkge1xuICAgICAgICAvLyBHb29nbGUgQWRzZW5zZVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2V2ZW50cyc6IGZhbHNlLFxuICAgICAgICAgICAgJ3Byb21vdGVkJzogJ2FkcycsXG4gICAgICAgICAgICAnbGlua05hbWUnOiAnYWRzZW5zZScsXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6ICdnb29nbGUtYWRzZW5zZSdcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLnBhcmVudEhhc0NsYXNzKGxpbmtPYmosICdiYmNjb21fYWR2ZXJ0JywgdW5kZWZpbmVkLCB0cnVlKSkge1xuICAgICAgICAvLyBCQkNDT00tNjE0NzogRG9uJ3QgaW50ZXJmZXJlIHdpdGggYWR2ZXJ0IGxpbmtzIChEb3VibGVjbGljayBkaXNwbGF5IGFkcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ2JiYy1zdC1idXR0b25zJykgfHwgdXRpbHMucGFyZW50SGFzQ2xhc3MobGlua09iaiwgJ3NoYXJlX190b29sJykpIHtcbiAgICAgICAgLy8gU2hhcmUgVG9vbHNcbiAgICAgICAgLy8gLmJiYy1zdC1idXR0b25zIC0gTmV3cyAmIFNwb3J0IERlc2t0b3AgU2hhcmUgdG9wIGFuZCBib3R0b21cbiAgICAgICAgLy8gLnNoYXJlX190b29sIC0gTmV3cyBSZXNwb25zaXZlIFNoYXJlIGJvdHRvbVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2V2ZW50cyc6ICdldmVudDIzJyxcbiAgICAgICAgICAgICdwcm9tb3RlZCc6ICdzaGFyZS10b29scycsXG4gICAgICAgICAgICAnbGlua05hbWUnOiBzYW5pdGlzZUxpbmtOYW1lKHRleHQpLCAgLy8gZWcgRmFjZWJvb2ssIFR3aXR0ZXJcbiAgICAgICAgICAgICdtb2R1bGVOYW1lJzogJ3NoYXJlLXRvb2xzJyxcbiAgICAgICAgICAgICd2Jzoge1xuICAgICAgICAgICAgICAgICczNSc6IHNhbml0aXNlTGlua05hbWUodGV4dCkgKyAnLXNoYXJlJywgIC8vIHYzNVxuICAgICAgICAgICAgICAgICczOSc6IHNlY3Rpb25TdHJpbmdzWzFdICsgJy0nICsgZ2V0UGFnZU5hbWUoKSAgLy8gdjM5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICB9IGVsc2UgaWYgKHNlY3Rpb25TdHJpbmdzWzBdID09PSAnbmV3cycgJiYgKHNlY3Rpb25TdHJpbmdzWzFdID09PSAnbmV3cycgfHwgc2VjdGlvblN0cmluZ3NbMV0gPT09ICduZXdzLjAnKSkge1xuXG4gICAgICAgIC8vIE5ld3MgRnJvbnQgUGFnZVxuICAgICAgICBwYXJlbnQgPSB1dGlscy5nZXRQYXJlbnRFbGVtZW50QnlBdHRyaWJ1dGUobGlua09iaiwgJ2RhdGEtZW50aXR5aWQnLCAxMCk7XG4gICAgICAgIHZhciBhdHRyTmFtZSA9IHBhcmVudCA/IHBhcmVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW50aXR5aWQnKSA6IFwiXCI7IC8vIG1vc3QtcG9wdWxhci13YXRjaGVkLTEgb3IgdXMtc3RvcmllcyMxXG4gICAgICAgIHZhciBtb2R1bGVOYW1lID0gYXR0ck5hbWUubWF0Y2goLyguKz8pKC18IykoXFxkKS8pWzFdOyAvLyBtb3N0LXBvcHVsYXItd2F0Y2hlZCBvciB1cy1zdG9yaWVzXG4gICAgICAgIGxpbmtQb3NpdGlvbiA9IGF0dHJOYW1lLm1hdGNoKC8oXFxkezEsfSQpLylbMF07IC8vIDFcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdwcm9tb3RlZCc6IHByb21vdGVkLFxuICAgICAgICAgICAgJ21vZHVsZU5hbWUnOiAobW9kdWxlTmFtZSA/IG1vZHVsZU5hbWUgOiBOVUwpLFxuICAgICAgICAgICAgJ2xpbmtOYW1lJzogc2FuaXRpc2VMaW5rTmFtZSh0ZXh0KSxcbiAgICAgICAgICAgICdsaW5rUG9zaXRpb24nOiAobGlua1Bvc2l0aW9uID8gbGlua1Bvc2l0aW9uIDogTlVMKSxcbiAgICAgICAgICAgICdsaW5rU2VjdGlvbic6IGxpbmtTZWN0aW9ucy5qb2luKFwiLlwiKVxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoKHNlY3Rpb25TdHJpbmdzWzBdID09PSAnbmV3cycgfHwgc2VjdGlvblN0cmluZ3NbMF0gPT09ICd3d3NjcmlwdHMnKVxuICAgICAgICAmJiB1dGlscy5wYXJlbnRIYXNDbGFzcyhsaW5rT2JqLCAnaHlwZXItcHJvbW90aW9uYWwtY29udGVudCcsIDUpXG4gICAgKSB7XG5cbiAgICAgICAgLy8gRWxzZXdoZXJlIG9uIHRoZSBCQkMgbW9kdWxlIChOZXdzIGRlc2t0b3ApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAncHJvbW90ZWQnOiAnZWxzZXdoZXJlJyxcbiAgICAgICAgICAgICdsaW5rTmFtZSc6IHNhbml0aXNlTGlua05hbWUodGV4dCksICAvLyBTdG9yeSBsaW5rXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6ICdlbHNld2hlcmUnXG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChsaW5rT2JqLmhyZWYuaW5kZXhPZignb3V0YnJhaW4uY29tJykgIT09IC0xKSB7XG5cbiAgICAgICAgLy8gT3V0YnJhaW4gdHJhY2tpbmcgQkJDQ09NLTU1NDMsIEJCQ0NPTS02MTMzXG4gICAgICAgIHByb21vdGVkID0gJ291dGJyYWluLW1vZHVsZSc7XG4gICAgICAgIHZhciBwYXJlbnRFbCA9IHV0aWxzLmdldFBhcmVudEVsZW1lbnRCeUNsYXNzKGxpbmtPYmosICdPVVRCUkFJTicsIDUpO1xuICAgICAgICBpZiAodHlwZW9mIHBhcmVudEVsLmRhdGFzZXQud2lkZ2V0SWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgd2lkZ2V0SWQgPSBwYXJzZUludChwYXJlbnRFbC5kYXRhc2V0LndpZGdldElkLnN1YnN0cigzLCAxKSwgMTApO1xuICAgICAgICAgICAgdmFyIG1hcHBpbmcgPSB7XG4gICAgICAgICAgICAgICAgJ3ZpZGVvcy1vbi1uZXdzJzogWzEsIDUsIDZdLCAvLyBBUl8xLCBBUl81LCBBUl82XG4gICAgICAgICAgICAgICAgJ2Vsc2V3aGVyZS1vbi1uZXdzJzogWzIsIDMsIDddLCAvLyBBUl8yLCBBUl8zLCBBUl83XG4gICAgICAgICAgICAgICAgJ290aGVycy1zaXRlcyc6IFs0LCA5XSwgICAgLy8gQVJfNCwgQVJfOVxuICAgICAgICAgICAgICAgICdlbHNld2hlcmUtb24tZmVhdHVyZXMnOiBbOF0gICAgICAgIC8vIEFSXzhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgIGZvciAobSBpbiBtYXBwaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hcHBpbmdbbV0uaW5kZXhPZih3aWRnZXRJZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21vdGVkID0gbTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAncHJvbW90ZWQnOiBwcm9tb3RlZCxcbiAgICAgICAgICAgICdsaW5rTmFtZSc6IHNhbml0aXNlTGlua05hbWUodGV4dCksICAvLyBTdG9yeSBsaW5rXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6ICdvdXRicmFpbi1yZWNvbW1lbmRzJ1xuICAgICAgICB9O1xuICAgIH1lbHNlIGlmKHNlY3Rpb25TdHJpbmdzWzBdPT09J3JlZWwnKXtcbiAgICAgICAgdmFyIGxpbmtEZXRhaWxzID0gbGlua09ialRyYWNrLnNwbGl0KCd8Jyk7XG5cbiAgICAgICAgdmFyIHNlY3Rpb24gPSAncmVlbC5ob21lJztcbiAgICAgICAgaWYobGlua1NlY3Rpb25zLmxlbmd0aCA9PT0gMil7XG4gICAgICAgICAgICBzZWN0aW9uID0gJ3JlZWwucGxheWxpc3RzJztcbiAgICAgICAgfVxuICAgICAgICBpZihsaW5rU2VjdGlvbnMubGVuZ3RoPjIpe1xuICAgICAgICAgICAgaWYobGlua1NlY3Rpb25zWzJdPT09J3BsYXlsaXN0Jyl7XG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9ICdyZWVsLnBsYXlsaXN0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKGxpbmtTZWN0aW9uc1syXT09PSd2aWRlbycpe1xuICAgICAgICAgICAgICAgIHNlY3Rpb24gPSAncmVlbC52aWRlbyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGl0bGUgPSBzYW5pdGlzZUxpbmtOYW1lKHRleHQpO1xuICAgICAgICBpZihsaW5rT2JqLmdldEF0dHJpYnV0ZSl7XG4gICAgICAgICAgICBpZihsaW5rT2JqLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpKXtcbiAgICAgICAgICAgICAgICB0aXRsZSA9IHNhbml0aXNlTGlua05hbWUobGlua09iai5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcG9zaXRpb24gPSAnJztcbiAgICAgICAgdmFyIHRvdGFsID0gJyc7XG4gICAgICAgIGlmKGxpbmtEZXRhaWxzLmxlbmd0aD4xKXtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gbGlua0RldGFpbHNbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYobGlua0RldGFpbHMubGVuZ3RoPjIpe1xuICAgICAgICAgICAgdG90YWwgPSBsaW5rRGV0YWlsc1syXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnZXZlbnRzJzogZmFsc2UsXG4gICAgICAgICAgICAncHJvbW90ZWQnOiAncmVlbCcsXG4gICAgICAgICAgICAnbW9kdWxlTmFtZSc6IGxpbmtEZXRhaWxzWzBdLFxuICAgICAgICAgICAgJ2xpbmtOYW1lJzogdGl0bGUsXG4gICAgICAgICAgICAnbGlua1Bvc2l0aW9uJzogcG9zaXRpb24sXG4gICAgICAgICAgICAndG90YWxMaW5rcyc6IHRvdGFsLFxuICAgICAgICAgICAgJ3NlY3Rpb24nOnNlY3Rpb25cbiAgICAgICAgfTtcblxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7ICAvLyBub3QgYSBsaW5rIHRvIGJlIHRyYWNrZWRcbn07XG5cbnZhciBnZXRBbmFseXRpY3NVcmkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJiY2RvdGNvbS5hbmFseXRpY3Muc3NjSGVscGVyLmdldEFuYWx5dGljc0xvY2F0aW9uKCk7XG59O1xuXG4vKipcbiAqIExvYWQgYW4gaW1hZ2UgZWxlbWVudCB0byB0cmFjayB0aGUgZXZlbnRcbiAqXG4gKiBAcGFyYW0gc3RyaW5nIHVybFxuICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrIFVzZWQgdG8gZGVsYXkgcGFnZSB1bnRpbCBpbWFnZSB3cml0dGVuIGludG8gcGFnZSAoYmxvY2tpbmcpXG4gKi9cbnZhciBsb2FkVHJhY2tpbmdJbWFnZSA9IGZ1bmN0aW9uICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgdXJsID0gZ2V0QW5hbHl0aWNzVXJpKCkgKyB1cmw7XG4gICAgbG9nKCdUcmFja2luZyBVUkw6ICcsIHVybCk7XG4gICAgdmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW1nLm9ubG9hZCA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdy5JU19HTkxfSlNfVU5JVF9URVNUID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBEbyBub3QgbWFrZSBjb21TY29yZSByZXF1ZXN0IHdoZW4gcnVubmluZyB1bml0IHRlc3RzXG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgfVxufTtcblxudmFyIHByb2Nlc3NEZWxheVRyYWNraW5nQ29va2llID0gZnVuY3Rpb24gKGRlbGF5VHJhY2tpbmdDb29raWVOYW1lLCB0cmFja2luZ1JlcXVlc3RzKSB7XG5cbiAgICB2YXIgY29va2llVmFsdWUgPSB1dGlscy5nZXRDb29raWUoZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUpO1xuICAgIGlmICh0eXBlb2YgY29va2llVmFsdWUgIT09ICd1bmRlZmluZWQnICYmIGNvb2tpZVZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbG9nKCdEZWxheWVkIGxpbmsgdHJhY2tpbmcgZ2V0ICcgKyBkZWxheVRyYWNraW5nQ29va2llTmFtZSArICcgY29va2llOicgKyBjb29raWVWYWx1ZSk7XG4gICAgICAgIC8vIGVnIC9iL3NzL2JiY3dnbG9iYWxkZXYvMS9ILjIyLjEvczQ3NTcwNDMyMzAzNDc/QVFCPTEmYnc9MTkyMCZiaD03MDUmYz0yNCZjYz1VU0QmY2RwPTImY2U9VVRGLTgmbmRoPTEuLi5cbiAgICAgICAgbG9hZFRyYWNraW5nSW1hZ2UoY29va2llVmFsdWUpO1xuICAgICAgICB0cmFja2luZ1JlcXVlc3RzWydodHRwJ10ucHVzaChjb29raWVWYWx1ZSk7XG4gICAgICAgIHV0aWxzLmRlbGV0ZUNvb2tpZShkZWxheVRyYWNraW5nQ29va2llTmFtZSk7XG4gICAgfVxufTtcblxuXG52YXIgdHJhY2tMaW5rQnlEcm9wcGluZ0Nvb2tpZSA9IGZ1bmN0aW9uIChkb1RyYWNrQ2FsbGJhY2ssIGRlbGF5VHJhY2tpbmdDb29raWVOYW1lLCBjdXN0b21UcmFja2luZ0tleVZhbHVlcykge1xuICAgIC8vIGRvVHJhY2soKSBkb2VzIG5vdCBtYWtlIHJlcXVlc3QuIEluc3RlYWQsIHRoZSByZXF1ZXN0IGlzIHBpcGVkIGludG8gYSBjb29raWVcbiAgICB2YXIgY29va2llVmFsID0gZG9UcmFja0NhbGxiYWNrKGN1c3RvbVRyYWNraW5nS2V5VmFsdWVzLCAnbGluaycsIHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgIHV0aWxzLnNldENvb2tpZShkZWxheVRyYWNraW5nQ29va2llTmFtZSwgY29va2llVmFsLCA2MCk7XG4gICAgbG9nKCdsaW5rIHRyYWNraW5nIHNldCAnICsgZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUgKyAnIGNvb2tpZTonICsgY29va2llVmFsKTtcbn07XG5cbi8qKlxuICogUHJvYmxlbSB3aXRoIHRoaXMgYXBwcm9hY2g6IGNhbm5vdCBDVFJMLWNsaWNrIHRvIG9wZW4gbGluayBpbiBuZXcgd2luZG93XG4gKi9cbnZhciB0cmFja0xpbmtBbmRSZXN1bWVOYXZpZ2F0aW9uID0gZnVuY3Rpb24gKGRvVHJhY2tDYWxsYmFjaywgdXJpLCBldmVudCwgY3VzdG9tVHJhY2tpbmdLZXlWYWx1ZXMpIHtcbiAgICB2YXIgZXZlbnRIYW5kbGVkID0gZmFsc2UsXG4gICAgICAgIHRpbWVvdXRJZCA9IG51bGwsXG4gICAgICAgIHJlc3VtZSA9ICF1dGlscy5pc0V2ZW50RGVmYXVsdFByZXZlbnRlZChldmVudCksXG4gICAgICAgIHJlc3VtZU5hdmlnYXRpb24gPSBmdW5jdGlvbiAodXJpLCBldmVudCwgdGltZW91dCwgcmVzdW1lKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgIWV2ZW50SGFuZGxlZCAmJiByZXN1bWUgJiYgdXJpKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMubmF2aWdhdGVUbyh1cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnRIYW5kbGVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICB1dGlscy5jYW5jZWxFdmVudChldmVudCk7XG4gICAgZG9UcmFja0NhbGxiYWNrKGN1c3RvbVRyYWNraW5nS2V5VmFsdWVzLCAnbGluaycsIGZ1bmN0aW9uICh0cmFja2VkKSB7XG4gICAgICAgIHJlc3VtZU5hdmlnYXRpb24odXJpLCBldmVudCwgdGltZW91dElkLCByZXN1bWUpO1xuICAgIH0pO1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXN1bWVOYXZpZ2F0aW9uKHVyaSwgZXZlbnQsIHRpbWVvdXRJZCwgcmVzdW1lKTtcbiAgICB9LCBUUkFDS0lOR19USU1FT1VUKTtcbn07XG5cbnZhciB0cmFja0xpbmsgPSBmdW5jdGlvbiAoZG9UcmFja0NhbGxiYWNrLCBkZWxheVRyYWNraW5nQ29va2llTmFtZSwgdXJpLCBldmVudCwga2V5VmFsdWVzKSB7XG4gICAgaWYgKGlzQkJDVXJpKHVyaSkgfHwgaXNFeHRlcm5hbFJlZGlyZWN0VG9CQkNVcmkodXJpKSkge1xuICAgICAgICAvLyBEcm9wIGNvb2tpZSBhbmQgY29sbGVjdCBvbiBvdGhlciBCQkMgcGFnZVxuICAgICAgICB0cmFja0xpbmtCeURyb3BwaW5nQ29va2llKGRvVHJhY2tDYWxsYmFjaywgZGVsYXlUcmFja2luZ0Nvb2tpZU5hbWUsIGtleVZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RhbmRhcmRcbiAgICAgICAgdHJhY2tMaW5rQW5kUmVzdW1lTmF2aWdhdGlvbihkb1RyYWNrQ2FsbGJhY2ssIHVyaSwgZXZlbnQsIGtleVZhbHVlcyk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVc2VkIHRvIGF0dGFjaCBldmVudHMgdG8gcGFnZS5cbiAqIFRoaXMgbXVzdCBiZSBjYWxsZWQgZnJvbSB3aXRoaW4gPGJvZHk+LCBub3QgPGhlYWQ+XG4gKi9cbnZhciBhcHBseUxpbmtUcmFja2luZ1RvUGFnZUVsZW1lbnRzID0gZnVuY3Rpb24gKHByb2Nlc3NMaW5rQ2FsbGJhY2spIHtcbiAgICB2YXIgcm9vdFNlY3Rpb24gPSBzZWN0aW9ucy5nZXRTZWN0aW9uKDAsICdhbmFseXRpY3MnLCB0cnVlKTtcbiAgICBpZiAocm9vdFNlY3Rpb24gJiYgTElOS19UUkFDS0lOR19TRUNUSU9OUy5pbmRleE9mKHJvb3RTZWN0aW9uKSA9PT0gLTEpIHtcbiAgICAgICAgLy8gTGluayB0cmFja2luZyBpcyBub3QgcmVxdWlyZWQgb24gdGhpcyBwYWdlXG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFscmVhZHlMaW5rZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjbGlja0xpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7ICAvLyBXaGF0ZXZlciB5b3UncmUgdGhpbmtpbmcsIGRvbid0IGRvIGl0LiAgRG8gbm90IHB1dCBcInZhciBjbGlja0xpc3RlbmVyXCIuLi5cbiAgICAgICAgdmFyIGxpbmtPYmogPSB1dGlscy5nZXRDbG9zZXN0RWxlbWVudEJ5VGFnTmFtZShldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCwgJ2EnLCB0cnVlKTtcbiAgICAgICAgaWYgKGxpbmtPYmogIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBwcm9jZXNzTGlua0NhbGxiYWNrKGxpbmtPYmosIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gRXZlbnQgZm9yIGJvZHkgY2xpY2suICBVc2luZyBKYXZhU2NyaXB0IEV2ZW50IEJ1YmJsaW5nIHRvIGlkZW50aWZ5IHdoYXQgd2FzIGNsaWNrZWQgb25cbiAgICAvLyB3aXRoaW4gdGhlIHBhZ2UgKGJlc2lkZXMgPGJvZHk+KS5cbiAgICB1dGlscy5hZGRFdmVudChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdLCAnY2xpY2snLCBjbGlja0xpc3RlbmVyKTtcbiAgICBhbHJlYWR5TGlua2VkID0gdHJ1ZTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm4gdGhlIFVSSSB1c2VkIHRvIGJ1aWxkIHRoZSBzZWN0aW9ucyBhcnJheVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbnZhciBnZXRVcmlGb3JTZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9jYXRpb24gPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKSxcbiAgICAgICAgdXJpID0gbG9jYXRpb24uaHJlZixcbiAgICAgICAgYXNzZXRVcmkgPSBvYmplY3RzKCdjb25maWcuYXNzZXQuYXNzZXRfdXJpJyk7XG5cbiAgICBpZiAoY29uZmlnLmdldFR5cGUoKSA9PT0gJ1ZJREVPLUVNQkVEJyAmJiBhc3NldFVyaSkge1xuICAgICAgICB1cmkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIGFzc2V0VXJpO1xuICAgIH1cblxuICAgIHJldHVybiB1cmk7XG59O1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIHRoZSBhdiBmb3JtYXQgKGF1ZGlvfHZpZGVvKSBmb3IgYSBnaXZlbiBwbGF5bGlzdCBpdGVtLiBGb3Igbm93IHdlIGFzc3VtZSBldmVyeXRoaW5nIHRoYXQgaXNuJ3QgYVxuICogcmFkaW9Qcm9ncmFtbWUgaXMgdmlkZW8uIExpc3Qgb2YgYXZhaWxhYmxlIGtpbmRzIGNhbiBiZSBmb3VuZCBiZWxvdy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vY29uZmx1ZW5jZS5kZXYuYmJjLmNvLnVrL2Rpc3BsYXkvbXAvTG9hZGluZythK1BsYXlsaXN0K3dpdGgrYW4rb2JqZWN0I0xvYWRpbmdhUGxheWxpc3R3aXRoYW5vYmplY3Qta2luZHNcbiAqIEBwYXJhbSB7c3RyaW5nfSBraW5kXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0QXZGb3JtYXRGcm9tS2luZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgcmV0dXJuIGtpbmQgPT09ICdyYWRpb1Byb2dyYW1tZScgPyAnYXVkaW8nIDogJ3ZpZGVvJztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGlzQkJDVXJpOiBpc0JCQ1VyaSxcbiAgICBkZXRlcm1pbmVTZWN0aW9uczogZGV0ZXJtaW5lU2VjdGlvbnMsXG4gICAgZ2V0U3RvcnlIZWFkbGluZTogZ2V0U3RvcnlIZWFkbGluZSxcbiAgICBnZXRQYWdlRWRpdGlvbjogZ2V0UGFnZUVkaXRpb24sXG4gICAgZ2V0VmVydGljYWw6IGdldFZlcnRpY2FsLFxuICAgIGdldFBhZ2VUeXBlOiBnZXRQYWdlVHlwZSxcbiAgICBzYW5pdGlzZVBhZ2VOYW1lOiBzYW5pdGlzZVBhZ2VOYW1lLFxuICAgIGdldEFuYWx5dGljc1VyaTogZ2V0QW5hbHl0aWNzVXJpLFxuICAgIGdldFBhZ2VOYW1lOiBnZXRQYWdlTmFtZSxcbiAgICBnZXRQYWdlTmFtZUNvbVNjb3JlOiBnZXRQYWdlTmFtZUNvbVNjb3JlLFxuICAgIGdldEVtYmVkUGFnZU5hbWU6IGdldEVtYmVkUGFnZU5hbWUsXG4gICAgZW5jb2RlVmFsdWU6IGVuY29kZVZhbHVlLFxuICAgIGdldExpbmtUcmFja2luZ1Byb3BlcnRpZXM6IGdldExpbmtUcmFja2luZ1Byb3BlcnRpZXMsXG4gICAgbG9hZFRyYWNraW5nSW1hZ2U6IGxvYWRUcmFja2luZ0ltYWdlLFxuICAgIHByb2Nlc3NEZWxheVRyYWNraW5nQ29va2llOiBwcm9jZXNzRGVsYXlUcmFja2luZ0Nvb2tpZSxcbiAgICB0cmFja0xpbms6IHRyYWNrTGluayxcbiAgICBhcHBseUxpbmtUcmFja2luZ1RvUGFnZUVsZW1lbnRzOiBhcHBseUxpbmtUcmFja2luZ1RvUGFnZUVsZW1lbnRzLFxuICAgIGdldFVyaUZvclNlY3Rpb25zOiBnZXRVcmlGb3JTZWN0aW9ucyxcbiAgICBnZXRBdkZvcm1hdEZyb21LaW5kOiBnZXRBdkZvcm1hdEZyb21LaW5kLFxuICAgIHI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSwgJ2NsaWNrJywgY2xpY2tMaXN0ZW5lcik7XG4gICAgICAgIGFscmVhZHlMaW5rZWQgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL2hlbHBlci5qcyIsIi8qXG4gKiBBTFdBWVMgUkVRVUlSRUQgSU5URVJOQVRJT05BTCBmb3IgYW5hbHl0aWNzLmpzLCBpcnJlc3BlY3RpdmUgb2YgYWRzIGJlaW5nIGVuYWJsZWRcbiAqXG4gKiBVU0FHRVxuICpcbiAqIENyZWF0ZXMgbmFtZXNwYWNlL29iamVjdHM6XG4gKiAgIGJiY2RvdGNvbS5vYmplY3RzKCdiYmNkb3Rjb20uZGF0YS5zdGF0cycsICdjcmVhdGUnKVxuICogICA9PiB2YXIgd2luZG93LmJiY2RvdGNvbS5kYXRhID0ge307ICB2YXIgd2luZG93LmJiY2RvdGNvbS5kYXRhLnN0YXRzID0ge307XG4gKlxuICogUmV0dXJucyBvYmplY3QsIG1ldGhvZCByZXN1bHQgb3IgcHJvcGVydHkgcmVzdWx0IGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0J3MgYW4gb2JqZWN0LCBtZXRob2Qgb3IgcHJvcGVydHkuXG4gKiAgIGJiY2RvdGNvbS5vYmplY3RzKCdiYmNkb3Rjb20uZGF0YS5zdGF0cycpXG4gKiAgID0+IHZhciBpc0V4aXN0cyA9IGJiY2RvdGNvbS5kYXRhLnN0YXRzO1xuICpcbiAqIFJldHVybiB0aGUgdmFsdWUgb2YgYSBmdW5jdGlvbiB3aXRoIHBhc3NlZCBpbiBhIHBhcmFtOlxuICogICBiYmNkb3Rjb20ub2JqZWN0cygnYmJjZG90Y29tLmNvbmZpZy5pc0FjdGl2ZScsICdhbmFseXRpY3MnKVxuICogICA9PiB2YXIgaXNBbmFseXRpY3NBY3RpdmUgPSBiYmNkb3Rjb20uY29uZmlnLmlzQWN0aXZlKCdhbmFseXRpY3MnKTtcbiAqXG4gKiBSZXR1cm5zIHRydWUgaWYgbWV0aG9kL29iamVjdCBleGlzdHM6XG4gKiAgIGJiY2RvdGNvbS5vYmplY3RzKCdzbG90JywgYmJjZG90Y29tLmFkdmVydHMpXG4gKiAgID0+IHZhciBtZXRob2RFeGlzdHMgPSAodHlwZW9mIGJiY2RvdGNvbS5hZHZlcnRzLnNsb3QgIT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IGZhbHNlKTtcbiAqXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ck5hbWUpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbGVuLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBuYW1lUGFydHMgPSBzdHJOYW1lLnNwbGl0KFwiLlwiKSxcbiAgICAgICAgb2JqID0gKGFyZ3NbMV0gIT09IG51bGwgJiYgdHlwZW9mIGFyZ3NbMV0gPT09ICdvYmplY3QnKSA/IGFyZ3NbMV0gOiB3aW5kb3c7XG4gICAgZm9yIChpID0gMCwgbGVuID0gbmFtZVBhcnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChvYmpbbmFtZVBhcnRzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnICYmIGFyZ3NbMV0gPT09ICdjcmVhdGUnKSB7XG4gICAgICAgICAgICAgICAgb2JqW25hbWVQYXJ0c1tpXV0gPSB7fTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBDaGVja2luZyBmb3IgYW4gb2JqZWN0cyBleGlzdGVuY2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW25hbWVQYXJ0c1tpXV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSAhPT0gJ3VuZGVmaW5lZCcgJiYgYXJnc1sxXSAhPT0gbnVsbCAmJiBvYmpbbmFtZVBhcnRzW2ldXShhcmdzWzFdKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ialtuYW1lUGFydHNbaV1dKGFyZ3NbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvYmpbbmFtZVBhcnRzW2ldXSgpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqW25hbWVQYXJ0c1tpXV0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvYmogPSBvYmpbbmFtZVBhcnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvb2JqZWN0cy5qcyIsImV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZUxhYmVsVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1smPVxcLzw+XS9nLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZUtleVZhbHVlcyhrZXlWYWx1ZXMpIHtcbiAgICB2YXIgY2xlYW5LdnMgPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4ga2V5VmFsdWVzKSB7XG4gICAgICAgIGlmIChrZXlWYWx1ZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgaWYgKGtleVZhbHVlc1trZXldICE9PSAnJyAmJiBrZXlWYWx1ZXNba2V5XSAhPT0gbnVsbCAmJiBrZXlWYWx1ZXNba2V5XSAhPT0gJ25hJykge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdCBpbmNsdWRlIGxhYmVsIChrZXktdmFsdWUpIGlmIGVtcHR5LlxuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBkbyBub3Qgc2VuZCBpbnRlZ2Vycy9udW1iZXJzL2Zsb2F0cyBidXQgc3RyaW5ncyBCQkNDT00tNjI4OFxuICAgICAgICAgICAgICAgIGNsZWFuS3ZzW2tleV0gPSAoaXNOYU4oa2V5VmFsdWVzW2tleV0pID8ga2V5VmFsdWVzW2tleV0gOiBTdHJpbmcoa2V5VmFsdWVzW2tleV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xlYW5LdnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGlzZVBhZ2VOYW1lKG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1tcXHNdL2csICdfJykucmVwbGFjZSgvWyY9XFwvPD4rP10vZywgJycpLnJlcGxhY2UoL197Mix9L2csICdfJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL3Nhbml0aXNlVmFsdWVzLmpzIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxudmFyIGdldFNwb3J0UmVzcG9uc2l2ZVVwZGF0ZWRUaW1lc3RhbXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRpbWVFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGltZVtkYXRhLXRpbWVzdGFtcF0nKTtcblxuICAgIGlmICh0eXBlb2YgdGltZUVsZW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICF0aW1lRWxlbWVudCB8fCB0aW1lRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdGltZXN0YW1wID0gdGltZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVzdGFtcCcpO1xuXG4gICAgaWYgKHR5cGVvZiB0aW1lc3RhbXAgPT09ICd1bmRlZmluZWQnIHx8ICF0aW1lc3RhbXAgfHwgdGltZXN0YW1wID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aW1lc3RhbXA7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcnRpY2xlVXBkYXRlZERhdGUoYXNUaW1lc3RhbXAgPSBmYWxzZSkge1xuICAgIHZhciBkYXRlID0gbnVsbCxcbiAgICAgICAgc3BvcnREZXNrdG9wRGF0ZSA9IHV0aWxzLmdldE1ldGFOYW1lQ29udGVudCgnRENURVJNUy5tb2RpZmllZCcpLFxuICAgICAgICBzcG9ydFJlc3BvbnNpdmVEYXRlID0gZ2V0U3BvcnRSZXNwb25zaXZlVXBkYXRlZFRpbWVzdGFtcCgpO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuY29uZmlnICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmNvbmZpZy5hc3NldCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQubGFzdF91cGRhdGVkICE9PSBudWxsXG4gICAgICAgICYmIHR5cGVvZiB3aW5kb3cuY29uZmlnLmFzc2V0Lmxhc3RfdXBkYXRlZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgJiYgdHlwZW9mIHdpbmRvdy5jb25maWcuYXNzZXQubGFzdF91cGRhdGVkLmRhdGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICAgIC8vIFJlc3BvbnNpdmUgTmV3c1xuICAgICAgICAvLyBlZyAyMDE1LTAxLTA4IDAzOjQ0OjMxXG4gICAgICAgIGRhdGUgPSB3aW5kb3cuY29uZmlnLmFzc2V0Lmxhc3RfdXBkYXRlZC5kYXRlO1xuICAgIH0gZWxzZSBpZiAoc3BvcnREZXNrdG9wRGF0ZSAhPT0gJycpIHtcbiAgICAgICAgLy8gU3BvcnQgRGVza3RvcFxuICAgICAgICAvLyBlZyAyMDExLzEyLzEyVDExOjU2OjEwKzAwOjAwXG4gICAgICAgIGRhdGUgPSBzcG9ydERlc2t0b3BEYXRlLnJlcGxhY2UoJ1QnLCAnICcpLnJlcGxhY2UoJyswMDowMCcsICcnKTtcbiAgICB9IGVsc2UgaWYgKHNwb3J0UmVzcG9uc2l2ZURhdGUpIHtcbiAgICAgICAgcmV0dXJuIHNwb3J0UmVzcG9uc2l2ZURhdGU7IC8vIEFscmVhZHkgYSB0aW1lc3RhbXBcbiAgICB9XG5cbiAgICBpZiAoZGF0ZSA9PT0gbnVsbCB8fCBkYXRlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFzVGltZXN0YW1wICE9PSAndW5kZWZpbmVkJyAmJiBhc1RpbWVzdGFtcCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gKG5ldyBEYXRlKGRhdGUucmVwbGFjZSgvXFwvL2csICctJykucmVwbGFjZSgnICcsICdUJykpLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZS5yZXBsYWNlKC8tL2csICcvJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldEFydGljbGVVcGRhdGVkRGF0ZS5qcyIsImltcG9ydCBrZXlWYWx1ZXMgZnJvbSAnYWR2ZXJ0cy9rZXlWYWx1ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb2xsZWN0aW9uKCkge1xuICAgIHJldHVybiAgKFxuICAgICAgICBrZXlWYWx1ZXMuZ2V0KCdrZXl3b3JkJykgIT09IGZhbHNlID9cbiAgICAgICAgICAgIGtleVZhbHVlcy5nZXQoJ2tleXdvcmQnKS50b0xvd2VyQ2FzZSgpIDpcbiAgICAgICAgICAgICcnXG4gICAgKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0Q29sbGVjdGlvbi5qcyIsInZhciBzZWN0aW9ucyA9IHJlcXVpcmUoJy4uL3NlY3Rpb25zJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG52YXIga2V5VmFsdWVzID0ge30sXG4gICAga2V5d29yZE9iaiA9IGZhbHNlLFxuICAgIGFzc2V0VHlwZU1hcCA9IHtcbiAgICAgICAgJ0FWJyAgICA6ICdtZWRpYV9hc3NldCcsXG4gICAgICAgICdJTkRFWCcgOiAnaW5kZXgnXG4gICAgfTtcblxudmFyIHNldFN0b3J5SWQgPSBmdW5jdGlvbiAod2luZG93TG9jYXRpb25IcmVmKSB7XG4gICAgaWYgKC8oWzAtOV17Nyw4fSkkLy50ZXN0KHdpbmRvd0xvY2F0aW9uSHJlZi5zcGxpdChcIj9cIilbMF0uc3BsaXQoXCIjXCIpWzBdKSkge1xuICAgICAgICBrZXlWYWx1ZXNbJ3N0b3J5X2lkJ10gPSBSZWdFeHAuJDE7XG4gICAgfVxufTtcblxudmFyIHNldENUeXBlID0gZnVuY3Rpb24gKHdpbmRvd0xvY2F0aW9uSHJlZikge1xuICAgIHdpbmRvd0xvY2F0aW9uSHJlZiA9IHdpbmRvd0xvY2F0aW9uSHJlZi5zcGxpdChcIj9cIilbMF0uc3BsaXQoXCIjXCIpWzBdO1xuICAgIGtleVZhbHVlc1snY3R5cGUnXSA9ICgvWzAtOV17Nyw4fSQvLnRlc3Qod2luZG93TG9jYXRpb25IcmVmKSkgPyAnY29udGVudCcgOiAnaW5kZXgnO1xufTtcblxudmFyIHNldEFzc2V0VHlwZSA9IGZ1bmN0aW9uICh3aW5kb3dMb2NhdGlvbkhyZWYsIGFzc2V0VHlwZSkge1xuICAgIGlmICh0eXBlb2Yga2V5VmFsdWVzWydhc3NldF90eXBlJ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIEFzc2V0IHR5cGUgSU5ERVggd2lsbCBiZSBzZXQgZm9yIEluZGV4IGFuZCBGZWF0dXJlIEluZGV4ZXMgYW5kIHNob3VsZCBvdmVycmlkZSB0aGUgdXNlIG9mIHRoZSB1cmxcbiAgICAgICAgaWYgKGFzc2V0VHlwZSAmJiB0eXBlb2YgYXNzZXRUeXBlID09PSAnc3RyaW5nJyAmJiBhc3NldFR5cGVNYXBbYXNzZXRUeXBlXSkge1xuICAgICAgICAgICAga2V5VmFsdWVzWydhc3NldF90eXBlJ10gPSBhc3NldFR5cGVNYXBbYXNzZXRUeXBlXTtcbiAgICAgICAgfSBlbHNlIHsgLy8gSWYgYW4gYXNzZXQgdHlwZSBvZiBBViBvciBJTkRFWCBoYXMgbm90IGJlZW4gZGVmaW5lZCB1c2UgdGhlIHVybCB0byB3b3JrIG91dCB0aGUgdHlwZVxuICAgICAgICAgICAgd2luZG93TG9jYXRpb25IcmVmID0gd2luZG93TG9jYXRpb25IcmVmLnNwbGl0KFwiP1wiKVswXS5zcGxpdChcIiNcIilbMF07XG4gICAgICAgICAgICBrZXlWYWx1ZXNbJ2Fzc2V0X3R5cGUnXSA9ICgvWzAtOV17Nyw4fSQvLnRlc3Qod2luZG93TG9jYXRpb25IcmVmKSkgPyAnc3RvcnknIDogJ2luZGV4JztcbiAgICAgICAgfVxuICAgICAgICAvLyBBbGwgbGl2ZSBleHBlcmllbmNlIHBhZ2VzIHNob3VsZCBvdmVycmlkZSB0aGUgYXNzZXQgdHlwZVxuICAgICAgICBpZiAoL1xcLyhzcG9ydHxuZXdzKVxcL2xpdmVcXC8vLnRlc3Qod2luZG93TG9jYXRpb25IcmVmKSkge1xuICAgICAgICAgICAga2V5VmFsdWVzWydhc3NldF90eXBlJ10gPSAnbGl2ZV9ldmVudCcgO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHNldFJlZmVycmVyID0gZnVuY3Rpb24ocmVmZXJyZXIpIHtcbiAgICAvLyBSZWZlcnJlciBLZXlWYWx1ZVxuICAgIHZhciBtYXRjaEFyciA9IHJlZmVycmVyLm1hdGNoKC9eKGh0dHBbc10/OlxcL1xcL1thLXowLTlcXC5dKmJiY1xcLihjb1xcLnVrfGNvbSkpKC4qKSQvKTtcbiAgICBpZihtYXRjaEFycikge1xuICAgICAgICAvLyBXaXRoaW4gYmJjIHdlYnNpdGVcbiAgICAgICAgdmFyIHJlZlN0cmluZztcbiAgICAgICAgcmVmU3RyaW5nID0gbWF0Y2hBcnJbM10ucmVwbGFjZSgvZGVmYXVsdC5zdG0kfFxcLXxcXC98Xy9nLFwiXCIpO1xuICAgICAgICBpZihyZWZTdHJpbmcubGVuZ3RoID4gMCAmJiByZWZTdHJpbmcubGVuZ3RoIDw9IDY0KSB7XG4gICAgICAgICAgICBrZXlWYWx1ZXNbJ3JlZmVycmVyJ10gPSBlc2NhcGUocmVmU3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleVZhbHVlc1sncmVmZXJyZXInXSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBDYXRjaCBleGNlcHRpb25zXG4gICAgICAgIGtleVZhbHVlc1sncmVmZXJyZXInXSA9IFwibm9uYmJjXCI7XG4gICAgfVxufTtcblxudmFyIHNldFJlZmVycmVyRG9tYWluID0gZnVuY3Rpb24ocmVmZXJyZXIpIHtcbiAgICB2YXIgcmVmRG9tYWluID0gIHJlZmVycmVyLm1hdGNoKC9eKGh0dHBbc10/OlxcL1xcLykoW2EtejAtOVxcLl0qKSgoPzpcXC8oPzpcXHd8LXxcXCt8XFwuKSspKikoXFwvLiopJC8pO1xuICAgIGlmIChyZWZEb21haW4pIHtcbiAgICAgICAga2V5VmFsdWVzWydyZWZlcnJlcl9kb21haW4nXSA9IHJlZkRvbWFpblsyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlWYWx1ZXNbJ3JlZmVycmVyX2RvbWFpbiddID0gXCJcIjtcbiAgICB9XG59O1xuXG4vLyBCZWhhdmlvcmFsIHRhcmdldGluZyBhZHNlcnZlciBpbnRlZ3JhdGlvblxudmFyIHNldFJzaSA9IGZ1bmN0aW9uKHdpbmRvd0RvY3VtZW50KSB7XG4gICAgdmFyIGksXG4gICAgICAgIHJzaV9zZWdzID0gW10sXG4gICAgICAgIHNlZ3NfZW5kLFxuICAgICAgICBzZWdzX2JlZztcbiAgICBpZiAodHlwZW9mIHdpbmRvd0RvY3VtZW50LmNvb2tpZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2Vnc19iZWcgPSB3aW5kb3dEb2N1bWVudC5jb29raWUuaW5kZXhPZigncnNpX3NlZ3M9Jyk7XG4gICAgICAgIGtleVZhbHVlc1sncnNpJ10gPSBbXTtcbiAgICAgICAgaWYgKHNlZ3NfYmVnID49IDApIHtcbiAgICAgICAgICAgIHNlZ3NfYmVnID0gd2luZG93RG9jdW1lbnQuY29va2llLmluZGV4T2YoJz0nLHNlZ3NfYmVnKSArIDE7XG4gICAgICAgICAgICBpZiAoc2Vnc19iZWcgPiAwKSB7XG4gICAgICAgICAgICAgICAgc2Vnc19lbmQgPSB3aW5kb3dEb2N1bWVudC5jb29raWUuaW5kZXhPZignOycsc2Vnc19iZWcpO1xuICAgICAgICAgICAgICAgIGlmIChzZWdzX2VuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vnc19lbmQgPSB3aW5kb3dEb2N1bWVudC5jb29raWUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByc2lfc2VncyA9IHdpbmRvd0RvY3VtZW50LmNvb2tpZS5zdWJzdHJpbmcoc2Vnc19iZWcsc2Vnc19lbmQpLnNwbGl0KCd8Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJzaV9zZWdzLmxlbmd0aCAmJiBpIDwgMjA7IGkrKykge1xuICAgICAgICAgICAga2V5VmFsdWVzWydyc2knXS5wdXNoKHJzaV9zZWdzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBzZXRXb3JsZFNlcnZpY2VUaXRsZSA9IGZ1bmN0aW9uKHdpbmRvd0xvY2F0aW9uUGF0aG5hbWUpIHtcbiAgICB2YXIgdGl0bGU7XG4gICAgaWYgKHNlY3Rpb25zLmdldFNlY3Rpb24oMCkgPT09ICd3b3JsZHNlcnZpY2UnKSB7XG4gICAgICAgIHRpdGxlID0gd2luZG93TG9jYXRpb25QYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpLnNwbGl0KCdfJyk7XG4gICAgICAgIGlmICh0eXBlb2YgdGl0bGVbMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBrZXlWYWx1ZXNbJ2tleXdvcmQnXSA9IHRpdGxlWzFdICsgKHR5cGVvZiB0aXRsZVsyXSAhPT0gJ3VuZGVmaW5lZCcgPyAnXycrdGl0bGVbMl0gOiAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGl0bGUuc2hpZnQoKTtcbiAgICAgICAga2V5VmFsdWVzWyd0aXRsZSddID0gdGl0bGUuam9pbignXycpO1xuICAgIH1cbn07XG5cblxudmFyIHNldEtleXdvcmRQYXJ0cyA9IGZ1bmN0aW9uKGtleXdvcmQpIHtcbiAgICB2YXIga2V5d29yZFBhcnRzID0ga2V5d29yZC5tYXRjaCgvKCgoPyEoc3BvbnNvcjopKS4pKikoc3BvbnNvcjooW14sXSspLD8oLiopKT8vKTtcbiAgICBpZiAoa2V5d29yZFBhcnRzICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBrZXl3b3JkUGFydHNbNV0gIT09ICd1bmRlZmluZWQnICYmIGtleXdvcmRQYXJ0c1s1XSAhPT0gJycgJiZcbiAgICAgICAgdHlwZW9mIGtleXdvcmRQYXJ0c1s2XSAhPT0gJ3VuZGVmaW5lZCcgJiYga2V5d29yZFBhcnRzWzZdICE9PSAnJykge1xuICAgICAgICBrZXl3b3JkT2JqID0ge1xuICAgICAgICAgICAgaHJlZjoga2V5d29yZFBhcnRzWzZdLFxuICAgICAgICAgICAgdGl0bGU6IHV0aWxzLmNhcGl0YWxpemUoa2V5d29yZFBhcnRzWzVdKVxuICAgICAgICB9O1xuICAgICAgICBrZXlWYWx1ZXNbJ2tleXdvcmQnXSA9IGtleXdvcmRQYXJ0c1s1XS5yZXBsYWNlKC8gL2csICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlWYWx1ZXNbJ2tleXdvcmQnXSA9IGtleXdvcmQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24od2luZG93TG9jYXRpb24sIHdpbmRvd0RvY3VtZW50LCBhc3NldFR5cGUpIHtcbiAgICAgICAga2V5VmFsdWVzWydkb21haW4nXSA9IHdpbmRvd0xvY2F0aW9uLmhvc3RuYW1lO1xuICAgICAgICBzZXRTdG9yeUlkKHdpbmRvd0xvY2F0aW9uLmhyZWYpO1xuICAgICAgICBzZXRDVHlwZSh3aW5kb3dMb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgc2V0QXNzZXRUeXBlKHdpbmRvd0xvY2F0aW9uLmhyZWYsIGFzc2V0VHlwZSk7XG4gICAgICAgIHNldFJlZmVycmVyKHdpbmRvd0RvY3VtZW50LnJlZmVycmVyKTtcbiAgICAgICAgc2V0UmVmZXJyZXJEb21haW4od2luZG93RG9jdW1lbnQucmVmZXJyZXIpO1xuICAgICAgICBzZXRSc2kod2luZG93RG9jdW1lbnQpO1xuICAgICAgICBzZXRXb3JsZFNlcnZpY2VUaXRsZSh3aW5kb3dMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfSxcbiAgICBnZXRBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ga2V5VmFsdWVzO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIGtleVZhbHVlc1trZXldICE9PSAndW5kZWZpbmVkJykgPyBrZXlWYWx1ZXNba2V5XSA6IGZhbHNlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ2tleXdvcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEtleXdvcmRQYXJ0cyh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAga2V5VmFsdWVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHVuc2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBrZXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBrZXlWYWx1ZXNba2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBrZXlWYWx1ZXNba2V5XTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0QXJyYXk6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleVZhbHVlc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGtleVZhbHVlc1trZXldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBrZXlWYWx1ZXNba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0S2V5d29yZFBhcnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmRPYmo7XG4gICAgfSxcbiAgICByOiBmdW5jdGlvbigpIHtcbiAgICAgICAga2V5VmFsdWVzID0ge307XG4gICAgICAgIGtleXdvcmRPYmogPSBmYWxzZTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMva2V5VmFsdWVzLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREYXhDb3JwKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0RGF4RW52aXJvbm1lbnRzKCkuam9pbignXycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXREYXhDb3JwLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9tYWluKHVyaSkge1xuICAgIGNvbnN0IHJlID0gL2h0dHAofHMpOlxcL1xcLyhbXlxcL10rKSguKik/LztcbiAgICBjb25zdCBtYXRjaCA9IHJlLmV4ZWModXJpKTtcbiAgICByZXR1cm4gYGh0dHAke21hdGNoWzFdfTovLyR7bWF0Y2hbMl19YDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0RG9tYWluRnJvbVVybC5qcyIsImltcG9ydCBhbmFseXRpY3NIZWxwZXIgZnJvbSAnYW5hbHl0aWNzL2hlbHBlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEVkaXRpb24oKSB7XG4gICAgcmV0dXJuIGFuYWx5dGljc0hlbHBlci5nZXRQYWdlRWRpdGlvbigpLnRvTG93ZXJDYXNlKClcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0RWRpdGlvbi5qcyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SXNBcHAoKSB7XG4gICAgcmV0dXJuIChjb25maWcuaXNTcG9ydEFwcCgpIHx8IGJiY2RvdGNvbS5hbmFseXRpY3MuaXNTY3dIYW5kbGVyVXNlZCkgPyAxIDogMDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0SXNBcHAuanMiLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuaW1wb3J0IHtzYW5pdGlzZVBhZ2VOYW1lfSBmcm9tICdhbmFseXRpY3MvdXRpbHMvc2FuaXRpc2VWYWx1ZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYWdlTmFtZSgpIHtcbiAgICByZXR1cm4gc2FuaXRpc2VQYWdlTmFtZShhbmFseXRpY3NIZWxwZXIuZ2V0UGFnZU5hbWVDb21TY29yZSgpKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0UGFnZU5hbWUuanMiLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYWdlVHlwZSh1cmkpIHtcbiAgICB2YXIgc2l0ZUNhdGFseXN0UGFnZVR5cGUgPSBhbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUodXJpKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IG1hcHBpbmdUYWJsZSA9IHtcbiAgICAgICAgJ2luZGV4JzogJ2lkeHxuYScsXG4gICAgICAgICdzdG9yeSc6ICdzdHl8bmEnLFxuICAgICAgICAnc3RvcnktdmlkZW8nOiAnc3R5fHZpZCcsXG4gICAgICAgICdsaXZlLWV2ZW50JzogJ2xpdnxuYScsXG4gICAgICAgICd2aWRlbyc6ICdtYXB8bXBzJyxcbiAgICAgICAgJ3ZpZGVvLXN0aWNreSc6ICd2aWR8c3RpJyxcbiAgICAgICAgJ3ZpZGVvLWVtYmVkJzogJ3ZpZHxlbWInXG4gICAgfTtcbiAgICByZXR1cm4gKHR5cGVvZiBtYXBwaW5nVGFibGVbc2l0ZUNhdGFseXN0UGFnZVR5cGVdICE9PSAndW5kZWZpbmVkJyA/IG1hcHBpbmdUYWJsZVtzaXRlQ2F0YWx5c3RQYWdlVHlwZV0gOiAnbmF8bmEnKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0UGFnZVR5cGUuanMiLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFJlZmVycmVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIGRvY3VtZW50LnJlZmVycmVyICE9PSBjb25maWcuZ2V0UmVmZXJyZXIoKSA/XG4gICAgICAgICAgICBjb25maWcuZ2V0UmVmZXJyZXIoKS5zdWJzdHIoMCwgMjU1KSA6XG4gICAgICAgICAgICAnJ1xuICAgIClcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0UmVmZXJyZXIuanMiLCJpbXBvcnQgYW5hbHl0aWNzSGVscGVyIGZyb20gJ2FuYWx5dGljcy9oZWxwZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTZWN0aW9uU3RyaW5ncygpIHtcbiAgICByZXR1cm4gYW5hbHl0aWNzSGVscGVyLmRldGVybWluZVNlY3Rpb25zKCcuJyk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNlY3Rpb25TdHJpbmdzLmpzIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2l0ZUNhdGFseXN0Q29va2llVmFsdWUoKSB7XG4gICAgY29uc3Qgc2l0ZUNhdGFseXN0Q29va2llVmFsdWUgPSB1dGlscy5nZXRDb29raWUoJ3NfdmknKTsgIC8vIFdpbGwgYmUgXCJ1bmRlZmluZWRcIiB3aGVuIG9uIFwid3d3LmJiYy5jby51a1wiIGJlY2F1c2UgaXQncyBhIFwiLmNvbVwiIGNvb2tpZVxuICAgIHJldHVybiAodHlwZW9mIHNpdGVDYXRhbHlzdENvb2tpZVZhbHVlICE9PSAndW5kZWZpbmVkJyA/IHNpdGVDYXRhbHlzdENvb2tpZVZhbHVlIDogJycpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlQ2F0YWx5c3RDb29raWVWYWx1ZS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNpdGVDaGFubmVsKHNlY3Rpb25zKSB7XG4gICAgcmV0dXJuIHNlY3Rpb25zWzBdO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlQ2hhbm5lbC5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNpdGVTZWN0aW9uKHNlY3Rpb25zKSB7XG4gICAgcmV0dXJuIChzZWN0aW9uc1sxXSA9PT0gc2VjdGlvbnNbMF0gPyAnJyA6IHNlY3Rpb25zWzFdKTsgIC8vIEJCQ0NPTS02NDMxXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTZWN0aW9uLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2l0ZVN1YnNlY3Rpb24xKHNlY3Rpb25zKSB7XG4gICAgcmV0dXJuIChzZWN0aW9uc1syXSA9PT0gc2VjdGlvbnNbMV0gPyAnJyA6IHNlY3Rpb25zWzJdKTsgIC8vIEJCQ0NPTS02NDMxXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFNpdGVTdWJzZWN0aW9uMS5qcyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNpdGVTdWJzZWN0aW9uMihzZWN0aW9ucykge1xuICAgIHJldHVybiAoc2VjdGlvbnNbM10gPT09IHNlY3Rpb25zWzJdID8gJycgOiBzZWN0aW9uc1szXSk7ICAvLyBCQkNDT00tNjQzMVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRTaXRlU3Vic2VjdGlvbjIuanMiLCJpbXBvcnQgY29uZmlnIGZyb20gJ2NvbmZpZyc7XG5cbi8qKlxuICogQ3VycmVudGx5IHdlIG9ubHkgc3luZGljYXRlIHZpZGVvIHRvIHR3aXR0ZXIgc28gaWYgdGhlIHBhZ2UgaXMgb2YgdHlwZSBWSURFTy1FTUJFRCB0aGVuIHdlIGNhbiBhc3N1bWVcbiAqIHdlIGFyZSBlbWJlZGRlZCBpbiB0d2l0dGVyLiBXZSBjYW4gbG9vayBpbnRvIGNoYW5naW5nIHRoaXMgZG93biB0aGUgbGluZSBhcyBhbmQgd2hlbiByZXF1aXJlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTeW5kaWNhdGVkVmlkZW9Tb3VyY2UoKSB7XG4gICAgcmV0dXJuIGNvbmZpZy5nZXRUeXBlKCkgPT09ICdWSURFTy1FTUJFRCcgPyAndHdpdHRlcicgOiBudWxsO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0U3luZGljYXRlZFZpZGVvU291cmNlLmpzIiwiLyoqXG4gKiBDcmVhdGUgVGltZXN0YW1wIC0gSmF2YVNjcmlwdCB0aW1lc3RhbXAgaW4gbWlsbGlzZWNvbmRzXG4gKiBlZyAxNDI0NDUyNTk5MDAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFRpbWVzdGFtcCgpIHtcbiAgICBpZiAoIURhdGUubm93KSB7XG4gICAgICAgIC8vIElFOCAmIGJlbG93XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0VGltZXN0YW1wLmpzIiwiaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VG9waWNOYW1lcygpIHtcbiAgICB2YXIgdG9waWNOYW1lcyA9IFtdLFxuICAgICAgICB0b3BpY01hcCA9IHt9LCB0b3BpYz0nJyxcbiAgICAgICAgdG9waWNFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFncy1saXN0X190YWdzIGFcIiksIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRvcGljRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdG9waWMgPSB0b3BpY0VsZW1lbnRzW2ldLmlubmVyVGV4dC5yZXBsYWNlKC9cXHMvZywnXycpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICh0b3BpY01hcFt0b3BpY10gPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0b3BpY05hbWVzLnB1c2godG9waWMpO1xuICAgICAgICAgICAgdG9waWNNYXBbdG9waWNdID0gJ1RvcGljIHNlZW4nXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvcGljTmFtZXMuam9pbignfCcpXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRUb3BpY05hbWVzLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiBjb25maWcuZ2V0VmVyc2lvbigpO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy91dGlscy9nZXRWZXJzaW9uLmpzIiwiaW1wb3J0IGtleVZhbHVlcyBmcm9tICdhZHZlcnRzL2tleVZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcnRuZXIoKSB7XG4gIHJldHVybiAgKFxuICAgIGtleVZhbHVlcy5nZXQoJ3BhcnRuZXInKSAhPT0gZmFsc2UgP1xuICAgICAga2V5VmFsdWVzLmdldCgncGFydG5lcicpLnRvTG93ZXJDYXNlKCkgOlxuICAgICAgJydcbiAgKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL3V0aWxzL2dldFBhcnRuZXIuanMiLCJpbXBvcnQga2V5VmFsdWVzIGZyb20gJ2FkdmVydHMva2V5VmFsdWVzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGljZW5zZSgpIHtcbiAgcmV0dXJuICAoXG4gICAga2V5VmFsdWVzLmdldCgnbGljZW5zZScpICE9PSBmYWxzZSA/XG4gICAgICBrZXlWYWx1ZXMuZ2V0KCdsaWNlbnNlJykudG9Mb3dlckNhc2UoKSA6XG4gICAgICAnJ1xuICApO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0TGljZW5zZS5qcyIsImltcG9ydCB1dGlscyBmcm9tICd1dGlscyc7XG5cbmNvbnN0IE9MRF9VU0VSX1RSQUNLSU5HX0NPT0tJRSA9ICdja3BmX3VpZCc7XG5jb25zdCBVU0VSX1RSQUNLSU5HX0NPT0tJRSA9ICdja3BmX3NzY2lkJztcbmNvbnN0IE5FV19VU0VSX1RSQUNLSU5HX0NPT0tJRSA9ICdja25zX3NzY2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXNlclRyYWNraW5nQ29va2llKCkge1xuICAgIGxldCBvbGRWYWx1ZSA9IHV0aWxzLmdldENvb2tpZShPTERfVVNFUl9UUkFDS0lOR19DT09LSUUpO1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSB1dGlscy5nZXRDb29raWUoVVNFUl9UUkFDS0lOR19DT09LSUUpO1xuICAgIGxldCBuZXdWYWx1ZSA9IHV0aWxzLmdldENvb2tpZShORVdfVVNFUl9UUkFDS0lOR19DT09LSUUpO1xuXG4gICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmV3VmFsdWUgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY3VycmVudFZhbHVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9sZFZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiBvbGRWYWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvdXRpbHMvZ2V0VXNlclRyYWNraW5nQ29va2llLmpzIiwidmFyIGtleVZhbHVlcyA9IHJlcXVpcmUoJ2FkdmVydHMva2V5VmFsdWVzJyk7XG52YXIgZGZwcFJlcXVlc3QgPSByZXF1aXJlKCdhZHZlcnRzL2RmcHBSZXF1ZXN0Jyk7XG5cbnZhciBQcmVkaWNhdGUgPSBmdW5jdGlvbiBQcmVkaWNhdGUgKCkge1xuXG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdGhpcy5leGNsdXNpb25zID0gW107XG4gICAgdGhpcy5pbmNsdXNpb25zID0gW107XG4gICAgdGhpcy5wcmVkaWNhdGVzID0ge1xuICAgICAgICBhaXJsaW5lOntcbiAgICAgICAgICAgIHJ1bGVzOntcbiAgICAgICAgICAgICAgICAxOnsgLy8gZWFjaCBydWxlIGlzIGFuIE9SXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOntcbiAgICAgICAgICAgICAgICAgICAgICAgIDE6WydhaXInLCdwbGFuZScsJ2ZsaWdodCcsJ2pldCcsJ2F2aWF0aW9uJ10sICAgIC8vIGVhY2ggbGluZSBpcyBhbiBBTkRcbiAgICAgICAgICAgICAgICAgICAgICAgIDI6Wydhc2gnLCdib21iJywnY3Jhc2gnLCdkZWFkJywnZGV0b25hdCcsJ2Rpc2FzdGVyJywnZGlzcnVwdCcsJ2VtZXJnZW5jJywnZmlyZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY2lkZW50JywnaW5qdXInLCdraWxsJywnbWlzc2luZycsJ3BhY2thZ2UnLCdwYXNzZW5nZXInLCdjcmV3Jywnc2VhcmNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2NvcmUnLCdzdHJhbmQnLCdzdHJpa2UnLCd2b2xjYW4nLCd3cmVjayddIC8vZWFjaCBsaW5lIGlzIGFuIEFORFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcIiFjXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDI6e1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDp7XG4gICAgICAgICAgICAgICAgICAgICAgICAxOlsnb3NhbWEnLCdiaW4gbGFkZW4nLCd0d2luIHRvd2VycycsJzlcXC8xMSxzZXB0ZW1iZXIgMTEnLCcxMSBzZXB0ZW1iZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhbC1xYWVkYScsJ2FsIHFhZWRhJ11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6XCIhY1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB2aW9sZW5jZTp7XG4gICAgICAgICAgICBydWxlczp7XG4gICAgICAgICAgICAgICAgMTp7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOntcbiAgICAgICAgICAgICAgICAgICAgICAgIDE6WydyaW90JywndmlvbGVuJywnbG9vdCcsJ3VucmVzdCcsJ3VucnVseScsJ2F0dGFjaycsJ2Rpc3R1cmJhbmNlJywnc2hvdCcsJ2Rpc29yZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYW5hcmNoJywnY2hhb3RpYycsJ2NoYW9zJywndW5ydWxpbmVzcycsJ21pbmRsZXNzJywnc3RlYWxpbmcnLCdzdG9sZW4nLCd0aGlldicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RoZWZ0JywnYXJzb24nLCdjcmlzaXMnLCdkaXNhcnJheScsJ2Rpc2NvcmQnLCdsYXdsZXNzbmVzcycsJ2NyaW1pbmFsJywndmFuZGFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGh1ZycsJ2VuZ3VsZicsJ2ZsYW1lJywnYnVybicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JsYXN0JywnYmxvb2QnLCdkZWFkJywnZGVhdGgnLCdkaWUnLCdleHBsb2RlJywnZXhwbG9zaW9uJywnZmF0YWwnLCdmdW5lcmFsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ3VuJywnaW5qdXInLCdraWxsJywna25pZmUnLCdtb3VybicsJ211cmRlcicsJ3N0YWInLCd0ZXJyb3InLCd0cmFnZWQnLCd0cmFnaWMnLCd2aWN0aW0nXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcIiFjXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNlbnNpdGl2ZTp7XG4gICAgICAgICAgICBydWxlczp7XG4gICAgICAgICAgICAgICAgMTp7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOntcbiAgICAgICAgICAgICAgICAgICAgICAgIDE6Wyd2aW9sZW5jZScsICdmaXJlYXJtcycsICdhcm1zJywgJ3RvYmFjY28nLCAnaHlnaWVuZScsICdyZWxpZ2lvJywgJ2NyaW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbGxlZ2FsJywgJ3BvbGl0aWMnLCAncG9ybm8nLCAncGFlZG9waGlsZScsICdnb29nbGUnLCAnaW50ZXJuZXQnXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcIiFjXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV4Y2x1c2lvbnMgRXhjbHVzaW9ucyBjYW4gZWl0aGVyIGJlIGFuIGFycmF5IFwiWydhaXJsaW5lJywndmlvbGVuY2UnXVwiIG9yIGEgc3RyaW5nIFwiYWlybGluZSx2aW9sZW5jZVwiXG4gICAgICovXG4gICAgdGhpcy5zZXRBZEV4Y2x1c2lvbiA9IGZ1bmN0aW9uKGV4Y2x1c2lvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBleGNsdXNpb25zID09PSAndW5kZWZpbmVkJyB8fCBleGNsdXNpb25zID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlO1xuICAgICAgICBmb3IgKGUgaW4gZXhjbHVzaW9ucykge1xuICAgICAgICAgICAgaWYgKGV4Y2x1c2lvbnMuaGFzT3duUHJvcGVydHkoZSkpIHtcbiAgICAgICAgICAgICAgICBkZnBwUmVxdWVzdC5zZXRFeGNsdXNpb24oZXhjbHVzaW9uc1tlXSk7XG4gICAgICAgICAgICAgICAgLy8gQWRkaW5nIHRoZSBORVcgR1BUIHdheSB0aGlzIHdheSBzbyB0aGF0IHdoZW4gZ2V0UHJlcm9sbEFkVGFnIGlzIGNhbGxlZCBpdCBpcyBwb3B1bGF0ZWQuXG4gICAgICAgICAgICAgICAga2V5VmFsdWVzLnNldCgnZXhjbF9jYXQnLCBleGNsdXNpb25zLmpvaW4oJywnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5VmFsdWVzLnNldCgnIWMnLCBleGNsdXNpb25zLmpvaW4oJywnKSk7XG4gICAgfTtcblxufTtcblxuUHJlZGljYXRlLnByb3RvdHlwZS5nZXRFeGNsdXNpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhjbHVzaW9ucztcbn07XG5cblByZWRpY2F0ZS5wcm90b3R5cGUuZ2V0SW5jbHVzaW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluY2x1c2lvbnM7XG59O1xuXG5QcmVkaWNhdGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGNvbnRlbnRNZXRhRGF0YSkge1xuICAgIHZhciB4LFxuICAgICAgICBuLFxuICAgICAgICBrZXksXG4gICAgICAgIG51bWJlclRvTWF0Y2gsXG4gICAgICAgIG51bWJlck1hdGNoZWQ7XG4gICAgY29udGVudE1ldGFEYXRhID0gY29udGVudE1ldGFEYXRhLnRvTG93ZXJDYXNlKCk7XG4gICAgZm9yKGtleSBpbiB0aGlzLnByZWRpY2F0ZXMpIHtcbiAgICAgICAgZm9yKHggaW4gdGhpcy5wcmVkaWNhdGVzW2tleV0ucnVsZXMpIHtcbiAgICAgICAgICAgIG51bWJlclRvTWF0Y2ggPSAwO1xuICAgICAgICAgICAgbnVtYmVyTWF0Y2hlZCA9IDA7XG4gICAgICAgICAgICBmb3IobiBpbiB0aGlzLnByZWRpY2F0ZXNba2V5XS5ydWxlc1t4XS5tYXRjaCkge1xuICAgICAgICAgICAgICAgIG51bWJlclRvTWF0Y2grKztcbiAgICAgICAgICAgICAgICB2YXIgZXhwID0gbmV3IFJlZ0V4cCh0aGlzLnByZWRpY2F0ZXNba2V5XS5ydWxlc1t4XS5tYXRjaFtuXS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIGlmIChleHAudGVzdChjb250ZW50TWV0YURhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bWJlck1hdGNoZWQrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBNdXN0IG1hdGNoIGVhY2ggbGlzdCBhcyBpdCdzIGFuIEFORCBvcGVyYXRvclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoMCAhPT0gbnVtYmVyTWF0Y2hlZCAmJiBudW1iZXJUb01hdGNoID09PSBudW1iZXJNYXRjaGVkKSB7XG4gICAgICAgICAgICAgICAgaWYoJyFjJyA9PT0gdGhpcy5wcmVkaWNhdGVzW2tleV0ucnVsZXNbeF0udmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXhjbHVzaW9uc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV4Y2x1c2lvbnMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluY2x1c2lvbnNcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmNsdXNpb25zLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zZXRBZEV4Y2x1c2lvbih0aGlzLmV4Y2x1c2lvbnMpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcmVkaWNhdGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvcHJlZGljYXRlLmpzIiwidmFyIExvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhZHZlcnRzOmRmcHBSZXF1ZXN0Jyk7XG52YXIgTGF5b3V0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9sYXlvdXQnKTtcbnZhciBPYmplY3RzID0gcmVxdWlyZSgnb2JqZWN0cycpO1xudmFyIEtleVZhbHVlcyA9IHJlcXVpcmUoJ2FkdmVydHMva2V5VmFsdWVzJyk7XG52YXIgQWRSZWdpc3RlciA9IHJlcXVpcmUoJ2FkdmVydHMvYWRSZWdpc3RlcicpO1xudmFyIGNtZCA9IHJlcXVpcmUoJ2NtZCcpO1xudmFyIFB1YlN1YiA9IHJlcXVpcmUoJ3B1YnN1YicpO1xudmFyIEFkVW5pdCA9IHJlcXVpcmUoJ2FkdmVydHMvYWRVbml0Jyk7XG52YXIgQ29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG52YXIgU2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIFV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBTbG90RGVmZXJyZWQgPSByZXF1aXJlKCdhZHZlcnRzL3Nsb3REZWZlcnJlZCcpO1xudmFyIEFkRmlsdGVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZEZpbHRlcicpO1xudmFyIEJyZWFrcG9pbnRzID0gcmVxdWlyZSgnYWR2ZXJ0cy9icmVha3BvaW50cycpO1xudmFyIGxhenlMb2FkU2xvdHMgPSBbXTtcbnZhciBkZWxheWVkU2Nyb2xsO1xuXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnRleHQsIGFyZ3MsIHJlc3VsdDtcbiAgICB2YXIgdGltZW91dCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzID0gMDtcbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcHJldmlvdXMgPSBvcHRpb25zLmxlYWRpbmcgPT09IGZhbHNlID8gMCA6IERhdGUubm93KCk7XG4gICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSB3YWl0IC0gKG5vdyAtIHByZXZpb3VzKTtcbiAgICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPD0gMCB8fCByZW1haW5pbmcgPiB3YWl0KSB7XG4gICAgICAgICAgICBpZiAodGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59O1xuXG52YXIgQURfSURfUFJFRklYID0gJ2JiY2NvbV8nO1xuXG52YXIgZ2V0QWREYXRhID0gZnVuY3Rpb24gKGFkTmFtZSkge1xuICAgIHZhciBhZCA9IHtcbiAgICAgICAgYWRTaXplczogTGF5b3V0LmdldEFkQ3VycmVudEdyb3VwU2l6ZXMoYWROYW1lKVxuICAgIH07XG4gICAgLy8gUmVzZXQgYWQgc2xvdCBuYW1lIGJhY2sgdG8gYXN5bmMgb25lIGlmIHJlcXVpcmVkXG4gICAgYWQuZG9tSWQgPSAoT2JqZWN0cygnYmJjZG90Y29tLmNvbmZpZy5pc0FzeW5jJykpID8gQURfSURfUFJFRklYICsgYWROYW1lIDogYWROYW1lO1xuICAgIHJldHVybiBhZDtcbn07XG5cbnZhciBzZXR1cFJlbmRlckVuZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLmFkZEV2ZW50TGlzdGVuZXIoJ3Nsb3RSZW5kZXJFbmRlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYoIWJiY2RvdGNvbS5hZHZlcnRzLmRmcHBSZXF1ZXN0LmdldEluaXRDb21wbGV0ZSgpKSB7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLmFkdmVydHMuZGZwcFJlcXVlc3Quc2V0SW5pdENvbXBsZXRlKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFkSWQgPSBldmVudC5zbG90LmdldFRhcmdldGluZyhcInNsb3RcIik7XG4gICAgICAgICAgICBhZElkID0gYWRJZFswXS5yZXBsYWNlKCdiYmNjb21fJywgJycpO1xuICAgICAgICAgICAgdmFyIGFkID0gQWRSZWdpc3Rlci5nZXRBZChhZElkKTtcbiAgICAgICAgICAgIHZhciBzbG90RWxlbWVudElkID0gZXZlbnQuc2xvdC5nZXRTbG90RWxlbWVudElkKCk7XG5cbiAgICAgICAgICAgIExvZyhhZElkLCBzbG90RWxlbWVudElkLCAnaXNFbXB0eScsIGV2ZW50LmlzRW1wdHkpO1xuICAgICAgICAgICAgaWYgKGFkICYmIGFkLmlzUmVuZGVyZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkLmluamVjdEFkdmVydGlzZW1lbnRUZXh0KCk7XG4gICAgICAgICAgICBhZC5zZXRSZW5kZXJlZCh0cnVlKTtcbiAgICAgICAgICAgIGFkLnNldEV2ZW50U2l6ZShldmVudC5zaXplKTtcbiAgICAgICAgICAgIGFkLnJlbmRlcklmUmVhZHkoKTtcbiAgICAgICAgICAgIFB1YlN1Yi50cmlnZ2VyKCdhZDpyZW5kZXI6Y29tcGxldGUnLCBzbG90RWxlbWVudElkLCBldmVudC5pc0VtcHR5KTtcbiAgICAgICAgICAgIGJiY2RvdGNvbS5hZHZlcnRzLmRmcHBSZXF1ZXN0LnJlcXVlc3REZWZlcnJlZEFkcygpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbnZhciBERlBQUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNsb3RzID0ge307XG4gICAgdGhpcy5kZWZlcnJlZFNsb3RzID0gW107XG4gICAgdGhpcy5pbml0Q29tcGxldGUgPSBmYWxzZTtcbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIENvbmZpZy5pc0Fkc0VuYWJsZWQoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIGdvb2dsZXRhZyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuY2xlYXJUYXJnZXRpbmcoKTtcbiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS51cGRhdGVDb3JyZWxhdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmluaXQodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgIExvZy5lcnJvcignVW5hYmxlIHRvIHJlc2V0IGFkcyB0YXJnZXRpbmcnLCBlKTtcbiAgICAgfVxufVxuXG5ERlBQUmVxdWVzdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChyZXNldCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIENvbmZpZy5pc0Fkc0VuYWJsZWQoKSAmJlxuICAgICAgICAgICAgdHlwZW9mIGdvb2dsZXRhZyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBwcmVzdW1lIHBlcmZDb29raWUgaXMgc2V0IG9uXG4gICAgICAgICAgICAvLyB3cmFwIGluIGEgdHJ5IGluIGNhc2UgdGhlIGNvb2tpZSBpc24ndCB0aGVyZSBhdCBhbGwgZm9yIHdoYXRldmVyIHJlYXNvblxuICAgICAgICAgICAgdmFyIHBlcmZDb29raWUgPSB3aW5kb3cuYmJjY29va2llcyAmJiBiYmNjb29raWVzLnJlYWRQb2xpY3kgJiYgYmJjY29va2llcy5yZWFkUG9saWN5KCdwZXJmb3JtYW5jZScpO1xuXG4gICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFByaXZhY3lTZXR0aW5ncyh7XG4gICAgICAgICAgICAgICAgICAgICdyZXN0cmljdERhdGFQcm9jZXNzaW5nJzogKHBlcmZDb29raWUgIT09IHRydWUpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKFwiZnJkXCIsICcxJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoQWRVbml0LmdldFByZXZpZXdVaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKFwidWlkXCIsIEFkVW5pdC5nZXRQcmV2aWV3VWlkKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuc2V0S2V5VmFsdWVzKCk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBMb3RhbWVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB0aGlzLnNldExvdGFtZURhdGEoKTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEdyYXBlc2hvdFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0R3JhcGVzaG90RGF0YSgpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogUHJvZ3JhbW1lcyBleHRyYSBpbmZvXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQcm9ncmFtbWVzRGF0YSgpO1xuXG4gICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygnZXNpJywgJzAnKTtcblxuICAgICAgICAgICAgICAgIC8vIEJCQ0NPTS03NjMxXG4gICAgICAgICAgICAgICAgaWYgKFNlY3Rpb25zLmdldFNlY3Rpb24oMCkgPT09ICd3ZWF0aGVyJykge1xuICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuYWRkRXZlbnRMaXN0ZW5lcignaW1wcmVzc2lvblZpZXdhYmxlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4sIGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnNsb3QuZ2V0U2xvdEVsZW1lbnRJZCgpID09PSAnbXB1Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9tcHUnKS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGFnTmFtZSA9PT0gXCJTQ1JJUFRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLmFkZEJvZHlUYWdDbGFzcygnYmJjY29tX3Nsb3RfbXB1JyArIChNYXRoLmZsb29yKGVsLmNsaWVudEhlaWdodCAvIDEwMCkgKiAxMDApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogIFNJTkdMRSBSRVFVRVNUIE1PREUgQWQgU2V0dXBcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlU2luZ2xlUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgIT0gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUnKSA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHBpZCA9IFV0aWxzLmdldENvb2tpZSgnY2twZl9wcGlkJykgfHwgVXRpbHMuZ2VuZXJhdGVVdWlkVjQoKS5zcGxpdChcIi1cIikuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYod2luZG93LmJiY2Nvb2tpZXMgJiYgYmJjY29va2llcy5yZWFkUG9saWN5KCdwZXJmb3JtYW5jZScpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZygnQ2FsbGluZyBTZXRDb29raWUgd2l0aCB2YWx1ZSA6ICcgKyBwcGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLnNldENvb2tpZSgnY2twZl9wcGlkJywgcHBpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFB1Ymxpc2hlclByb3ZpZGVkSWQocHBpZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogIFNZTkMvQVNZTkMgRGlmZmVyZW5jZXNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNBc3luYycpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5lbmFibGVTeW5jUmVuZGVyaW5nKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNEaXNhYmxlSW5pdGlhbExvYWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLmRpc2FibGVJbml0aWFsTG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNldHVwUmVuZGVyRW5kZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogR0RQUiA6IGNoZWNrIGNrbnNfcG9saWN5IGNvb2tpZSB0byBhbGxvdyBwZXJzb25hbGlzZWQgYWRzIG9yIG5vdFxuICAgICAgICAgICAgICAgICAqICB4eDEgOiBhbGxvd2VkLCBub3RoaW5nIHRvIGRvLCB4eDAgOiBkaXNhYmxlIHBlcnNvbmFsaXNlZCBhZHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoQ29uZmlnLmlzTlBBKCkpe1xuICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0UmVxdWVzdE5vblBlcnNvbmFsaXplZEFkcygxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc2V0ID09PSBcInVuZGVmaW5lZFwiIHx8IHJlc2V0ICE9PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RBZHMoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBQdWJTdWIudHJpZ2dlcignYWRzOmluaXRpYWxpc2VkJyk7XG5cbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIExvZy5lcnJvcignVW5hYmxlIHRvIHNldHVwIGFkcycsIGUpO1xuICAgIH1cbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5yZXF1ZXN0QWRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnRlcnN0aXRpYWxGbGFnID0gQWRGaWx0ZXIuaXNTbG90RW5hYmxlZCgnaW50ZXJzdGl0aWFsJyk7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgQ29uZmlnLmlzQWRzRW5hYmxlZCgpICYmXG4gICAgICAgICAgICB0eXBlb2YgZ29vZ2xldGFnICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcblxuICAgICAgICAgICAgdmFyIGksXG4gICAgICAgICAgICAgICAgYWREYXRhLFxuICAgICAgICAgICAgICAgIGFkU2l6ZSxcbiAgICAgICAgICAgICAgICBhZFVuaXQgPSBBZFVuaXQuZ2V0KCksXG4gICAgICAgICAgICAgICAgYWRzID0gQWRSZWdpc3Rlci5nZXRBZHMoKSxcbiAgICAgICAgICAgICAgICBrZXlTbG90cyA9IE9iamVjdC5rZXlzKHRoaXMuc2xvdHMpO1xuXG4gICAgICAgICAgICBpZiAoQWRSZWdpc3Rlci5nZXRBZENvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBObyBhZHMgaW4gcmVnaXN0ZXJcbiAgICAgICAgICAgICAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHJlcXVlc3QgJ2ludGVyc3RpdGlhbCcgYW5kIGVuYWJsZSBzZXJ2aWNlcyBmb3IgYWZ0ZXItaW5pdGlhbC1sb2FkIGFkc1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnRlcnN0aXRpYWxGbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBBZFJlZ2lzdGVyLnJlZ2lzdGVyQWQoJ2ludGVyc3RpdGlhbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZU91dE9mUGFnZVNsb3QoYWRVbml0LCAnYmJjY29tX2ludGVyc3RpdGlhbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUYXJnZXRpbmcoJ3Nsb3QnLCAnaW50ZXJzdGl0aWFsJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleVNsb3RzLnB1c2goJ2JiY2NvbV9pbnRlcnN0aXRpYWwnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuZW5hYmxlU2VydmljZXMoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEluaXRDb21wbGV0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbiAoKSB7XG5cblxuICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkcy5oYXNPd25Qcm9wZXJ0eShpKSAmJiBBZEZpbHRlci5pc1Nsb3RFbmFibGVkKGFkc1tpXS5nZXRBZElkKCkucmVwbGFjZShBRF9JRF9QUkVGSVgsICcnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkRGF0YSA9IGdldEFkRGF0YShhZHNbaV0uZ2V0QWRJZCgpLnJlcGxhY2UoQURfSURfUFJFRklYLCAnJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXplID0gYWREYXRhLmFkU2l6ZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihhZHNbaV0uaXNGbHVpZCkgYWRTaXplLnB1c2goJ2ZsdWlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWREYXRhICYmIChhZERhdGEuYWRTaXplcy5sZW5ndGggPiAwIHx8IGFkc1tpXS5pc0ZsdWlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXSA9IGdvb2dsZXRhZy5kZWZpbmVTbG90KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZFVuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWREYXRhLmRvbUlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXS5zZXRUYXJnZXRpbmcoJ3Nsb3QnLCBhZERhdGEuZG9tSWQucmVwbGFjZShBRF9JRF9QUkVGSVgsICcnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiAgSU5URVJTVElUSUFMIEFkIFNldHVwXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgaWYgKGludGVyc3RpdGlhbEZsYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgQWRSZWdpc3Rlci5yZWdpc3RlckFkKCdpbnRlcnN0aXRpYWwnKTtcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xldGFnLmRlZmluZU91dE9mUGFnZVNsb3QoYWRVbml0LCAnYmJjY29tX2ludGVyc3RpdGlhbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGFyZ2V0aW5nKCdzbG90JywgJ2ludGVyc3RpdGlhbCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGtleVNsb3RzLnB1c2goJ2JiY2NvbV9pbnRlcnN0aXRpYWwnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBnb29nbGV0YWcuZW5hYmxlU2VydmljZXMoKTtcblxuICAgICAgICAgICAgICAgIFB1YlN1Yi50cmlnZ2VyKCdhZHM6cmVxdWVzdGVkJywga2V5U2xvdHMpO1xuXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBMb2cuZXJyb3IoJ1VuYWJsZSB0byByZXF1ZXN0IGFkcycsIGUpO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmVmcmVzaCBhZHMgaW4gYXN5bmNocm9ub3VzIGxvYWRlZCBwYWdlc1xuICogVGhlcmUgaXMgYW4gc3luYyB2ZXJzaW9uIG9mIHJlZnJlc2hpbmcgYWRzIGluIGFwaS5qcyBmb3IgdmVydGljYWxzIGFzIGFuIGludGVyaW1cbiAqL1xuREZQUFJlcXVlc3QucHJvdG90eXBlLnJlZnJlc2hBZCA9IGZ1bmN0aW9uIChkb21JZCkge1xuICAgIHZhciBhZCA9IEFkUmVnaXN0ZXIuZ2V0QWQoZG9tSWQucmVwbGFjZSgnYmJjY29tXycsICcnKSk7XG4gICAgaWYgKGFkKSB7XG4gICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKFt0aGlzLnNsb3RzW2RvbUlkXV0pO1xuICAgICAgICBhZC5pbmplY3RBZHZlcnRpc2VtZW50VGV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIExvZy53YXJuKCdObyAnICsgZG9tSWQucmVwbGFjZSgnYmJjY29tXycsICcnKSArICcgYWQgZm91bmQgdG8gcmVmcmVzaCcpO1xuICAgIH1cbn07XG5cbi8qKlxuICogRGVmZXJyZWQgc2xvdHMgY2FuIG9ubHkgYmUgcmVnaXN0ZXJlZCBhZnRlciBmaXJzdCBhZCByZXF1ZXN0IHNlbnQsXG4gKiB3ZSdyZSB3YWl0aW5nIGZvciBpbml0Q29tcGxldGUgdG8gc2VuZCB0aGUgbmV3IGFkIHJlcXVlc3RcbiAqL1xuREZQUFJlcXVlc3QucHJvdG90eXBlLnJlcXVlc3REZWZlcnJlZEFkcyA9IGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgaWYgKHRoaXMuZGVmZXJyZWRTbG90cy5sZW5ndGggPiAwICkge1xuICAgICAgICB2YXIgc2xvdCxcbiAgICAgICAgICAgIGRvbUlkLFxuICAgICAgICAgICAgZ3JvdXBzLFxuICAgICAgICAgICAgYWR2ZXJ0VGV4dCxcbiAgICAgICAgICAgIGJvb2wsXG4gICAgICAgICAgICBrZXlWYWx1ZXMsXG4gICAgICAgICAgICBhZCxcbiAgICAgICAgICAgIHNsb3RzQXJyID0gW10sXG4gICAgICAgICAgICBib29sQ29ycmVsYXRvciA9IChtb2RlID8gbW9kZSA6IGZhbHNlKSxcbiAgICAgICAgICAgIGN1cnJlbnRHcm91cElkID0gTGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCk7XG5cbiAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5kZWZlcnJlZFNsb3RzLmxlbmd0aDsgaSsrICl7XG4gICAgICAgICAgICBzbG90ID0gdGhpcy5kZWZlcnJlZFNsb3RzW2ldO1xuICAgICAgICAgICAgZG9tSWQgPSBzbG90LmRvbUlkO1xuICAgICAgICAgICAgZ3JvdXBzID0gc2xvdC5ncm91cHM7XG4gICAgICAgICAgICBrZXlWYWx1ZXMgPSBzbG90LmtleVZhbHVlcztcbiAgICAgICAgICAgIGFkdmVydFRleHQgPSBzbG90LmFkdmVydFRleHQ7XG4gICAgICAgICAgICBib29sID0gc2xvdC5ib29sZWFuQ29ycmVsYXRvciB8fCBmYWxzZTtcbiAgICAgICAgICAgIGFkID0gQWRSZWdpc3Rlci5yZWdpc3RlckFkKGRvbUlkKTtcblxuICAgICAgICAgICAgaWYgKGFkICYmICFhZC5oYXNBbnlHcm91cEFscmVhZHlCZWVuUmVnaXN0ZXJlZChbZ3JvdXBzXSkgJiYgZ3JvdXBzLmluZGV4T2YoY3VycmVudEdyb3VwSWQpID49IDApIHtcbiAgICAgICAgICAgICAgICBMb2coJ1JlZ2lzdGVyaW5nIGFkOiAnICsgZG9tSWQgKyAnIGZvciBncm91cHMgJyArIGdyb3Vwcyk7XG4gICAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkVW5pdCA9IEFkVW5pdC5nZXQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkRGF0YSA9IGdldEFkRGF0YShhZC5nZXRBZElkKCkucmVwbGFjZShBRF9JRF9QUkVGSVgsICcnKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhZFNpemUgPSBhZERhdGEuYWRTaXplcztcbiAgICAgICAgICAgICAgICAgICAgaWYoYWQuaXNGbHVpZCkgYWRTaXplLnB1c2goJ2ZsdWlkJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXSA9IGdvb2dsZXRhZy5kZWZpbmVTbG90KFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWREYXRhLmRvbUlkXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXS5zZXRUYXJnZXRpbmcoJ3Nsb3QnLCBhZERhdGEuZG9tSWQucmVwbGFjZShBRF9JRF9QUkVGSVgsICcnKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGtleVZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoa2V5VmFsdWVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V5ICYmIGtleVZhbHVlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2xvdHNbYWREYXRhLmRvbUlkXS5zZXRUYXJnZXRpbmcoa2V5LCBrZXlWYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xvdHNBcnIucHVzaCh0aGlzLnNsb3RzW2FkRGF0YS5kb21JZF0pO1xuICAgICAgICAgICAgICAgICAgICBTbG90RGVmZXJyZWQoZG9tSWQsIGdyb3Vwcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZHZlcnRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZC5zZXRBZFRleHQoYWR2ZXJ0VGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWQuaW5qZWN0QWR2ZXJ0aXNlbWVudFRleHQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZFNsb3RzW2ldID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgUHViU3ViLnRyaWdnZXIoJ2FkczpyZXF1ZXN0ZWQnLCBkb21JZCk7XG5cbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBMb2cud2FybignTm8gJyArIGRvbUlkLnJlcGxhY2UoJ2JiY2NvbV8nLCAnJykgKyAnIGFkIGZvdW5kIHRvIHJlZ2lzdGVyIChmb3IgZ3JvdXBzICcgKyBncm91cHMgKyAnICknKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVmZXJyZWRTbG90cyA9IFtdO1xuICAgICAgICBnb29nbGV0YWcucHViYWRzKCkucmVmcmVzaChzbG90c0Fyciwge2NoYW5nZUNvcnJlbGF0b3I6IGJvb2xDb3JyZWxhdG9yfSk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbmV3IGFkIGluIEFKQVggb3IgaW5maW5pdGUgbG9hZGVkIHBhZ2VzXG4gKiBVcGdyYWRlZCBzdXBwb3J0LCBjYW4gYWNjZXB0IHBhaXIgKGRvbUlkLCBncm91cHMpIG9yIG9iamVjdCB3aXRoIG1vcmUgdGhhbiBvbmUgYWRcbiAqIEZpcnN0IHNpZ25hdHVyZSBtYXRjaGVzIHBvc3Rwb25lIGFkIHJlcXVlc3Qgb24gTGl2ZSBwYWdlc1xuICogU2Vjb25kIHNpZ25hdHVyZSBtYXRjaGVzIHJlbG9hZCBvbiBuZXcgc2xvdHMgZm9yIEZlYXR1cmVzXG4gKi9cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5yZWdpc3RlckFkID0gZnVuY3Rpb24gKGRvbUlkLCBncm91cHMsIGtleVZhbHVlcykge1xuICAgIHZhciBtb2RlID0gZmFsc2UsXG4gICAgICAgIGFkdmVydFRleHQsXG4gICAgICAgIF9ncm91cHMsXG4gICAgICAgIGV4Y2VwdGlvbiA9ICggZG9tSWQgPT09ICdtcHVfbWlkZGxlJyAmJiBncm91cHMubGVuZ3RoID09PSA0ICYmIFV0aWxzLnBhcmVudEhhc0NsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fbXB1X21pZGRsZV8xXzJfM180JyksICdseC1zdHJlYW0nKSAmJiBCcmVha3BvaW50cy5nZXRHcm91cCg1KSAhPT0gJ3VuZGVmaW5lZCcgKTtcbiAgICBpZiAodHlwZW9mIGdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9tcHVfbWlkZGxlXzFfMl8zXzQnKS5pZCA9IFwiYmJjY29tX21wdV9taWRkbGVfMV8yXzNfNF81XCI7XG4gICAgICAgICAgICBncm91cHMgPSBbMSwgMiwgMywgNCwgNV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCBBZEZpbHRlci5pc1Nsb3RFbmFibGVkKGRvbUlkKSB8fCBBZEZpbHRlci5pc0xhenlMb2FkZWRTbG90KGRvbUlkKSApIHtcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWRTbG90cy5wdXNoKHsnZG9tSWQnOiBkb21JZCwgJ2dyb3Vwcyc6IGdyb3Vwcy5tYXAoTnVtYmVyKSwga2V5VmFsdWVzfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMb2cud2FybignU2xvdCAnICsgZG9tSWQgKyAnIG5vdCBlbmFibGVkJyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlID0gdHlwZW9mIChrZXlWYWx1ZXMgfHwge30pLm1vZGUgIT09ICd1bmRlZmluZWQnID8ga2V5VmFsdWVzLm1vZGUgIDogdHJ1ZTtcbiAgICAgICAgZm9yICh2YXIgYWQgaW4gZG9tSWQgKXtcbiAgICAgICAgICAgIGlmKEFkRmlsdGVyLmlzU2xvdEVuYWJsZWQoYWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkb21JZFthZF0gPT09ICdvYmplY3QnICYmICEoZG9tSWRbYWRdIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkdmVydFRleHQgPSBkb21JZFthZF1bJ2FkdmVydFRleHQnXTtcbiAgICAgICAgICAgICAgICAgICAgX2dyb3VwcyA9IGRvbUlkW2FkXVsnZ3JvdXBzJ107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmZXJyZWRTbG90cy5wdXNoKHsnZG9tSWQnOiBhZCwgJ2dyb3Vwcyc6IF9ncm91cHMubWFwKE51bWJlciksICdhZHZlcnRUZXh0JzogYWR2ZXJ0VGV4dCwga2V5VmFsdWVzfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZFNsb3RzLnB1c2goeydkb21JZCc6IGFkLCAnZ3JvdXBzJzogZG9tSWRbYWRdLm1hcChOdW1iZXIpLCBrZXlWYWx1ZXN9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nLndhcm4oJ1Nsb3QgJyArIGFkICsgJyBub3QgZW5hYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmKCB0aGlzLmluaXRDb21wbGV0ZSApe1xuICAgICAgICB0aGlzLnJlcXVlc3REZWZlcnJlZEFkcyhtb2RlKTtcbiAgICB9XG59O1xuXG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5zY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgICBmb3IodmFyIGk9MDsgaTxsYXp5TG9hZFNsb3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIG9iaiA9IGxhenlMb2FkU2xvdHNbaV07XG4gICAgICAgIGlmICggb2JqLnNlbGVjdG9yRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ICl7XG4gICAgICAgICAgICBpZihBZEZpbHRlci5pc1Nsb3RFbmFibGVkKG9iai5kb21JZCkpe1xuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5yZWdpc3RlckFkKG9iai5kb21JZCwgb2JqLmdyb3Vwcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy53YXJuKCdTbG90ICcgKyBvYmouZG9tSWQgKyAnIG5vdCBlbmFibGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyByZW1vdmUgdGhpcyBpdGVtIG5vdyBpdCdzIGJlZW4gcmVnaXN0ZXJlZFxuICAgICAgICAgICAgbGF6eUxvYWRTbG90cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYobGF6eUxvYWRTbG90cy5sZW5ndGggPT09IDApe1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBkZWxheWVkU2Nyb2xsKTtcbiAgICB9XG59XG5cblxuLyoqXG4gKiBQb3N0cG9uZXMgdGhlIHJlcXVlc3QgZm9yIGEgc2xvdCB1bnRpbCBpdCBpcyBhYm91dCB0byBjb21lIGludG8gdmlld1xuICogUGFyYW1ldGVycyBleHBlY3RlZCBhcmUgc2xvdCBuYW1lIGFuZCBncm91cHNcbiAqL1xuREZQUFJlcXVlc3QucHJvdG90eXBlLmxhenlMb2FkQWQgPSBmdW5jdGlvbiAoZG9tSWQsIGdyb3Vwcykge1xuICAgIHZhciBzZWxlY3RvciA9IGJiY2RvdGNvbS5hZHZlcnRzLmFkRmlsdGVyLmlzTGF6eUxvYWRlZFNsb3QoZG9tSWQpO1xuICAgIHZhciBub2RlRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fJytkb21JZCsnXycrZ3JvdXBzLmpvaW4oJ18nKSk7XG4gICAgdmFyIHNlbGVjdG9yRWxlbWVudCA9IFV0aWxzLmdldFBhcmVudEVsZW1lbnRCeUNsYXNzKG5vZGVFbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgaWYoc2VsZWN0b3JFbGVtZW50KSB7XG4gICAgICAgIGxhenlMb2FkU2xvdHMucHVzaCh7XG4gICAgICAgICAgICBzZWxlY3RvckVsZW1lbnQ6IHNlbGVjdG9yRWxlbWVudCxcbiAgICAgICAgICAgIGRvbUlkOiBkb21JZCxcbiAgICAgICAgICAgIGdyb3VwczogZ3JvdXBzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmKCF0aGlzLmRlbGF5ZWRTY3JvbGwpIHtcbiAgICAgICAgZGVsYXllZFNjcm9sbCA9IHRocm90dGxlKHRoaXMuc2Nyb2xsSGFuZGxlciwgMjAwKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZGVsYXllZFNjcm9sbCk7XG4gICAgfVxufTtcblxuREZQUFJlcXVlc3QucHJvdG90eXBlLnJlZ2lzdGVyQWRTbG90cyA9IGZ1bmN0aW9uIChxdWVyeVNlbGVjdG9yKSB7XG4gICAgdmFyIHNsb3RzLCBzbG90O1xuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVHcm91cHMoZ3JvdXBzKSB7XG4gICAgICAgIHJldHVybiBncm91cHMubWFwKChncm91cCkgPT4gcGFyc2VJbnQoZ3JvdXAsIDEwKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGdyb3VwKSA9PiAhaXNOYU4oZ3JvdXApKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0QWRQcm9wZXJ0aWVzKHNsb3RJZCkge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IHNsb3RJZC5tYXRjaCgvYmJjY29tXyguKz8pXyhbXFxkX10rKS8pLCB0eXBlLCBncm91cHM7XG5cbiAgICAgICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gWycnLCBbXV07XG4gICAgICAgIH1cblxuICAgICAgICB0eXBlID0gbWF0Y2hlc1sxXTtcbiAgICAgICAgZ3JvdXBzID0gbWF0Y2hlc1syXS5zcGxpdCgnXycpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzbG90VHlwZTogdHlwZSxcbiAgICAgICAgICAgIHNsb3RHcm91cHM6IHZhbGlkYXRlR3JvdXBzKGdyb3VwcylcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCkge1xuICAgICAgICBzbG90cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcnlTZWxlY3Rvcik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbG90cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc2xvdCA9IGV4dHJhY3RBZFByb3BlcnRpZXMoc2xvdHNbaV0uaWQpO1xuXG4gICAgICAgICAgICBpZiAoc2xvdC5zbG90VHlwZSAmJiBzbG90LnNsb3RHcm91cHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckFkKHNsb3Quc2xvdFR5cGUsIHNsb3Quc2xvdEdyb3Vwcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuREZQUFJlcXVlc3QucHJvdG90eXBlLnNldExvdGFtZURhdGEgPSBmdW5jdGlvbiAoKXtcbiAgICB2YXIgZGFydENDS2V5ID0gXCJjY2F1ZFwiLCBkYXJ0Q0MgPSBcIlwiO1xuXG4gICAgaWYgKHR5cGVvZihjY2F1ZHMpICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGZvciAodmFyIGNjaSA9IDA7IGNjaSA8IGNjYXVkcy5Qcm9maWxlLkF1ZGllbmNlcy5BdWRpZW5jZS5sZW5ndGg7IGNjaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2NpID4gMCkgZGFydENDICs9IFwiLFwiO1xuICAgICAgICAgICAgZGFydENDICs9IGNjYXVkcy5Qcm9maWxlLkF1ZGllbmNlcy5BdWRpZW5jZVtjY2ldLmFiYnI7XG4gICAgICAgIH1cbiAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZyhkYXJ0Q0NLZXksIFtkYXJ0Q0NdKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuREZQUFJlcXVlc3QucHJvdG90eXBlLnNldEdyYXBlc2hvdERhdGEgPSBmdW5jdGlvbiAoKXtcbiAgICB2YXIgZ3NLZXkgPSBcImdzX2NhdFwiO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuZ3NfY2hhbm5lbHMgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5nc19jaGFubmVscyAhPT0gJ0RFRkFVTFQnKSB7XG4gICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoZ3NLZXksIHdpbmRvdy5nc19jaGFubmVscyk7XG4gICAgICAgIH0pO1xuICAgICAgICBiYmNkb3Rjb20ubG90YW1lLnNlbmREYXRhKHdpbmRvdy5nc19jaGFubmVscy5pbmRleE9mKFwiK1wiKSA+IDAgPyB3aW5kb3cuZ3NfY2hhbm5lbHMuc3BsaXQoXCIrXCIpIDogd2luZG93LmdzX2NoYW5uZWxzLCBcImdyYXBlc2hvdFwiKTtcbiAgICB9XG59O1xuXG5ERlBQUmVxdWVzdC5wcm90b3R5cGUuc2V0UHJvZ3JhbW1lc0RhdGEgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWQsIG5hbWUsIGVsO1xuICAgIGlmIChTZWN0aW9ucy5nZXRTZWN0aW9uKDEpID09PSAncHJvZ3JhbW1lcycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnItbWFzdGhlYWRfX3RpdGxlJylbMF0uY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZCA9IGVsLmhyZWYuc3BsaXQoJy8nKS5wb3AoKTtcbiAgICAgICAgICAgIG5hbWUgPSBlbC5pbm5lclRleHQ7XG4gICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnNldFRhcmdldGluZygncHJvZ3JhbW1lJywgaWQpO1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoJ25hbWUnLCBuYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoKGVycil7fVxuICAgIH1cbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5zZXRLZXlWYWx1ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIga2V5VmFsdWVzID0gS2V5VmFsdWVzLmdldEFsbCgpLFxuICAgICAgICBrZXk7XG4gICAgaWYoa2V5VmFsdWVzKSB7XG4gICAgICAgIGZvciAoa2V5IGluIGtleVZhbHVlcykge1xuICAgICAgICAgICAgaWYgKGtleVZhbHVlcy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleVZhbHVlc1trZXldICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoa2V5LCBrZXlWYWx1ZXNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5ERlBQUmVxdWVzdC5wcm90b3R5cGUuc2V0SW5pdENvbXBsZXRlID0gZnVuY3Rpb24gKGluaXRDb21wbGV0ZSkge1xuICAgIHRoaXMuaW5pdENvbXBsZXRlID0gaW5pdENvbXBsZXRlO1xuICAgIC8qKipcbiAgICAgKiBDYWxsIHRoZSBhc3luYyBjb21tYW5kIHF1ZXVlXG4gICAgICovXG4gICAgaWYgKGluaXRDb21wbGV0ZSkge1xuICAgICAgICBjbWQoKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0RGVmZXJyZWRBZHMoZmFsc2UpO1xuICAgIH1cbn07XG5cbkRGUFBSZXF1ZXN0LnByb3RvdHlwZS5nZXRJbml0Q29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5pdENvbXBsZXRlO1xufTtcblxuREZQUFJlcXVlc3QucHJvdG90eXBlLnNldEV4Y2x1c2lvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICBnb29nbGV0YWcucHViYWRzKCkuc2V0Q2F0ZWdvcnlFeGNsdXNpb24oa2V5KTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IERGUFBSZXF1ZXN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvZGZwcFJlcXVlc3QuanMiLCJ2YXIgY2xpZW50V2lkdGgsXG4gICAgYWRTaXplTGVld2F5QWdhaW5zdFNsb3RTaXplID0gMjAsXG4gICAgYWRTaXplTGVld2F5QWdhaW5zdFNsb3RTaXplV2l0aE5vQm9yZGVyID0gMzAsXG4gICAgaW5pdGlhbEdyb3VwID0gZmFsc2UsXG4gICAgaW5pdGlhbEdyb3VwSWQgPSBmYWxzZSxcbiAgICBjdXJyZW50R3JvdXAsXG4gICAgY3VycmVudEdyb3VwSWQsXG4gICAgY3VycmVudEdyb3VwU2l6ZXMgPSB7fSxcbiAgICBsYXlvdXREaXNhYmxlUmVzZXQgPSBmYWxzZTtcblxudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhZHZlcnRzOmxheW91dCcpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCdjbGFzc2VzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpO1xuXG4vKipcbiAqIFVzZSBwYWdlIHdpZHRoIHRvIGRldGVybWluZSBHcm91cElEIGFuZCBHcm91cFNpemVzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZUN1cnJlbnRHcm91cEFuZFNpemVzIChncm91cHMpICB7XG4gICAgdmFyIHgsXG4gICAgICAgIHNsb3QsXG4gICAgICAgIHNsb3RTaXplcztcbiAgICBmb3IgKHggaW4gZ3JvdXBzKSB7XG4gICAgICAgIHV0aWxzLnJlbW92ZUh0bWxUYWdDbGFzcyhjbGFzc2VzLmNsYXNzTmFtZSgnZ3JvdXAnLCB4KSk7XG4gICAgICAgIGlmICgodHlwZW9mIGdyb3Vwc1t4XS5mID09PSAndW5kZWZpbmVkJyB8fCBjbGllbnRXaWR0aCA8PSBncm91cHNbeF0uZikgJiZcbiAgICAgICAgICAgIGNsaWVudFdpZHRoID49IGdyb3Vwc1t4XS5zXG4gICAgICAgICkge1xuICAgICAgICAgICAgY3VycmVudEdyb3VwSWQgPSArKHgpO1xuICAgICAgICAgICAgY3VycmVudEdyb3VwID0gZ3JvdXBzW3hdO1xuXG4gICAgICAgICAgICBpZiAoIWluaXRpYWxHcm91cCAmJiAhaW5pdGlhbEdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsR3JvdXAgPSBjdXJyZW50R3JvdXA7XG4gICAgICAgICAgICAgICAgaW5pdGlhbEdyb3VwSWQgPSBjdXJyZW50R3JvdXBJZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdXRpbHMuYWRkSHRtbFRhZ0NsYXNzKGNsYXNzZXMuY2xhc3NOYW1lKCdncm91cCcsIGN1cnJlbnRHcm91cElkKSk7XG5cbiAgICAgICAgICAgIC8vIFN0cmlwIG91dCBzaXplcyBub3QgY29tcGF0aWJsZSB3aXRoIHBhZ2Ugd2lkdGhcbiAgICAgICAgICAgIGZvciAoc2xvdCBpbiBjdXJyZW50R3JvdXAuc2xvdHMpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXBTaXplc1tzbG90XSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoc2xvdFNpemVzIGluIGN1cnJlbnRHcm91cC5zbG90c1tzbG90XSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKGNsaWVudFdpZHRoKSA+PSBjdXJyZW50R3JvdXAuc2xvdHNbc2xvdF1bc2xvdFNpemVzXVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwU2l6ZXNbc2xvdF0ucHVzaChjdXJyZW50R3JvdXAuc2xvdHNbc2xvdF1bc2xvdFNpemVzXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQWRTaXplU3VpdGFibGVGb3JDdXJyZW50R3JvdXAgKGFkKSB7XG4gICAgdmFyIHNsb3RJbmRleCxcbiAgICAgICAgc2xvdFNpemVzID0gYmJjZG90Y29tLmFkdmVydHMubGF5b3V0LmdldEFkQ3VycmVudEdyb3VwU2l6ZXMoYWQuZ2V0QWROYW1lKCkpLFxuICAgICAgICBsZWV3YXkgPSAodHlwZW9mIGFkLmFkVHlwZSAhPT0gJ3VuZGVmaW5lZCcgJiYgKGFkLmFkVHlwZSA9PT0gJ3Byb21vJyB8fCBhZC5hZFR5cGUgPT09ICdmZWF0dXJlJykpXG4gICAgICAgICAgICA/IGFkU2l6ZUxlZXdheUFnYWluc3RTbG90U2l6ZVdpdGhOb0JvcmRlclxuICAgICAgICAgICAgOiBhZFNpemVMZWV3YXlBZ2FpbnN0U2xvdFNpemU7XG5cbiAgICBmb3IgKHNsb3RJbmRleCA9IDA7IHNsb3RJbmRleCA8IHNsb3RTaXplcy5sZW5ndGg7IHNsb3RJbmRleCsrKSB7XG4gICAgICAgIC8qXG4gICAgICAgICAqIFRIRSBGT0xMT1dJTkcgREVURUNUUyBIRUlHSFQgSU5DTFVESU5HIFRIRSBBRFZFUlRJU0lORyBURVhUIEFTIFRSWUlORyBUTyBERVRFQ1QgSEVJR0hUIE9OIFRIRVxuICAgICAgICAgKiBBRF9DT05UQUlORVIgRE9FUyBOT1QgV09SSyBJTiBJRTguIFRIRSBBRCBJUyBJTkpFQ1RFRCBPVVRTSURFIE9GIFRISVMgQURfQ09OVEFJTkVSXG4gICAgICAgICAqL1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhzbG90U2l6ZXNbc2xvdEluZGV4XVswXSAtIGFkLmdldFdpZHRoKCkpIDw9IGxlZXdheSAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoc2xvdFNpemVzW3Nsb3RJbmRleF1bMV0gLSBhZC5nZXRDcmVhdGl2ZUhlaWdodCgpKSA8PSBsZWV3YXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRTaG93QWQgKGFkKSB7XG4gICAgcmV0dXJuIGFkLmN1cnJlbnRTbG90SGFzR3JvdXAoY3VycmVudEdyb3VwSWQpICYmIGlzQWRTaXplU3VpdGFibGVGb3JDdXJyZW50R3JvdXAoYWQpO1xufVxuXG52YXIgc2hvd09ySGlkZUFkRm9yQ3VycmVudEdyb3VwID0gZnVuY3Rpb24gKGFkKSB7XG4gICAgaWYgKGJiY2RvdGNvbS5kb21Mb2FkZWQgJiYgIWFkLmlzUmVzcG9uc2l2ZSAmJiAhYWQuaXNGbHVpZCkge1xuICAgICAgICBpZiAoc2hvdWxkU2hvd0FkKGFkKSkge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCc9PT0gT3BlbmluZyAnICsgYWQuZ2V0QWRJZCgpICsgJyBmb3IgY3VycmVudCBzbG90ID09PScpO1xuICAgICAgICAgICAgYWQub3BlbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9nLmRlYnVnKCc9PT0gU2h1dHRpbmcgJyArIGFkLmdldEFkSWQoKSArICcgZm9yIGN1cnJlbnQgc2xvdCA9PT0nKTtcbiAgICAgICAgICAgIGFkLnNodXQoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHJlc2V0ICgpIHtcbiAgICBpZiAobGF5b3V0RGlzYWJsZVJlc2V0KSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnbGF5b3V0RGlzYWJsZVJlc2V0IGlzIHNldCB0bycsIHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGFkLFxuICAgICAgICAgICAgYWRzID0gYmJjZG90Y29tLmFkdmVydHMuYWRSZWdpc3Rlci5nZXRBZHMoKTtcblxuICAgICAgICBiYmNkb3Rjb20uYWR2ZXJ0cy5sYXlvdXQuaW5pdChiYmNkb3Rjb20uYWR2ZXJ0cy5icmVha3BvaW50cy5nZXRHcm91cHMoKSk7XG5cbiAgICAgICAgZm9yIChhZCBpbiBhZHMpIHtcbiAgICAgICAgICAgIGlmIChhZHMuaGFzT3duUHJvcGVydHkoYWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFkLmluZGV4T2YoJ2Fkc2Vuc2UnKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5hZHZlcnRzLmFkc2Vuc2VSZW5kZXJlci5yZXNldCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vdyBsZXRzIGNoZWNrIGlmIHRoZSBhZCBpcyBzdGlsbCBzdWl0YWJsZSBmb3IgZGlzcGxheWluZyBpbiBpdHMgY3VycmVudCBncm91cFxuICAgICAgICAgICAgICAgICAgICBzaG93T3JIaWRlQWRGb3JDdXJyZW50R3JvdXAoYWRzW2FkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoZ3JvdXBzKSB7XG4gICAgICAgIGNsaWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOyAvLyBUT0RPIC0gQSBiZXR0ZXIgd2F5IHRvIGRldGVjdCB3aWR0aCBpbmxpbmUgd2l0aCBtZWRpYSBzZWxlY3RvcnNcbiAgICAgICAgZGV0ZXJtaW5lQ3VycmVudEdyb3VwQW5kU2l6ZXMoZ3JvdXBzKTtcbiAgICAgICAgaWYgKCFsYXlvdXREaXNhYmxlUmVzZXQpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGxheW91dCB0byBzaG93L2hpZGUgYWRzXG4gICAgICAgICAgICBiYmNkb3Rjb20uYWRkTG9hZEV2ZW50KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXRpbHMuZGVib3VuY2UocmVzZXQsIDUwMCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBtb3ZlQWQ6IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgICAvL3ZhciBpRnJhbWUsXG4gICAgICAgIC8vICAgIGlGcmFtZURvY3VtZW50LFxuICAgICAgICAvLyAgICBpRnJhbWVCb2R5LFxuICAgICAgICAvLyAgICBpRnJhbWVJbm5lckhUTUwsXG4gICAgICAgIC8vICAgIGRvbUZyb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmcm9tKSxcbiAgICAgICAgLy8gICAgZG9tVG8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0byk7XG4gICAgICAgIC8vaWYgKGZyb20gIT09IHRvICYmIGRvbUZyb20gIT09IG51bGwgJiYgZG9tVG8gIT09IG51bGwpIHtcbiAgICAgICAgLy8gICAgaUZyYW1lID0gZG9tRnJvbS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJylbMF07XG4gICAgICAgIC8vICAgIGlmICh0eXBlb2YgaUZyYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyAgICAgICAgaUZyYW1lRG9jdW1lbnQgPSBpRnJhbWUuY29udGVudERvY3VtZW50IHx8IGlGcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgICAgICAvLyAgICAgICAgaWYgKGlGcmFtZURvY3VtZW50KSB7XG4gICAgICAgIC8vICAgICAgICAgICAgaUZyYW1lQm9keSA9IGlGcmFtZURvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIC8vICAgICAgICAgICAgaUZyYW1lSW5uZXJIVE1MID0gZG9tRnJvbS5pbm5lckhUTUwucmVwbGFjZSgvPGlmcmFtZS4qPi4qPFxcL2lmcmFtZT4vLCBpRnJhbWVCb2R5LmlubmVySFRNTCk7XG4gICAgICAgIC8vICAgICAgICB9XG4gICAgICAgIC8vICAgIH1cbiAgICAgICAgLy8gICAgZG9tVG8uaW5uZXJIVE1MID0gaUZyYW1lSW5uZXJIVE1MIHx8IGRvbUZyb20uaW5uZXJIVE1MO1xuICAgICAgICAvLyAgICBkb21Gcm9tLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAvL31cbiAgICAgICAgLy9kb21Gcm9tID0gZG9tVG8gPSBudWxsO1xuICAgIH0sXG4gICAgc2V0Q2xpZW50V2lkdGg6IGZ1bmN0aW9uICh3aWR0aCkge1xuICAgICAgICBjbGllbnRXaWR0aCA9IHdpZHRoO1xuICAgIH0sXG4gICAgZ2V0Q2xpZW50V2lkdGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNsaWVudFdpZHRoO1xuICAgIH0sXG4gICAgZ2V0Q3VycmVudEdyb3VwOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50R3JvdXA7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50R3JvdXBJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudEdyb3VwSWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZ1xuICAgICAqL1xuICAgIHNldEN1cnJlbnRHcm91cElkOiBmdW5jdGlvbiAoZ3JvdXBJZCkge1xuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IGdyb3VwSWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUT0RPIC0gRGVwcmVjYXRlIGluIGZhdm91ciBvZiB1c2luZyB0aGUgbWV0aG9kIGJlbG93XG4gICAgICogQHJldHVybnMgYXJyYXkgb2YgYWxsIGN1cnJlbnQgZ3JvdXAgYWQgc2xvdCBzaXplc1xuICAgICAqL1xuICAgIGdldEN1cnJlbnRHcm91cFNpemVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjdXJyZW50R3JvdXBTaXplcztcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNob3VsZCB1c2UgdGhpcyBhcyBvcHBvc2VkIHRvIHRoZSBtZXRob2QgYWJvdmVcbiAgICAgKiBAcGFyYW0gYWRJZFxuICAgICAqIEByZXR1cm5zIGFycmF5IG9mIGN1cnJlbnQgc2xvdCBzaXplcyBmb3IgYW4gYWRcbiAgICAgKi9cbiAgICBnZXRBZEN1cnJlbnRHcm91cFNpemVzOiBmdW5jdGlvbiAoYWRJZCkge1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRHcm91cFNpemVzW2FkSWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRHcm91cFNpemVzW2FkSWRdO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjdXJyZW50R3JvdXBTaXplc1thZElkLnNsaWNlKDAsIGFkSWQubGFzdEluZGV4T2YoJ18nKSldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRHcm91cFNpemVzW2FkSWQuc2xpY2UoMCwgYWRJZC5sYXN0SW5kZXhPZignXycpKV07XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGN1cnJlbnRHcm91cFNpemVzW2FkSWQuc2xpY2UoMCwgYWRJZC5pbmRleE9mKCdfJykpXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50R3JvdXBTaXplc1thZElkLnNsaWNlKDAsIGFkSWQuaW5kZXhPZignXycpKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG4gICAgb3ZlcnJpZGVHcm91cFNpemVzOiBmdW5jdGlvbiAoc2xvdHMpIHtcbiAgICAgICAgdmFyIHNsb3Q7XG4gICAgICAgIGN1cnJlbnRHcm91cFNpemVzID0gW107XG4gICAgICAgIGZvciAoc2xvdCBpbiBzbG90cykge1xuICAgICAgICAgICAgY3VycmVudEdyb3VwU2l6ZXNbc2xvdF0gPSBzbG90c1tzbG90XTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZVJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxheW91dERpc2FibGVSZXNldCA9IHRydWU7XG4gICAgfSxcbiAgICByZXNldDogcmVzZXQsXG4gICAgLyoqXG4gICAgICogRm9yIHRlc3RpbmcuXG4gICAgICovXG4gICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsYXlvdXREaXNhYmxlUmVzZXQgPSBmYWxzZTtcbiAgICAgICAgY3VycmVudEdyb3VwID0ge307XG4gICAgICAgIGN1cnJlbnRHcm91cElkID0gMDtcbiAgICAgICAgY3VycmVudEdyb3VwU2l6ZXMgPSB7fTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvbGF5b3V0LmpzIiwidmFyIHJlZ2lzdGVyID0ge30sXG4gICAgZmFjdG9yeSxcbiAgICBjdXJyZW50QWRJZCxcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRPRE8gLSBUaGluayBhYm91dCBtb3ZpbmcgdGhpcyBsb2dpYyBpbnRvIHNlcGFyYXRlIGFkIHR5cGVzIHRoYXQgZXh0ZW5kIHRoZSBzdGFuZGFyZCBhZCB0eXBlXG4gICAgICpcbiAgICAgKiBPUFRJT05TXG4gICAgICogLSBpc1Jlc3BvbnNpdmUgKEFkIGRvZXMgbm90IGNoZWNrIHRvIHNlZSBpZiBpdCBpcyBzdGlsbCBzdWl0YWJsZSBmb3IgdGhlIGN1cnJlbnQgc2xvdCBhcyB0aGUgYWQgd2lsbCB3b3JrIGluIGEgcmVzcG9uc2l2ZSBlbnZpcm9ubWVudCBhbmQgZG9lcyBub3Qgc2h1dClcbiAgICAgKiAtIGFsbG93U2NyZWVuUmVhZGVyIChBbGxvd3MgZm9yIHRhYmJpbmcgdGhyb3VnaCBlbGVtZW50cyB3aXRoaW4gYW4gYWQpXG4gICAgICogLSBoYXNBZFRleHQgKERpc3BsYXlzIGFzc29jaWF0ZWQgYWQgdGV4dCBzdWNoIGFzIElTIFNQT05TT1JFRCBCWSlcbiAgICAgKiAtIGFkVHlwZSAoQWxsb3dzIGRpZmZlcmVudCBzbG90IHJlbmRlcmVycyBhbmQgY2xhc3NlcyB0byBiZSB1c2VkKVxuICAgICAqIC0gaXNEZnBwUmVxdWVzdCAoV2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGRmcCByZXF1ZXN0IGFzIGl0IGlzIGEgZGlmZmVyZW50IGFkIHR5cGUpXG4gICAgICogLSBpc3RGbHVpZCAod2lsbCBlbmFibGUgdGhlIGZsdWlkIGZvcm1hdCBmb3IgdGhlIHNsb3QgdG8gZW5hYmxlIHJlbmRlcmluZyBvZiBHb29nbGVOYXRpdmUgYWRzKVxuICAgICAqXG4gICAgICovXG4gICAgYWRDb25maWcgPSB7XG4gICAgICAgIFwid2FsbHBhcGVyXCI6IHtcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbnRlcnN0aXRpYWxcIjoge1xuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm5hdGl2ZVwiOiB7XG4gICAgICAgICAgICBcImFsbG93U2NyZWVuUmVhZGVyXCI6IHRydWUsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJoYXNBZFRleHRcIjogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgXCJuYXRpdmVfc2xpY2VfbFwiOiB7XG4gICAgICAgICAgICBcImFsbG93U2NyZWVuUmVhZGVyXCI6IHRydWUsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJoYXNBZFRleHRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcIm5hdGl2ZV9zbGljZV9yXCI6IHtcbiAgICAgICAgICAgIFwiYWxsb3dTY3JlZW5SZWFkZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImhhc0FkVGV4dFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5mZWVkXCI6IHtcbiAgICAgICAgICAgIFwiYWxsb3dTY3JlZW5SZWFkZXJcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IHRydWUsXG4gICAgICAgICAgICBcImhhc0FkVGV4dFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcImluZmVlZF9uZXdzX2hvbWVcIjoge1xuICAgICAgICAgICAgXCJhbGxvd1NjcmVlblJlYWRlclwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaGFzQWRUZXh0XCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbmZlZWRfbmV3c19pbmRleFwiOiB7XG4gICAgICAgICAgICBcImFsbG93U2NyZWVuUmVhZGVyXCI6IHRydWUsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJoYXNBZFRleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaXNGbHVpZFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW5mZWVkX25ld3Nfc3RvcnlcIjoge1xuICAgICAgICAgICAgXCJhbGxvd1NjcmVlblJlYWRlclwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaGFzQWRUZXh0XCI6IHRydWUsXG4gICAgICAgICAgICBcImlzRmx1aWRcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcImFkc2Vuc2VcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJhZHNlbnNlXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaGFzQWRUZXh0XCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJvdXRicmFpblwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcIm91dGJyYWluXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpc0RmcHBSZXF1ZXN0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwicHJvbW9cIjoge1xuICAgICAgICAgICAgLyogY2F0Y2ggYWxsICovXG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcInByb21vXCIsXG4gICAgICAgICAgICBcImhhc0FkVGV4dFwiOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBcInNwb25zb3JcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJzcG9uc29yXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzaXplXCI6IFs4OCwzMV1cbiAgICAgICAgfSxcbiAgICAgICAgXCJzcG9uc29yYmlnXCI6IHtcbiAgICAgICAgICAgIFwiYWRUeXBlXCI6IFwic3BvbnNvcmJpZ1wiLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBbMTMyLDY0XVxuICAgICAgICB9LFxuICAgICAgICBcIm1vZHVsZVwiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBbODgsMzFdXG4gICAgICAgIH0sXG4gICAgICAgIFwibW9kdWxlX3dvcmxkaW5waWN0dXJlc1wiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcIm1vZHVsZV93b3JsZGlucGljdHVyZXNcIixcbiAgICAgICAgICAgIFwiaXNSZXNwb25zaXZlXCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BvbnNvcl9zZWN0aW9uXCI6IHtcbiAgICAgICAgICAgIFwiYWRUeXBlXCI6IFwic3BvbnNvcl9zZWN0aW9uXCIsXG4gICAgICAgICAgICBcImlzUmVzcG9uc2l2ZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic2l6ZVwiOiBbODgsMzFdXG4gICAgICAgIH0sXG4gICAgICAgIFwiYWRfZmVhdHVyZV9yY1wiOiB7XG4gICAgICAgICAgICBcImFkVHlwZVwiOiBcImZlYXR1cmVcIixcbiAgICAgICAgICAgIFwiaGFzQWRUZXh0XCI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BvbnNvcl9iYW5uZXJcIjoge1xuICAgICAgICAgICAgXCJhZFR5cGVcIjogXCJzcG9uc29yX2Jhbm5lclwiLFxuICAgICAgICAgICAgXCJpc1Jlc3BvbnNpdmVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInNpemVcIjogWzg4LDMxXVxuICAgICAgICB9LFxuICAgICAgICBcImdvb2dsZW5hdGl2ZVwiOiB7XG4gICAgICAgICAgICBcImlzRmx1aWRcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgfTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2V0QWRGYWN0b3J5OiBmdW5jdGlvbiAoYWRGYWN0b3J5KSB7XG4gICAgICAgIGZhY3RvcnkgPSBhZEZhY3Rvcnk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWRJZCBlZyBtcHUsIGxlYWRlcmJvYXJkXG4gICAgICovXG4gICAgcmVnaXN0ZXJBZDogZnVuY3Rpb24gKGFkSWQpIHtcbiAgICAgICAgaWYgKGFkSWQgIT09ICcnICYmIHR5cGVvZiByZWdpc3RlclthZElkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlZ2lzdGVyW2FkSWRdID0gbmV3IGJiY2RvdGNvbS5hZHZlcnRzLmFkKGFkSWQpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhZENvbmZpZ1thZElkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZWdpc3RlclthZElkXS5zZXRDb25maWcoYWRDb25maWdbYWRJZF0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWRDb25maWdbYWRJZC5zbGljZSgwLCBhZElkLmluZGV4T2YoJ18nKSldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyW2FkSWRdLnNldENvbmZpZyhhZENvbmZpZ1thZElkLnNsaWNlKDAsIGFkSWQuaW5kZXhPZignXycpKV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3RlclthZElkXTtcbiAgICB9LFxuICAgIHNldEN1cnJlbnRBZElkOiBmdW5jdGlvbiAoYWRJZCkge1xuICAgICAgICBjdXJyZW50QWRJZCA9IGFkSWQ7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QWRJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudEFkSWQ7XG4gICAgfSxcbiAgICBnZXRDdXJyZW50QWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVE9ETyAtIFJlbW92ZSBpZiBhbmQgZWxzZSBhbmQgcmV0dXJuIHJlZ2lzdGVyW2N1cnJlbnRBZElkXSBvbmNlIGFwcHMgdXNlIHRoZSBjb3JyZWN0IEFQSSBiYmNkb3Rjb20uc2hvdygpXG4gICAgICAgIGlmIChiYmNkb3Rjb20uY29uZmlnLmlzQWN0aXZlKCdhZHMnKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXJyZW50QWRJZCAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVnaXN0ZXJbY3VycmVudEFkSWRdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyW2N1cnJlbnRBZElkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2V0QmFzZUNvbnRlbnQ6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uICgpIHt9LFxuICAgICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbiAoKSB7fVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge30sXG4gICAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uICgpIHt9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRBZDogZnVuY3Rpb24gKGFkSWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZWdpc3RlclthZElkXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RlclthZElkXTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0QWRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlcjtcbiAgICB9LFxuICAgIGdldEFkQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvciAoayBpbiByZWdpc3Rlcikge1xuICAgICAgICAgICAgaWYgKHJlZ2lzdGVyLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfSxcbiAgICAvLyBUT0RPIC0gRm9yIHRlc3RzIG9ubHksIGZpeCBsYXRlci5cbiAgICByOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlZ2lzdGVyID0ge307XG4gICAgICAgIGN1cnJlbnRBZElkID0gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlZ2lzdGVyLmpzIiwiLyogYmJjZG90Y29tIENvbW1hbmQgUXVldWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09XG4gKiBcbiAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbW9kdWxlIGlzIHRvIHBpY2sgdXAgcmVxdWVzdHMgdGhhdCBhcmUgbWFkZSB0byBiYmNkb3Rjb20gYmVmb3JlXG4gKiBpdCBoYXMgZmluaXNoZWQgaW5pdGlhbGlzaW5nLiBUaGlzIG1vZHVsZSB3aWxsIGZldGNoIGFuZCBleGVjdXRlIGFueSBmdW5jdGlvbiBpbiBcbiAqIGJiY2RvdGNvbS5jbWQgYXJyYXkgaW4gdGhlIG9yZGVyIGl0IHdhcyBwb3B1bGF0ZWQuIFxuICogXG4gKiBBZnRlciBhbGwgdGhlIGNvbW1hbmRzIGFyZSBleGVjdXRlZCBhbmQgaW5pdGlhbGlzYXRpb24gaXMgY29tcGxldGUgdGhlIGFycmF5IHdpbGwgXG4gKiBhdXRvbWF0aWNhbGx5IGV4ZWN1dGUgYWxsIGZ1bmN0aW9ucyBzZW50IHRvIGl0LlxuICogXG4gKiBVc2UgZXhhbXBsZVxuICogYmJjZG90Y29tLmNtZCA9IGJiY2RvdGNvbS5jbWQgfHwgW107XG4gKiBiYmNkb3Rjb20uY21kLnB1c2goICgpID0+IHsgYmJjZG90Y29tLnJlZ2lzdGVyQWQoIC4uLiApIH0gKTtcbiAqL1xuXG52YXIgY21kID0gZnVuY3Rpb24oKSB7XG4gIHdpbmRvdy5iYmNkb3Rjb20uY21kID0gd2luZG93LmJiY2RvdGNvbS5jbWQgfHwgW107XG4gIFxuICBpZiggd2luZG93LmJiY2RvdGNvbS5jbWQgKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKXtcblxuICAgICAgd2hpbGUod2luZG93LmJiY2RvdGNvbS5jbWQubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZnVuYyA9IHdpbmRvdy5iYmNkb3Rjb20uY21kLnNoaWZ0KCk7XG4gICAgICAgIGZ1bmMoKTtcbiAgICAgIH1cbiAgICBcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuYmJjZG90Y29tLmNtZCwgXCJwdXNoXCIsIHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YWx1ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgXG4gICAgfSwgNTAwKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjbWQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2NtZC5qcyIsIi8qKlxuICogSW50ZXJuYWwgbWFwIG9mIGV2ZW50IGxpc3RlbmVyIGZ1bmN0aW9ucy4gRWFjaCBwcm9wZXJ0eSBpcyBhbiBldmVudCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZSBiZWluZyBhbiBhcnJheSBvZiB0aGUgbGlzdGVuZXJzIHdoaWNoIGFyZSBib3VuZCB0byB0aGF0IGV2ZW50LlxuICpcbiAqIEB0eXBlIHt7fX1cbiAqL1xudmFyIGxpc3RlbmVycyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIEJpbmQgYSBsaXN0ZW5lciBmdW5jdGlvbiB0byBhIHBhcnRpY3VsYXIgZXZlbnQgb3IgbGlzdCBvZiBzcGFjZSBzZXBhcmF0ZWQgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCB0byB3aGljaCB3ZSB3YW50IHRvIGxpc3RlblxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIHRyaWdnZXJlZFxuICAgICAqL1xuICAgIG9uOiBmdW5jdGlvbiAoZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V2ZW50IGhhbmRsZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnQuc3BsaXQoJyAnKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2V2ZW50c1tpXV0gPSBsaXN0ZW5lcnNbZXZlbnRzW2ldXSB8fCBbXTtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tldmVudHNbaV1dLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyaWdnZXIgYW4gZXZlbnQgY2FsbGluZyBhbnkgbGlzdGVuZXJzIHdoaWNoIGFyZSBib3VuZCB3aXRoIHRoZSBhcmd1bWVudHMgZ2l2ZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHRyaWdnZXJcbiAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3VtZW50cyBBbnkgYXJndW1lbnRzIHdoaWNoIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIGxpc3RlbmVyIGZ1bmN0aW9uc1xuICAgICAqL1xuICAgIHRyaWdnZXI6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZiAoIWxpc3RlbmVycy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVyc1tldmVudF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1tldmVudF1baV0uYXBwbHkodGhpcywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5iaW5kIGxpc3RlbmVyKHMpIGZyb20gYSBwYXJ0aWN1bGFyIGV2ZW50LiBJZiBhIGxpc3RlbmVyIGZ1bmN0aW9uIGlzIGdpdmVuLCBvbmx5IHRoaXMgbGlzdGVuZXJcbiAgICAgKiBpcyB1bmJvdW5kLiBJZiBubyBsaXN0ZW5lciBpcyBnaXZlbiwgYWxsIGxpc3RlbmVycyBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50IGFyZSB1bmJvdW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCB3aG9zZSBsaXN0ZW5lcihzKSB3ZSB3YW50IHRvIHVuYmluZFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBsaXN0ZW5lciBPcHRpb25hbCBsaXN0ZW5lciBmdW5jdGlvbiB0byB1bmJpbmRcbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uIChldmVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyc1tldmVudF0uaW5kZXhPZihsaXN0ZW5lcikgPj0gMCkge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UobGlzdGVuZXJzW2V2ZW50XS5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXJzW2V2ZW50XS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgZXZlbnQgbGlzdGVuZXJzIGZvciBhbGwgZXZlbnRzLlxuICAgICAqL1xuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxpc3RlbmVycyA9IHt9O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3B1YnN1Yi5qcyIsIi8qKlxuICogYmJjZG90Y29tLmFkdmVydHMuYWRVbml0IGlzIHJlc3BvbnNpYmxlIGZvciBwcm92aWRpbmcgdGhlIGNvcnJlY3QgYWRVbml0cyAodXNlZCB0byBiZSBjYWxsZWQgJ3pvbmUnKSB0byBERlAuXG4gKlxuICogYWRVbml0cyBpcyBhIGZvcndhcmQtc2xhc2ggZGVsaW1pdGVkIHN0cmluZyBmb3IgdGFyZ2V0dGluZyB0aGUgYmVzdCBhZHZlcnRzIHRvIGEgcGFnZS5cbiAqXG4gKiBlZyAvNDgxNy9iYmNjb20ucWEuc2l0ZS5tb2JpbGUubmV3cy9zcG9ydF9ob21lcGFnZV9pbnRcbiAqICAgICAgICAgIFsgICAgICBhZCB1bml0IDEgICAgICAgICBdIFsgICAgYWQgdW5pdCAyICAgXVxuICovXG52YXIga2V5VmFsdWVzID0gcmVxdWlyZSgnYWR2ZXJ0cy9rZXlWYWx1ZXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnY29uZmlnJyk7XG52YXIgYWRVbml0V2ViU2VydmljZSA9IHJlcXVpcmUoJ2FkdmVydHMvYWRVbml0V2ViU2VydmljZScpO1xuXG52YXIgem9uZURhdGEgPSB7fSxcbiAgICBERlBfSUQgPSAnLzQ4MTcvJyxcbiAgICBERlBfU1VJVEVfREVGQVVMVCA9ICdkZXNrdG9wJyxcbiAgICBERlBfU1VJVEVfREVWSUNFX1dJRFRIX1NXSVRDSCA9IDkwMCxcbiAgICBBRF9VTklUX0RFRkFVTFQgPSAnYmJjY29tLmxpdmUuc2l0ZS5uZXdzLycsXG4gICAgQURfVU5JVF8yX0RFRkFVTFQgPSAnX2RlZmF1bHQnLFxuICAgIFVOS05PV04gPSAndW5rbm93bicsXG4gICAgQ0hBTk5FTF9LRVkgPSAnY2hhbm5lbCcsXG4gICAgU0VDVElPTl9LRVkgPSAnc2VjdG4nLFxuICAgIFNVQl9TRUNUSU9OX0tFWSA9ICdzdWJzZWN0JyxcbiAgICBhZFVuaXQgPSBBRF9VTklUX0RFRkFVTFQsXG4gICAgY3VzdG9tQWRVbml0ID0gZmFsc2UsXG4gICAgZGZwU3VpdGUgPSBERlBfU1VJVEVfREVGQVVMVCxcbiAgICBhZFVuaXRzMnRvOSA9ICcnLFxuICAgIHByZXZpZXdVaWQgPSBmYWxzZSxcbiAgICBxdWVyeVN0cmluZ092ZXJyaWRlID0gZmFsc2UsXG4gICAgYWxsb3dlZFNpdGVzID0ge1xuICAgICAgICAvKiBEZXNrdG9wIGFkVW5pdHMgKi9cbiAgICAgICAgbGl2ZTogJ2JiY2NvbS5saXZlLnNpdGUubmV3cy8nLFxuICAgICAgICB3d3c6ICdiYmNjb20ubGl2ZS5zaXRlLnd3dy8nLFxuICAgICAgICBzcGVjaWFsczogJ2JiY2NvbS5saXZlLnNpdGUuc3BlY2lhbGZlYXR1cmVzLycsXG4gICAgICAgIHByZXZpZXc6ICdiYmNjb20ucHJldmlldy5zaXRlLnRlc3QvJyxcbiAgICAgICAgdGVzdDogJ2JiY2NvbS50ZXN0LnNpdGUuZmxhc2gvJyxcbiAgICAgICAgLyogTW9iaWxlIGFkVW5pdHMgKi9cbiAgICAgICAgbGl2ZV9tb2JpbGU6ICdiYmNjb20ubGl2ZS5zaXRlLm1vYmlsZS5uZXdzLycsXG4gICAgICAgIHd3d19tb2JpbGU6ICdiYmNjb20ubGl2ZS5zaXRlLm1vYmlsZS53d3cvJyxcbiAgICAgICAgc3BlY2lhbHNfbW9iaWxlOiAnYmJjY29tLmxpdmUuc2l0ZS5zcGVjaWFsZmVhdHVyZXMvJyxcbiAgICAgICAgcHJldmlld19tb2JpbGU6ICdiYmNjb20ucHJldmlldy5zaXRlLm1vYmlsZS5uZXdzLycsXG4gICAgICAgIHRlc3RfbW9iaWxlOiAnYmJjY29tLnFhLnNpdGUubW9iaWxlLm5ld3MvJyxcbiAgICAgICAgLyogV29ybGRTZXJ2aWNlIGFkVW5pdHMgLSB1c2VkIGZvciB0ZXN0aW5nIG9ubHkgKi9cbiAgICAgICAgdGVzdF9hcmFiaWM6ICdiYmN3cy50ZXN0LnNpdGUubW9iaWxlLmFyYWJpYy8nLFxuICAgICAgICB0ZXN0X3J1c3NpYW46ICdiYmN3cy50ZXN0LnNpdGUubW9iaWxlLnJ1c3NpYW4vJyxcbiAgICAgICAgLyogQkJDIEVhcnRoICovXG4gICAgICAgIGxpdmVfZWFydGg6ICdiYmNlYXJ0aC5jb20vJyxcbiAgICAgICAgdGVzdF9lYXJ0aDogJ2JiY2VhcnRoLnRlc3QuY29tLycsXG4gICAgICAgIC8qIEFNUCBBZCBVbml0cyAqL1xuICAgICAgICB0ZXN0X2FtcF9uZXdzOiAnYmJjY29tLnRlc3QuYW1wLm5ld3MvJyxcbiAgICAgICAgbGl2ZV9hbXBfbmV3czogJ2JiY2NvbS5saXZlLmFtcC5uZXdzLycsXG4gICAgICAgIC8qIFNwb3J0IEFwcCAqL1xuICAgICAgICBsaXZlX3Nwb3J0X2FwcDogJ0JCQ1Nwb3J0QXBwSU9TLycsXG4gICAgICAgIC8qIEVNQkVEIEFkIFVuaXRzICovXG4gICAgICAgIGxpdmVfZW1iZWQ6ICdiYmNjb20uZW1iZWRwbGF5ZXIvJyxcbiAgICAgICAgdGVzdF9lbWJlZDogJ2JiY2NvbS50ZXN0LmVtYmVkcGxheWVyLycsXG4gICAgICAgIC8qIEJCQyBSZWVsICovXG4gICAgICAgIGxpdmVfcmVlbDogJ2JiY2NvbS5saXZlLnNpdGUucmVlbC8nLFxuICAgICAgICB0ZXN0X3JlZWw6ICdiYmNjb20udGVzdC5zaXRlLnJlZWwvJ1xuICAgIH0sXG4gICAgV09STERfU0VSVklDRV9BRF9VTklUX1BSRUZJWCA9IHtcbiAgICAgICAgbGl2ZV9kZXNrdG9wOiAnYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS4nLFxuICAgICAgICB0ZXN0X2Rlc2t0b3A6ICdiYmN3b3JsZHNlcnZpY2UudGVzdC5zaXRlLicsXG4gICAgICAgIGxpdmVfbW9iaWxlOiAnYmJjd3MubGl2ZS5zaXRlLm1vYmlsZS4nLFxuICAgICAgICB0ZXN0X21vYmlsZTogJ2JiY3dzLnRlc3Quc2l0ZS5tb2JpbGUuJ1xuICAgIH0sXG4gICAgV09STERfU0VSVklDRV9BRF9VTklUX1NVRkZJWF9NQVAgPSB7XG4gICAgICAgIGphcGFuZXNlOiAnamFwYW4nXG4gICAgfSxcbiAgICBWRVJUSUNBTFNfQURfVU5JVFNfUFJFRklYID0ge1xuICAgICAgICBsaXZlOiAnYmJjY29tLmxpdmUuc2l0ZS4nLFxuICAgICAgICB0ZXN0OiAnYmJjY29tLnRlc3Quc2l0ZS4nXG4gICAgfSxcbiAgICBBRF9VTklUMl9FWENFUFRJT05TID0ge1xuICAgICAgICAnXlxcL3Nwb3J0XFwvZm9vdGJhbGxcXC90ZWFtc1xcLyhsaXZlcnBvb2x8bWFuY2hlc3Rlci1jaXR5KSc6ICdzcG9ydF9mb290YmFsbCQxX2NvbnRlbnQnLFxuICAgICAgICAnXlxcL25ld3NcXC9lbGVjdGlvblxcL3VzMjAxNic6ICduZXdzX3VzY2FuYWRhX2NvbnRlbnQnXG4gICAgfSxcbiAgICBzZWN0aW9ucyxcbiAgICBhZFNlY3Rpb25zLFxuICAgIHdpbmRvd0xvY2F0aW9uID0gJyc7XG5cblxuLyoqXG4gKiBCYXNlZCBvbiB2aXNpdG9yJ3MgYnJvd3NlciB3aWR0aCwgZGV0ZXJtaW5lIHdoZWh0ZXIgdG8gcmV0dXJuIG1vYmlsZSBvciBkZXNrdG9wIHN1aXRlLlxuICovXG52YXIgYXNzaWduRGZwU3VpdGUgPSBmdW5jdGlvbiAoY2xpZW50V2lkdGgpIHtcbiAgICBpZiAoY2xpZW50V2lkdGggPCBERlBfU1VJVEVfREVWSUNFX1dJRFRIX1NXSVRDSCkge1xuICAgICAgICBkZnBTdWl0ZSA9ICdtb2JpbGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRmcFN1aXRlID0gJ2Rlc2t0b3AnO1xuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSB3b3JsZCBzZXJ2aWNlIHN1ZmZpeCB0byBhZGQgdG8gdGhlIHByaW1hcnkgYWRVbml0LiBCYXNpY2FsbHkgYWRTZWN0aW9uc1swXSBydW4gdGhyb3VnaFxuICogV09STERfU0VSVklDRV9BRF9VTklUX1NVRkZJWF9NQVAgdG8gc2VlIGlmIHRoZXJlIGlzIGFuIG92ZXJyaWRlIGFuZCBzb21lIHNwZWNpYWwgcnVsZXMgZm9yIENoaW5hXG4gKlxuICogZWcgYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS48c3VmZml4Pi9cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG52YXIgZ2V0V29ybGRTZXJ2aWNlQWRVbml0U3VmZml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhZFVuaXRTdWZmaXggPSBXT1JMRF9TRVJWSUNFX0FEX1VOSVRfU1VGRklYX01BUFthZFNlY3Rpb25zWzBdXSB8fCBhZFNlY3Rpb25zWzBdO1xuICAgIGlmIChhZFNlY3Rpb25zWzBdID09PSAnemhvbmd3ZW4nIHx8IGFkU2VjdGlvbnNbMF0gPT09ICd1a2NoaW5hJykge1xuICAgICAgICBhZFVuaXRTdWZmaXggKz0gYWRTZWN0aW9uc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoZGZwU3VpdGUgPT09ICdkZXNrdG9wJyAmJiBhZFVuaXRTdWZmaXggPT09J3J1c3NpYW4nKSB7IC8vQkJDQ09NLTc3MTNcbiAgICAgICAgYWRVbml0U3VmZml4ID0gXCJydXNzaWFcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRVbml0U3VmZml4O1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgQWRVbml0IDFcbiAqIGVnIC80ODE3L2JiY2NvbS5xYS5zaXRlLm1vYmlsZS5uZXdzL3Nwb3J0X2hvbWVwYWdlX2ludFxuICogICAgICAgICAgWyAgICAgIGFkIHVuaXQgMSAgICAgICAgIF0gWyAgICBhZCB1bml0IDIgICBdXG4gKi9cbnZhciBkZXJpdmVBZFVuaXQxID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtRG90UmVnRXhwID0gbmV3IFJlZ0V4cCgnKG0uc3RhZ2UufG0uKWJiYy5jbyhtfG1cXC98LnVrfC51a1xcLyknKSxcbiAgICAgICAgaXNUZXN0RW52ID0gdXRpbHMuaXNUZXN0RW52KCksXG4gICAgICAgIGFkVW5pdE92ZXJyaWRlID0gdXRpbHMuZ2V0VXJpUGFyYW1CeU5hbWUoJ2FkLXVuaXQnLCBmYWxzZSksXG4gICAgICAgIHNpdGVPdmVycmlkZSA9IHV0aWxzLmdldFVyaVBhcmFtQnlOYW1lKCdzaXRlJywgZmFsc2UpLFxuICAgICAgICB1aWRPdmVycmlkZSA9IHV0aWxzLmdldFVyaVBhcmFtQnlOYW1lKCd1aWQnLCBmYWxzZSk7XG5cbiAgICAvLyBVc2VyIG92ZXJyaWRlIGZvciBwcmV2aWV3aW5nIGFuIGFkdmVydCBjcmVhdGl2ZVxuICAgIGlmICh1aWRPdmVycmlkZSkge1xuICAgICAgICBwcmV2aWV3VWlkID0gdWlkT3ZlcnJpZGU7XG4gICAgfVxuICAgIGlmICghdXRpbHMuaXNMaXZlRW52KCkgJiYgYWRVbml0T3ZlcnJpZGUpIHtcbiAgICAgICAgLy8gQWxsb3cgYWQgdW5pdCB0byBiZSBvdmVycmlkZGVuIHVuIHRoZSBVUklcbiAgICAgICAgYWRVbml0ID0gYWRVbml0T3ZlcnJpZGUgKyAnLyc7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2l0ZU92ZXJyaWRlID09PSAncHJldmlldycpIHtcbiAgICAgICAgYWRVbml0ID0gYWxsb3dlZFNpdGVzLnByZXZpZXc7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2l0ZU92ZXJyaWRlICYmIHR5cGVvZihhbGxvd2VkU2l0ZXNbc2l0ZU92ZXJyaWRlXSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIFVzZXIgb3ZlcnJpZGUgb2Ygc2l0ZVxuICAgICAgICBhZFVuaXQgPSBhbGxvd2VkU2l0ZXNbc2l0ZU92ZXJyaWRlXTtcbiAgICAgICAgcXVlcnlTdHJpbmdPdmVycmlkZSA9IHRydWU7XG5cbiAgICB9IGVsc2UgaWYgKHNlY3Rpb25zWzBdID09PSAnd29ybGRzZXJ2aWNlJyAmJiB0eXBlb2YgYWRTZWN0aW9uc1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gV29ybGQgU2VydmljZVxuICAgICAgICAvLyBiYmN3b3JsZHNlcnZpY2UubGl2ZS5zaXRlLjxhZFNlY3Rpb25zWzBdPi8gZWcgYmJjd29ybGRzZXJ2aWNlLmxpdmUuc2l0ZS5hcmFiaWMvXG4gICAgICAgIGFkVW5pdCA9IFdPUkxEX1NFUlZJQ0VfQURfVU5JVF9QUkVGSVhbKGlzVGVzdEVudiA/ICd0ZXN0JyA6ICdsaXZlJykgKyAnXycgKyBkZnBTdWl0ZV0gKyBnZXRXb3JsZFNlcnZpY2VBZFVuaXRTdWZmaXgoKSArICcvJztcblxuICAgIH0gZWxzZSBpZiAoL14oZWFydGgpJC8udGVzdChhZFNlY3Rpb25zWzBdKSkge1xuICAgICAgICAvLyBFYXJ0aFxuICAgICAgICBhZFVuaXQgPSAoaXNUZXN0RW52ID8gYWxsb3dlZFNpdGVzLnRlc3RfZWFydGggOiBhbGxvd2VkU2l0ZXMubGl2ZV9lYXJ0aCk7XG5cbiAgICB9IGVsc2UgaWYgKGlzVGVzdEVudiAmJiB1dGlscy5nZXRDb29raWUoJ2FkLXVuaXQnKSAhPT0gJ2xpdmUnKSB7XG4gICAgICAgIC8vIFZpc2l0b3IgaXMgb24gc2FuZGJveC9pbnQvdGVzdCwgdGhlcmVmb3JlIHNob3cgdGVzdCBhZHZlcnRzIGZyb20gdGVzdCBzaXRlXG4gICAgICAgIGFkVW5pdCA9IChkZnBTdWl0ZSA9PT0gJ2Rlc2t0b3AnID8gYWxsb3dlZFNpdGVzLnRlc3QgOiBhbGxvd2VkU2l0ZXMudGVzdF9tb2JpbGUpO1xuXG4gICAgfSBlbHNlIGlmIChjb25maWcuaXNTcG9ydEFwcCgpKSB7XG4gICAgICAgIC8vIFNwb3J0IE1vYmlsZSBBcHBcbiAgICAgICAgYWRVbml0ID0gYWxsb3dlZFNpdGVzLmxpdmVfc3BvcnRfYXBwO1xuXG4gICAgfSBlbHNlIGlmIChzZWN0aW9uc1swXSA9PT0gJ2hvbWVwYWdlJykge1xuICAgICAgICAvLyBIb21lcGFnZVxuICAgICAgICBhZFVuaXQgPSAoZGZwU3VpdGUgPT09ICdkZXNrdG9wJyA/IGFsbG93ZWRTaXRlcy53d3cgOiBhbGxvd2VkU2l0ZXMud3d3X21vYmlsZSk7XG5cbiAgICB9IGVsc2UgaWYgKC9eKGF1dG9zfGNhcGl0YWx8Y3VsdHVyZXxmdXR1cmV8dHJhdmVsfHdvcmtsaWZlKSQvLnRlc3QoYWRTZWN0aW9uc1swXSkpIHtcbiAgICAgICAgLy8gVmVydGljYWxzXG4gICAgICAgIHZhciBzaXRlID0gYWRTZWN0aW9uc1swXS5yZXBsYWNlKC9hdXRvcy8sICdhdXRvJyk7XG4gICAgICAgIGFkVW5pdCA9IFZFUlRJQ0FMU19BRF9VTklUU19QUkVGSVhbKGlzVGVzdEVudiA/ICd0ZXN0JyA6ICdsaXZlJyldICsgc2l0ZSArICcvJztcblxuICAgIH0gZWxzZSBpZiAobURvdFJlZ0V4cC50ZXN0KHdpbmRvd0xvY2F0aW9uLmhyZWYpKSB7XG4gICAgICAgIC8vIE1vYmlsZSB2cyBEZXNrdG9wXG4gICAgICAgIGFkVW5pdCA9IChkZnBTdWl0ZSA9PT0gJ2Rlc2t0b3AnID8gYWxsb3dlZFNpdGVzLmxpdmUgOiBhbGxvd2VkU2l0ZXMubGl2ZV9tb2JpbGUpO1xuXG4gICAgfSBlbHNlIGlmICgvKC5jb218LmNvLnVrfC5uZXQpXFwvc3BlY2lhbGZlYXR1cmVzXFwvLy50ZXN0KHdpbmRvd0xvY2F0aW9uLmhyZWYpKSB7XG4gICAgICAgIC8vIFNwZWNpYWwgRmVhdHVyZXNcbiAgICAgICAgYWRVbml0ID0gKGRmcFN1aXRlID09PSAnZGVza3RvcCcgPyBhbGxvd2VkU2l0ZXMuc3BlY2lhbHMgOiBhbGxvd2VkU2l0ZXMuc3BlY2lhbHNfbW9iaWxlKTtcblxuICAgIH0gZWxzZSBpZiAoL1xcL2VtYmVkJC8udGVzdCh3aW5kb3dMb2NhdGlvbi5wYXRobmFtZSkpIHtcbiAgICAgICAgLy8gRW1iZWQgdmlkZW9cbiAgICAgICAgYWRVbml0ID0gKGlzVGVzdEVudiA/IGFsbG93ZWRTaXRlcy50ZXN0X2VtYmVkIDogYWxsb3dlZFNpdGVzLmxpdmVfZW1iZWQpO1xuXG4gICAgfWVsc2UgaWYgKC8oLmNvbXwuY28udWspXFwvcmVlbC8udGVzdCh3aW5kb3dMb2NhdGlvbi5ocmVmKSkgIHtcbiAgICAgICAgLy8gUmVlbFxuICAgICAgICBhZFVuaXQgPSAoaXNUZXN0RW52ID8gYWxsb3dlZFNpdGVzLnRlc3RfcmVlbCA6IGFsbG93ZWRTaXRlcy5saXZlX3JlZWwpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRGVmYXVsdCBzaXRlIChuZWVkcyB0byBiZSB0aGUgcmlnaHQgZGVmYXVsdCBmb3IgbW9iaWxlL2Rlc2t0b3AgYmFzZWQgb24gd2lkdGgpXG4gICAgICAgIGFkVW5pdCA9IChkZnBTdWl0ZSA9PT0gJ21vYmlsZScgPyBhbGxvd2VkU2l0ZXMubGl2ZV9tb2JpbGUgOiBBRF9VTklUX0RFRkFVTFQpO1xuXG4gICAgfVxufTtcblxuLyoqXG4gKiBVc2luZyB0aGUgY3VycmVudCBwYWdlLCBkZXRlcm1pbmUgd2hhdCB0aGUgem9uZSBzaG91bGQgYmUuICBVc2VzIHNlY3Rpb25zIHRvIGJyZWFrXG4gKiBkb3duIHRoZSBwYXRoIG9mIHRoZSBVcmkgaW50byBsb2dpY2FsIHNlY3Rpb25zLlxuICovXG52YXIgZGVyaXZlQWRVbml0MnRvOUZyb21VcmkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIHBhdHRlcm4sXG4gICAgICAgIHJlLFxuICAgICAgICBvdXQgPSBBRF9VTklUXzJfREVGQVVMVCxcbiAgICAgICAgdXJsUGF0aCA9ICcvJyArIGFkU2VjdGlvbnMuam9pbignLycpO1xuXG4gICAgaWYgKHR5cGVvZiBhZFNlY3Rpb25zICE9PSAndW5kZWZpbmVkJyAmJiBhZFNlY3Rpb25zLmxlbmd0aCAhPT0gMCAmJiBhZFNlY3Rpb25zWzBdICE9PSBVTktOT1dOKSB7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlIGFsbCBzZWN0aW9uIHBhcnRzIGFyZSBkZWZpbmVkIChtYWtlIGVtcHR5IGlmIG5vdClcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICAgICAgYWRTZWN0aW9uc1tpXSA9ICh0eXBlb2YgYWRTZWN0aW9uc1tpXSA9PT0gJ3VuZGVmaW5lZCcgPyAnJyA6IGFkU2VjdGlvbnNbaV0pO1xuICAgICAgICAgICAgc2VjdGlvbnNbaV0gPSAodHlwZW9mIHNlY3Rpb25zW2ldID09PSAndW5kZWZpbmVkJyA/ICcnIDogc2VjdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFZlcnkgU3BlY2lmaWMgRXhjZXB0aW9uc1xuICAgICAgICBmb3IgKHBhdHRlcm4gaW4gQURfVU5JVDJfRVhDRVBUSU9OUykge1xuICAgICAgICAgICAgcmUgPSBuZXcgUmVnRXhwKHBhdHRlcm4pO1xuICAgICAgICAgICAgaWYgKHJlLnRlc3QodXJsUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3VuZCBwYXR0ZXJuIG1hdGNoXG4gICAgICAgICAgICAgICAgLy8gZWcge1wiXFwvc3BvcnRcXC9mb290YmFsbFxcLyhoZWxsb3x3b3JsZClcIjogXCJzcG9ydF9mb290YmFsbCQxX2NvbnRlbnRcIn0gPT4gXCJzcG9ydF9mb290YmFsbGhlbGxvX2NvbnRlbnRcIlxuICAgICAgICAgICAgICAgIG91dCA9IEFEX1VOSVQyX0VYQ0VQVElPTlNbcGF0dGVybl0ucmVwbGFjZSgnJDEnLCBSZWdFeHAuJDEpLnJlcGxhY2UoJyQyJywgUmVnRXhwLiQyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBCcm9hZCBFeGNlcHRpb25zXG4gICAgICAgIGlmIChvdXQgPT09IEFEX1VOSVRfMl9ERUZBVUxUKSB7XG4gICAgICAgICAgICBpZiAoYWRTZWN0aW9uc1swXSA9PT0gJ2hvbWVwYWdlJykge1xuICAgICAgICAgICAgICAgIC8vIEJCQyBIb21lcGFnZSBlZyB3d3cuYmJjLmNvbS9cbiAgICAgICAgICAgICAgICBvdXQgPSAnYmJjX2hvbWVwYWdlX2ludCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkU2VjdGlvbnNbMF0gPT09ICdyZWVsJykge1xuICAgICAgICAgICAgICAgIG91dCA9IChhZFNlY3Rpb25zWzFdID09PSAnJykgPyAncmVlbF9ob21lcGFnZSc6ICdyZWVsX290aGVyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRTZWN0aW9uc1sxXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAvLyBGcm9udHBhZ2UgLSBOZXdzL1Nwb3J0L1dlYXRoZXIvYmxhaCBlZyBuZXdzX2hvbWVwYWdlX2ludFxuICAgICAgICAgICAgICAgIG91dCA9IGFkU2VjdGlvbnNbMF0gKyAnX2hvbWVwYWdlX2ludCc7XG4gICAgICAgICAgICAgICAgYWRTZWN0aW9uc1sxXSA9ICdob21lcGFnZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkU2VjdGlvbnNbMF0gPT09ICduZXdzJyAmJiBzZWN0aW9uc1sxXSA9PT0gJ3dvcmxkJyAmJiBzZWN0aW9uc1syXSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICAvLyAvbmV3cy93b3JsZCBjb21wbGljYXRpb25zIC0gTk9URSBhZFNlY3Rpb25zIHZzIHNlY3Rpb25zXG4gICAgICAgICAgICAgICAgLy8gZWcgc2VjdGlvbnM9L25ld3Mvd29ybGQvYXNpYS9pbmRpYSBhbmQgYWRTZWN0aW9ucz0vbmV3cy93b3JsZGFzaWEvaW5kaWEgPT4gbmV3c19hc2lhX2NvbnRlbnQgd2l0aCBzZWN0bj1pbmRpYVxuICAgICAgICAgICAgICAgIG91dCA9IGFkU2VjdGlvbnNbMF0gKyAnXycgKyBzZWN0aW9uc1syXSArICdfY29udGVudCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFkU2VjdGlvbnNbMF0gPT09ICdzcGVjaWFsZmVhdHVyZXMnKSB7XG4gICAgICAgICAgICAgICAgLy8gU3BlY2lhbHMgZWcgaG9yaXpvbnNidXNpbmVzc19ob21lLCBob3Jpem9uc2J1c2luZXNzX2VwaXNvZGVzXG4gICAgICAgICAgICAgICAgLy8gZWcgL3NwZWNpYWxmZWF0dXJlcy9ob3Jpem9uc2J1c2luZXNzL1xuICAgICAgICAgICAgICAgIG91dCA9IGFkU2VjdGlvbnNbMV0gKyAnXycgKyAoYWRTZWN0aW9uc1syXSA9PT0gJycgPyAnaG9tZScgOiBhZFNlY3Rpb25zWzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRTZWN0aW9uc1swXSA9PT0gJ3pob25nd2VuJyB8fCBhZFNlY3Rpb25zWzBdID09PSAndWtjaGluYScpIHtcbiAgICAgICAgICAgICAgICAvLyBlLmcuIGh0dHA6Ly93d3cuYmJjLmNvbS96aG9uZ3dlbi90cmFkL3dvcmxkID4gemhvbmd3ZW50cmFkX3dvcmxkX2NvbnRlbnRcbiAgICAgICAgICAgICAgICBvdXQgPSBhZFNlY3Rpb25zWzBdICsgYWRTZWN0aW9uc1sxXSArICdfJyArIChhZFNlY3Rpb25zWzJdID09PSAnJyA/ICdob21lJyA6IGFkU2VjdGlvbnNbMl0pICsgJ19jb250ZW50JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gU3RhbmRhcmRcbiAgICAgICAgICAgICAgICAvLyBlZyAvbmV3cy9idXNpbmVzc1xuICAgICAgICAgICAgICAgIG91dCA9IGFkU2VjdGlvbnNbMF0gKyAnXycgKyBhZFNlY3Rpb25zWzFdICsgJ19jb250ZW50JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlWYWx1ZXMuc2V0KENIQU5ORUxfS0VZLCBhZFNlY3Rpb25zWzBdKTtcbiAgICAgICAga2V5VmFsdWVzLnNldChTRUNUSU9OX0tFWSwgYWRTZWN0aW9uc1sxXSk7XG4gICAgICAgIGtleVZhbHVlcy5zZXQoU1VCX1NFQ1RJT05fS0VZLCBhZFNlY3Rpb25zWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dC5yZXBsYWNlKC8tLywgJycpO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgQWRVbml0IDIgdG8gOVxuICogZWcgLzQ4MTcvYmJjY29tLnFhLnNpdGUubW9iaWxlLm5ld3Mvc3BvcnRfaG9tZXBhZ2VfaW50XG4gKiAgICAgICAgICBbICAgICAgYWQgdW5pdCAxICAgICAgICAgXSBbICAgIGFkIHVuaXQgMiAgIF1cbiAqL1xudmFyIGRlcml2ZUFkVW5pdDJ0bzkgPSBmdW5jdGlvbiAoc2VydmVyc2lkZUFkVW5pdHMydG85KSB7XG4gICAgaWYgKHR5cGVvZiBzZXJ2ZXJzaWRlQWRVbml0czJ0bzkgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VydmVyc2lkZUFkVW5pdHMydG85ID09PSAnZnJhbWV3b3Jrc19iYXJsZXNxdWUnKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5wcm9jZXNzWm9uZURhdGEod2luZG93TG9jYXRpb24ucGF0aG5hbWUsIGFkVW5pdFdlYlNlcnZpY2Uuem9uZXMpO1xuICAgICAgICBhZFVuaXRzMnRvOSA9IGRhdGEuem9uZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZXJ2ZXJzaWRlQWRVbml0czJ0bzkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFkVW5pdHMydG85ID0gc2VydmVyc2lkZUFkVW5pdHMydG85O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFkVW5pdHMydG85ID0gZGVyaXZlQWRVbml0MnRvOUZyb21VcmkoKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiAoY2xpZW50V2lkdGgsIHNlcnZlcnNpZGVBZFVuaXRzMnRvOSwgYWRTZWN0aW9uc0FycmF5LCBzZWN0aW9uc0FycmF5KSB7XG4gICAgICAgIHdpbmRvd0xvY2F0aW9uID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCk7XG4gICAgICAgIHNlY3Rpb25zID0gc2VjdGlvbnNBcnJheTtcbiAgICAgICAgYWRTZWN0aW9ucyA9IGFkU2VjdGlvbnNBcnJheTtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGllbnRXaWR0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgYXNzaWduRGZwU3VpdGUoY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICAgIGRlcml2ZUFkVW5pdDEoKTtcbiAgICAgICAgZGVyaXZlQWRVbml0MnRvOShzZXJ2ZXJzaWRlQWRVbml0czJ0bzkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjdXN0b21BZFVuaXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gREZQX0lEICsgYWRVbml0ICsgYWRVbml0czJ0bzk7XG4gICAgICAgIH0gZWxzZSBpZiAocXVlcnlTdHJpbmdPdmVycmlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIERGUF9JRCArIGFkVW5pdCArIChjdXN0b21BZFVuaXQuaW5kZXhPZignLycpICE9PSAtMSA/IGN1c3RvbUFkVW5pdC5zcGxpdCgnLycpWzFdIDogJy8nICsgQURfVU5JVF8yX0RFRkFVTFQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERGUF9JRCArIGN1c3RvbUFkVW5pdCArIChjdXN0b21BZFVuaXQuaW5kZXhPZignLycpICE9PSAtMSA/ICcnIDogJy8nICsgQURfVU5JVF8yX0RFRkFVTFQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXRVaWQ6IGZ1bmN0aW9uIChvdmVycmlkZVVpZCkge1xuICAgICAgICBwcmV2aWV3VWlkID0gb3ZlcnJpZGVVaWQ7XG4gICAgfSxcbiAgICBzZXRBZFVuaXQ6IGZ1bmN0aW9uIChvdmVycmlkZUFkVW5pdCkge1xuICAgICAgICBpZiAodHlwZW9mIG92ZXJyaWRlQWRVbml0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YoYWxsb3dlZFNpdGVzW292ZXJyaWRlQWRVbml0XSkpIHtcbiAgICAgICAgICAgICAgICBhZFVuaXQgPSBhbGxvd2VkU2l0ZXNbb3ZlcnJpZGVBZFVuaXRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKC8oYmJjY29tXFwuKHRlc3R8bGl2ZSlcXC5zaXRlfGJiY2VhcnRoXFwuY29tfGJiY2VhcnRoXFwudGVzdFxcLmNvbSkvLnRlc3Qob3ZlcnJpZGVBZFVuaXQpKSB7XG4gICAgICAgICAgICAgICAgY3VzdG9tQWRVbml0ID0gb3ZlcnJpZGVBZFVuaXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGdldFByZXZpZXdVaWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByZXZpZXdVaWQ7XG4gICAgfSxcbiAgICBnZXRBZFVuaXQxOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhZFVuaXQuZW5kc1dpdGgoJy8nKSA/IGFkVW5pdC5zdWJzdHIoMCwgYWRVbml0Lmxlbmd0aCAtIDEpIDogYWRVbml0O1xuICAgIH0sXG4gICAgZ2V0QWRVbml0czJ0bzk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFkVW5pdHMydG85O1xuICAgIH0sXG4gICAgLypcbiAgICAgKiBOT1RFIC0gVGhpcyBsb2dpYyBpcyBvbmx5IGhlcmUgZm9yIHNpdGVzIHRoYXQgYXJlIHNlcnZlZCBvZiBDRE5cbiAgICAgKiBUT0RPIC0gUmVuYW1lIHZhcnMgZnJvbSB6b25lIHRvIGFkVW5pdCAoTmV3IHRlcm1pbm9sb2d5KVxuICAgICAqL1xuICAgIHByb2Nlc3Nab25lRGF0YTogZnVuY3Rpb24gKGhyZWYsIHpvbmUpIHtcbiAgICAgICAgdmFyIHgsIHo7XG4gICAgICAgIGlmICgoJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB6b25lLnVyaSB8fCAtMSAhPT0gaHJlZi5pbmRleE9mKHpvbmUudXJpKSkgJiYgJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB6b25lLmRhdGEpIHtcbiAgICAgICAgICAgIGZvciAoeCBpbiB6b25lLmRhdGEpIHtcbiAgICAgICAgICAgICAgICB6b25lRGF0YVt4XSA9IHpvbmUuZGF0YVt4XTtcbiAgICAgICAgICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB6b25lLnpvbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoeiBpbiB6b25lLnpvbmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiB6b25lLnpvbmVzW3pdLnVyaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWYgPSBocmVmLnJlcGxhY2Uoem9uZS51cmksICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1pvbmVEYXRhKGhyZWYsIHpvbmUuem9uZXNbel0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB6b25lRGF0YTtcbiAgICB9LFxuICAgIC8qXG4gICAgICogRm9yIHRlc3Rpbmcgb25seSwgbWF5IGxvb2sgYXQgbmV3aW5nIHVwIGEgbmV3IG9iamVjdCBlYWNoIHRpbWUuXG4gICAgICovXG4gICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB3aW5kb3dMb2NhdGlvbiA9ICcnO1xuICAgICAgICBhZFVuaXQgPSBBRF9VTklUX0RFRkFVTFQ7XG4gICAgICAgIGFkVW5pdHMydG85ID0gQURfVU5JVF8yX0RFRkFVTFQ7XG4gICAgICAgIGRmcFN1aXRlID0gREZQX1NVSVRFX0RFRkFVTFQ7XG4gICAgICAgIGN1c3RvbUFkVW5pdCA9IGZhbHNlO1xuICAgICAgICBwcmV2aWV3VWlkID0gZmFsc2U7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT3ZlcnJpZGUgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRVbml0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgem9uZXM6e1xuICAgICAgICBkYXRhOntcbiAgICAgICAgICAgIHVyaTpcIi9cIixcbiAgICAgICAgICAgIHNpdGU6XCJiYmNjb20ubGl2ZS5zaXRlLm1vYmlsZS5uZXdzXCIsXG4gICAgICAgICAgICB6b25lOlwiXCJcbiAgICAgICAgfSxcbiAgICAgICAgem9uZXM6W1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVyaTpcInNwZWNpYWxmZWF0dXJlcy9cIixcbiAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgem9uZTpcIm5ld3Nfc3BlY2lhbGZlYXR1cmVzX2NvbnRlbnRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9uZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwiaG9yaXpvbnNidXNpbmVzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZTpcImhvcml6b25zYnVzaW5lc3NfaG9tZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZXM6W1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwiL21lZ2F0cmVuZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmU6XCJob3Jpem9uc2J1c2luZXNzX290aGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmk6XCIvY2xpcHMtbGlicmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmU6XCJob3Jpem9uc2J1c2luZXNzX2NsaXBzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmk6XCIvZXBpc29kZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lOlwiaG9yaXpvbnNidXNpbmVzc19lcGlzb2Rlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwiL2VwaXNvZGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTp7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lOlwiaG9yaXpvbnNidXNpbmVzc19lcGlzb2RlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdXJpOlwid3dzY3JpcHRzL1wiLFxuICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICB6b25lOlwid3dzY3JpcHRzX2NvbnRlbnRcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9uZXM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwidGVzdC9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmU6XCJ3d3NjcmlwdHNfdGVzdF9jb250ZW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJpOlwib3JiLXdlYi1zZXJ2aWNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZTpcInd3c2NyaXB0c190ZXN0X29yYndlYnNlcnZpY2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFVuaXRXZWJTZXJ2aWNlLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWRJRCwgZ3JvdXBzKSB7XG5cbiAgICB2YXIgYWQsXG4gICAgICAgIHNsb3QsXG4gICAgICAgIHNsb3REb21DaGlsZEVsZW1lbnQ7XG5cbiAgICB2YXIgY3VycmVudEdyb3VwSWQgPSBiYmNkb3Rjb20uYWR2ZXJ0cy5sYXlvdXQuZ2V0Q3VycmVudEdyb3VwSWQoKTtcblxuICAgIGlmICh3aW5kb3cuYmJjZG90Y29tICYmIGJiY2RvdGNvbS5hZCAmJiBiYmNkb3Rjb20uaXNBY3RpdmUgJiYgYmJjZG90Y29tLmlzQWN0aXZlKCdhZHMnKSkge1xuICAgICAgICBhZCA9IGJiY2RvdGNvbS5hZChhZElEKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZCAhPT0gJ3VuZGVmaW5lZCcgJiYgIWFkLmhhc0FueUdyb3VwQWxyZWFkeUJlZW5SZWdpc3RlcmVkKFtncm91cHNdKSkge1xuICAgICAgICAgICAgYWQucmVnaXN0ZXJTbG90R3JvdXBzKGdyb3Vwcyk7XG4gICAgICAgICAgICBpZiAoZ3JvdXBzLmluZGV4T2YoY3VycmVudEdyb3VwSWQpID49IDApIHtcblxuICAgICAgICAgICAgICAgIGFkLnNldEN1cnJlbnRTbG90R3JvdXBzKGdyb3Vwcyk7XG5cbiAgICAgICAgICAgICAgICBzbG90ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV8nICsgYWQuZ2V0QWRJZCgpICsgJ18nICsgZ3JvdXBzLmpvaW4oJ18nKSk7XG4gICAgICAgICAgICAgICAgc2xvdERvbUNoaWxkRWxlbWVudCA9IChzbG90LmZpcnN0RWxlbWVudENoaWxkIHx8IHNsb3QuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgaWYgKHNsb3REb21DaGlsZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc2xvdERvbUNoaWxkRWxlbWVudC5pZCA9ICdiYmNjb21fJyArIGFkLmdldEFkSWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLnV0aWxzLmFkZFRhZ0NsYXNzKHNsb3QsICdiYmNjb21fJyArIGFkLmFkVHlwZSArICdfc2xvdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvc2xvdERlZmVycmVkLmpzIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ3V0aWxzJyk7XG52YXIgQW5hbHl0aWNzSGVscGVyID0gcmVxdWlyZSgnYW5hbHl0aWNzL2hlbHBlcicpO1xuXG5mdW5jdGlvbiBnZXREZXByZWNhdGVkU2xvdExpc3QoKXtcbiAgICB2YXIgd2luZG93TG9jYXRpb24gPSBjb25maWcuZ2V0V2luZG93TG9jYXRpb24oKSxcbiAgICAgICAgc2VjdGlvbiA9IHNlY3Rpb25zLmdldFNlY3Rpb24oMCksXG4gICAgICAgIGluZGV4ID0gc2VjdGlvbnMuZ2V0U2VjdGlvbigxKSxcbiAgICAgICAgc3ViX2luZGV4ID0gc2VjdGlvbnMuZ2V0U2VjdGlvbigyKSxcbiAgICAgICAgc3ViX3NlY3Rpb24gPSBzZWN0aW9uKyd8JytpbmRleCxcbiAgICAgICAgb3V0ID0gWydpbnJlYWQnLCAnaW5mZWVkX3Nwb3J0X3N0b3J5JywgJ2luZmVlZF9zcG9ydF9pbmRleCcsICdpbmZlZWRfc3BvcnRfZnAnLCAnaW5mZWVkX2N0cCcsICduYXRpdmVfY3RwJ10sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCQkNDT00tNzk4NSwgR05MQURBUFBTLTEwNlxuICAgICAgICAgKi9cbiAgICAgICAgb3V0QnlTZWN0aW9uID0ge1xuICAgICAgICAgICAgJ3dvcmxkc2VydmljZSc6IFsnc3BvbnNvcl9zZWN0aW9uJywgJ21wdV9ib3R0b20nXSxcbiAgICAgICAgICAgICdob21lcGFnZSc6IFsnbW9kdWxlX2ZlYXR1cmUtMicsICdwYXJhbGxheCddLFxuICAgICAgICAgICAgJ3RyYXZlbCc6IFsncmVzcG9uc2l2ZV9ib3hfMScsICdwcm9tb19mZWF0dXJlX3Jlc3BvbnNpdmUnLCAncHJvbW9fZmVhdHVyZV8xJywgJ3Byb21vX2ZlYXR1cmVfMicsICdwcm9tb19mZWF0dXJlXzMnLCAnYWRfZmVhdHVyZV9yYycsICduYXRpdmVfcmVzcG9uc2l2ZSddLFxuICAgICAgICAgICAgJ2Z1dHVyZSc6IFsncmVzcG9uc2l2ZV9ib3hfMScsICdwcm9tb19mZWF0dXJlX3Jlc3BvbnNpdmUnLCAncHJvbW9fZmVhdHVyZV8xJywgJ3Byb21vX2ZlYXR1cmVfMicsICdwcm9tb19mZWF0dXJlXzMnLCAnYWRfZmVhdHVyZV9yYyddLFxuICAgICAgICAgICAgJ3dvcmtsaWZlJzogWydyZXNwb25zaXZlX2JveF8xJywgJ3Byb21vX2ZlYXR1cmVfcmVzcG9uc2l2ZScsICdwcm9tb19mZWF0dXJlXzEnLCAncHJvbW9fZmVhdHVyZV8yJywgJ3Byb21vX2ZlYXR1cmVfMycsICdhZF9mZWF0dXJlX3JjJ10sXG4gICAgICAgICAgICAnZWFydGgnOiBbJ3BhcmFsbGF4JywgJ3ZlcnRpY2FsbmF2YmFyJywgJ3Nwb25zb3Jfc2VjdGlvbicsICdyZXNwb25zaXZlX2JveF8xJywgJ3Byb21vX2ZlYXR1cmVfMScsICdwcm9tb19mZWF0dXJlXzInLCAncHJvbW9fZmVhdHVyZV8zJywgJ2FkX2ZlYXR1cmVfcmMnLCAnbmF0aXZlX3NpZGUnXSxcbiAgICAgICAgICAgICdjdWx0dXJlJzogWydwcm9tb19mZWF0dXJlX3Jlc3BvbnNpdmUnLCAncHJvbW9fZmVhdHVyZV8xJywgJ3Byb21vX2ZlYXR1cmVfMicsICdwcm9tb19mZWF0dXJlXzMnLCAnYWRfZmVhdHVyZV9yYyddLFxuICAgICAgICAgICAgJ2NhcGl0YWwnOiBbJ3Jlc3BvbnNpdmVfYm94XzEnLCAncHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlJywgJ3Byb21vX2ZlYXR1cmVfMScsICdwcm9tb19mZWF0dXJlXzInLCAncHJvbW9fZmVhdHVyZV8zJywgJ2FkX2ZlYXR1cmVfcmMnXSxcbiAgICAgICAgICAgICdhdXRvcyc6IFsncGFyYWxsYXgnLCAndmVydGljYWxuYXZiYXInLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Jlc3BvbnNpdmVfYm94XzEnLCAncHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlJywgJ3Byb21vX2ZlYXR1cmVfMScsICdwcm9tb19mZWF0dXJlXzInLCAncHJvbW9fZmVhdHVyZV8zJywgJ2FkX2ZlYXR1cmVfcmMnXSxcbiAgICAgICAgICAgICduZXdzJzogWydzcG9uc29yJywgJ3Nwb25zb3Jfc2VjdGlvbicsICdzcG9uc29yX2Jhbm5lcicsICdtb2R1bGUnLCAnbmF0aXZlX3NsaWNlX3InXSxcbiAgICAgICAgICAgICdzcG9ydCc6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnd29ybGRzZXJ2aWNlfHBlcnNpYW4nOiBbJ2Fkc2Vuc2UnXSxcbiAgICAgICAgICAgICd3b3JsZHNlcnZpY2V8c3dhaGlsaSc6IFsnYWRzZW5zZSddLFxuICAgICAgICAgICAgJ25ld3N8ZW50ZXJ0YWlubWVudC1hcnRzJzogWydhZHNlbnNlJywgJ291dGJyYWluJywgJ291dGJyYWluX3RyXzEnLCAnb3V0YnJhaW5fYXJfNScsICdvdXRicmFpbl9hcl83JywgJ291dGJyYWluX2FyXzgnLCAnb3V0YnJhaW5fYXJfOSddXG4gICAgICAgIH0sXG4gICAgICAgIGV4Y2VwdGlvbnNCeVNlY3Rpb24gPSB7XG4gICAgICAgICAgICAnbmV3c3xidXNpbmVzcyc6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnbmV3c3x0ZWNobm9sb2d5JzogWydzcG9uc29yJywgJ3Nwb25zb3Jfc2VjdGlvbicsICdzcG9uc29yX2Jhbm5lcicsICdtb2R1bGUnXSxcbiAgICAgICAgICAgICduZXdzfHJlc291cmNlcyc6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnc3BvcnR8Z29sZic6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnc3BvcnR8dGVubmlzJzogWydzcG9uc29yJywgJ3Nwb25zb3Jfc2VjdGlvbicsICdzcG9uc29yX2Jhbm5lcicsICdtb2R1bGUnXSxcbiAgICAgICAgICAgICdzcG9ydHxmb290YmFsbCc6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnc3BvcnR8Zm9ybXVsYTEnOiBbJ3Nwb25zb3InLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Nwb25zb3JfYmFubmVyJywgJ21vZHVsZSddLFxuICAgICAgICAgICAgJ3Nwb3J0fGVxdWVzdHJpYW4nOiBbJ3Nwb25zb3InLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Nwb25zb3JfYmFubmVyJywgJ21vZHVsZSddLFxuICAgICAgICAgICAgJ3Nwb3J0fGhvcnNlLXJhY2luZyc6IFsnc3BvbnNvcicsICdzcG9uc29yX3NlY3Rpb24nLCAnc3BvbnNvcl9iYW5uZXInLCAnbW9kdWxlJ10sXG4gICAgICAgICAgICAnc3BvcnR8b2x5bXBpY3MnOiBbJ3Nwb25zb3InLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Nwb25zb3JfYmFubmVyJywgJ21vZHVsZSddLFxuICAgICAgICAgICAgJ3Nwb3J0fG1vdmUtbGlrZS1uZXZlci1iZWZvcmUnOiBbJ3Nwb25zb3InLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Nwb25zb3JfYmFubmVyJywgJ21vZHVsZSddLFxuICAgICAgICAgICAgJ3Nwb3J0fGhvbWUtb2YtdGhlLWVuZ2xpc2gtcHJlbWllci1sZWFndWUnOiBbJ3Nwb25zb3InLCAnc3BvbnNvcl9zZWN0aW9uJywgJ3Nwb25zb3JfYmFubmVyJywgJ21vZHVsZSddXG4gICAgICAgIH07XG5cbiAgICBpZiggY29uZmlnLmlzVGxTcG9ydFN0b3J5RW5hYmxlZCgpICl7XG4gICAgICAgIG91dCA9IG91dC5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPT0gJ2luZmVlZF9zcG9ydF9zdG9yeSc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiggY29uZmlnLmlzVGxTcG9ydEluZGV4RW5hYmxlZCgpICl7XG4gICAgICAgIG91dCA9IG91dC5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPT0gJ2luZmVlZF9zcG9ydF9pbmRleCc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiggY29uZmlnLmlzVGxTcG9ydEZwRW5hYmxlZCgpICl7XG4gICAgICAgIG91dCA9IG91dC5maWx0ZXIoZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPT0gJ2luZmVlZF9zcG9ydF9mcCc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZigvdGVzdGN0cC9pLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpKXtcbiAgICAgICAgb3V0ID0gb3V0LmZpbHRlcihmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICE9PSAnaW5mZWVkX2N0cCc7XG4gICAgICAgIH0pO1xuICAgICAgICBvdXQgPSBvdXQuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgIT09ICduYXRpdmVfY3RwJztcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQkJDQ09NLTgwMTI6IFRoaXMgcGFnZSB1c2VzIGxpdmUgc3RyZWFtLCBzaG91bGRuJ3QgaW5jbHVkZSAnbXB1JyBpbiBhZHNUb0Rpc3BsYXlcbiAgICAgKi9cbiAgICBpZigvXlxcL25ld3NcXC93b3JsZFxcL3VzX2FuZF9jYW5hZGFcXC9zdGF0ZXMvLnRlc3Qod2luZG93TG9jYXRpb24ucGF0aG5hbWUpKXtcbiAgICAgICAgb3V0LnB1c2goJ21wdScpO1xuICAgIH1cblxuICAgIGlmKG91dEJ5U2VjdGlvbltzZWN0aW9uXSkge1xuICAgICAgICBvdXQgPSBvdXQuY29uY2F0KG91dEJ5U2VjdGlvbltzZWN0aW9uXSk7XG4gICAgfVxuICAgIGlmKG91dEJ5U2VjdGlvbltzdWJfc2VjdGlvbl0pIHtcbiAgICAgICAgb3V0ID0gb3V0LmNvbmNhdChvdXRCeVNlY3Rpb25bc3ViX3NlY3Rpb25dKTtcbiAgICB9XG4gICAgaWYoZXhjZXB0aW9uc0J5U2VjdGlvbltzdWJfc2VjdGlvbl0pIHtcbiAgICAgICAgb3V0ID0gb3V0LmZpbHRlcihmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgIHJldHVybiAhZXhjZXB0aW9uc0J5U2VjdGlvbltzdWJfc2VjdGlvbl0uaW5jbHVkZXMoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKlxuICAgICAqIEdOTEFEQVBQUy0xODNcbiAgICAgKi9cbiAgICBpZigoJ2Z1dHVyZS9lYXJ0aC9jdWx0dXJlL2NhcGl0YWwvYXV0b3Mvd29ya2xpZmUnKS5pbmRleE9mKHNlY3Rpb24pICE9PSAtMSl7XG4gICAgICAgIGlmKC8oXFwvc3RvcnlcXC8pKFxcZHs4fSkoLSkvLnRlc3Qod2luZG93TG9jYXRpb24ucGF0aG5hbWUpICl7XG4gICAgICAgICAgICBvdXQucHVzaCgnbmF0aXZlX3Jlc3BvbnNpdmUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dC5wdXNoKCduYXRpdmVfc2lkZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmKCAhKHNlY3Rpb24gPT09ICduZXdzJyAmJiBBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKSA9PT0gJ1NUT1JZJykgJiYgc2VjdGlvbiAhPT0gJ2hvbWVwYWdlJyApe1xuICAgICAgICBvdXQucHVzaCgnbmF0aXZlJyk7XG4gICAgfVxuICAgIGlmKCAhY29uZmlnLmlzUGxhdGludW1FbmFibGVkKCkgKXtcbiAgICAgICAgb3V0LnB1c2goJ3BsYXRpbnVtJyk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBHTkxBREFQUFMtMjE5LCBHTkxBREFQUFMtMjIwXG4gICAgICovXG4gICAgaWYoIHN1Yl9zZWN0aW9uID09PSAnbmV3c3x0aGUtcmVwb3J0ZXJzJyB8fCBzdWJfc2VjdGlvbiA9PT0gJ25ld3N8c3BlY2lhbC1yZXBvcnRzJyB8fCAoc3ViX3NlY3Rpb24gPT09ICduZXdzfHdvcmxkJyAmJiBzdWJfaW5kZXggPT09ICdyYWRpby10dicpKXtcbiAgICAgICAgb3V0LnB1c2goJ2luZmVlZF9uZXdzX2luZGV4Jyk7XG4gICAgICAgIG91dC5wdXNoKCduYXRpdmVfc2xpY2VfbCcpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIE5vIGludGVyc3RpdGlhbCBvbiBTcG9ydCBBcHAsIEF1dG9zLCBXb3JsZHNlcnZpY2UgZXhjZXB0IFN0b3J5IHBhZ2VzIG9uIEFyYWJpY3xKYXBhbnxNdW5kb3xCcmFzaWxcbiAgICAgKi9cbiAgICBpZiggY29uZmlnLmlzU3BvcnRBcHAoKSB8fCBzZWN0aW9uID09PSAnYXV0b3MnIHx8IChzZWN0aW9uID09PSAnamFwYW4nICYmIEFuYWx5dGljc0hlbHBlci5nZXRQYWdlVHlwZSgpICE9PSAnU1RPUlknKSB8fCAoc2VjdGlvbiA9PT0gJ3dvcmxkc2VydmljZScgJiYgKEFuYWx5dGljc0hlbHBlci5nZXRQYWdlVHlwZSgpICE9PSAnU1RPUlknIHx8IChBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKSA9PT0gJ1NUT1JZJyAmJiBcImFyYWJpY3xtdW5kb3xwb3J0dWd1ZXNlfGphcGFuZXNlXCIuaW5kZXhPZihpbmRleCkgPT09IC0xKSkpKXtcbiAgICAgICAgb3V0LnB1c2goJ2ludGVyc3RpdGlhbCcpO1xuICAgIH1cblxuICAgIGlmKCBBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKSA9PT0gJ1ZJREVPJyAmJiBzZWN0aW9uID09PSAnc3BvcnQnICl7XG4gICAgICAgIG91dC5wdXNoKCdsZWFkZXJib2FyZCcpO1xuICAgIH1cblxuICAgIC8vIEdvb2dsZSBuYXRpdmUgdGVzdFxuICAgIGlmICggdXRpbHMuaXNUZXN0RW52KCkgJiYgL1s/fCZdZ29vZ2xlbmF0aXZlLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSAmJiBBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKSA9PT0gJ1NUT1JZJykge1xuICAgICAgICBvdXQucHVzaCgnbXB1Jyk7XG4gICAgICAgIG91dC5wdXNoKCdsZWFkZXJib2FyZCcpO1xuICAgIH1cblxuICAgIC8vIEdvb2dsZSBuYXRpdmUgdGVzdFxuICAgIGlmICggdXRpbHMuaXNUZXN0RW52KCkgJiYgL1s/fCZdZ29vZ2xlbmF0aXZlLy50ZXN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKSAmJiBBbmFseXRpY3NIZWxwZXIuZ2V0UGFnZVR5cGUoKSA9PT0gJ0lOREVYJyApIHtcbiAgICAgICAgb3V0LnB1c2goJ21wdScpO1xuICAgICAgICBvdXQucHVzaCgnbGVhZGVyYm9hcmQnKTtcbiAgICB9XG5cbiAgICBpZiggc2VjdGlvbiA9PT0gJ25ld3MnICYmIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbHVtbi0tc2luZ2xlLWNvbHVtbi1sYXlvdXQnKS5sZW5ndGggPiAwICYmIEFuYWx5dGljc0hlbHBlci5nZXRQYWdlVHlwZSgpID09PSAnU1RPUlknICl7XG4gICAgICAgIG91dC5wdXNoKCdtcHUnKTtcbiAgICAgICAgb3V0LnB1c2goJ21wdV9ib3R0b20nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LmpvaW4oJ3wnKTtcbn1cblxuZnVuY3Rpb24gaXNMYXp5TG9hZGVkU2xvdChhZElkKXtcbiAgICB2YXIgc2VjdGlvbiA9IHNlY3Rpb25zLmdldFNlY3Rpb24oMCksXG4gICAgICAgIGxhenlMb2FkQnlTZWN0aW9uID0ge1xuICAgICAgICAgICAgLyogU2VjdGlvbiwgc2xvdCwgZWxlbWVudCB0byBsb29rIG91dCBmb3Igb24gc2Nyb2xsIGV2ZW50IHRvIHRyaWdnZXIgdGhlIGFkIHJlcXVlc3QqL1xuICAgICAgICAgICAgJ2hvbWVwYWdlfG1wdV9ib3R0b20nOiAnbW9kdWxlLS1zZWNvbmRhcnktc3BlY2lhbC1mZWF0dXJlcycsXG4gICAgICAgICAgICAnaG9tZXBhZ2V8aW5mZWVkJzogJ21vZHVsZV9fY29udGVudCcsXG4gICAgICAgICAgICAnbmV3c3xpbmZlZWRfbmV3c19zdG9yeSc6ICdmZWF0dXJlcy1hbmQtYW5hbHlzaXNfX3N0b3JpZXMnLFxuICAgICAgICAgICAgJ25ld3N8aW5mZWVkX25ld3NfaG9tZSc6ICdnZWwtd3JhcCdcbiAgICAgICAgfTtcbiAgICByZXR1cm4gbGF6eUxvYWRCeVNlY3Rpb25bc2VjdGlvbisnfCcrYWRJZF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGJ1aWxkOiBmdW5jdGlvbihhZHNUb0Rpc3BsYXkpe1xuICAgICAgICB2YXIgZGVwcmVjYXRlZFNsb3QgPSBnZXREZXByZWNhdGVkU2xvdExpc3QoKTtcblxuICAgICAgICBpZihjb25maWcuaXNTcG9ydEFwcCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRzVG9EaXNwbGF5LmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmluY2x1ZGVzKCdtcHUnKSAmJiAhZWxlbWVudC5pbmNsdWRlcygnbXB1XycpICYmICFlbGVtZW50LmluY2x1ZGVzKCdfbXB1Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhZHNUb0Rpc3BsYXkuZmlsdGVyKGZ1bmN0aW9uKGVsZW1lbnQpe1xuICAgICAgICAgICAgICAgIHJldHVybiAhZGVwcmVjYXRlZFNsb3QubWF0Y2gobmV3IFJlZ0V4cChcIihefFxcXFx8KShcIitlbGVtZW50K1wiKSgkfFxcXFx8KVwiLFwiZ1wiKSkgJiYgIWlzTGF6eUxvYWRlZFNsb3QoZWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNTbG90RW5hYmxlZDogZnVuY3Rpb24oYWRJZCl7XG4gICAgICAgIHZhciBkZXByZWNhdGVkU2xvdCA9IGdldERlcHJlY2F0ZWRTbG90TGlzdCgpO1xuICAgICAgICByZXR1cm4gIWRlcHJlY2F0ZWRTbG90Lm1hdGNoKG5ldyBSZWdFeHAoXCIoXnxcXFxcfCkoXCIrYWRJZCtcIikoJHxcXFxcfClcIixcImdcIikpO1xuICAgIH0sXG4gICAgaXNMYXp5TG9hZGVkU2xvdDogaXNMYXp5TG9hZGVkU2xvdFxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2FkRmlsdGVyLmpzIiwiLyoqXG4gKiAxLiBUaGUgZmlyc3QgbGVhZGVyYm9hcmQgc2xvdCBzaXplIGlzIGRpcmVjdGx5IGFsaWduZWQgdG8gc3R5bGUvb3JiL2Nzcy9iYmNjb20tYXN5bmMuY3NzXG4gKiBJZiB5b3UgYXJlIGNoYW5naW5nIHRoZSBmaXJzdCBzaXplIGluIGFuIGFkcyBicmVha3BvaW50IHBsZWFzZSBjaGVjayBpdCBpcyBhbGlnbmVkIHdpdGggdGhlIHN0eWxlcyBmb3IgdGhlIGdyb3VwXG4gKi9cbnZhciBncm91cHMgPSB7XG4gICAgMDoge1xuICAgICAgICBzOiAwLFxuICAgICAgICBmOiAzMTksXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICB3YWxscGFwZXI6IFtdLFxuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtdLFxuICAgICAgICAgICAgbXB1OiBbXSxcbiAgICAgICAgICAgIG1wdV9taWRkbGU6IFtdLFxuICAgICAgICAgICAgbXB1X2JvdHRvbTogW10sXG4gICAgICAgICAgICBzcG9uc29yOiBbXSxcbiAgICAgICAgICAgIG1vZHVsZTogW10sXG4gICAgICAgICAgICBtb2R1bGVfd29ybGRpbnBpY3R1cmVzOiBbXSxcbiAgICAgICAgICAgIHByb21vOiBbXSxcbiAgICAgICAgICAgIGFkX2ZlYXR1cmVfcmM6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVcIjogW1sxMCwgMTBdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NsaWNlX2xcIjogW1s1LCA1XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zbGljZV9yXCI6IFtbNSwgNV1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2lkZV8yXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9zbWFsbFwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9sYXJnZVwiOiBbXSxcbiAgICAgICAgICAgIGFkc2Vuc2U6IFtdLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtdLFxuICAgICAgICAgICAgcHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlOiBbWzQ3MiwgNzkxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzFcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMlwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJ2ZXJ0aWNhbG5hdmJhclwiOiBbWzIwLDIwXV0sXG4gICAgICAgICAgICBcImluZmVlZFwiOiBbWzEyLDEyXV0sXG4gICAgICAgICAgICBcInBsYXRpbnVtXCI6IFtbODgsMzFdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICAxOiB7XG4gICAgICAgIHM6IDMyMCxcbiAgICAgICAgZjogMzk5LFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgd2FsbHBhcGVyOiBbXSxcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzMyMCwgNTBdLCBbMzAwLCA1MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgNTBdLCBbMzIwLCA1MF0sIFszMDAsIDI1MF1dLFxuICAgICAgICAgICAgbXB1X21pZGRsZTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgbXB1X2JvdHRvbTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgYWRzZW5zZTogW1szMDAsIDI1Ml1dLFxuICAgICAgICAgICAgc3BvbnNvcjogW1s4OCwgMzFdXSxcbiAgICAgICAgICAgIHNwb25zb3JiaWc6IFtbMTMyLCA2NF1dLFxuICAgICAgICAgICAgbW9kdWxlOiBbWzg4LCAzMV1dLFxuICAgICAgICAgICAgbW9kdWxlX3dvcmxkaW5waWN0dXJlczogW1szMjAsIDUwXSwgWzMwMCwgNTBdXSxcbiAgICAgICAgICAgIHByb21vOiBbXSxcbiAgICAgICAgICAgIGFkX2ZlYXR1cmVfcmM6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVcIjogW1sxMCwgMTBdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NsaWNlX2xcIjogW1s1LCA1XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zbGljZV9yXCI6IFtbNSwgNV1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2lkZV8yXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9zbWFsbFwiOiBbXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9sYXJnZVwiOiBbXSxcbiAgICAgICAgICAgIHBhcmFsbGF4OiBbXSxcbiAgICAgICAgICAgIHByb21vX2ZlYXR1cmVfcmVzcG9uc2l2ZTogW1s0NzIsIDc5MV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8xXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzJcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwidmVydGljYWxuYXZiYXJcIjogW1syMCwyMF1dLFxuICAgICAgICAgICAgXCJpbmZlZWRcIjogW1sxMiwxMl1dLFxuICAgICAgICAgICAgXCJwbGF0aW51bVwiOiBbWzg4LDMxXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgMjoge1xuICAgICAgICBzOiA0MDAsXG4gICAgICAgIGY6IDU5OSxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIHdhbGxwYXBlcjogW10sXG4gICAgICAgICAgICAvKiogTk9URSAtIFBsZWFzZSByZWFkIHBvaW50IDEgYWJvdmUgYmVmb3JlIGNoYW5naW5nICovXG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s1MTYsIDYwXSwgWzMyMCwgNTBdLCBbMzAwLCA1MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzUxNiwgNjBdLCBbMzAwLCA1MF0sIFszMjAsIDUwXSwgWzMwMCwgMjUwXV0sXG4gICAgICAgICAgICBtcHVfbWlkZGxlOiBbWzMwMCwgMjUxXV0sXG4gICAgICAgICAgICBtcHVfYm90dG9tOiBbWzMwMCwgMjUxXV0sXG4gICAgICAgICAgICBhZHNlbnNlOiBbWzMwMCwgMjUyXV0sXG4gICAgICAgICAgICBzcG9uc29yOiBbWzg4LCAzMV1dLFxuICAgICAgICAgICAgc3BvbnNvcmJpZzogW1sxMzIsIDY0XV0sXG4gICAgICAgICAgICBtb2R1bGU6IFtbODgsIDMxXV0sXG4gICAgICAgICAgICBtb2R1bGVfd29ybGRpbnBpY3R1cmVzOiBbWzMyMCwgNTBdLCBbMzAwLCA1MF1dLFxuICAgICAgICAgICAgcHJvbW86IFtdLFxuICAgICAgICAgICAgYWRfZmVhdHVyZV9yYzogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZVwiOiBbWzEwLCAxMF1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2xpY2VfbFwiOiBbWzUsIDVdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NsaWNlX3JcIjogW1s1LCA1XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zaWRlXzJcIjogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX3NtYWxsXCI6IFtdLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9tZWRpdW1cIjogW10sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX2xhcmdlXCI6IFtdLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtdLFxuICAgICAgICAgICAgcHJvbW9fZmVhdHVyZV9yZXNwb25zaXZlOiBbWzQ3MiwgNzkxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzFcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMlwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJ2ZXJ0aWNhbG5hdmJhclwiOiBbWzIwLDIwXV0sXG4gICAgICAgICAgICBcImluZmVlZFwiOiBbWzEyLDEyXV0sXG4gICAgICAgICAgICBcInBsYXRpbnVtXCI6IFtbODgsMzFdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICAzOiB7XG4gICAgICAgIHM6IDYwMCxcbiAgICAgICAgZjogMTAwNyxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIHdhbGxwYXBlcjogW10sXG4gICAgICAgICAgICAvKiogTk9URSAtIFBsZWFzZSByZWFkIHBvaW50IDEgYWJvdmUgYmVmb3JlIGNoYW5naW5nICovXG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s1MTYsIDYwXSwgWzcyOCwgOTBdLCBbOTcwLCAzMDBdLCBbOTcwLCAyNTBdLCBbOTcwLCA5MF0sIFs5NzAsIDY2XV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdLCBbMzAwLCA2MDBdXSxcbiAgICAgICAgICAgIG1wdV9taWRkbGU6IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIG1wdV9ib3R0b206IFtbMzAwLCAyNTFdXSxcbiAgICAgICAgICAgIGFkc2Vuc2U6IFtbMzAwLCAyNTJdXSxcbiAgICAgICAgICAgIHNwb25zb3I6IFtbODgsIDMxXV0sXG4gICAgICAgICAgICBzcG9uc29yYmlnOiBbWzEzMiwgNjRdXSxcbiAgICAgICAgICAgIG1vZHVsZTogW1s4OCwgMzFdXSxcbiAgICAgICAgICAgIG1vZHVsZV93b3JsZGlucGljdHVyZXM6IFtbMzIwLCA1MF0sIFszMDAsIDUwXV0sXG4gICAgICAgICAgICBwcm9tbzogW1szMzYsIDIyNF1dLFxuICAgICAgICAgICAgYWRfZmVhdHVyZV9yYzogW1szMzYsIDEzNl1dLFxuICAgICAgICAgICAgXCJuYXRpdmVcIjogW1sxMCwgMTBdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NsaWNlX2xcIjogW1s1LCA1XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zbGljZV9yXCI6IFtbNSwgNV1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2lkZV8yXCI6IFtbMzM2LCAyMDldXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fc21hbGxcIjogW1szODQsIDI1OF1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9tZWRpdW1cIjogW1s0NjQsIDI1OF1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfbWFpbl9sYXJnZVwiOiBbWzYyNCwgMjU4XV0sXG4gICAgICAgICAgICBwYXJhbGxheDogW10sXG4gICAgICAgICAgICBwcm9tb19mZWF0dXJlX3Jlc3BvbnNpdmU6IFtbNDcyLCA3OTFdXSxcbiAgICAgICAgICAgIFwicmVzcG9uc2l2ZV9ib3hfMVwiOiBbWzgsMV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8yXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInZlcnRpY2FsbmF2YmFyXCI6IFtbMjAsMjBdXSxcbiAgICAgICAgICAgIFwiaW5mZWVkXCI6IFtbMTIsMTJdXSxcbiAgICAgICAgICAgIFwicGxhdGludW1cIjogW1s4OCwzMV1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIDQ6IHtcbiAgICAgICAgczogMTAwOCxcbiAgICAgICAgZjogMTAwMDAsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICB3YWxscGFwZXI6IFtbMSwgMV1dLFxuICAgICAgICAgICAgLyoqIE5PVEUgLSBQbGVhc2UgcmVhZCBwb2ludCAxIGFib3ZlIGJlZm9yZSBjaGFuZ2luZyAqL1xuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbNzI4LCA5MF0sIFs5NzAsIDMwMF0sIFs5NzAsIDI1MF0sIFs5NzAsIDkwXSwgWzk3MCwgNjZdLCBbOTQwLCAyMzBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDI1MF0sIFszMDAsIDYwMF1dLFxuICAgICAgICAgICAgbXB1X21pZGRsZTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgbXB1X2JvdHRvbTogW1szMDAsIDI1MV1dLFxuICAgICAgICAgICAgYWRzZW5zZTogW1szMDAsIDI1Ml1dLFxuICAgICAgICAgICAgc3BvbnNvcjogW1s4OCwgMzFdXSwgLyogY2F0Y2ggYWxsICovXG4gICAgICAgICAgICBzcG9uc29yYmlnOiBbWzEzMiwgNjRdXSxcbiAgICAgICAgICAgIG1vZHVsZTogW1s4OCwgMzFdXSwgLyogY2F0Y2ggYWxsICovXG4gICAgICAgICAgICBtb2R1bGVfd29ybGRpbnBpY3R1cmVzOiBbWzMyMCwgNTBdLCBbMzAwLCA1MF1dLFxuICAgICAgICAgICAgcHJvbW86IFtbMzM2LCAyMjRdXSxcbiAgICAgICAgICAgIGFkX2ZlYXR1cmVfcmM6IFtbMzM2LCAxMzZdXSxcbiAgICAgICAgICAgIFwibmF0aXZlXCI6IFtbMTAsIDEwXV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9zbGljZV9sXCI6IFtbNSwgNV1dLFxuICAgICAgICAgICAgXCJuYXRpdmVfc2xpY2VfclwiOiBbWzUsIDVdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX3NpZGVfMlwiOiBbWzMzNiwgMjA5XV0sXG4gICAgICAgICAgICBcIm5hdGl2ZV9tYWluX3NtYWxsXCI6IFtbMzg0LCAyNThdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbWVkaXVtXCI6IFtbNDY0LCAyNThdXSxcbiAgICAgICAgICAgIFwibmF0aXZlX21haW5fbGFyZ2VcIjogW1s2MjQsIDI1OF1dLFxuICAgICAgICAgICAgcGFyYWxsYXg6IFtbOTc2LCA0MDBdXSxcbiAgICAgICAgICAgIHByb21vX2ZlYXR1cmVfcmVzcG9uc2l2ZTogW1s0NzIsIDc5MV1dLFxuICAgICAgICAgICAgXCJyZXNwb25zaXZlX2JveF8xXCI6IFtbOCwxXV0sXG4gICAgICAgICAgICBcInJlc3BvbnNpdmVfYm94XzJcIjogW1s4LDFdXSxcbiAgICAgICAgICAgIFwidmVydGljYWxuYXZiYXJcIjogW1syMCwyMF1dLFxuICAgICAgICAgICAgXCJpbmZlZWRcIjogW1sxMiwxMl1dLFxuICAgICAgICAgICAgXCJwbGF0aW51bVwiOiBbWzg4LDMxXV1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7SlNPTn0gY3VzdG9tR3JvdXBzIFRoZSBuZXcgZ3JvdXBzIHRvIHJlcGxhY2UgdGhlIGN1cnJlbnQgZ3JvdXBzIG9iamVjdC5cbiAgICAgKiovXG4gICAgc2V0R3JvdXBzOiBmdW5jdGlvbiAoY3VzdG9tR3JvdXBzKSB7XG4gICAgICAgIGdyb3VwcyA9IGN1c3RvbUdyb3VwcztcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBncm91cCBUaGUgZ3JvdXAgaWQgdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0pTT059IGN1c3RvbUdyb3VwIFRoZSBuZXcgZ3JvdXAgZGF0YS5cbiAgICAgKiovXG4gICAgc2V0R3JvdXA6IGZ1bmN0aW9uIChncm91cCwgY3VzdG9tR3JvdXApIHtcbiAgICAgICAgaWYgKGN1c3RvbUdyb3VwLnMgJiYgY3VzdG9tR3JvdXAuZiAmJiBjdXN0b21Hcm91cC5zbG90cykge1xuICAgICAgICAgICAgZ3JvdXBzW2dyb3VwXSA9IGN1c3RvbUdyb3VwO1xuICAgICAgICAgICAgdGhpcy5zZXRHcm91cFN0YXJ0KGdyb3VwLCBjdXN0b21Hcm91cC5zKTtcbiAgICAgICAgICAgIHRoaXMuc2V0R3JvdXBGaW5pc2goZ3JvdXAsIGN1c3RvbUdyb3VwLmYpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZ3JvdXAgVGhlIGdyb3VwIGlkIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIFRoZSBuZXcgc3RhcnQgd2lkdGggb2YgdGhlIGdyb3VwLlxuICAgICAqKi9cbiAgICBzZXRHcm91cFN0YXJ0OiBmdW5jdGlvbiAoZ3JvdXAsIHdpZHRoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzW2dyb3VwXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdyb3Vwc1tncm91cF0ucyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cF0ucyA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzW2dyb3VwIC0gMV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBncm91cHNbZ3JvdXAgLSAxXS5mICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZ3JvdXBzW2dyb3VwIC0gMV0uZiA9IHdpZHRoIC0gMTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGdyb3VwIFRoZSBncm91cCBpZCB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBUaGUgbmV3IGZpbmlzaCB3aWR0aCBvZiB0aGUgZ3JvdXAuXG4gICAgICoqL1xuICAgIHNldEdyb3VwRmluaXNoOiBmdW5jdGlvbiAoZ3JvdXAsIHdpZHRoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzW2dyb3VwXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdyb3Vwc1tncm91cF0uZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cF0uZiA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXBzW2dyb3VwICsgMV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBncm91cHNbZ3JvdXAgKyAxXS5mICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZ3JvdXBzW2dyb3VwICsgMV0ucyA9IHdpZHRoICsgMTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0R3JvdXBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBncm91cHM7XG4gICAgfSxcbiAgICBnZXRHcm91cDogZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBncm91cHNbZ3JvdXBdO1xuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9icmVha3BvaW50cy5qcyIsImltcG9ydCBjb21TY29yZSBmcm9tICdhbmFseXRpY3MvY29tU2NvcmUnO1xuaW1wb3J0IGNvbVNjb3JlU3RyZWFtaW5nIGZyb20gJ2FuYWx5dGljcy9jb21TY29yZVN0cmVhbWluZyc7XG5pbXBvcnQgc3NjSGVscGVyIGZyb20gJ2FuYWx5dGljcy9zc2NIZWxwZXInO1xuaW1wb3J0IHtzZXRPdmVycmlkZX0gZnJvbSAnYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzJztcblxuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmFzc2lnbihjb21TY29yZSwge1xuICAgIHN0cmVhbVNlbnNlOiBjb21TY29yZVN0cmVhbWluZyxcbiAgICBzc2NIZWxwZXI6IHNzY0hlbHBlcixcbiAgICBzZXRNZXRyaWNPdmVycmlkZTogc2V0T3ZlcnJpZGVcbn0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9pbmRleC5qcyIsImltcG9ydCBjb25maWcgZnJvbSAnY29uZmlnJztcbmltcG9ydCB1dGlscyBmcm9tICd1dGlscydcbmltcG9ydCBoZWxwZXIgZnJvbSAnYW5hbHl0aWNzL2hlbHBlcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJ2xvZ2dlcic7XG5pbXBvcnQge2dldENvcmVLZXlWYWx1ZXMsIGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzLCBhcHBlbmROb25QYWdlQ29yZUtleVZhbHVlc30gZnJvbSAnYW5hbHl0aWNzL2NvbVNjb3JlSGVscGVycyc7XG5pbXBvcnQgc3RyZWFtU2Vuc2UgZnJvbSAnYW5hbHl0aWNzL2NvbVNjb3JlU3RyZWFtaW5nJztcbmltcG9ydCBzZWN0aW9ucyBmcm9tICdzZWN0aW9ucyc7XG5pbXBvcnQgZ2V0VXNlclRyYWNraW5nQ29va2llIGZyb20gJ2FuYWx5dGljcy91dGlscy9nZXRVc2VyVHJhY2tpbmdDb29raWUnO1xuaW1wb3J0IGdldFNlY3Rpb25TdHJpbmdzIGZyb20gJ2FuYWx5dGljcy91dGlscy9nZXRTZWN0aW9uU3RyaW5ncyc7XG5pbXBvcnQgZ2V0UGFnZVR5cGUgZnJvbSAnYW5hbHl0aWNzL3V0aWxzL2dldFBhZ2VUeXBlJztcbmltcG9ydCB7c2FuaXRpc2VLZXlWYWx1ZXN9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcydcbmltcG9ydCBNZXRyaWNzQnVpbGRlciBmcm9tICdhbmFseXRpY3MvbWV0cmljcy9tZXRyaWNzQnVpbGRlcic7XG5pbXBvcnQge2dldE92ZXJyaWRlc30gZnJvbSAnYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmNvbnN0IGxvZyA9IExvZ2dlcignYW5hbHl0aWNzOmNvbVNjb3JlJyk7XG5jb25zdCBERUxBWV9UUkFDS0lOR19DT09LSUUgPSAnY2twZl9nbmxjcyc7ICAvLyBDb21TY29yZSBzcGVjaWZpY1xuXG5jbGFzcyBDb21TY29yZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5wbGF5bGlzdENvdW50ID0gMDtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50Q291bnRlciA9IDA7XG4gICAgICAgIHRoaXMuYWxsb3dMaW5rVHJhY2tpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzUGxheWxpc3RTdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cmFja2luZ1JlcXVlc3RzID0geydodHRwJzogW10sICdjb29raWUnOiBbXX07XG4gICAgICAgIHRoaXMua2V5VmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuaXNTY3dIYW5kbGVyVXNlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGluIGJiY2RvdGNvbS5pbml0XG4gICAgICogTm90ZTogc29tZSBwYWdlcyBzdWNoIGFzIC9ibG9ncyBkbyBub3QgcnVuIGJiY2RvdGNvbS5pbml0KCkgZ3JycnJcbiAgICAgKi9cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID0gZ2V0VXNlclRyYWNraW5nQ29va2llKCk7XG4gICAgICAgIGhlbHBlci5wcm9jZXNzRGVsYXlUcmFja2luZ0Nvb2tpZShERUxBWV9UUkFDS0lOR19DT09LSUUsIHRoaXMudHJhY2tpbmdSZXF1ZXN0cyk7XG5cbiAgICAgICAgdGhpczo6c2V0dXBTdHJlYW1TZW5zZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRTY3dGb3JBcHAoKSB7XG4gICAgICAgIGxvZygnZ2V0U2N3Rm9yQXBwKCkgY2FsbGVkIHRvIGdldCBcInNjd1wiJyk7XG4gICAgICAgIHRoaXMuaXNTY3dIYW5kbGVyVXNlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbml0QXBwUGFnZVRyYWNraW5nOiAocGFnZU5hbWUsIHVyaSwgcGFnZVR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFwcCh7cGFnZU5hbWV9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRBcHBOYW1lOiBhcHBOYW1lID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFwcCh7YXBwTmFtZX0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEFwcFZlcnNpb25OdW1iZXI6IGFwcFZlcnNpb24gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXBwKHthcHBWZXJzaW9ufSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRBcHBPczogYXBwT3MgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXBwKHthcHBPc30pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXBwVHJhY2tQYWdlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzZXRBcHAoa2V5VmFsdWUpIHtcbiAgICAgICAgdmFyIGNvbmY7XG4gICAgICAgIGZvciAoY29uZiBpbiBrZXlWYWx1ZSkge1xuICAgICAgICAgICAgc3dpdGNoIChjb25mKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwTmFtZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLmJfYXBwX25hbWUgPSBrZXlWYWx1ZVtjb25mXSArIFwifGFwcFwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5VmFsdWVbY29uZl0gPT09IFwiaG9yaXpvbnNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5rZXlWYWx1ZXMuYl9zaXRlX2NoYW5uZWwgPSAnbmV3cyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwVmVyc2lvbic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLmJfYXBwX2ltcF92ZXIgPSBrZXlWYWx1ZVtjb25mXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYXBwT3MnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtleVZhbHVlcy5iX2FwcF9vcyA9IGtleVZhbHVlW2NvbmZdO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwYWdlTmFtZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5VmFsdWVzLm5hbWUgPSBrZXlWYWx1ZVtjb25mXTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEFsbG93TGlua1RyYWNraW5nKGVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5hbGxvd0xpbmtUcmFja2luZyA9IChlbmFibGVkID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRUcmFja2luZ1JlcXVlc3RzKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJyB8fCAodHlwZSAhPT0gJ2h0dHAnICYmIHR5cGUgIT09ICdjb29raWUnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHR5cGUgcHJvdmlkZWQgdG8gZ2V0VHJhY2tpbmdSZXF1ZXN0cygpIFwiJyArIHR5cGUgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50cmFja2luZ1JlcXVlc3RzW3R5cGVdO1xuICAgIH1cblxuICAgIGdldFRyYWNraW5nVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzZXRVc2VyVHJhY2tpbmdDb29raWUodmFsKSB7XG4gICAgICAgIHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPSB2YWw7XG4gICAgfVxuXG4gICAgZ2V0VXNlclRyYWNraW5nQ29va2llKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VyVHJhY2tpbmdDb29raWVWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZy5cbiAgICAgKi9cbiAgICByKCkge1xuICAgICAgICB0aGlzLnVzZXJUcmFja2luZ0Nvb2tpZVZhbHVlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWxsb3dMaW5rVHJhY2tpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnRyYWNraW5nUmVxdWVzdHMgPSB7J2h0dHAnOiBbXSwgJ2Nvb2tpZSc6IFtdfTtcbiAgICAgICAgc3RyZWFtU2Vuc2UudmlkZW9FdmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5pc1BsYXlsaXN0U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB1dGlscy5kZWxldGVDb29raWUoREVMQVlfVFJBQ0tJTkdfQ09PS0lFKTtcbiAgICAgICAgdGhpcy52aWRlb0V2ZW50Q291bnRlciA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiBQYWdlIFRyYWNraW5nXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFdlYnNpdGUgUGFnZSBUcmFja2luZ1xuICAgICAqL1xuICAgIHBhZ2UocmVmZXJyZXIpIHtcbiAgICAgICAgaWYgKCFjb25maWcuaXNDb21TY29yZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgbG9nKCdkaWQgbm90IGRvIHRyYWNraW5nIGJlY2F1c2UgaXNDb21TY29yZUVuYWJsZWQ9ZmFsc2UnKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlcyA9IGdldENvcmVLZXlWYWx1ZXMoKTtcbiAgICAgICAgICAgIGtleVZhbHVlcyA9IGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyk7XG5cbiAgICAgICAgICAgIC8vIHNpbmdsZSBwYWdlIGFwcHMgbmVlZCB0byBwYXNzIHJlZmVycmVyIGluXG4gICAgICAgICAgICBpZih0eXBlb2YgcmVmZXJyZXIgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAga2V5VmFsdWVzLmM5ID0gcmVmZXJyZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oa2V5VmFsdWVzLCB0aGlzLmtleVZhbHVlcyk7XG4gICAgICAgICAgICB0aGlzOjpkb1RyYWNrKGtleVZhbHVlcywgJ3BhZ2UnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93TGlua1RyYWNraW5nKSB7XG4gICAgICAgICAgICAgICAgaGVscGVyLmFwcGx5TGlua1RyYWNraW5nVG9QYWdlRWxlbWVudHModGhpcy5saW5rLmJpbmQodGhpcykpOyAgLy8gTk9URTogcHJvY2Vzc0xpbmsoKSBtZXRob2QgaXMgY2FsbGJhY2tcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoJ2JiY2RvdGNvbS5hbmFseXRpY3MucGFnZSgpIGV4Y2VwdGlvbiBcIicgKyBleGNlcHRpb24ubWVzc2FnZSArICdcIicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKiBMaW5rIFRyYWNraW5nXG4gICAgICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB1c2VkIHRvIHJlcG9ydCBvbiB0aGUgbGluayB3aGljaCBoYXMgYmVlbiBjbGlja2VkXG4gICAgICpcbiAgICAgKk5vIGxvbmdlciB0cmFja2luZyBhZHZlcnRpc2luZyBiZWNhdXNlIG9mIGlzc3VlcyBub3Qgb3BlbmluZyBpbiBuZXcgd2luZG93IChjYW5ub3QgcmVsaWFibHkgb3BlbiBpbiBuZXcgd2luZG93IHdpdGggSlMpXG4gICAgICpFeHRlcm5hbCBsaW5rcyB3aWxsIGZpcmUgcmVxdWVzdCB0byBhbmFseXRpY3MgaW1tZWRpYXRlbHksIHRoZW4gb3BlbiBsaW5rIChub3QgaW4gbmV3IHRhYi93aW5kb3cgYmVjYXVzZSBub3QgcG9zc2libGUgaW4gSlMpXG4gICAgICpJbnRlcm5hbCBsaW5rcyB3aWxsIGRyb3AgYSBjb29raWUgYW5kIHBpY2sgdXAgdGhlIGNsaWNrIHRyYWNraW5nIG9uIHRoZSBzdWJzZXF1ZW50IHBhZ2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvYmplY3QgbGlua09iaiBpcyB0aGUgPGE+IGNsaWNrZWQsIGZvciBleGFtcGxlOlxuICAgICAqICAgICAgeyBocmVmOidodHRwOi8vd3d3LmJiYy5jb20vdHJhdmVsJywgdGl0bGU6J1RyYXZlbCB3ZWJzaXRlJyxcbiAgICAgKiAgICAgICAgcmV2OidoZWxsb3x3b3JsZCcsIGRhdGEtdHJhY2s6J2hlbGxvfHdvcmxkJ31cbiAgICAgKiBAcGFyYW0gb2JqZWN0IGV2ZW50IEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIGxpbmsobGlua09iaiwgZXZlbnQpIHtcbiAgICAgICAgLy8gVGl0bGUgb2YgdGhlIHBhZ2UgYXQgdGhlIG90aGVyIGVuZCBvZiB0aGUgbGluayAoZ2VuZXJhbGx5IGRhdGEgaXMgc3RvcmVkIHdpdGhpbiAndGl0bGUnIGF0dHJpYnV0ZVxuICAgICAgICAvLyBvZiBhbmNob3IgPGEgaHJlZj1cIlwiIHRpdGxlPVwiXCI+LlxuICAgICAgICBpZiAoIWNvbmZpZy5pc0NvbVNjb3JlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsaW5rT2JqID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbGlua09iai5ocmVmID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEtleS1WYWx1ZXMgdG8gc2VuZFxuICAgICAgICB2YXIga2V5VmFsdWVzID0gZ2V0Q29yZUtleVZhbHVlcygpLFxuICAgICAgICAgICAgdmFycyA9IGhlbHBlci5nZXRMaW5rVHJhY2tpbmdQcm9wZXJ0aWVzKGxpbmtPYmopLFxuICAgICAgICAgICAgdXJpID0gbGlua09iai5ocmVmOyAvL2hlbHBlci5ub3JtYWxpemVVcmkobGlua09iai5ocmVmKTtcblxuICAgICAgICBpZiAoIXZhcnMpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldHJpY3NCdWlsZGVyID0gbmV3IE1ldHJpY3NCdWlsZGVyO1xuXG4gICAgICAgIGNvbnN0IGlzQkJDVXJpID0gaGVscGVyLmlzQkJDVXJpKHVyaSk7XG4gICAgICAgIG1ldHJpY3NCdWlsZGVyLndpdGgoJ3BldjEnLCB7dmFsdWU6IHVyaS5zdWJzdHIoMCwgMjU1KSwgcHJlUmVxdWlzaXRlOiAoKSA9PiBpc0JCQ1VyaX0pO1xuICAgICAgICBtZXRyaWNzQnVpbGRlci53aXRoKCdkb21haW5Gcm9tVXJsJywge21hcE5hbWU6ICdwZXYxJywgYXJnczpbdXJpXSwgcHJlUmVxdWlzaXRlOiAoKSA9PiAhaXNCQkNVcml9KTtcblxuICAgICAgICAvLyBwYWdlVHlwZSBpcyAnaW5kZXgnLCAnc3RvcnknLCAnbWFwJy5cbiAgICAgICAgdmFycy5wYWdlVHlwZSA9IGdldFBhZ2VUeXBlKGxpbmtPYmouaHJlZikuc3Vic3RyaW5nKDAsIDMpLnJlcGxhY2UoJ3wnLCAnJyk7XG4gICAgICAgIGtleVZhbHVlcyA9IGFwcGVuZE5vblBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyk7XG4gICAgICAgIGtleVZhbHVlcy5iX2xpbmsgPSB0aGlzOjpidWlsZFBpcGVEZWxpbWl0ZWRLZXkodmFycyk7XG5cbiAgICAgICAga2V5VmFsdWVzID0gT2JqZWN0LmFzc2lnbihrZXlWYWx1ZXMsIG1ldHJpY3NCdWlsZGVyLmJ1aWxkKCkpO1xuXG4gICAgICAgIGhlbHBlci50cmFja0xpbmsodGhpczo6ZG9UcmFjaywgREVMQVlfVFJBQ0tJTkdfQ09PS0lFLCB1cmksIGV2ZW50LCBrZXlWYWx1ZXMpOyAgLy8gTk9URTogZG9UcmFjaygpIG1ldGhvZCBpcyBjYWxsYmFja1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbVNjb3JlO1xuXG4vKipcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBQUklWQVRFIE1FVEhPRFNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuZnVuY3Rpb24gc2V0dXBTdHJlYW1TZW5zZSgpIHtcbiAgICAvLyBQcm94eSBtZXRob2RzXG4gICAgdmFyIGksIGw7XG4gICAgdmFyIG1ldGhvZHMgPSBbXG4gICAgICAgICdzdGFydFBsYXlsaXN0JyxcbiAgICAgICAgJ2FkUmVxdWVzdCcsXG4gICAgICAgICdhZE1hbmFnZXJMb2FkZWQnLFxuICAgICAgICAnc3RhcnRBZHZlcnQnLFxuICAgICAgICAnZW5kQWR2ZXJ0JyxcbiAgICAgICAgJ3N0YXJ0UHJvZ3JhbW1lJyxcbiAgICAgICAgJ3N0YXJ0UGF1c2UnLFxuICAgICAgICAnZW5kUGF1c2UnLFxuICAgICAgICAnc3RhcnRTZWVrJyxcbiAgICAgICAgJ2VuZFNlZWsnLFxuICAgICAgICAnZW5kUHJvZ3JhbW1lJyxcbiAgICAgICAgLy8nZW5kUGxheWxpc3QnLFxuICAgICAgICAvLydpc1BsYXlsaXN0U3RhcnRlZCcsXG4gICAgICAgICdkdXJhdGlvbicsXG4gICAgICAgICd1aWluZm8nLFxuICAgICAgICAndm9sdW1lQ2hhbmdlJyxcbiAgICAgICAgJ3N0YXJ0UHJldmlldycsXG4gICAgICAgICdzdG9wUHJldmlldydcbiAgICBdO1xuICAgIGZvciAoaSA9IDAsIGwgPSBtZXRob2RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBDb21TY29yZS5wcm90b3R5cGVbbWV0aG9kc1tpXV0gPVxuICAgICAgICAgICAgc3RyZWFtU2Vuc2VbbWV0aG9kc1tpXV0uYmluZChzdHJlYW1TZW5zZSk7XG4gICAgfVxuXG4gICAgc3RyZWFtU2Vuc2UuaW5pdCgpO1xufTtcblxuLyoqXG4gKiBNYWtlIHJlcXVlc3QgdG8gQ29tU2NvcmUgZW5kcG9pbnRcbiAqXG4gKiBAcGFyYW0gb2JqZWN0IGN1c3RvbVRyYWNraW5nS2V5VmFsdWVzIGVnIHt9XG4gKiBAcGFyYW0gc3RyaW5nIHRyYWNrVHlwZSBlZyBwYWdlLCBsaW5rLCB2aWRlb1xuICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHRyYWNraW5nIHJlcXVlc3QgaXMgY29tcGxldGVcbiAqIEBwYXJhbSBib29sZWFuIG1ha2VJbWFnZVJlcXVlc3Qgd2hldGhlciB0byBtYWtlIHJlcXVlc3Qgb3Igbm90XG4gKiBAcmV0dXJuIG1peGVkIGJvb2xlYW58c3RyaW5nIGZhbHNlPUNvbVNjb3JlIGRpc2FibGVkXG4gKi9cbmZ1bmN0aW9uIGRvVHJhY2soa2V5VmFsdWVzLCB0eXBlLCBjYWxsYmFjaywgbWFrZUltYWdlUmVxdWVzdCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKCFjb25maWcuaXNBbmFseXRpY3NFbmFibGVkKCkpIHtcbiAgICAgICAgbG9nKCdkaWQgbm90IGRvIHRyYWNraW5nIGJlY2F1c2UgaXNBbmFseXRpY3NFbmFibGVkPWZhbHNlJyk7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIEp1c3QgaW4gY2FzZSBwYWdlIGRvZXNuJ3QgcnVuIGJiY2RvdGNvbS5pbml0KCk7XG4gICAgICAgIHRoaXMudXNlclRyYWNraW5nQ29va2llVmFsdWUgPSBnZXRVc2VyVHJhY2tpbmdDb29raWUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBvdmVycmlkZXMgPSBnZXRPdmVycmlkZXMoKTtcbiAgICBjb25zdCBkZWZhdWx0QzIgPSB0eXBlb2Yga2V5VmFsdWVzLmMyICE9PSAndW5kZWZpbmVkJyA/IGtleVZhbHVlcy5jMiA6ICcnO1xuXG4gICAgdmFyIHVybCA9ICc/J1xuICAgICAgICArICdjMT0nICsgKHR5cGUgPT09ICdwYWdlJyA/IDIgOiAyMilcbiAgICAgICAgKyAnJmMyPScgKyBfLmdldChvdmVycmlkZXMsICdjMicsIGRlZmF1bHRDMik7XG5cbiAgICBpZiAob3ZlcnJpZGVzLmJfYXBwX3R5cGUgPT09ICdmaWEnKXtcbiAgICAgICAgb3ZlcnJpZGVzLmFwcF9uYW1lID0ga2V5VmFsdWVzLnByb2RfbmFtZTtcbiAgICAgICAgb3ZlcnJpZGVzLm5hbWUgPSBoZWxwZXIuZ2V0RW1iZWRQYWdlTmFtZSgpO1xuICAgICAgICBvdmVycmlkZXMuc2VjdGlvbiA9IHNlY3Rpb25zLmdldFNlY3Rpb25zRm9yVXJpKGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLmhyZWYsICdhbmFseXRpY3MnKS5qb2luKFwiJTJGXCIpO1xuICAgICAgICBvdmVycmlkZXMucGFnZV90eXBlID0gaGVscGVyLmdldFBhZ2VUeXBlKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgb3ZlcnJpZGVzLmNwc19hc3NldF9pZCA9IGtleVZhbHVlcy5iX2FydGljbGVfaWQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAndmlkZW8nKSB7XG4gICAgICAgIHRoaXMudmlkZW9FdmVudENvdW50ZXIrKztcbiAgICAgICAga2V5VmFsdWVzLm5zX3N0X2VjID0gdGhpcy52aWRlb0V2ZW50Q291bnRlcjtcbiAgICB9XG4gICAgLy8gQXBwbHkgT3ZlcnJpZGVzXG4gICAga2V5VmFsdWVzID0gT2JqZWN0LmFzc2lnbihrZXlWYWx1ZXMsIG92ZXJyaWRlcyk7XG5cbiAgICAvLyBBcHBlbmQgdG8gZW5kIG9mIHJlcXVlc3QgKGRvIG5vdCBwdXQgYXQgZnJvbnQhKVxuICAgIGtleVZhbHVlcy5jNyA9IGNvbmZpZy5nZXRXaW5kb3dMb2NhdGlvbigpLmhyZWYucmVwbGFjZSgvXFwuYXBwJC8sICcnKTtcbiAgICBrZXlWYWx1ZXMuYzggPSBjb25maWcuZ2V0V2luZG93RG9jdW1lbnQoKS50aXRsZTtcblxuICAgIC8vIHNpbmdsZSBwYWdlIGFwcHMgbmVlZCB0byBwYXNzIHJlZmVycmVyIGluXG4gICAgaWYodHlwZW9mIGtleVZhbHVlcy5jOSA9PT0gJ3VuZGVmaW5lZCcpe1xuICAgICAgICBrZXlWYWx1ZXMuYzkgPSBkb2N1bWVudC5yZWZlcnJlcjtcbiAgICB9XG5cbiAgICBrZXlWYWx1ZXMgPSBzYW5pdGlzZUtleVZhbHVlcyhrZXlWYWx1ZXMpO1xuICAgIGZvciAoa2V5IGluIGtleVZhbHVlcykge1xuICAgICAgICBpZiAoa2V5ICE9PSAnYzInKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgaW5jbHVkZSBsYWJlbCAoa2V5LXZhbHVlKSBpZiBlbXB0eS4gIERvbid0IGluY2x1ZGUgJ2MyJyBoZXJlIGFzIGluY2x1ZGVkIGFib3ZlIChmb3IgZWFzaWx5IHJlYWRpbmcgaHR0cCByZXF1ZXN0cykuXG4gICAgICAgICAgICB1cmwgKz0gJyYnICsga2V5ICsgJz0nICsgaGVscGVyLmVuY29kZVZhbHVlKGtleVZhbHVlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vICBHRFBSIGFuZCBDQ1BBIHJlcXVpcmVtZW50c1xuICAgIHVybCArPSAod2luZG93LmJiY2Nvb2tpZXMgJiYgYmJjY29va2llcy5yZWFkUG9saWN5KCdwZXJmb3JtYW5jZScpKSA/ICcmY3NfdWNmcj0xJyA6ICcmY3NfdWNmcj0wJztcblxuICAgIGlmICh0eXBlb2YgbWFrZUltYWdlUmVxdWVzdCA9PT0gJ3VuZGVmaW5lZCcgfHwgbWFrZUltYWdlUmVxdWVzdCA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLnRyYWNraW5nUmVxdWVzdHNbJ2h0dHAnXS5wdXNoKHVybCk7XG4gICAgICAgIGhlbHBlci5sb2FkVHJhY2tpbmdJbWFnZSh1cmwsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYWNraW5nUmVxdWVzdHNbJ2Nvb2tpZSddLnB1c2godXJsKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsb2coJ2NvbVNjb3JlIGRvVHJhY2sgdXJsOicgKyB1cmwpO1xuICAgIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIENvbnN0cnVjdCBwaXBlIGRlbGltaXRlZCB2YWx1ZVxuICpcbiAqIFBpcGUgZGVsaW1pdGVkIG9yZGVyOlxuICogLSAxLiAgbmFtZSBvciBjaGFubmVsIG9mIGNvbnRlbnQgYmVpbmcgcHJvbW90ZWQgIGVnIC9uZXdzL3N0b3J5LTEyMzQgPT4gJ25ld3MnXG4gKiAtIDIuICBjaGFubmVsIGVnIG5ld3NcbiAqIC0gMy4gIG1vZHVsZSBuYW1lIGVnIGNhcm91c2VsXG4gKiAtIDQuICBsaW5rIHR5cGUgZWcgJ3RleHQnLCAnaW1hZ2UnLCAnaWNvbicsICd2aWRlbydcbiAqIC0gNS4gIGxpbmsgbmFtZSBlZyByb3lhbC1iYWJ5aXMtYm9yblxuICogLSA2LiAgbGluayBwb3NpdGlvbiBlZyAxXG4gKiAtIDcuICB0b3RhbCBudW1iZXIgb2YgbGlua3MgaW4gbW9kdWxlIGVnIDEwXG4gKiAtIDguICBleHRyYSBsaW5rIGluZm8gZWcgZmFjZWJvb2tcbiAqIC0gOS4gIHNlY3Rpb24gZWcgbmV3cz53b3JsZFxuICogLSAxMC4gcGFnZSB0eXBlIGVnIGlkeHxuYSwgc3R5fG5hXG4gKiAtIDExLiBtb2R1bGUgcGxhY2VtZW50IChub3QgbGluayBwbGFjZW1lbnQpIGVnIHRvcGNlbnRyZVxuICpcbiAqIEBwYXJhbSBvYmplY3QgZGF0YSBPdmVycmlkZSBwYXJhbXNcbiAqL1xuZnVuY3Rpb24gYnVpbGRQaXBlRGVsaW1pdGVkS2V5KGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHNlY3Rpb25TdHJpbmdzID0gZ2V0U2VjdGlvblN0cmluZ3MoKTtcbiAgICB2YXIga2V5cyA9IHtcbiAgICAgICAgLy8gTk9URTogT1JERVIgSVMgSU1QT1JUQU5UXG4gICAgICAgICdwcm9tb3RlZCc6ICcnLFxuICAgICAgICAnY2hhbm5lbCc6IHNlY3Rpb25TdHJpbmdzWzBdLFxuICAgICAgICAnbW9kdWxlTmFtZSc6ICcnLFxuICAgICAgICAnbGlua1R5cGUnOiAndGV4dCcsXG4gICAgICAgICdsaW5rTmFtZSc6ICcnLFxuICAgICAgICAnbGlua1Bvc2l0aW9uJzogJycsXG4gICAgICAgICd0b3RhbExpbmtzJzogJycsXG4gICAgICAgICdleHRyYUxpbmtJbmZvJzogJycsXG4gICAgICAgICdzZWN0aW9uJzogc2VjdGlvblN0cmluZ3NbMV0sXG4gICAgICAgICdwYWdlVHlwZSc6ICcnLFxuICAgICAgICAncGxhY2VtZW50JzogJydcbiAgICAgICAgLy8gTk9URTogT1JERVIgSVMgSU1QT1JUQU5UXG4gICAgfTtcbiAgICB2YXIgZCxcbiAgICAgICAgayxcbiAgICAgICAgcGFydHMgPSBbXTtcbiAgICBmb3IgKGQgaW4gZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleXNbZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUga2V5IHdpdGhpbiBrZXlzLCBkbyBub3QgYWRkIGFueSBuZXcga2V5cyBqdXN0IHRoZSB2YWx1ZXNcbiAgICAgICAgICAgIGtleXNbZF0gPSAodHlwZW9mIGRhdGFbZF0gPT09ICd1bmRlZmluZWQnIHx8IGRhdGFbZF0gPT09ICcnIHx8IGRhdGFbZF0gPT09IGZhbHNlXG4gICAgICAgICAgICAgICAgPyAnJyA6IHV0aWxzLnRyaW0oZGF0YVtkXSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoayBpbiBrZXlzKSB7XG4gICAgICAgIHBhcnRzLnB1c2goa2V5c1trXSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKCd8Jyk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9jb21TY29yZS5qcyIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvZ2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0tleSA9IHJlcXVpcmUoJy4vX2lzS2V5JyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGlzS2V5KHBhdGgsIG9iamVjdCkgPyBbcGF0aF0gOiBjYXN0UGF0aChwYXRoKTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19iYXNlR2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBzdHJpbmdUb1BhdGgodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Nhc3RQYXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlTGVhZGluZ0RvdCA9IC9eXFwuLyxcbiAgICByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZShmdW5jdGlvbihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChyZUxlYWRpbmdEb3QudGVzdChzdHJpbmcpKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RyaW5nVG9QYXRoO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qc1xuLy8gbW9kdWxlIGlkID0gMjEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBgVHlwZUVycm9yYCBtZXNzYWdlIGZvciBcIkZ1bmN0aW9uc1wiIG1ldGhvZHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEFzc2lnbiBjYWNoZSB0byBgXy5tZW1vaXplYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvbWVtb2l6ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcENhY2hlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX01hcENhY2hlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanNcbi8vIG1vZHVsZSBpZCA9IDIxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fSGFzaC5qc1xuLy8gbW9kdWxlIGlkID0gMjE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hDbGVhci5qc1xuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXRpdmVDcmVhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbmF0aXZlQ3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fZ2V0TmF0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0hvc3RPYmplY3QgPSByZXF1aXJlKCcuL19pc0hvc3RPYmplY3QnKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fYmFzZUlzTmF0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOC05IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5IGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBpc09iamVjdCh2YWx1ZSkgPyBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNGdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gISF2YWx1ZSAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvaXNPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDIyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSG9zdE9iamVjdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19pc0hvc3RPYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDIyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgY29yZUpzRGF0YSA9IHJlcXVpcmUoJy4vX2NvcmVKc0RhdGEnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc01hc2tlZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19pc01hc2tlZC5qc1xuLy8gbW9kdWxlIGlkID0gMjI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fY29yZUpzRGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19yb290LmpzXG4vLyBtb2R1bGUgaWQgPSAyMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDIyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fdG9Tb3VyY2UuanNcbi8vIG1vZHVsZSBpZCA9IDIyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19nZXRWYWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICByZXR1cm4gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaERlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaEdldC5qc1xuLy8gbW9kdWxlIGlkID0gMjMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2hhc2hIYXMuanNcbi8vIG1vZHVsZSBpZCA9IDIzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hTZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faGFzaFNldC5qc1xuLy8gbW9kdWxlIGlkID0gMjM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX0xpc3RDYWNoZS5qc1xuLy8gbW9kdWxlIGlkID0gMjM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qc1xuLy8gbW9kdWxlIGlkID0gMjM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9lcS5qc1xuLy8gbW9kdWxlIGlkID0gMjM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVHZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlR2V0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qc1xuLy8gbW9kdWxlIGlkID0gMjQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXA7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fTWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fZ2V0TWFwRGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMjQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleWFibGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9faXNLZXlhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZUdldC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX21hcENhY2hlSGFzLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICBnZXRNYXBEYXRhKHRoaXMsIGtleSkuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19tYXBDYWNoZVNldC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBiYXNlVG9TdHJpbmcgPSByZXF1aXJlKCcuL19iYXNlVG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC90b1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vfi9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fU3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9pc1N5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gMjUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL2lzT2JqZWN0TGlrZS5qc1xuLy8gbW9kdWxlIGlkID0gMjU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL34vbG9kYXNoL19pc0tleS5qc1xuLy8gbW9kdWxlIGlkID0gMjU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2xvZGFzaC9fdG9LZXkuanNcbi8vIG1vZHVsZSBpZCA9IDI1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgTG9nZ2VyIGZyb20gJ2xvZ2dlcic7XG5pbXBvcnQge3Nhbml0aXNlUGFnZU5hbWV9IGZyb20gJ2FuYWx5dGljcy91dGlscy9zYW5pdGlzZVZhbHVlcyc7XG5pbXBvcnQge2dldENvcmVLZXlWYWx1ZXMsIGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzfSBmcm9tICdhbmFseXRpY3MvY29tU2NvcmVIZWxwZXJzJztcblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBhbmFseXRpY3NIZWxwZXIgPSByZXF1aXJlKCdhbmFseXRpY3MvaGVscGVyJyk7XG5jb25zdCBsb2cgPSBMb2dnZXIoJ2FuYWx5dGljczpjb21TY29yZVN0cmVhbWluZycpO1xuXG5cblxudmFyIEFEID0gJ0FEJztcbnZhciBDT05URU5UID0gJ0NPTlRFTlQnO1xuXG52YXIgTlVMTCA9ICcqbnVsbCc7XG5cbmNsYXNzIFN0cmVhbVNlbnNlVjYge1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2EgPSBudWxsO1xuICAgICAgICB0aGlzLnBsYXlsaXN0Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmNvbnRlbnREdXJhdGlvbiA9ICcwJztcbiAgICAgICAgdGhpcy5jdXJyZW50bHlQbGF5aW5nID0gJyc7XG4gICAgICAgIHRoaXMuaXNQcmV2aWV3ID0gZmFsc2U7XG4gICAgICAgIHRoaXMudWlJbmZvTGFiZWxzID0ge1xuICAgICAgICAgICAgbnNfc3Rfd3M6ICdub3JtJyxcbiAgICAgICAgICAgIG5zX3N0X2NzOiAnJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZvbHVtZUxhYmVsID0ge1xuICAgICAgICAgICAgbnNfc3Rfdm86ICcnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudm9sdW1lID0gJyc7XG4gICAgICAgIHRoaXMuYWRQbGF5ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpbml0KCkge1xuICAgICAgICAvLyBDb25zdHJ1Y3Qgc3RyZWFtU2Vuc2UgKC9zY3JpcHQvdmVuZG9yL2NvbXNjb3JlL2NvbXNjb3JlLnN0cmVhbWluZy42LjAuMC4xNjEyMDEubWluLmpzKVxuICAgICAgICB0aGlzLnNhID0gbmV3IG5zXy5TdHJlYW1pbmdBbmFseXRpY3MoXG4gICAgICAgICAgICB7bGl2ZUVuZHBvaW50VVJMOiBhbmFseXRpY3NIZWxwZXIuZ2V0QW5hbHl0aWNzVXJpKCl9XG4gICAgICAgICk7XG4gICAgICAgIGxvZygnaW5pdCgpJyk7XG4gICAgfVxuXG4gICAgbm90aWZ5KG1ldGhvZCwgZGF0YSl7XG4gICAgICAgIGxvZygnbm90aWZ5KCkgJyArIG1ldGhvZCk7XG4gICAgICAgIGlmICghY29uZmlnLmlzQ29tU2NvcmVFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIGxvZygnYmJjZG90Y29tLmFuYWx5dGljcyBkaWQgbm90IGRvIHRyYWNraW5nIGJlY2F1c2UgaXNDb21TY29yZUVuYWJsZWQ9ZmFsc2UnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKG1ldGhvZCAhPT0gJ25vdGlmeUN1c3RvbUV2ZW50Jykge1xuICAgICAgICAgICAgbG9nKCdwbGF5YmFja1Nlc3Npb24gbGFiZWxzOicpO1xuICAgICAgICAgICAgbG9nKHRoaXMuc2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0TGFiZWxzKCkpO1xuICAgICAgICAgICAgbG9nKCdhc3NldCBsYWJlbHM6Jyk7XG4gICAgICAgICAgICBsb2codGhpcy5zYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldExhYmVscygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaWYobWV0aG9kID09PSAnbm90aWZ5Q3VzdG9tRXZlbnQnKXtcblxuICAgICAgICAgICAgICAgIGxvZygnY3VzdG9tIGxhYmVsczonKTtcbiAgICAgICAgICAgICAgICBsb2coZGF0YSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNhW21ldGhvZF0oMCwgZGF0YSk7XG4gICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYVttZXRob2RdKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zYVttZXRob2RdKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB0aGlzIGZpcmVzIGVpdGhlciBvblxuICAgIC8vIC0gMXN0IGNvbnRlbnQgJ3BsYXlpbmcnIGV2ZW50XG4gICAgLy8gLSAxc3QgYWRSZXF1ZXN0IGV2ZW50XG4gICAgLy8gLSAxc3QgYWRTdGFydGVkIGV2ZW50XG4gICAgLy8gd2h5IGlzIGl0IG5vdCB1c2luZyBwbGF5bGlzdExvYWRlZCBldmVudD9cbiAgICBzdGFydFBsYXlsaXN0KGRhdGEpIHtcbiAgICAgICAgLy8gaWYgc29tZXRoaW5nIGlzIGFscmVhZHkgcGxheWluZyB0aGVuIHNlbmQgdGhlICdlbmQnIHN0YXRzIGNhbGxzXG4gICAgICAgIGlmKHRoaXMuY3VycmVudGx5UGxheWluZyA9PT0gQUQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KCdub3RpZnlFbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmN1cnJlbnRseVBsYXlpbmcgPT09IENPTlRFTlQpIHtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5KCdub3RpZnlFbmQnLCB1dGlscy5zZWNvbmRzVG9NaWxsaVNlY29uZHMoZGF0YS5tZWRpYU9mZnNldCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vIGNvbnRlbnQgaXMgbG9hZGVkIGluIHRvIHRoZSBwbGF5ZXIgd2hpbGUgcHJldmlld2luZyBhdCB0aGUgbW9tZW50XG4gICAgICAgIC8qXG4gICAgICAgIGlmKHRoaXMuY3VycmVudGx5UGxheWluZyA9PT0gUFJFVklFVykge1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeUVuZCcsIHV0aWxzLnNlY29uZHNUb01pbGxpU2Vjb25kcyhkYXRhLm1lZGlhT2Zmc2V0KSk7XG4gICAgICAgIH1cbiAgICAgICAgKi9cblxuICAgICAgICB0aGlzLmN1cnJlbnRseVBsYXlpbmcgPSAnJztcbiAgICAgICAgdGhpcy5wbGF5bGlzdENvdW50Kys7XG4gICAgICAgIHRoaXMuYWRQbGF5ZWQgPSBmYWxzZTtcblxuICAgICAgICB2YXIgYzEgPSBiYmNkb3Rjb20udXRpbHMuaXNTdHJpbmcoZGF0YS5tZWRpYVBsYXllck5hbWUpICYmIGRhdGEubWVkaWFQbGF5ZXJOYW1lLmluY2x1ZGVzKCdmbGFzaCcpID8gJzE5JyA6ICcyJztcbiAgICAgICAgdmFyIGtleVZhbHVlcyA9IGdldENvcmVLZXlWYWx1ZXMoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYzE6IGMxLFxuICAgICAgICAgICAgICAgIGMyOiBjb25maWcuZ2V0QW5hbHl0aWNzQWNjdElkKCksXG4gICAgICAgICAgICAgICAgYzM6IE5VTEwsICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgYzQ6IE5VTEwsICAgICAgICAvLyBObyBsb2dpY2FsIHZhbHVlIGJ1dCBzdGlsbCBuZWVkcyB0byBiZSBzZXQgQEJCQ0NPTS03NzQ2XG4gICAgICAgICAgICAgICAgYl9hdl9hY3Rpb246IHRoaXMuX2dldEFWQWN0aW9uKGRhdGEudmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkpLFxuICAgICAgICAgICAgICAgIG5zX3N0X2l0OiAnYycsICAgICAgICAgLy8gY29tU2NvcmUgaWRlbnRpZmljYXRpb24uIGFsd2F5cyAnYydcbiAgICAgICAgICAgICAgICBuc19zdF9tcDogZGF0YS5tZWRpYVBsYXllck5hbWUsIC8vIE1lZGlhIFBsYXllciBOYW1lXG4gICAgICAgICAgICAgICAgbnNfc3RfbXY6IGRhdGEuYnVtcFZlcnNpb24sICAgICAvLyBNZWRpYSBQbGF5ZXIgVmVyc2lvblxuICAgICAgICAgICAgICAgIG5zX3N0X2NwOiAnMScsXG4gICAgICAgICAgICAgICAgYl9hdl9hZDogKGNvbmZpZy5pc0Fkc0VuYWJsZWQoKSA/ICcxJyA6ICcwJyksXG4gICAgICAgICAgICAgICAgYl9hdl9mb3JtYXQ6IGFuYWx5dGljc0hlbHBlci5nZXRBdkZvcm1hdEZyb21LaW5kKGRhdGEua2luZCksXG4gICAgICAgICAgICAgICAgYl9hdl9wbGlzdDogJ211bHRpJyxcbiAgICAgICAgICAgICAgICBiX2F2X21ldGhvZDogJ3N0cmVhbScsXG4gICAgICAgICAgICAgICAgYl9hdl9zb3VyY2U6ICdiYmMnLFxuICAgICAgICAgICAgICAgIG5zX3N0X3dzOiB0aGlzLnVpSW5mb0xhYmVscy5uc19zdF93cyxcbiAgICAgICAgICAgICAgICBuc19zdF9jczogdGhpcy51aUluZm9MYWJlbHMubnNfc3RfY3MsXG4gICAgICAgICAgICAgICAgbnNfc3Rfdm86IHRoaXMudm9sdW1lTGFiZWwubnNfc3Rfdm8sXG4gICAgICAgICAgICAgICAgYl9wcmV2aWV3X2ZsYWc6IHRoaXMuaXNQcmV2aWV3ID8gJzEnIDogJzAnXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGtleVZhbHVlcyA9IGFwcGVuZFBhZ2VDb3JlS2V5VmFsdWVzKGtleVZhbHVlcyk7XG5cbiAgICAgICAgdGhpcy5zYS5jcmVhdGVQbGF5YmFja1Nlc3Npb24oa2V5VmFsdWVzKTtcbiAgICB9XG5cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gLy9cbiAgICAvLyBBRFZFUlRJU01FTlQgUkVQT1JUSU5HXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xuXG4gICAgYWRSZXF1ZXN0KGRhdGEpIHtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeUN1c3RvbUV2ZW50Jywge25zX3N0X2V2OiAnYWRfcmVxdWVzdCd9KTtcbiAgICB9XG5cbiAgICBhZE1hbmFnZXJMb2FkZWQoZGF0YSkge1xuICAgICAgICB0aGlzLm5vdGlmeSgnbm90aWZ5Q3VzdG9tRXZlbnQnLCB7bnNfc3RfZXY6ICdhZF9sb2FkZWQnfSk7XG4gICAgfVxuXG4gICAgc3RhcnRBZHZlcnQoZGF0YSkge1xuICAgICAgICB2YXIgbWVkaWFOYW1lID0gc2FuaXRpc2VQYWdlTmFtZShkYXRhLm1lZGlhTmFtZSk7XG4gICAgICAgIHRoaXMuY3VycmVudGx5UGxheWluZyA9IEFEO1xuICAgICAgICB0aGlzLmFkUGxheWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRBc3NldCh7XG4gICAgICAgICAgICBuc19zdF9icjogTlVMTCwgICAgICAgIC8vIFBsYXliYWNrIEJpdCBSYXRlIEB0b2RvIHJlcXVpcmUgYWRkaXRpb25hbCBpbmZvIGZyb20gcGxheWVyXG4gICAgICAgICAgICBuc19zdF9jaTogJ3ByZS1yb2xsJywgLy8gVW5pcXVlIENvbnRlbnQgSURcbiAgICAgICAgICAgIG5zX3N0X2NsOiBkYXRhLmFkTGVuZ3RoIHx8ICcwJywgLy8gYXNzZXQgbGVuZ3RoIChkdXJhdGlvbiBpcyBvbmx5IGJlaW5nIHB1bGxlZCB0aHJvdWdoIGZyb20gYWRzIGh0bWwgcGx1Z2luLCBOT1QgZmxhc2gpXG4gICAgICAgICAgICBuc19zdF9wdTogTlVMTCwgLy8gcHVibGlzaGVyIGJyYW5kIG5hbWVcbiAgICAgICAgICAgIG5zX3N0X3ByOiBtZWRpYU5hbWUsIC8vIHByb2dyYW0gdGl0bGUgKHRvIG1ha2UgaXQgdGhlIHNhbWUgYXMgY29udGVudCBwbGF5KVxuICAgICAgICAgICAgbnNfc3RfZXA6IE5VTEwsIC8vIGVwaXNvZGUgdGl0bGVcbiAgICAgICAgICAgIG5zX3N0X3NuOiBOVUxMLCAvLyBlcGlzb2RlIHNhZXNvbiBudW1iZXJcbiAgICAgICAgICAgIG5zX3N0X2VuOiBOVUxMLCAvLyBlcGlzb2RlIG51bWJlclxuICAgICAgICAgICAgbnNfc3RfZ2U6IE5VTEwsIC8vZ2VucmVcbiAgICAgICAgICAgIG5zX3N0X2N0OiAndmExMScsIC8vIGNsYXNzaWZpY2F0aW9uIHR5cGVcbiAgICAgICAgICAgIG5zX3N0X3RpOiBOVUxMLCAvLyB0bXMgaWRcbiAgICAgICAgICAgIG5zX3N0X2lhOiBOVUxMLCAvLyBhZCBsb2FkIHRhZ1xuICAgICAgICAgICAgbnNfc3RfZGR0OiBOVUxMLCAvLyBEaWdpdGFsIEFpcmRhdGVcbiAgICAgICAgICAgIG5zX3N0X3RkdDogTlVMTCwgLy8gVFYgQWlyZGF0ZVxuICAgICAgICAgICAgbnNfc3Rfc3Q6IE5VTEwsIC8vIFN0YXRpb24gVGl0bGVcbiAgICAgICAgICAgIG5zX3N0X2NwOiAnMicsXG4gICAgICAgICAgICBjMzogTlVMTCxcbiAgICAgICAgICAgIGM0OiBOVUxMLFxuICAgICAgICAgICAgYzY6IE5VTEwsXG4gICAgICAgICAgICBuc19zdF9hZDogJ3ByZS1yb2xsJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeVBsYXknLCAwKTtcbiAgICB9XG5cbiAgICBlbmRBZHZlcnQoZGF0YSkge1xuICAgICAgICAvLyBXaWxsIGFzc3VtZSB0aGUgcG9zaXRpb24gaXMgZXF1YWwgdG8gdGhlIGxlbmd0aCBvZiB0aGUgYWR2ZXJ0aXNlbWVudC5cbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeUVuZCcpO1xuICAgIH1cblxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xuICAgIC8vIE1BSU4gQ09OVEVOVCBSRVBPUlRJTkdcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC8vXG5cbiAgICBzdGFydFByb2dyYW1tZShkYXRhKSB7XG4gICAgICAgIHRoaXMuY3VycmVudGx5UGxheWluZyA9IENPTlRFTlQ7XG4gICAgICAgIHZhciBtZWRpYU5hbWUgPSBzYW5pdGlzZVBhZ2VOYW1lKGRhdGEubWVkaWFOYW1lKTtcbiAgICAgICAgdGhpcy5zYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRBc3NldCh7XG4gICAgICAgICAgICBuc19zdF9icjogTlVMTCwgICAgICAgIC8vIFBsYXliYWNrIEJpdCBSYXRlIEB0b2RvIHJlcXVpcmUgYWRkaXRpb25hbCBpbmZvIGZyb20gcGxheWVyXG4gICAgICAgICAgICBuc19zdF9jaTogbWVkaWFOYW1lLCAvLyBVbmlxdWUgQ29udGVudCBJRFxuICAgICAgICAgICAgbnNfc3RfY2w6IHRoaXMuY29udGVudER1cmF0aW9uLCAvLyBhc3NldCBsZW5ndGhcbiAgICAgICAgICAgIG5zX3N0X3B1OiAnYmJjJywgLy8gcHVibGlzaGVyIGJyYW5kIG5hbWVcbiAgICAgICAgICAgIG5zX3N0X3ByOiBtZWRpYU5hbWUsIC8vIHByb2dyYW0gdGl0bGVcbiAgICAgICAgICAgIG5zX3N0X2VwOiBOVUxMLCAvLyBlcGlzb2RlIHRpdGxlXG4gICAgICAgICAgICBuc19zdF9zbjogTlVMTCwgLy8gZXBpc29kZSBzZWFzb24gbnVtYmVyXG4gICAgICAgICAgICBuc19zdF9lbjogTlVMTCwgLy8gZXBpc29kZSBudW1iZXJcbiAgICAgICAgICAgIG5zX3N0X2dlOiBOVUxMLCAvL2dlbnJlXG4gICAgICAgICAgICBuc19zdF9jdDogKGRhdGEuaXNMaXZlID8gJ3ZjMTMnIDogJ3ZjMTEnKSwgLy8gY2xhc3NpZmljYXRpb24gdHlwZVxuICAgICAgICAgICAgbnNfc3RfdGk6IE5VTEwsIC8vIHRtcyBpZFxuICAgICAgICAgICAgbnNfc3RfaWE6IE5VTEwsIC8vIGFkIGxvYWQgdGFnXG4gICAgICAgICAgICBuc19zdF9kZHQ6IE5VTEwsIC8vIERpZ2l0YWwgQWlyZGF0ZVxuICAgICAgICAgICAgbnNfc3RfdGR0OiBOVUxMLCAvLyBUViBBaXJkYXRlXG4gICAgICAgICAgICBuc19zdF9zdDogTlVMTCwgLy8gU3RhdGlvbiBUaXRsZVxuICAgICAgICAgICAgYzM6IE5VTEwsXG4gICAgICAgICAgICBjNDogTlVMTCxcbiAgICAgICAgICAgIGM2OiBOVUxMLFxuICAgICAgICAgICAgbnNfc3RfcG46ICcxJywgLy8gc2VnbWVudCBudW1iZXJcbiAgICAgICAgICAgIG5zX3N0X2NlOiBOVUxMLCAvLyBDb21wbGV0ZSBFcGlzb2RlIEZsYWdcbiAgICAgICAgICAgIG5zX3N0X2xpOiAoZGF0YS5pc0xpdmUgPyAnMScgOiBOVUxMKSwgLy8gTGl2ZSBTdHJlYW0gRmxhZ1xuICAgICAgICAgICAgbnNfc3RfY3A6IHRoaXMuYWRQbGF5ZWQgPyAnMicgOiAnMSdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5KCdub3RpZnlQbGF5JywgMCk7XG4gICAgfVxuXG4gICAgZW5kUHJvZ3JhbW1lKGRhdGEpIHtcbiAgICAgICAgLy8gV2lsbCBhc3N1bWUgdGhlIHBvc2l0aW9uIGlzIGVxdWFsIHRvIHRoZSBsZW5ndGggb2YgdGhlIHByb2dyYW1tZS5cbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeUVuZCcpO1xuICAgIH1cblxuICAgIHN0YXJ0UGF1c2UoZGF0YSkge1xuICAgICAgICB0aGlzLm5vdGlmeSgnbm90aWZ5UGF1c2UnLCB1dGlscy5zZWNvbmRzVG9NaWxsaVNlY29uZHMoZGF0YS5tZWRpYU9mZnNldCkpO1xuICAgIH1cblxuICAgIGVuZFBhdXNlKGRhdGEpIHtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeVBsYXknLCB1dGlscy5zZWNvbmRzVG9NaWxsaVNlY29uZHMoZGF0YS5tZWRpYU9mZnNldCkpO1xuICAgIH1cblxuICAgIHN0YXJ0U2VlayhkYXRhKXtcbiAgICAgICAgdGhpcy5ub3RpZnkoJ25vdGlmeVNlZWtTdGFydCcsIHV0aWxzLnNlY29uZHNUb01pbGxpU2Vjb25kcyhkYXRhLm1lZGlhT2Zmc2V0KSk7XG4gICAgfVxuXG4gICAgZW5kU2Vlaygpe1xuICAgICAgICB0aGlzLm5vdGlmeSgnbm90aWZ5UGxheScsIHV0aWxzLnNlY29uZHNUb01pbGxpU2Vjb25kcyhkYXRhLm1lZGlhT2Zmc2V0KSk7XG4gICAgfVxuXG4gICAgZHVyYXRpb24oZGF0YSl7XG4gICAgICAgIC8vIEhUTUwgcGxheWVyIHdpbGwgZ2V0IHRoaXMgZnJvbSBidW1wICdsb2FkZWRtZXRhZGF0YScgZXZlbnQgYmVmb3JlIEFOWSBvdGhlciBldmVudHMgaGF2ZSBmaXJlZFxuICAgICAgICAvLyBhbmQgYmVmb3JlIHRoZSBwcmUtcm9sbCAoaWYgdGhlcmUgaXMgb25lKSBzdGFydHMgcGxheWluZ1xuXG4gICAgICAgIC8vIEZsYXNoIHBsYXllciB3aWxsIGdldCB0aGlzIGZyb20gYnVtcCAndGltZXVwZGF0ZScgZXZlbnQgd2hlbiB0aGUgYWN0dWFsIGNvbnRlbnQgaXMgcGxheWluZ1xuICAgICAgICAvLyBhZnRlciBwcmUtcm9sbCAoaWYgdGhlcmUgaXMgb25lKSBoYXMgZmluaXNoZWRcblxuICAgICAgICAvLyB0aGlzIGdldHMgcGFzc2VkIGNvcnJlY3RseSBpbiB0byBzdGFydFByb2dyYW1tZSgpIGZvciBodG1sIHBsYXllclxuICAgICAgICB0aGlzLmNvbnRlbnREdXJhdGlvbiA9IHV0aWxzLnNlY29uZHNUb01pbGxpU2Vjb25kcyhkYXRhLm1lZGlhTGVuZ3RoKS50b1N0cmluZygpO1xuXG4gICAgICAgIC8vIGZvciBmbGFzaCBwbGF5ZXIgd2UgbmVlZCB0byBhZGQgbWFudWFsbHVcbiAgICAgICAgaWYodGhpcy5jdXJyZW50bHlQbGF5aW5nID09IENPTlRFTlQpIHtcbiAgICAgICAgICAgIHRoaXMuc2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRMYWJlbCgnbnNfc3RfY2wnLCB0aGlzLmNvbnRlbnREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xuICAgIC8vIFBMQVlFUiBSRVBPUlRJTkdcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC8vXG5cbiAgICAvLyB0aGlzIGNvbWVzIHRocm91Z2ggMXN0IHRpbWUgYmVmb3JlIHN0YXJ0UGxheWxpc3QoKSBoYXMgZmlyZWRcbiAgICB1aWluZm8oZGF0YSkge1xuICAgICAgICB0aGlzLnVpSW5mb0xhYmVscy5uc19zdF93cyA9IChkYXRhLnVpaW5mby5pc0Z1bGxzY3JlZW4gPT09IHRydWUpID8gJ2Z1bGwnIDogJ25vcm0nO1xuICAgICAgICB0aGlzLnVpSW5mb0xhYmVscy5uc19zdF9jcyA9IGRhdGEudWlpbmZvLnZpZGVvV2lkdGgudG9TdHJpbmcoKSArICd4JyArIGRhdGEudWlpbmZvLnZpZGVvSGVpZ2h0LnRvU3RyaW5nKCk7XG4gICAgICAgIGlmKHRoaXMuY3VycmVudGx5UGxheWluZyAhPT0gJycpe1xuICAgICAgICAgICAgdGhpcy5zYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRMYWJlbHModGhpcy51aUluZm9MYWJlbHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gdGhpcyBjb21lcyB0aHJvdWdoIDFzdCB0aW1lIGJlZm9yZSBzdGFydFBsYXlsaXN0KCkgaGFzIGZpcmVkXG4gICAgdm9sdW1lQ2hhbmdlKGRhdGEpe1xuICAgICAgICB0aGlzLnZvbHVtZUxhYmVsLm5zX3N0X3ZvID0gKGRhdGEudm9sdW1lKjEwMCkudG9TdHJpbmcoKTtcbiAgICAgICAgaWYodGhpcy5jdXJyZW50bHlQbGF5aW5nICE9PSAnJyl7XG4gICAgICAgICAgICB0aGlzLnNhLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldExhYmVscyh0aGlzLnZvbHVtZUxhYmVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIHByZXN1bXB0aW9uIGhlcmUgdGhhdCBvbmNlIHRoZSBwcmV2aWV3IHBsdWdpbiBoYXMgbG9hZGVkXG4gICAgLy8gYWxsIHN1YnNlcXVlbnQgcGxheWxpc3RzIGxvYWRlZCBpbnRvIHRoZSBwbGF5ZXIgd2lsbCBydW4gcHJldmlld1xuICAgIHN0YXJ0UHJldmlldyhkYXRhKXtcbiAgICAgICAgdGhpcy5pc1ByZXZpZXcgPSB0cnVlO1xuICAgIH1cblxuICAgIHN0b3BQcmV2aWV3KGRhdGEpe1xuICAgICAgICB0aGlzLmlzUHJldmlldyA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeSgnbm90aWZ5Q3VzdG9tRXZlbnQnLCB7bnNfc3RfZXY6IGRhdGEucHJldmlld1N0b3BwZWRSZWFzb259KTtcbiAgICAgICAgdGhpcy5zYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRMYWJlbCgnYl9wcmV2aWV3X2ZsYWcnLCAnMCcpO1xuICAgIH1cblxuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xuICAgIC8vIFVUSUxTXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAvL1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBhY3Rpb25zIHRoYXQgaW5pdGlhdGVkIHZpZGVvIHBsYXk6XG4gICAgICogY3BmbSA6IENvbnRpbnVvdXMgUGxheSwgZmlyc3QgdmlkZW8sIHVzZXIgaW5pdGlhdGVkXG4gICAgICogY3BmICA6IENvbnRpbnVvdXMgUGxheSwgZmlyc3QgdmlkZW8sIGF1dG8gc3RhcnRlZFxuICAgICAqIGNwICAgOiBDb250aW51b3VzIFBsYXksIG5vdCBmaXJzdCB2aWRlb1xuICAgICAqIGFwICAgOiBOb3QgQ29udGludW91cyBQbGF5LCBhdXRvIHN0YXJ0ZWRcbiAgICAgKiBtcCAgIDogTm90IENvbnRpbnVvdXMgUGxheSwgdXNlciBpbml0aWF0ZWRcbiAgICAgKi9cbiAgICBfZ2V0QVZBY3Rpb24odmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkpIHtcbiAgICAgICAgdmFyIGF2X2FjdGlvbjtcbiAgICAgICAgaWYgKGNvbmZpZy5pc0NvbnRpbnVvdXNQbGF5UGFnZSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5bGlzdENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgYXZfYWN0aW9uID0gdmlkZW9QbGF5c0F1dG9tYXRpY2FsbHkgPyAnY3BmJyA6ICdjcGZtJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXZfYWN0aW9uID0gJ2NwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF2X2FjdGlvbiA9IHZpZGVvUGxheXNBdXRvbWF0aWNhbGx5ID8gJ2FwJyA6ICdtcCc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXZfYWN0aW9uO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFN0cmVhbVNlbnNlVjYoKTtcblxuXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hbmFseXRpY3MvY29tU2NvcmVTdHJlYW1pbmcuanMiLCJjb25zdCBvdmVycmlkZXMgPSBuZXcgTWFwO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0T3ZlcnJpZGUoa2V5LCB2YWx1ZSkge1xuICAgIG92ZXJyaWRlcy5zZXQoa2V5LCB2YWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPdmVycmlkZXMoKSB7XG4gICAgY29uc3Qgb3V0cHV0ID0ge307XG4gICAgb3ZlcnJpZGVzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSB2YWx1ZTtcbiAgICB9KVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYW5hbHl0aWNzL21ldHJpY3Mvb3ZlcnJpZGVzLmpzIiwiaW1wb3J0IGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0IGdldFVzZXJUcmFja2luZ0Nvb2tpZSBmcm9tICdhbmFseXRpY3MvdXRpbHMvZ2V0VXNlclRyYWNraW5nQ29va2llJztcblxuLyoqXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU1NDSGVscGVyKCkge1xuICAgIHZhciBhbmFseXRpY3NDb25maWcgPSBjb25maWcuZ2V0QW5hbHl0aWNzQ29uZmlnKCk7XG5cbiAgICB0aGlzLnNzY0hvc3QgPSB7XG4gICAgICAgIGh0dHBzOiBhbmFseXRpY3NDb25maWcuU1NDLkhUVFBTXG4gICAgfTtcblxuICAgIHRoaXMuY29tU2NvcmVIb3N0ID0ge1xuICAgICAgICBodHRwczogYW5hbHl0aWNzQ29uZmlnLkNPTVNDT1JFLkhUVFBTXG4gICAgfTtcbn1cblxuU1NDSGVscGVyLnByb3RvdHlwZS5nZXRBbmFseXRpY3NMb2NhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5oYXNVc2VyVHJhY2tpbmdDb29raWUoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21TY29yZUJhc2VVcmwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTc2NCYXNlVXJsKCk7XG4gICAgfVxufTtcblxuU1NDSGVscGVyLnByb3RvdHlwZS5pc1NlY3VyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCkucHJvdG9jb2wgPT09ICdodHRwczonO1xufTtcblxuU1NDSGVscGVyLnByb3RvdHlwZS5oYXNVc2VyVHJhY2tpbmdDb29raWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldFVzZXJUcmFja2luZ0Nvb2tpZSgpICE9PSBmYWxzZTtcbn07XG5cblNTQ0hlbHBlci5wcm90b3R5cGUuZ2V0Q29tU2NvcmVCYXNlVXJsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmNvbVNjb3JlSG9zdC5odHRwcztcbn07XG5cblNTQ0hlbHBlci5wcm90b3R5cGUuZ2V0U3NjQmFzZVVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zc2NIb3N0Lmh0dHBzO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU1NDSGVscGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FuYWx5dGljcy9zc2NIZWxwZXIuanMiLCJ2YXIgYWRVbml0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFVuaXQnKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKCdhZHZlcnRzL2xheW91dCcpO1xuXG52YXIgc3VpdGVzID0ge1xuICAgICc5NzB4MjUwJzoge1xuICAgICAgICBkZnBwSWQ6IDE4NTAzNjA1OCxcbiAgICAgICAgYWRVbml0OiAncHJldmlldycsXG4gICAgICAgIHVpZDogJzVkNDUzZjJkNjU1MTQ4NGI3ODIwNjQzNTdhJyxcbiAgICAgICAgc2xvdHM6IHtcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzk3MCwgMjUwXV0sXG4gICAgICAgICAgICBtcHU6IFtdXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxhcmdlOiB7XG4gICAgICAgIGRmcHBJZDogMTE0MTgwMjU4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMjI0ZjUxNDA3OTY5NGIzZDU2N2E3NDdhMjInLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbOTcwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiaWc6IHtcbiAgICAgICAgZGZwcElkOiAxODUwMzYwNTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICc1ZDQ1M2YyZDY1NTE0ODRiNzgyMDY0MzU3YScsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s5NzAsIDI1MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgNjAwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3RhbmRhcmQ6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2Njk0NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczMTcxNjc2ZjQ0NTA0NjRlM2Q1YTNiNDc0NicsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s3MjgsIDkwXV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBvcGFxdWU6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2Njk0NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczMTcxNjc2ZjQ0NTA0NjRlM2Q1YTNiNDc0NicsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBsZWFkZXJib2FyZDogW1s3MjgsIDkwXV0sXG4gICAgICAgICAgICBtcHU6IFtbMzAwLCAyNTBdXVxuICAgICAgICB9XG4gICAgfSxcbiAgICBpbnRlcnN0aXRpYWw6IHtcbiAgICAgICAgZGZwcElkOiAxOTM2NzQ4NTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICczZjc4NDU2NjQxMmU1ODQwNDc2MjUyNDAyOCcsXG4gICAgICAgIHNsb3RzOiB7XG4gICAgICAgICAgICBpbnRlcnN0aXRpYWw6IFtbMSwgMV1dLFxuICAgICAgICAgICAgbGVhZGVyYm9hcmQ6IFtbNzI4LCA5MF1dLFxuICAgICAgICAgICAgbXB1OiBbWzMwMCwgMjUwXV1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgXCJpbnQtdW5pLWlmcmFtZVwiOiB7XG4gICAgICAgIGRmcHBJZDogMjAwMTQ1Mzc4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMmI2MTRhNjQyNjU4NGQyZTc2N2U3YTI5NjcnLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsOiBbWzEsIDFdXSxcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzcyOCwgOTBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDI1MF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiaW50LXVuaS1pbWFnZVwiOiB7XG4gICAgICAgIGRmcHBJZDogMjAwMTQ3MTc4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnMmI1ZTI5Mjc1ODMzNmI3YjY2MmIzNDYxMjInLFxuICAgICAgICBzbG90czoge1xuICAgICAgICAgICAgaW50ZXJzdGl0aWFsOiBbWzEsIDFdXSxcbiAgICAgICAgICAgIGxlYWRlcmJvYXJkOiBbWzcyOCwgOTBdXSxcbiAgICAgICAgICAgIG1wdTogW1szMDAsIDI1MF1dXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGVtcHR5OiB7XG4gICAgICAgIGRmcHBJZDogMTE0MTgwMjU4LFxuICAgICAgICBhZFVuaXQ6ICdwcmV2aWV3JyxcbiAgICAgICAgdWlkOiAnNTM3MDM0Mjg3YTdhczcwNGI1MTY1NWUzMjI3J1xuICAgIH0sXG4gICAgbm9uZToge1xuICAgICAgICBkZnBwSWQ6IDExNDE4MDI1OCxcbiAgICAgICAgYWRVbml0OiAncHJldmlldycsXG4gICAgICAgIHVpZDogJzUzNzAzNDI4N2E3YXM3MDRiNTE2NTVlMzIyNydcbiAgICB9LFxuICAgIG5vYWQ6IHtcbiAgICAgICAgZGZwcElkOiAxMTQxODAyNTgsXG4gICAgICAgIGFkVW5pdDogJ3ByZXZpZXcnLFxuICAgICAgICB1aWQ6ICc1MzcwMzQyODdhN2FzNzA0YjUxNjU1ZTMyMjcnXG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gKHdpbmRvd0xvY2F0aW9uSHJlZikge1xuICAgICAgICB2YXIgc3VpdGU7XG4gICAgICAgIGlmICgvW1xcXFw/Jl1hZHM9KFteJiNdKikvLnRlc3Qod2luZG93TG9jYXRpb25IcmVmKSkge1xuICAgICAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2Yoc3VpdGVzW1JlZ0V4cC4kMV0pKSB7XG4gICAgICAgICAgICAgICAgc3VpdGUgPSBzdWl0ZXNbUmVnRXhwLiQxXTtcbiAgICAgICAgICAgICAgICBpZiAoc3VpdGUudWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkVW5pdC5zZXRVaWQoc3VpdGUudWlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN1aXRlLmFkVW5pdCkge1xuICAgICAgICAgICAgICAgICAgICBhZFVuaXQuc2V0QWRVbml0KHN1aXRlLmFkVW5pdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdWl0ZS5zbG90cykge1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQub3ZlcnJpZGVHcm91cFNpemVzKHN1aXRlLnNsb3RzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWRTdWl0ZXMuanMiLCIvKipcbiAqIEBtb2R1bGUgc3RhdHNcbiAqXG4gKiBMaXN0ZW5zIHRvIGV2ZW50cyByYWlzZWQgYnkgYmJjZG90Y29tIGFuZCBtYWludGFpbnMgYW4gaW1tdXRhYmxlIGJiY2RvdGNvbS5zdGF0cy5kYXRhIG9iamVjdFxuICogd2l0aCB1c2VmdWwgaW5mb3JtYXRpb24gb24gZm9yIHRyYWNraW5nLlxuICovXG5cbi8qKlxuICogVGhpcyBpcyB0aGUgbWFpbiBzdGF0cyBtb2R1bGUgb2JqZWN0LiBUaGlzIGlzIHdoYXQgaXMgcmV0dXJuZWQgb3IgZXhwb3J0ZWQgYnkgdGhpcyBtb2R1bGUuXG4gKiBUaGUgaW5pdCBmdW5jdGlvbiBhbmQgZGF0YSBwcm9wZXJ0eSBhcmUgYm90aCBleHBvc2VkIHB1YmxpY2x5IGFsdGhvdWdoIHRoZSBkYXRhIHByb3BlcnR5XG4gKiBpcyBmcm96ZW4gc28gY2Fubm90IGJlIGRpcmVjdGx5IG1hbmlwdWxhdGVkLlxuICpcbiAqIEB0eXBlIHt7ZGF0YToge30sIGluaXQ6IEZ1bmN0aW9ufX1cbiAqL1xudmFyIHN0YXRzID0ge1xuICAgIGRhdGE6IHt9XG59O1xuXG4vKipcbiAqIEluaXRpYWwgdmFsdWVzIHdoaWNoIGFyZSBleHBvc2VkIG9uIHRoZSBiYmNkb3Rjb20uc3RhdHMuZGF0YSBwcm9wZXJ0eVxuICpcbiAqIEB0eXBlIHt7YWRzUmVxdWVzdGVkOiBBcnJheSwgYWRzUmVuZGVyZWQ6IEFycmF5fX1cbiAqL1xudmFyIGluaXRpYWxEYXRhID0ge1xuICAgIGFkc1JlcXVlc3RlZDogW10sXG4gICAgYWRzUmVuZGVyZWQ6IFtdLFxuICAgIGFkc0VtcHR5OiBbXSxcbiAgICBhZHNTbG90czogW10sXG4gICAgYWRzU2h1dDogW11cbn07XG5cbi8qKlxuICogTWFwIG9mIGhhbmRsZXJzIHdoaWNoIGlzIHVwZGF0ZWQgZXZlcnkgdGltZSBiaW5kKCkgaXMgY2FsbGVkLiBXZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZXNlIHNvIHdlXG4gKiBjYW4gY2xlYW4gdXAgYWZ0ZXIgb3Vyc2VsdmVzIGFuZCB1bmJpbmQgYWxsIG9mIG91ciBsaXN0ZW5lcnNcbiAqXG4gKiBAdHlwZSB7e319XG4gKi9cbnZhciBoYW5kbGVycyA9IHt9O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBtYXAgb2YgZXZlbnQgbmFtZXMgdG8gYXJyYXkgb2YgaGFuZGxlcnMgYW5kIHVuYmluZHMgdGhlbSBhbGwuXG4gKlxuICogQHBhcmFtIGV2ZW50SGFuZGxlcnNcbiAqL1xuZnVuY3Rpb24gdW5iaW5kKGV2ZW50SGFuZGxlcnMpIHtcbiAgICBPYmplY3Qua2V5cyhldmVudEhhbmRsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudEhhbmRsZXJzW2V2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBiYmNkb3Rjb20ucHVic3ViLm9mZihldmVudCwgaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgYW4gZXZlbnQgbmFtZSBvciBhcnJheSBvZiBldmVudCBuYW1lcyBhbmQgYSByZWR1Y2VyIGZ1bmN0aW9uLiBJdCBzZXRzIHVwIGEgYmluZGluZyB0b1xuICogdGhlIGV2ZW50KHMpIGdpdmVuIGFuZCBjYWxscyB0aGUgcmVkdWNlciBmdW5jdGlvbiBmb3IgZWFjaCBldmVudCBwYXNzaW5nIGluIHRoZSBjdXJyZW50IGJiY2RvdGNvbS5zdGF0cy5kYXRhXG4gKiBvYmplY3QgYW5kIHRoZSBhcmd1bWVudHMgZ2l2ZW4gdGhlbiB0aGUgZXZlbnQgd2FzIHRyaWdnZXJlZC5cbiAqXG4gKiBFYWNoIGJvdW5kIGV2ZW50L3JlZHVjZXIgY29tYm8gaXMgc3RvcmVkIGludG8gdGhlIGhhbmRsZXJzIG1hcCBhbmQgdGhlbiB1bmJvdW5kIGlmIGluaXQgaXMgY2FsbGVkIGFnYWluLlxuICpcbiAqIEBwYXJhbSBldmVudHNcbiAqIEBwYXJhbSByZWR1Y2VyXG4gKi9cbmZ1bmN0aW9uIGJpbmQoZXZlbnRzLCByZWR1Y2VyKSB7XG4gICAgdmFyIG5vcm1hbGlzZWRFdmVudHMgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBbZXZlbnRzXTtcblxuICAgIG5vcm1hbGlzZWRFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IE9iamVjdC5mcmVlemUocmVkdWNlci5hcHBseShudWxsLCBbc3RhdHMuZGF0YV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKSk7XG4gICAgICAgICAgICBzdGF0cy5kYXRhID0gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICBiYmNkb3Rjb20ucHVic3ViLm9uKGV2ZW50LCBoYW5kbGVyKTtcbiAgICAgICAgaGFuZGxlcnNbZXZlbnRdID0gKGhhbmRsZXJzW2V2ZW50XSB8fCBbXSkuY29uY2F0KGhhbmRsZXIpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEluaXRpYWxpc2UgdGhlIHN0YXRzIG1vZHVsZSBhbmQgKHJlKWJpbmQgdGhlIGV2ZW50IGxpc3RlbmVycy4gV2hlbiBjYWxsZWQgdGhpcyBtZXRob2Qgd2lsbCByZXN0b3JlXG4gKiBiYmNkb3Rjb20uc3RhdHMuZGF0YSB0byBpdCdzIGluaXRpYWxEYXRhLCB1bmJpbmQgYW55IGJvdW5kIGV2ZW50IGxpc3RlbmVycyBhbmQgdGhlbiBiaW5kIGFsbFxuICogb2YgdGhlIGFwcHJvcHJpYXRlIGV2ZW50IGxpc3RlbmVycy5cbiAqXG4gKiBUaGUgaGFuZGxlciBmdW5jdGlvbnMgd2hpY2ggYXJlIHNldCB1cCB1c2luZyBiaW5kKCkgdGFrZSB0d28gKG9yIG1vcmUpXG4gKiBhcmd1bWVudHMsIHRoZSBjdXJyZW50IGRhdGEgb2JqZWN0LCBhbmQgYW55IGFyZ3VtZW50cyBwYXNzZWQgaW4gYnkgdGhlIGV2ZW50IHRyaWdnZXIuIFRoZXNlIGZ1bmN0aW9uc1xuICogc2hvdWxkIHJldHVybiBhIG5ldyBkYXRhIG9iamVjdCBiYXNlZCBvbiB0aGUgY3VycmVudCBkYXRhIHN0YXRlIGFuZCB0aGUgZXZlbnQgYXJndW1lbnRzLiBUaGV5IHNob3VsZFxuICogbm90IG1vZGlmeSB0aGUgZGF0YSBvYmplY3QsIGJ1dCBpbnN0ZWFkIHJldHVybiBhIG5ldyBtb2RpZmllZCBvYmplY3QuXG4gKi9cbnN0YXRzLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuXG4gICAgc3RhdHMuZGF0YSA9IE9iamVjdC5mcmVlemUoaW5pdGlhbERhdGEpO1xuICAgIHVuYmluZChoYW5kbGVycyk7XG5cbiAgICBiaW5kKCdiYmNkb3Rjb206aW5pdDpjb21wbGV0ZScsIGZ1bmN0aW9uIChkYXRhLCBpbml0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCBpbml0LnN0YXRzLCB7XG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbjogaW5pdC5zdGF0cy5pc0FzeW5jID8gJ2dwdC1hc3luYycgOiAnZ3B0J1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGJpbmQoJ2FkczpyZXF1ZXN0ZWQnLCBmdW5jdGlvbiAoZGF0YSwgc2xvdHMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1JlcXVlc3RlZDogc2xvdHNcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBiaW5kKCdhZDpyZW5kZXI6Y29tcGxldGUnLCBmdW5jdGlvbiAoZGF0YSwgYWRJZCwgaXNFbXB0eSkge1xuICAgICAgICBpZiAoZGF0YS5hZHNSZW5kZXJlZC5pbmRleE9mKGFkSWQpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1JlbmRlcmVkOiBkYXRhLmFkc1JlbmRlcmVkLmNvbmNhdChhZElkKSxcbiAgICAgICAgICAgIGFkc0VtcHR5OiBpc0VtcHR5ID8gZGF0YS5hZHNFbXB0eS5jb25jYXQoYWRJZCkgOiBkYXRhLmFkc0VtcHR5XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgYmluZCgnYWQ6cmVuZGVyJywgZnVuY3Rpb24gKGRhdGEsIGFkSWQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGRhdGEsIHtcbiAgICAgICAgICAgIGFkc1Nsb3RzOiBkYXRhLmFkc1Nsb3RzLmNvbmNhdChhZElkKVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGJpbmQoJ2FkOnJlbmRlcjpjbG9zZScsIGZ1bmN0aW9uIChkYXRhLCBhZElkKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7XG4gICAgICAgICAgICBhZHNTaHV0OiBkYXRhLmFkc1NodXQuY29uY2F0KGFkSWQpXG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdGF0cztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zdGF0cy5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkTG9hZEV2ZW50IChmdW5jKSB7XG4gICAgdmFyIHdpbmRvd09ubG9hZCA9IHdpbmRvdy5vbmxvYWQ7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cub25sb2FkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93T25sb2FkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93T25sb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jKCk7XG4gICAgICAgIH07XG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9ldmVudHMuanMiLCJcbi8vIFByZXN1bWVzIE9yYml0IGhhcyBwb2x5ZmlsbGVkIFByb21pc2VcbmNvbnN0IGF0dGVtcHRUb1Nob3dTaWduaW4gPSBmdW5jdGlvbigpe1xuICBpc09uQXBwcm9wcmlhdGVQYWdlKClcbiAgICAudGhlbihpc0Fkc0VuYWJsZWQpXG4gICAgLnRoZW4oaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUpXG4gICAgLnRoZW4oaXNVc2VyRWxpZ2libGUpXG4gICAgLnRoZW4oaXNJZGN0YUZsYWdwb2xlR3JlZW4pXG4gICAgLnRoZW4oaXNUaW1lVG9FbmNvdXJhZ2UpXG4gICAgLnRoZW4oZ2V0SWRDdGFCdXR0b25zKVxuICAgIC50aGVuKHNvbWVKc29uID0+IHtcbiAgICAgIC8vIFByZXN1bWVzIG9yYml0IGhhcyBwdXQgdGhlIGhlYWQgYW5kIGNzcyBsaW5rIGluIHRoZSBwYWdlXG4gICAgICBzaG93UG9wdXAoc29tZUpzb24uaHRtbClcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgaWYoZXJyICE9PSAnbm90X3NpZ25pbl9wYWdlJykge1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgIG5ldyBDdXN0b21FdmVudCgnYmJjLXVzZXItZXZlbnQnLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgY29udGFpbmVyOiAnc2lnbi1pbi1kaXNtaXNzaWJsZScsXG4gICAgICAgICAgICAgIGxhYmVsOiBlcnJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyB1c2VkIGluIGNhc2Ugb2YgYW4gZW1lcmdlbmN5Li4uXG5jb25zdCBpc0Fkc0VuYWJsZWQgPSBmdW5jdGlvbigpe1xuICBpZih3aW5kb3cuYmJjZG90Y29tLmNvbmZpZy5pc0Fkc0VuYWJsZWQoKSA9PT0gdHJ1ZSl7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgfVxuICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ2Fkc19ub3RfZW5hYmxlZCcpO1xufVxuXG5cbmNvbnN0IGlzT25BcHByb3ByaWF0ZVBhZ2UgPSBmdW5jdGlvbigpe1xuICAvLyBodHRwczovL3d3dy5iYmMuY28udWsvbmV3cy9idXNpbmVzcy00OTYwNTE4MD9hZHMgdGVjaGJpelxuICBjb25zdCBrZXl3b3JkID0gYmJjZG90Y29tLmFkdmVydHMua2V5VmFsdWVzLmdldCgna2V5d29yZCcpO1xuICBpZihrZXl3b3JkICYmIGtleXdvcmQgPT09ICdzaWduaW4nKXtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9XG4gIGlmKCAvWz98Jl1pZGN0YS1kZWJ1Zy8udGVzdCh3aW5kb3cubG9jYXRpb24uaHJlZikpe1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdub3Rfc2lnbmluX3BhZ2UnKTtcbn1cblxuXG5jb25zdCBzdG9yYWdlQXZhaWxhYmxlID0gZnVuY3Rpb24odHlwZSkge1xuICBsZXQgc3RvcmFnZTtcbiAgdHJ5IHtcbiAgICBzdG9yYWdlID0gd2luZG93W3R5cGVdO1xuICAgIGNvbnN0IHggPSAnX19zdG9yYWdlX3Rlc3RfXyc7XG4gICAgc3RvcmFnZS5zZXRJdGVtKHgsIHgpO1xuICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBET01FeGNlcHRpb24gJiYgKFxuICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgICBlLmNvZGUgPT09IDIyIHx8XG4gICAgICAvLyBGaXJlZm94XG4gICAgICBlLmNvZGUgPT09IDEwMTQgfHxcbiAgICAgIC8vIHRlc3QgbmFtZSBmaWVsZCB0b28sIGJlY2F1c2UgY29kZSBtaWdodCBub3QgYmUgcHJlc2VudFxuICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fFxuICAgICAgLy8gRmlyZWZveFxuICAgICAgZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSAmJlxuICAgICAgLy8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcbiAgICAgIChzdG9yYWdlICYmIHN0b3JhZ2UubGVuZ3RoICE9PSAwKTtcbiAgfVxufVxuXG5cbmNvbnN0IGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlID0gZnVuY3Rpb24oKXtcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYl9TdG9yYWdlX0FQSS9Vc2luZ190aGVfV2ViX1N0b3JhZ2VfQVBJXG4gIGlmKHN0b3JhZ2VBdmFpbGFibGUoJ2xvY2FsU3RvcmFnZScpKXtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlamVjdCgnbm9fbG9jYWxfc3RvcmFnZScpO1xufVxuXG5cbmNvbnN0IGlzVXNlckVsaWdpYmxlID0gZnVuY3Rpb24oKXtcbiAgY29uc3QgY2hlY2tzID0gW1xuICAgIHdpbmRvdy5iYmN1c2VyLmlzU2lnbmVkSW4oKSxcbiAgICB3aW5kb3cuYmJjdXNlci5hbGxvd3NQZXJmb3JtYW5jZUNvb2tpZXMoKVxuICBdO1xuXG4gIC8vIHdpbmRvdy5iYmN1c2VyLmFsbG93c0Z1bmN0aW9uYWxDb29raWVzKClcbiAgLy8gZnVuY0Nvb2tpZXNcblxuICByZXR1cm4gUHJvbWlzZS5hbGwoY2hlY2tzKVxuICAgIC50aGVuKChbc2lnbmVkSW4sIHBlcmZDb29raWVzXSkgPT4ge1xuICAgICAgaWYgKHNpZ25lZEluKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgndXNlcl9zaWduZWRfaW4nKTtcbiAgICAgIH1cblxuICAgICAgLy8gZG9uJ3Qgd29ycnkgYWJvdXQgZnVuY3RvaW5hbCBjb29raWVzIGZvciBub3dcbiAgICAgIC8vICghcGVyZkNvb2tpZXMgfHwgIWZ1bmNDb29raWVzKVxuXG4gICAgICBpZiAoIXBlcmZDb29raWVzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnY29va2llc19kaXNhYmxlZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIH0pO1xufVxuXG5cbmNvbnN0IGlzSWRjdGFGbGFncG9sZUdyZWVuID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHdpbmRvdy5yZXF1aXJlKFsnaWRjdGEtdjIvY29uZmlnJ10sIChpZGN0YSkgPT4ge1xuICAgIGNvbnN0IEZMQUdQT0xFID0gaWRjdGFbJ2lkLWF2YWlsYWJpbGl0eSddO1xuICAgIGlmIChGTEFHUE9MRSAhPT0gJ0dSRUVOJykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdpZGN0YV9mbGFncG9sZScpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9KTtcbn1cblxuXG4vLyA3IGRheXNcbmNvbnN0IFNFQ1NfQUZURVJfRElTTUlTU19VTlRJTF9QUk9NUFRBQkxFID0gNyAqIDI0ICogNjAgKiA2MDtcbmNvbnN0IGlzVGltZVRvRW5jb3VyYWdlID0gZnVuY3Rpb24gKCl7XG4gIGNvbnN0IHRpbWVTdGFtcCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShESVNNSVNTRURfVElNRVNUQU1QX0tFWSk7XG4gIGNvbnN0IHRpbWVTdGFtcEludCA9IHRpbWVTdGFtcCA/IHBhcnNlSW50KHRpbWVTdGFtcCwgMTApIDogMDtcbiAgaWYodGltZVN0YW1wSW50PT09MCB8fCAoKHRpbWVTdGFtcEludCArIFNFQ1NfQUZURVJfRElTTUlTU19VTlRJTF9QUk9NUFRBQkxFKSA8IHRpbWVzdGFtcEluU2VjTm93KCkpKXtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICB9XG4gIHJldHVybiBQcm9taXNlLnJlamVjdCgncmVjZW50bHlfZGlzbWlzc2VkJyk7XG59XG5cblxuY29uc3QgZ2V0SWRDdGFCdXR0b25zID0gZnVuY3Rpb24oKXtcbiAgbGV0IHNpemUgPSBnZXRCcmVha3BvaW50KCk7XG4gIGNvbnN0IGJ1dHRvbkNvbG91ciA9ICd3aGl0ZSc7XG4gIGNvbnN0IGJ1dHRvblNpemUgPSAoc2l6ZSA9PT0gMCkgPyAnc21hbGwnIDogJ21lZGl1bSc7XG4gIGNvbnN0IGNvbnRleHQgPSAnbmV3cyc7XG4gIGNvbnN0IHVzZXJPcmlnaW4gPSAnTkVXU19HTkwnO1xuICBjb25zdCBwdHJ0ID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvXFw/LiokLywgJycpICsgJz9wcm9tcHQnO1xuICBsZXQgcm9vdCA9ICdodHRwczovL2lkY3RhLnRlc3QuYXBpLmJiYy5jb20nXG4gIGlmKHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ3d3dy5iYmMuY29tJyl7XG4gICAgcm9vdCA9ICdodHRwczovL2lkY3RhLmFwaS5iYmMuY29tJ1xuICB9XG5cbiAgY29uc3QgdXJsID0gYCR7cm9vdH0vaWRjdGEvaW5pdD8mY29udGV4dD0ke2NvbnRleHR9JnVzZXJPcmlnaW49JHt1c2VyT3JpZ2lufSZwdHJ0PSR7cHRydH0mYnV0dG9uU2l6ZT0ke2J1dHRvblNpemV9JmJ1dHRvbkNvbG91cj0ke2J1dHRvbkNvbG91cn1gO1xuICByZXR1cm4gZmV0Y2godXJsKS50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XG59XG5cblxuY29uc3QgdGltZXN0YW1wSW5TZWNOb3cgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbn1cblxuY29uc3QgZ2V0QnJlYWtwb2ludCA9IGZ1bmN0aW9uKCl7XG4gIC8vIDAgbW9iaWxlLCAxIHRhYmxldCwgMiBkZXNrdG9wXG4gIGxldCBzaXplID0gMDtcbiAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiA3MjFweCknKS5tYXRjaGVzKSB7XG4gICAgc2l6ZSA9IDE7XG4gIH0gZWxzZSBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDEwMjVweCknKS5tYXRjaGVzKSB7XG4gICAgc2l6ZSA9IDI7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cblxubGV0IF9zaWduaW5Cb3gsIF9iYWNrZ3JvdW5kLCBfdGFiTGlzdCwgX2N1cnJlbnRUYWI7XG5jb25zdCBESVNNSVNTRURfVElNRVNUQU1QX0tFWSA9ICdkb3Rjb20vbmV3cy9kaXNtaXNzLXRpbWVzdGFtcCc7XG5jb25zdCBUSVRMRV9URVhUID0gJ1NpZ24gaW4gdG8gZ2V0IHRoZSBiZXN0IGZyb20gdGhlIEJCQyc7XG5jb25zdCBXSFlfVEVYVCA9ICdXaHkgc2lnbiBpbiB0byB0aGUgQkJDPyc7XG5jb25zdCBDTE9TRV9CVE5fVEVYVCA9ICdNYXliZSBsYXRlcic7XG5cbmNvbnN0IHNob3dQb3B1cCA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgaWYoX3NpZ25pbkJveCkge1xuICAgIGNsb3NlUG9wdXAodHJ1ZSk7XG4gIH1cblxuICBfYmFja2dyb3VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBfYmFja2dyb3VuZC5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NpZ25faW4tYmcnKTtcblxuICBfc2lnbmluQm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIF9zaWduaW5Cb3guc2V0QXR0cmlidXRlKCdpZCcsICdzaWduX2luJyk7XG4gIF9zaWduaW5Cb3guc2V0QXR0cmlidXRlKCdyb2xlJywgJ2FsZXJ0ZGlhbG9nJyk7XG4gIF9zaWduaW5Cb3guc2V0QXR0cmlidXRlKCdkYXRhLWJiYy1jb250YWluZXInLCAnc2lnbi1pbi1kaXNtaXNzaWJsZScpO1xuICBfc2lnbmluQm94LnNldEF0dHJpYnV0ZSgnZGF0YS1iYmMtdGl0bGUnLCAnc2lnbi1pbi1jb250YWluZXItdmlld2VkJyk7XG4gIF9zaWduaW5Cb3guc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknLCAnc2lnbl9pbi1oZWFkZXInKTtcblxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmNsYXNzTmFtZSA9ICdzaWduX2luLWNvbnRhaW5lcic7XG5cbiAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcbiAgaGVhZGVyLmNsYXNzTmFtZSA9ICdzaWduX2luLWhlYWRlcic7XG4gIGhlYWRlci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3NpZ25faW4taGVhZGVyJyk7XG4gIGhlYWRlci50ZXh0Q29udGVudCA9IFRJVExFX1RFWFQ7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xuXG4gIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYnV0dG9ucy5jbGFzc05hbWUgPSAnc2lnbl9pbi1idXR0b24tY29udGFpbmVyJztcbiAgYnV0dG9ucy5pbm5lckhUTUwgPSBodG1sO1xuXG4gIGNvbnN0IHNpZ25pbkJ1dHRvbiA9IGJ1dHRvbnMucXVlcnlTZWxlY3RvcignLmlkNC1jdGEtc2lnbmluJyk7XG4gIGNvbnN0IHJlZ2lzdGVyQnV0dG9uID0gYnV0dG9ucy5xdWVyeVNlbGVjdG9yKCcuaWQ0LWN0YS1yZWdpc3RlcicpO1xuICBzaWduaW5CdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWJiYy10aXRsZScsICdzaWduLWluJyk7XG4gIHNpZ25pbkJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYmJjLWNvbnRhaW5lcicsICdzaWduLWluLWRpc21pc3NpYmxlJyk7XG4gIHJlZ2lzdGVyQnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS1iYmMtdGl0bGUnLCAncmVnaXN0ZXInKTtcbiAgcmVnaXN0ZXJCdXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLWJiYy1jb250YWluZXInLCAnc2lnbi1pbi1kaXNtaXNzaWJsZScpXG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbnMpO1xuICBfc2lnbmluQm94LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgc2lnbmluQnV0dG9uLmZvY3VzKCk7XG4gIH0sIDEwMCk7XG5cbiAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgY2xvc2VCdXR0b24uY2xhc3NOYW1lID0gJ3NpZ25faW4tZXhpdCc7XG4gIGNsb3NlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdjbG9zZScpO1xuICBjbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYmJjLXRpdGxlJywgJ2Rpc21pc3MnKVxuICBjbG9zZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYmJjLWNvbnRhaW5lcicsICdzaWduLWluLWRpc21pc3NpYmxlJyk7XG4gIGNsb3NlQnV0dG9uLnRleHRDb250ZW50ID0gQ0xPU0VfQlROX1RFWFQ7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG5cbiAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKERJU01JU1NFRF9USU1FU1RBTVBfS0VZLCBTdHJpbmcodGltZXN0YW1wSW5TZWNOb3coKSkpO1xuXG4gICAgLy8gaGF2ZSB0byB3YWl0IHRvIGNsb3NlIHBvcHVwIGhlcmUgb3RoZXJ3aXNlIHN0YXRzIGRvbid0IGZpcmVcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsb3NlUG9wdXAoKTtcbiAgICB9LCAxMDApO1xuXG4gIH0pO1xuXG4gIGNvbnN0IGxpbmVicmVhayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hyJyk7XG4gIGxpbmVicmVhay5jbGFzc05hbWUgPSAnc2lnbl9pbi1saW5lLWJyZWFrJztcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxpbmVicmVhayk7XG5cbiAgY29uc3Qgd2h5TGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgd2h5TGluay50YXJnZXQgPSAnX2JsYW5rJztcbiAgd2h5TGluay5jbGFzc05hbWUgPSAnc2lnbl9pbi13aHknO1xuXG4gIC8vIG5lZWQgdG8gZmluZCBhbmQgYWRkIGV4dHJhcyB0byB0aGlzIHVybC4gaS5lLiBwdHJ0XG4gIHdoeUxpbmsuaHJlZiA9ICdodHRwczovL3d3dy5iYmMuY29tL3VzaW5ndGhlYmJjL3lvdXItYmJjLWFjY291bnQtZ2xvYmFsJztcbiAgd2h5TGluay5zZXRBdHRyaWJ1dGUoJ2RhdGEtYmJjLXRpdGxlJywgJ3doeS1zaWduLWluJyk7XG4gIHdoeUxpbmsuc2V0QXR0cmlidXRlKCdkYXRhLWJiYy1jb250YWluZXInLCAnc2lnbi1pbi1kaXNtaXNzaWJsZScpO1xuXG4gIGNvbnN0IHdoeUljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHdoeUljb24uY2xhc3NOYW1lID0gJ3NpZ25faW4td2h5LWljb24nO1xuICB3aHlJY29uLmlubmVySFRNTCA9IGA8c3ZnIGZvY3VzYWJsZT0nZmFsc2UnIHZpZXdCb3g9JzAgMCAzMiAzMic+PHBhdGggZD0nTTE2IDBDNy4yIDAgMCA3LjIgMCAxNnM3LjIgMTYgMTYgMTYgMTYtNy4yIDE2LTE2UzI0LjggMCAxNiAwem0yIDI1aC00VjEzaDR2MTJ6bTAtMTRoLTRWN2g0djR6Jz48L3BhdGg+PC9zdmc+YFxuICB3aHlMaW5rLmFwcGVuZENoaWxkKHdoeUljb24pO1xuXG4gIGNvbnN0IHdoeVRleHRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICB3aHlUZXh0U3Bhbi5jbGFzc05hbWUgPSAnc2lnbl9pbi13aHktdGV4dCc7XG4gIHdoeVRleHRTcGFuLnRleHRDb250ZW50ID0gV0hZX1RFWFQ7XG4gIHdoeUxpbmsuYXBwZW5kQ2hpbGQod2h5VGV4dFNwYW4pO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh3aHlMaW5rKTtcblxuICBfdGFiTGlzdCA9IFtzaWduaW5CdXR0b24sIHJlZ2lzdGVyQnV0dG9uLCBjbG9zZUJ1dHRvbiwgd2h5TGlua107XG4gIF9jdXJyZW50VGFiID0gMTtcblxuICBjb25zdCBrZXlIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zdCBrZXlDb2RlID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7XG5cbiAgICBzd2l0Y2ggKGtleUNvZGUpIHtcbiAgICAgIGNhc2UgMjc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY2xvc2VQb3B1cCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTogLy9PdmVycmlkZSB0YWIgY29udHJvbHMgdG8gdGFiIGxvb3AgaW5zaWRlIHBvcHVwIGFuZCBwcmV2ZW50IGZvY3VzIGZyb20gbW92aW5nIHRvIHRoZSBwYWdlIHVuZGVybmVhdGhcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHZhciB0bDEgPSBfdGFiTGlzdC5sZW5ndGggLSAxO1xuXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgX2N1cnJlbnRUYWIgPSAoX2N1cnJlbnRUYWIgPT09IDApID8gdGwxIDogX2N1cnJlbnRUYWIgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9jdXJyZW50VGFiID0gKF9jdXJyZW50VGFiID09PSB0bDEpID8gMCA6IF9jdXJyZW50VGFiICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90YWJMaXN0W19jdXJyZW50VGFiXS5mb2N1cygpO1xuICAgICAgICB9LCAyMDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuXG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBfdGFiTGlzdC5sZW5ndGg7IGkrKykge1xuICAgIF90YWJMaXN0W2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBrZXlIYW5kbGVyKTtcblxuICB9XG5cbiAgLy8gSGFzIHRvIGJlIGluc2lkZSBvcmItbW9kdWxlcyBvdGhlcndpc2UgdGV4dCBjb250ZW50IGZyb20gaWRjdGEgY2hhbmdlc1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yYi1tb2R1bGVzJyk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoX2JhY2tncm91bmQpO1xuICBlbGVtZW50LmFwcGVuZENoaWxkKF9zaWduaW5Cb3gpO1xufVxuXG5cbmNvbnN0IGNsb3NlUG9wdXAgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfYmFja2dyb3VuZCkge1xuICAgIF9iYWNrZ3JvdW5kLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX2JhY2tncm91bmQpO1xuICAgIF9iYWNrZ3JvdW5kID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChfc2lnbmluQm94KSB7XG4gICAgX3NpZ25pbkJveC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKF9zaWduaW5Cb3gpO1xuICAgIF9zaWduaW5Cb3ggPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5pdDogZnVuY3Rpb24oKXtcbiAgICBhdHRlbXB0VG9TaG93U2lnbmluKCk7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9pZGN0YS9pZGN0YS5qcyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFkOiByZXF1aXJlKCdhZHZlcnRzL2FkJyksXG4gICAgYWRBc3luY1JlbmRlcmVyOiByZXF1aXJlKCdhZHZlcnRzL2FkQXN5bmNSZW5kZXJlcicpLFxuICAgIGFkRmFjdG9yeTogcmVxdWlyZSgnYWR2ZXJ0cy9hZEZhY3RvcnknKSxcbiAgICBhZEZpbHRlcjogcmVxdWlyZSgnYWR2ZXJ0cy9hZEZpbHRlcicpLFxuICAgIGFkUmVnaXN0ZXI6IHJlcXVpcmUoJ2FkdmVydHMvYWRSZWdpc3RlcicpLFxuICAgIGFkUmVuZGVyZXI6IHJlcXVpcmUoJ2FkdmVydHMvYWRSZW5kZXJlcicpLFxuICAgIGFkc2Vuc2VSZW5kZXJlcjogcmVxdWlyZSgnYWR2ZXJ0cy9hZHNlbnNlUmVuZGVyZXInKSxcbiAgICBhZFN1aXRlczogcmVxdWlyZSgnYWR2ZXJ0cy9hZFN1aXRlcycpLFxuICAgIGFkVGV4dDogcmVxdWlyZSgnYWR2ZXJ0cy9hZFRleHQnKSxcbiAgICBhZFVuaXQ6IHJlcXVpcmUoJ2FkdmVydHMvYWRVbml0JyksXG4gICAgYWRVbml0V2ViU2VydmljZTogcmVxdWlyZSgnYWR2ZXJ0cy9hZFVuaXRXZWJTZXJ2aWNlJyksXG4gICAgYnJhbmRpbmc6IHJlcXVpcmUoJ2FkdmVydHMvYnJhbmRpbmcnKSxcbiAgICBicmVha3BvaW50czogcmVxdWlyZSgnYWR2ZXJ0cy9icmVha3BvaW50cycpLFxuICAgIGRmcHBSZXF1ZXN0OiByZXF1aXJlKCdhZHZlcnRzL2RmcHBSZXF1ZXN0JyksXG4gICAga2V5VmFsdWVzOiByZXF1aXJlKCdhZHZlcnRzL2tleVZhbHVlcycpLFxuICAgIGxheW91dDogcmVxdWlyZSgnYWR2ZXJ0cy9sYXlvdXQnKSxcbiAgICBvdXRicmFpblJlbmRlcmVyOiByZXF1aXJlKCdhZHZlcnRzL291dGJyYWluUmVuZGVyZXInKSxcbiAgICBzbG90OiByZXF1aXJlKCdhZHZlcnRzL3Nsb3QnKSxcbiAgICBzbG90QXN5bmM6IHJlcXVpcmUoJ2FkdmVydHMvc2xvdEFzeW5jJyksXG4gICAgc2xvdERlZmVycmVkOiByZXF1aXJlKCdhZHZlcnRzL3Nsb3REZWZlcnJlZCcpLFxuICAgIHNsb3RJbmZpbml0ZTogcmVxdWlyZSgnYWR2ZXJ0cy9zbG90SW5maW5pdGUnKVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL2luZGV4LmpzIiwidmFyIEJyYW5kaW5nID0gcmVxdWlyZSgnYWR2ZXJ0cy9icmFuZGluZycpO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpO1xudmFyIHB1YnN1YiA9IHJlcXVpcmUoJ3B1YnN1YicpO1xudmFyIGxheW91dCA9IHJlcXVpcmUoJ2FkdmVydHMvbGF5b3V0Jyk7XG5cbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnYWR2ZXJ0czphZCcpO1xuXG52YXIgQURfSEVJR0hUX0FESlVTVE1FTlQgPSAzMCxcbiAgICBTTE9UX1BSRUZJWCA9ICdiYmNjb21fJyxcbiAgICBBRF9JU19WSVNJQkxFID0gU0xPVF9QUkVGSVggKyAndmlzaWJsZScsXG4gICAgQURfSVNfU0hVVF9DTEFTUyA9IFNMT1RfUFJFRklYICsgJ3NodXQnLFxuICAgIERJU1BMQVlfTk9ORV9DTEFTUyA9IFNMT1RfUFJFRklYICsgJ2Rpc3BsYXlfbm9uZScsXG4gICAgYWRUZXh0S2V5ID0ge1xuICAgICAgICBcImRlZmF1bHRcIjogJ2FkdmVydGlzZW1lbnRUZXh0JyxcbiAgICAgICAgXCJzcG9uc29yX3NlY3Rpb25cIjogJ3Nwb25zb3JlZEJ5VGV4dCcsXG4gICAgICAgIFwic3BvbnNvclwiOiAnaW5Bc3NvY2lhdGlvbldpdGhUZXh0JyxcbiAgICAgICAgXCJtb2R1bGVcIjogJ2luQXNzb2NpYXRpb25XaXRoVGV4dCcsXG4gICAgICAgIFwicGFydG5lclwiOiAnYWR2ZXJ0aXNpbmdQYXJ0bmVyc1RleHQnLFxuICAgICAgICBcImFkc2Vuc2VcIjogJ2FkdmVydGlzZW1lbnRUZXh0J1xuICAgIH07XG5cbnZhciBnZXRDb250ZW50cyA9IGZ1bmN0aW9uIChkb21JZCkge1xuICAgIHZhciBkb21BZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRvbUlkKTtcbiAgICBpZiAodHlwZW9mIGRvbUFkICE9PSAndW5kZWZpbmVkJyAmJiBkb21BZCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZG9tQWQuaW5uZXJIVE1MLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEdOQURURUNILTE3MDUtZmxleGZyYW1lLWFkXG4gKi9cbnZhciBmbGV4RnJhbWVBZFVwZGF0ZSA9IGZ1bmN0aW9uIChkb21JZCl7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGxlYWRlcmJvYXJkRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkb21JZCk7XG4gICAgICAgIHZhciBmbGV4ZnJhbWVFbCA9IGxlYWRlcmJvYXJkRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnY2VsdHJhLWFkLWlubGluZS1ob3N0Jyk7XG4gICAgICAgIHZhciBhZEZyYW1lRWwgPSB1dGlscy5nZXRQYXJlbnRFbGVtZW50QnlDbGFzcyhsZWFkZXJib2FyZEVsLCAnQWRGcmFtZV9faW5uZXInLCA1LCB0cnVlKTtcbiAgICAgICAgaWYgKGZsZXhmcmFtZUVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxvZygnRmxleCBGcmFtZSBBZCBkZXRlY3RlZCcpO1xuICAgICAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MobGVhZGVyYm9hcmRFbCwgJ2ZsZXhmcmFtZS1hZCcpO1xuICAgICAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MobGVhZGVyYm9hcmRFbC5wYXJlbnRFbGVtZW50LCAnZmxleGZyYW1lLWFkJyk7XG4gICAgICAgICAgICBpZiAoYWRGcmFtZUVsKSB7IC8vUFdBIGV4dHJhXG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MoYWRGcmFtZUVsLCAnZmxleGZyYW1lLWFkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgfVxufVxuXG52YXIgQWQgPSBmdW5jdGlvbiAoYWRJRCkge1xuICAgIHRoaXMuYWRJRCA9IGFkSUQ7XG4gICAgdGhpcy5kb21JZCA9IFNMT1RfUFJFRklYICsgYWRJRDtcbiAgICB0aGlzLndpZHRoID0gbnVsbDtcbiAgICB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgdGhpcy5icmFuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMucHJlbG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmVkID0gZmFsc2U7XG4gICAgdGhpcy5ldmVudFNpemUgPSBudWxsO1xuICAgIHRoaXMuY29udGVudHMgPSB7XG4gICAgICAgIGJhc2U6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuXG4gICAgdGhpcy5hZFR5cGUgPSAnc3RhbmRhcmQnO1xuICAgIHRoaXMuc2l6ZVNldCA9IGZhbHNlO1xuICAgIHRoaXMuaXNSZXNwb25zaXZlID0gZmFsc2U7XG4gICAgdGhpcy5pc0ZsdWlkID0gZmFsc2U7XG4gICAgdGhpcy5hbGxvd1NjcmVlblJlYWRlciA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudFNsb3RHcm91cHMgPSBbXTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTbG90R3JvdXBzID0gW107XG4gICAgdGhpcy5zdGlja3kgPSB7aXNTdGlja3k6IGZhbHNlfTtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRDbG9zZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNsb3NlZCA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLmNsb3NlZDtcbn07XG5cbkFkLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBsb2coJ2Nsb3NlICcgKyB0aGlzLmFkSUQpO1xuICAgIHRoaXMuc2V0Q2xvc2VkKHRydWUpO1xuICAgIHRoaXMuc2h1dCgpO1xufTtcblxuQWQucHJvdG90eXBlLmlzQ2xvc2VBZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZWQ7XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0UmVuZGVyZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLnJlbmRlcmVkID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZWQ7XG59O1xuXG5BZC5wcm90b3R5cGUuaXNSZW5kZXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlZDtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgdmFyIGk7XG4gICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICB0aGlzW2ldID0gY29uZmlnW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuQWQucHJvdG90eXBlLnNldEJhc2VDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY29udGVudHMuYmFzZSA9IGdldENvbnRlbnRzKHRoaXMuZG9tSWQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmJhc2U7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0QmFzZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudHMuYmFzZTtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRDdXJyZW50U2xvdEdyb3VwcyA9IGZ1bmN0aW9uIChjdXJyZW50U2xvdCkge1xuICAgIGxvZygnc2V0dGluZ3Mgc2xvdCBncm91cHMgZm9yICcgKyB0aGlzLmFkSUQgKyAnIHRvICcgKyBjdXJyZW50U2xvdCk7XG4gICAgdGhpcy5jdXJyZW50U2xvdEdyb3VwcyA9IGN1cnJlbnRTbG90O1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuQWQucHJvdG90eXBlLmdldEN1cnJlbnRTbG90R3JvdXBzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTbG90R3JvdXBzO1xufTtcblxuQWQucHJvdG90eXBlLnJlZ2lzdGVyU2xvdEdyb3VwcyA9IGZ1bmN0aW9uIChncm91cHMpIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTbG90R3JvdXBzLnB1c2goZ3JvdXBzKTtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRSZWdpc3RlcmVkU2xvdEdyb3VwcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmVkU2xvdEdyb3Vwcztcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRQcmVsb2FkZWQgPSBmdW5jdGlvbiAocHJlbG9hZCkge1xuICAgIHRoaXMucHJlbG9hZGVkID0gcHJlbG9hZDtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkFkLnByb3RvdHlwZS5pc1ByZWxvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wcmVsb2FkZWQ7XG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBnZXREb21FbGVtZW50KClcbiAqIEByZXR1cm5zIHtudWxsfEVsZW1lbnR8Kn1cbiAqL1xuQWQucHJvdG90eXBlLmRvbUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xufTtcblxuQWQucHJvdG90eXBlLmdldERvbUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kb21JZCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5lbGVtZW50ICYmIHRoaXMuZG9tSWQuaW5kZXhPZignYWRzZW5zZScpID4gLTEpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0aGlzLmRvbUlkKVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRBZHZlcnREaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFVzZSBmb3JjZWQgc2V0IHdpZHRoICYgaGVpZ2h0IGlmIHNldFxuICAgIHZhciBhZHZlcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRvbUlkKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogdGhpcy53aWR0aCB8fCAoYWR2ZXJ0ID8gYWR2ZXJ0LmNsaWVudFdpZHRoIDogMCksXG4gICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQgfHwgKGFkdmVydCA/IGFkdmVydC5jbGllbnRIZWlnaHQgOiAwKVxuICAgIH07XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbiAoY2xpZW50V2lkdGgpIHtcbiAgICB0aGlzLndpZHRoID0gY2xpZW50V2lkdGg7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZ2V0QWR2ZXJ0RGltZW5zaW9ucygpLndpZHRoLCAxMCk7XG59O1xuXG5BZC5wcm90b3R5cGUuc2V0SGVpZ2h0ID0gZnVuY3Rpb24gKGNsaWVudEhlaWdodCkge1xuICAgIHRoaXMuaGVpZ2h0ID0gY2xpZW50SGVpZ2h0O1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuQWQucHJvdG90eXBlLmdldEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5nZXRBZHZlcnREaW1lbnNpb25zKCkuaGVpZ2h0LCAxMCk7XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0Q3JlYXRpdmVIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIChiYmNkb3Rjb20ub2JqZWN0cygnYmJjZG90Y29tLmNvbmZpZy5pc0FzeW5jJykpID8gdGhpcy5nZXRIZWlnaHQoKSA6IHRoaXMuZ2V0SGVpZ2h0KCkgLSBBRF9IRUlHSFRfQURKVVNUTUVOVDtcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRBZERvbUhlaWdodFdpZHRoID0gZnVuY3Rpb24gKGhlaWdodCwgd2lkdGgsIGlzSWZyYW1lU2V0dGluZ1NpemUpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RG9tRWxlbWVudCgpO1xuICAgIGlmIChlbGVtZW50ICE9PSBudWxsICYmICghdGhpcy5zaXplU2V0IHx8IGlzSWZyYW1lU2V0dGluZ1NpemUpKSB7XG4gICAgICAgIHZhciBhZFBhZEhlaWdodCA9IDM1O1xuICAgICAgICBpZiAodHlwZW9mIHdpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4JztcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IChoZWlnaHQgKyBhZFBhZEhlaWdodCkgKyAncHgnO1xuICAgICAgICB0aGlzLnNpemVTZXQgPSB0cnVlO1xuICAgIH1cbn07XG5cbi8qKlxuICogQSBmdW5jdGlvbiB1c2VkIGJ5IHRoaXJkIHBhcnR5IGFkcyB0byBjaGFuZ2UgdGhlIHNpemUgb2YgdGhlIGlGcmFtZSBhbmQgaXQncyBvdGhlciBkaXYnc1xuICogQHBhcmFtIGhlaWdodFxuICogQHBhcmFtIHdpZHRoXG4gKiBAcmV0dXJucyBBZFxuICovXG5BZC5wcm90b3R5cGUuc2V0SWZyYW1lU2l6ZSA9IGZ1bmN0aW9uIChoZWlnaHQsIHdpZHRoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICB2YXIgeCxcbiAgICAgICAgYWRJZnJhbWVzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlmcmFtZVwiKSxcbiAgICAgICAgaW5zRWxlbWVudHMgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5zXCIpO1xuICAgIHRoaXMuc2V0QWREb21IZWlnaHRXaWR0aChoZWlnaHQsIHdpZHRoLCB0cnVlKTtcbiAgICB0aGlzLnNldEV2ZW50U2l6ZShbd2lkdGgsIGhlaWdodF0pO1xuICAgIGlmIChhZElmcmFtZXMubGVuZ3RoID49IDEgJiYgdHlwZW9mIGFkSWZyYW1lc1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGFkSWZyYW1lc1swXS53aWR0aCA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGFkSWZyYW1lc1swXS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuICAgIGZvciAoeCBpbiBpbnNFbGVtZW50cykge1xuICAgICAgICBpZiAodHlwZW9mIGluc0VsZW1lbnRzW3hdLnN0eWxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGluc0VsZW1lbnRzW3hdLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zRWxlbWVudHNbeF0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm9wZW5Bc3luYyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBwdWJzdWIudHJpZ2dlcignYWQ6cmVzaXplJywgdGhpcy5hZElELCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBwdWJzdWIudHJpZ2dlcignYWQ6cmVzaXplOicgKyB0aGlzLmFkSUQsIHRoaXMuYWRJRCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbkFkLnByb3RvdHlwZS5zZXRSZXNwb25zaXZlID0gZnVuY3Rpb24gKHJlc3BvbnNpdmUpIHtcbiAgICB0aGlzLmlzUmVzcG9uc2l2ZSA9IHJlc3BvbnNpdmU7XG4gICAgdXRpbHMuYWRkVGFnQ2xhc3ModGhpcy5nZXREb21FbGVtZW50KCksICdiYmNjb21fcmVzcG9uc2l2ZScpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuQWQucHJvdG90eXBlLmdldEFkVGV4dEtleSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgeDtcbiAgICBmb3IgKHggaW4gYWRUZXh0S2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmFkSUQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdGhpcy5hZElELmluZGV4T2YgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuYWRJRC5pbmRleE9mKHgpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkVGV4dEtleVt4XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWRUZXh0S2V5WydkZWZhdWx0J107XG59O1xuXG5BZC5wcm90b3R5cGUuZ2V0QWRUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodHlwZW9mIHRoaXMuaGFzQWRUZXh0ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmhhc0FkVGV4dCA9PT0gZmFsc2UpID9cbiAgICAgICAgZmFsc2UgOiAodHlwZW9mIHRoaXMuYWR2ZXJ0VGV4dCA9PT0gJ3VuZGVmaW5lZCcgPyBiYmNkb3Rjb20uYWR2ZXJ0cy5hZFRleHQuZ2V0VGV4dCh0aGlzLmdldEFkVGV4dEtleSgpKSA6IHRoaXMuYWR2ZXJ0VGV4dCkgO1xufTtcblxuQWQucHJvdG90eXBlLnNldEFkVGV4dCA9IGZ1bmN0aW9uIChhZHZlcnRUZXh0KSB7XG4gICAgaWYgKHRoaXMuYWRJRC5pbmRleE9mKCdzcG9uc29yJykgPT09IDAgJiYgYWR2ZXJ0VGV4dCAmJiAvXltBLVphLXogJ1xcXy1dKyQvLnRlc3QoYWR2ZXJ0VGV4dCkpIHtcbiAgICAgICAgdGhpcy5hZHZlcnRUZXh0ID0gYWR2ZXJ0VGV4dDtcbiAgICAgICAgdGhpcy5oYXNBZFRleHQgPSB0cnVlO1xuICAgIH1cbn07XG5cbkFkLnByb3RvdHlwZS5nZXRBZEluZm9VcmwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGJiY2RvdGNvbS5hZHZlcnRzLmFkVGV4dC5nZXRJbmZvVXJsKHRoaXMuZ2V0QWRUZXh0S2V5KCkpO1xufTtcblxuQWQucHJvdG90eXBlLmdldEFkSWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRJRDtcbn07XG5cbkFkLnByb3RvdHlwZS5nZXRBZE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QWRJZCgpO1xufTtcblxuLyoqXG4gKiBVU0VEIGluIFN5bmNocm9ub3VzIHNsb3QgcmVxdWVzdHNcbiAqL1xuQWQucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBnZXRDb250ZW50cyh0aGlzLmRvbUlkKTtcbiAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmRvbUlkKTtcbiAgICBpZiAoY3VycmVudCAmJiAhdGhpcy5pc0Nsb3NlQWQoKSAmJiAhYmJjZG90Y29tLm9iamVjdHMoJ2JiY2RvdGNvbS5jb25maWcuaXNBc3luYycpKSB7XG4gICAgICAgIHRoaXMuc2V0Q2xvc2VkKHRoaXMuY29udGVudHMuYmFzZSA9PT0gY3VycmVudCAmJiAtMSA9PT0gY3VycmVudC5pbmRleE9mKCdpZnJhbWUnKSk7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICB0aGlzLmRpc2FibGVTY3JlZW5SZWFkZXJGb3JBZENvbnRlbnQoKTtcbn07XG5cbi8qKlxuICogV2UgbmVlZCB0byBkaXNhYmxlIHRhYmJpbmcgdGhyb3VnaCBhZHMgYXMgbm90IGFsbCBhZHMgYXJlIGJ1aWx0IGZvciBzY3JlZW4gcmVhZGVyc1xuICovXG5BZC5wcm90b3R5cGUuZGlzYWJsZVNjcmVlblJlYWRlckZvckFkQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSwgaiwgbGlua3MsIGlmcmFtZXMsIGVsZW1lbnQ7XG4gICAgdmFyIGFkU2xvdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiYmNjb21fYWR2ZXJ0Jyk7XG4gICAgZm9yICggaiA9IDA7IGogPCBhZFNsb3RzLmxlbmd0aDsgaisrICkge1xuICAgICAgICBlbGVtZW50ID0gYWRTbG90c1tqXTtcbiAgICAgICAgbGlua3MgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlua3NbaV0udGFiSW5kZXggPSBcIi0xXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWZyYW1lcyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lmcmFtZScpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWZyYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWZyYW1lc1tpXS50YWJJbmRleCA9IFwiLTFcIjtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogVE9ETyAtIFRoZSBjbG9zaW5nIG9mIHNsb3RzIGFuZCByZXNpemluZyBkb2VzIG5vdCB3b3JrIGZvciBJRTcsIGF3YWl0aW5nIGdvb2dsZSB0byBzZW5kIHNpemVcbiAqL1xuQWQucHJvdG90eXBlLnNodXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICBpZiAoXG4gICAgICAgIGVsZW1lbnQgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoQURfSVNfU0hVVF9DTEFTUykgPT09IC0xICYmXG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lLmluZGV4T2YoRElTUExBWV9OT05FX0NMQVNTKSA9PT0gLTFcbiAgICApIHtcbiAgICAgICAgLy8gVE9ETyAtIEFzIHdlIG5vdyBzaHV0IHRoZSBzbG90IGFzIG9wcG9zZWQgdG8gdGhlIGFkLCBmb2xsb3dpbmcgbGluZSBjb3VsZCBiZSByZW1vdmVkXG4gICAgICAgIGlmKGVsZW1lbnQuaWQuaW5kZXhPZignYmJjY29tXycpID09PSAwKSB7XG4gICAgICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhlbGVtZW50LCBBRF9JU19TSFVUX0NMQVNTKTtcbiAgICAgICAgfVxuICAgICAgICBpZihlbGVtZW50LnBhcmVudEVsZW1lbnQuaWQuaW5kZXhPZignYmJjY29tXycpID09PSAwKSB7XG4gICAgICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhlbGVtZW50LnBhcmVudEVsZW1lbnQsIEFEX0lTX1NIVVRfQ0xBU1MpO1xuICAgICAgICB9XG4gICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGVsZW1lbnQucGFyZW50RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgICAgIHV0aWxzLnJlbW92ZUJvZHlUYWdDbGFzcyhTTE9UX1BSRUZJWCArIHRoaXMuYWRJRCk7XG4gICAgICAgIGlmKHRoaXMuZG9tSWQuaW5kZXhPZignbXB1JykgPiAwKXtcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUJvZHlUYWdDbGFzcyh0aGlzLmRvbUlkK1wiX1wiK1wiYmlnXCIpO1xuICAgICAgICAgICAgdXRpbHMucmVtb3ZlQm9keVRhZ0NsYXNzKHRoaXMuZG9tSWQrXCJfXCIrXCJzbWFsbFwiKTtcbiAgICAgICAgfVxuICAgICAgICBwdWJzdWIudHJpZ2dlcignYWQ6Y2xvc2UnLCB0aGlzLmFkSUQpO1xuICAgICAgICBwdWJzdWIudHJpZ2dlcignYWQ6Y2xvc2U6JyArIHRoaXMuYWRJRCwgdGhpcy5hZElEKTtcbiAgICB9XG59O1xuXG5BZC5wcm90b3R5cGUuaXNTaHV0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgcmV0dXJuIChlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKEFEX0lTX1NIVVRfQ0xBU1MpICE9PSAtMSk7XG59O1xuXG4vKipcbiAqIFRPRE8gLSBNb3ZlIHRoaXMgaW50byBhIHNlcGFyYXRlIHNwb25zb3IgY2xhc3NcbiAqL1xuQWQucHJvdG90eXBlLnNldFRpdGxlRm9yU3BvbnNvckFkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuYnJhbmRpbmcgJiYgdGhpcy5hZElEID09PSAnc3BvbnNvcl9zZWN0aW9uJykge1xuICAgICAgICB0aGlzLmJyYW5kaW5nID0gbmV3IEJyYW5kaW5nKGJiY2RvdGNvbS5hZHZlcnRzLmtleVZhbHVlcy5nZXQoJ2tleXdvcmQnKSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVU0VEIGluIFN5bmNocm9ub3VzIHNsb3QgcmVxdWVzdHNcbiAqL1xuQWQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICB0aGlzLnNldFRpdGxlRm9yU3BvbnNvckFkcygpO1xuICAgIGlmICh0aGlzLmlzUmVzcG9uc2l2ZSkge1xuICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhlbGVtZW50LCAnYmJjY29tX3Jlc3BvbnNpdmUnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzQ2xvc2VBZCgpKSB7XG4gICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGVsZW1lbnQsIERJU1BMQVlfTk9ORV9DTEFTUyk7XG4gICAgICAgIC8vIFRPRE8gLSBBcyB3ZSBub3cgc2h1dCB0aGUgc2xvdCBhcyBvcHBvc2VkIHRvIHRoZSBhZCwgZm9sbG93aW5nIGxpbmUgY291bGQgYmUgcmVtb3ZlZFxuICAgICAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhlbGVtZW50LCBBRF9JU19TSFVUX0NMQVNTKTtcbiAgICAgICAgdXRpbHMucmVtb3ZlVGFnQ2xhc3MoZWxlbWVudC5wYXJlbnRFbGVtZW50LCBBRF9JU19TSFVUX0NMQVNTKTtcbiAgICAgICAgdXRpbHMuYWRkQm9keVRhZ0NsYXNzKFNMT1RfUFJFRklYICsgdGhpcy5hZElEKTtcbiAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MoZWxlbWVudC5wYXJlbnRFbGVtZW50LCBBRF9JU19WSVNJQkxFKTtcbiAgICAgICAgaWYodGhpcy5kb21JZC5pbmRleE9mKCdsZWFkZXJib2FyZCcpICE9PSAtMSkge1xuICAgICAgICAgICAgZmxleEZyYW1lQWRVcGRhdGUodGhpcy5kb21JZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYobGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCkgPiAyICYmIHRoaXMuZG9tSWQuaW5kZXhPZignbXB1JykgPiAwKXtcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUJvZHlUYWdDbGFzcyh0aGlzLmRvbUlkK1wiX1wiK1wiYmlnXCIpO1xuICAgICAgICAgICAgdXRpbHMucmVtb3ZlQm9keVRhZ0NsYXNzKHRoaXMuZG9tSWQrXCJfXCIrXCJzbWFsbFwiKTtcbiAgICAgICAgICAgIHV0aWxzLmFkZEJvZHlUYWdDbGFzcyh0aGlzLmRvbUlkK1wiX1wiKyh0aGlzLmhlaWdodCA+IDI1MSA/XCJiaWdcIjpcInNtYWxsXCIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2FibGVTY3JlZW5SZWFkZXJGb3JBZENvbnRlbnQoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFVTRUQgaW4gQXN5bmNocm9ub3VzIHNsb3QgcmVxdWVzdHNcbiAqL1xuQWQucHJvdG90eXBlLm9wZW5Bc3luYyA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmdldERvbUVsZW1lbnQoKTtcbiAgICAvKipcbiAgICAgKiBTZXR0aW5nIGFkIHNpemUgc28gd2Uga25vdyBpZiB3ZSBuZWVkIHRvIGNsb3NlIGl0IG9uIHJlc2l6ZS9yb3RhdGlvblxuICAgICAqL1xuICAgIHRoaXMuc2V0V2lkdGgod2lkdGgpO1xuICAgIHRoaXMuc2V0SGVpZ2h0KGhlaWdodCk7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYm9keSBjbGFzcyBmb3IgYSByZXNwb25zaXZlIGFkXG4gICAgICovXG4gICAgaWYgKHRoaXMuaXNSZXNwb25zaXZlKSB7XG4gICAgICAgIHV0aWxzLmFkZFRhZ0NsYXNzKGVsZW1lbnQsICdiYmNjb21fcmVzcG9uc2l2ZScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgY2xhc3MgZm9yIGEgZmx1aWQgYWRcbiAgICAgKi9cbiAgICBpZiAodGhpcy5pc0ZsdWlkKSB7XG4gICAgICAgIHV0aWxzLmFkZFRhZ0NsYXNzKGVsZW1lbnQsICdiYmNjb21fZmx1aWQnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzcGxheSB0aGUgZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlzQ2xvc2VBZCA9IHNlbGYuaXNDbG9zZUFkKCk7XG4gICAgICAgIGxvZyhgT3BlbkFzeW5jIFRpbWVyIGFkOiR7c2VsZi5nZXRBZElkKCl9LCBpc0Nsb3NlQWQ6ICR7aXNDbG9zZUFkfWApO1xuICAgICAgICBpZiAoIWlzQ2xvc2VBZCkge1xuICAgICAgICAgICAgdXRpbHMucmVtb3ZlVGFnQ2xhc3Moc2VsZi5lbGVtZW50LCBBRF9JU19TSFVUX0NMQVNTKTtcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKHNlbGYuZWxlbWVudC5wYXJlbnRFbGVtZW50LCBBRF9JU19TSFVUX0NMQVNTKTtcbiAgICAgICAgICAgIHV0aWxzLmFkZFRhZ0NsYXNzKHNlbGYuZWxlbWVudC5wYXJlbnRFbGVtZW50LCBBRF9JU19WSVNJQkxFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpkb25lJywgc2VsZi5hZElELCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgcHVic3ViLnRyaWdnZXIoJ2FkOmRvbmU6JyArIHNlbGYuYWRJRCwgc2VsZi5hZElELCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgbGF5b3V0LnJlc2V0KCk7XG4gICAgfSwgMzAwKTtcbiAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJjY29tXycgKyB0aGlzLmFkSUQgKyAnX3RleHQnKSwgRElTUExBWV9OT05FX0NMQVNTKTtcbiAgICBpZih0aGlzLmRvbUlkLmluZGV4T2YoJ2xlYWRlcmJvYXJkJykgIT09IC0xKSB7XG4gICAgICAgIGZsZXhGcmFtZUFkVXBkYXRlKHRoaXMuZG9tSWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYSBib2R5IGNsYXNzIHRvIHNob3cgdGhhdCB0aGUgYWQgaXMgaW4gdGhlIHBhZ2UuXG4gICAgICovXG4gICAgdXRpbHMuYWRkQm9keVRhZ0NsYXNzKHRoaXMuZG9tSWQpO1xuICAgIGlmKGxheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpID4gMiAmJiB0aGlzLmRvbUlkLmluZGV4T2YoJ21wdScpID4gMCl7XG4gICAgICAgIHV0aWxzLnJlbW92ZUJvZHlUYWdDbGFzcyh0aGlzLmRvbUlkK1wiX1wiK1wiYmlnXCIpO1xuICAgICAgICB1dGlscy5yZW1vdmVCb2R5VGFnQ2xhc3ModGhpcy5kb21JZCtcIl9cIitcInNtYWxsXCIpO1xuICAgICAgICB1dGlscy5hZGRCb2R5VGFnQ2xhc3ModGhpcy5kb21JZCtcIl9cIisodGhpcy5oZWlnaHQgPiAyNTEgP1wiYmlnXCI6XCJzbWFsbFwiKSk7XG4gICAgfVxuICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpvcGVuJywgdGhpcy5hZElELCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBwdWJzdWIudHJpZ2dlcignYWQ6b3BlbjonICsgdGhpcy5hZElELCB0aGlzLmFkSUQsIHdpZHRoLCBoZWlnaHQpO1xufTtcblxuLyoqXG4gKiBAVG9kbyB0ZW1wIGZpeCBmb3IgQkJDQ09NLTc3ODQgLSB3ZSBuZWVkIHRvIG1ha2UgdGhpcyBiZXR0ZXIuXG4gKiBAcGFyYW0gZXZlbnRTaXplIFt3aWR0aCwgaGVpZ2h0XVxuICovXG5BZC5wcm90b3R5cGUuc2V0RXZlbnRTaXplID0gZnVuY3Rpb24gKGV2ZW50U2l6ZSkge1xuICAgIHRoaXMuZXZlbnRTaXplID0gZXZlbnRTaXplO1xufTtcblxuQWQucHJvdG90eXBlLnJlbmRlcklmUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0RG9tRWxlbWVudCgpICE9PSBudWxsICYmIHRoaXMuaXNSZW5kZXJlZCgpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNDbG9zZUFkKCkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50U2l6ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0aGlzLmV2ZW50U2l6ZVswXSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5ldmVudFNpemVbMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQkJDQ09NLTU1ODkgLSBWaWV3IG5vdGVzIGFib3V0IGlzc3VlcyB3aXRoIEdQVCBzbG90UmVuZGVyRW5kZWQgZXZlbnQgaW4gSUUgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAgKiBXb3VsZCBiZSBsb3ZlbHkgdG8gdXNlIHByb21pc2VzIGhlcmVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZUFkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpyZW5kZXI6Y2xvc2UnLCB0aGlzLmRvbUlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZygncmVuZGVySWZSZWFkeSAnLCB0aGlzLmRvbUlkLCAnIGlzQ2xvc2VBZCB0cnVlIC0gYWJvdXQgdG8gY2FsbCAuY2xvc2UoKScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuQXN5bmModGhpcy5ldmVudFNpemVbMF0sIHRoaXMuZXZlbnRTaXplWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMjAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcHVic3ViLnRyaWdnZXIoJ2FkOnJlbmRlcjpjbG9zZScsIHRoaXMuZG9tSWQpO1xuICAgICAgICAgICAgICAgIGxvZygncmVuZGVySWZSZWFkeSBhYm91dCB0byBjYWxsIC5jbG9zZSgpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2cuZXJyb3IoJ0ZhaWxlZCBkdXJpbmcgcmVuZGVyRW5kZWRDYWxsYmFjaycsIGUpO1xuICAgIH1cbn07XG5cblxuLyoqXG4gKiBUaGlzIHdhcyBhIG5ld3MgcmVxdWlyZW1lbnQgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBwb3NpdGlvbiBvdGhlciBlbGVtZW50cyBvbiBhIHBhZ2UgYXJvdW5kIHdoZXRoZXIgYW5cbiAqIGFkIGlzIHZpc2libGUgb3Igbm90LCB0aGUgYmJjY29tX3Zpc2libGUgY2xhc3MgaXMgdXNlZCB3aXRoaW4gdGhlIHRhYmxvaWQgbmV3cyBhcHBsaWNhdGlvblxuICovXG5BZC5wcm90b3R5cGUuc2V0Q3VycmVudFNsb3RWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzbG90RWxlbWVudCxcbiAgICAgICAgc2xvdCxcbiAgICAgICAgc2xvdHMgPSB0aGlzLmdldFJlZ2lzdGVyZWRTbG90R3JvdXBzKCk7XG4gICAgZm9yIChzbG90IGluIHNsb3RzKSB7XG4gICAgICAgIGlmIChzbG90cy5oYXNPd25Qcm9wZXJ0eShzbG90KSkge1xuICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChTTE9UX1BSRUZJWCArIHRoaXMuYWRJRCArICdfJyArIHNsb3RzW3Nsb3RdLmpvaW4oJ18nKSk7XG4gICAgICAgICAgICB1dGlscy5yZW1vdmVUYWdDbGFzcyhzbG90RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuY3VycmVudFNsb3RHcm91cHMgJiYgdGhpcy5jdXJyZW50U2xvdEdyb3Vwcy5sZW5ndGggPiAwICYmICF0aGlzLmNsb3NlZCkge1xuICAgICAgICBzbG90RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFNMT1RfUFJFRklYICsgdGhpcy5hZElEICsgJ18nICsgdGhpcy5jdXJyZW50U2xvdEdyb3Vwcy5qb2luKCdfJykpO1xuICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhzbG90RWxlbWVudCwgQURfSVNfVklTSUJMRSk7XG4gICAgfVxuICAgIHNsb3RFbGVtZW50ID0gbnVsbDtcbn07XG5cblxuQWQucHJvdG90eXBlLmhhc0FueUdyb3VwQWxyZWFkeUJlZW5SZWdpc3RlcmVkID0gZnVuY3Rpb24gKGdyb3Vwcykge1xuICAgIHZhciBpLFxuICAgICAgICBsZW4sXG4gICAgICAgIGdyb3Vwc1JlZ2lzdGVyZWQ7XG4gICAgZ3JvdXBzUmVnaXN0ZXJlZCA9IFtdLmNvbmNhdC5hcHBseShbXSwgdGhpcy5yZWdpc3RlcmVkU2xvdEdyb3Vwcykuam9pbigpO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoZ3JvdXBzUmVnaXN0ZXJlZC5pbmRleE9mKGdyb3Vwc1tpXSkgIT09IC0xKSB7XG4gICAgICAgICAgICBsb2cud2Fybihncm91cHNbaV0gKyAnIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCBmb3IgJyArIHRoaXMuYWRJRCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5BZC5wcm90b3R5cGUuaW5qZWN0QWR2ZXJ0aXNlbWVudFRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFkVGV4dEludGVydmFsO1xuICAgIGxldCBhZFRleHQ7XG4gICAgbGV0IGFkSW5mb1VybDtcbiAgICBsZXQgaW5qZWN0VHJ5ID0gMDtcblxuICAgIGZ1bmN0aW9uIHRyeUluamVjdEFkVGV4dCgpIHtcbiAgICAgICAgaW5qZWN0VHJ5Kys7XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5nZXREb21FbGVtZW50KCk7XG4gICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYmJjY29tX3RleHQnKS5sZW5ndGggID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYVRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgIGFUYWcuaW5uZXJIVE1MID0gYWRUZXh0O1xuICAgICAgICAgICAgYVRhZy5ocmVmID0gYWRJbmZvVXJsO1xuICAgICAgICAgICAgYVRhZy5jbGFzc05hbWUgPSAnYmJjY29tX3RleHQnO1xuXG4gICAgICAgICAgICBlbGVtZW50Lmluc2VydEJlZm9yZShhVGFnLCBlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChhZFRleHRJbnRlcnZhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5qZWN0VHJ5ID49IDEwKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGFkVGV4dEludGVydmFsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHRoaXMuYWRJRC5pbmNsdWRlcygnaW50ZXJzdGl0aWFsJykgfHwgdGhpcy5hZElELmluY2x1ZGVzKCd3YWxscGFwZXInKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGFkVGV4dCA9IHRoaXMuZ2V0QWRUZXh0KCk7XG4gICAgaWYgKGFkVGV4dCkge1xuICAgICAgICBhZEluZm9VcmwgPSB0aGlzLmdldEFkSW5mb1VybCgpO1xuICAgICAgICBhZFRleHRJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXM6OnRyeUluamVjdEFkVGV4dCwgNTApO1xuICAgIH1cbn07XG5cbkFkLnByb3RvdHlwZS5oaWRlQWRDb250YWluZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvbUFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5kb21JZCk7XG5cbiAgICBpZiAoZG9tQWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGRvbUFkLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgZG9tQWQuc3R5bGUuaGVpZ2h0ID0gJzBweCc7XG4gICAgICAgICAgICBkb21BZC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9tQWQuc3R5bGUucGFkZGluZyA9ICcwJztcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB9XG4gICAgfVxufTtcblxuQWQucHJvdG90eXBlLmN1cnJlbnRTbG90SGFzR3JvdXAgPSBmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50U2xvdEdyb3VwcygpLmluZGV4T2YoZ3JvdXApID49IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFkO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYWQuanMiLCJ2YXIgc2VjdGlvbnMgPSByZXF1aXJlKCdzZWN0aW9ucycpO1xudmFyIEFkVGV4dCA9IHJlcXVpcmUoJ2FkdmVydHMvYWRUZXh0Jyk7XG52YXIga2V5VmFsdWVzID0gcmVxdWlyZSgnYWR2ZXJ0cy9rZXlWYWx1ZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBCcmFuZGluZyAoa2V5d29yZCkge1xuICAgIHZhciBocmVmID0gZmFsc2UsXG4gICAgICAgIHRpdGxlID0gZmFsc2UsXG4gICAgICAgIGtleXdvcmRQYXJ0cyxcbiAgICAgICAga2V5d29yZHMgPSB7XG4gICAgICAgICdmaXJzdHBlcnNvbic6IHtcbiAgICAgICAgICAgIHRpdGxlOidGaXJzdCBQZXJzb24nLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvbWFnYXppbmUtMTQ2MzMwOTknXG4gICAgICAgIH0sXG4gICAgICAgICdmaXJzdHBlcnNvbmJpZ2RyZWFtcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidGaXJzdCBQZXJzb24gQmlnIERyZWFtcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0xNDYzMzA5OSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3BpY3R1cmV0aGlzJzoge1xuICAgICAgICAgICAgdGl0bGU6J1BpY3R1cmUgVGhpcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0xNDc2MDYyOCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2xpdmluZ29ubGluZSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidMaXZpbmcgT25saW5lJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL21hZ2F6aW5lLTE0NzYwNjI2J1xuICAgICAgICB9LFxuICAgICAgICAncmFiJzoge1xuICAgICAgICAgICAgdGl0bGU6J1J1bm5pbmcgYSBCdXNpbmVzcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0xNjYxMTk3MydcbiAgICAgICAgfSxcbiAgICAgICAgJ3Bvd2Vyb2ZhcnQnOiB7XG4gICAgICAgICAgICB0aXRsZTonUG93ZXIgb2YgQXJ0JyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL21hZ2F6aW5lLTIxNDU5MjI1J1xuICAgICAgICB9LFxuICAgICAgICAnYWx0ZXJlZHN0YXRlcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidBbHRlcmVkIFN0YXRlcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9tYWdhemluZS0xNDc2MDYyNydcbiAgICAgICAgfSxcbiAgICAgICAgJ3VzZWxlY3Rpb24nOiB7XG4gICAgICAgICAgICB0aXRsZTonVVMgRWxlY3Rpb24nLFxuICAgICAgICAgICAgdXJsIDonL25ld3Mvd29ybGQtdXMtY2FuYWRhLTE1OTQ5NTY5J1xuICAgICAgICB9LFxuICAgICAgICAnanViaWxlZSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidUaGUgRGlhbW9uZCBKdWJpbGVlJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3VrLTE3NTAwMDAwJyxcbiAgICAgICAgICAgIGFsdFRpdGxlIDogXCJCYWNrIHRvIFF1ZWVuJ3MgRGlhbW9uZCBKdWJpbGVlXCJcbiAgICAgICAgfSxcbiAgICAgICAgJ2VudHJlcHJlbmV1cnNoaXAnOiB7XG4gICAgICAgICAgICB0aXRsZTonRW50cmVwcmVuZXVyc2hpcCcsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0yMjQzNDE0MSdcbiAgICAgICAgfSxcbiAgICAgICAgJ2VuZXJneSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidFbmVyZ3knLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMTU1MjE4MjQnXG4gICAgICAgIH0sXG4gICAgICAgICdrbm93bGVkZ2VlY29ub215Jzoge1xuICAgICAgICAgICAgdGl0bGU6J0tub3dsZWRnZSBlY29ub215JyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL2J1c2luZXNzLTEyNjg2NTcwJ1xuICAgICAgICB9LFxuICAgICAgICAnY2VvZ3VydSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidDRU8gR3VydScsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0yMDA3MTIyNidcbiAgICAgICAgfSxcbiAgICAgICAgJ3RoZWJvc3MnOiB7XG4gICAgICAgICAgICB0aXRsZTonVGhlIEJvc3MnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjI0NDk4ODYnXG4gICAgICAgIH0sXG4gICAgICAgICdtYWtpbmd0aW1lJzoge1xuICAgICAgICAgICAgdGl0bGU6J01ha2luZyBUaW1lJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL21hZ2F6aW5lLTI0MTE3MjE5J1xuICAgICAgICB9LFxuICAgICAgICAndGhpbmtpbmdidXNpbmVzcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidUaGlua2luZyBCdXNpbmVzcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0yMjQ0OTg4NydcbiAgICAgICAgfSxcbiAgICAgICAgJ3RlY2hiaXonOiB7XG4gICAgICAgICAgICB0aXRsZTonVGVjaG5vbG9neSBvZiBCdXNpbmVzcycsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0xMTQyODg4OSdcbiAgICAgICAgfSxcbiAgICAgICAgJ21lZXR0aGV0ZWFtJzoge1xuICAgICAgICAgICAgdGl0bGU6J01lZXQgdGhlIHRlYW0nLFxuICAgICAgICAgICAgdXJsIDonL25ld3Mvd29ybGQtcmFkaW8tYW5kLXR2LTIzNDI2MjM5J1xuICAgICAgICB9LFxuICAgICAgICAnMTAwd29tZW4nOiB7XG4gICAgICAgICAgICB0aXRsZTonMTAwIFdvbWVuJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3dvcmxkLTI0MzcxNDMzJ1xuICAgICAgICB9LFxuICAgICAgICAnYnVzaW5lc3NvZnRlbm5pcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidCdXNpbmVzcyBvZiBUZW5uaXMnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMjUzMTkxNzUnXG4gICAgICAgIH0sXG4gICAgICAgICduZXh0c2lsaWNvbnZhbGxleXMnOiB7XG4gICAgICAgICAgICB0aXRsZTonVGhlIE5leHQgU2lsaWNvbiBWYWxsZXlzJyxcbiAgICAgICAgICAgIHVybCA6Jy9uZXdzL3RlY2hub2xvZ3ktMjU4NTIxNTAnXG4gICAgICAgIH0sXG4gICAgICAgICdidXNpbmVzc29mZ2l2aW5nJzogeyAvLyBCQkNDT00tNTY2OVxuICAgICAgICAgICAgdGl0bGU6J1RoZSBCdXNpbmVzcyBvZiBHaXZpbmcnLFxuICAgICAgICAgICAgdXJsIDonL25ld3MvYnVzaW5lc3MtMTkxODI0NjMnXG4gICAgICAgIH0sXG4gICAgICAgICdob3d0b3N1Y2NlZWRpbic6IHsgLy8gQkJDQ09NLTU3MzBcbiAgICAgICAgICAgIHRpdGxlOidIb3cgdG8gU3VjY2VlZCBJbicsXG4gICAgICAgICAgICB1cmwgOicvbmV3cy9idXNpbmVzcy0yOTYxNzkwMidcbiAgICAgICAgfSxcbiAgICAgICAgJ2tvbWxhZHVtb3InOiB7IC8vIEJCQ0NPTS01OTgxXG4gICAgICAgICAgICB0aXRsZTonS29tbGEgRHVtb3IgQXdhcmQnLFxuICAgICAgICAgICAgdXJsIDonL25ld3Mvd29ybGQtcmFkaW8tYW5kLXR2LTMwNzI1NzcyJ1xuICAgICAgICB9LFxuICAgICAgICAnbGlmZW9mbHV4dXJ5JzogeyAvL0JCQ0NPTS02NjY0IFNUQVJUXG4gICAgICAgICAgICB0aXRsZTonTGlmZSBvZiBMdXh1cnknLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9idXNpbmVzcy0zMTE1Nzg2MSdcbiAgICAgICAgfSxcbiAgICAgICAgJ3RoZW1ha2luZ29mbWUnOiB7XG4gICAgICAgICAgICB0aXRsZTonVGhlIE1ha2luZyBvZiBNZScsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL2J1c2luZXNzLTMyNjYwMjM2J1xuICAgICAgICB9LFxuICAgICAgICAnc2luZ2Fwb3JlYXQ1MCc6IHtcbiAgICAgICAgICAgIHRpdGxlOidTaW5nYXBvcmUgYXQgNTAnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy93b3JsZC1hc2lhLTMxNTIyNDk5J1xuICAgICAgICB9LFxuICAgICAgICAnbWFkZWluYW1lcmljYSc6IHtcbiAgICAgICAgICAgIHRpdGxlOidNYWRlIGluIEFtZXJpY2EnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9idXNpbmVzcy0zMDUzMzI5MidcbiAgICAgICAgfSxcbiAgICAgICAgJ3RvbW9ycm93c2NpdGllcyc6IHtcbiAgICAgICAgICAgIHRpdGxlOidUb21vcnJvd1xcJ3MgQ2l0aWVzJyxcbiAgICAgICAgICAgICAgICB1cmw6Jy9uZXdzL3RlY2hub2xvZ3ktMjM1MTc2NzAnXG4gICAgICAgIH0sXG4gICAgICAgICdteWJ1c2luZXNzJzoge1xuICAgICAgICAgICAgdGl0bGU6J015IEJ1c2luZXNzJyxcbiAgICAgICAgICAgIHVybDonL25ld3MvYnVzaW5lc3MtMTU4NzA0MzUnXG4gICAgICAgIH0sXG4gICAgICAgICduZXdlbnRyZXByZW5ldXJzJzoge1xuICAgICAgICAgICAgdGl0bGU6J1RoZSBOZXcgRW50cmVwcmVuZXVycycsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL2J1c2luZXNzLTI3NjE0OTMwJ1xuICAgICAgICB9LFxuICAgICAgICAnYWZyaWNhYmVhdHMnOiB7XG4gICAgICAgICAgICB0aXRsZTonQWZyaWNhIEJlYXRzJyxcbiAgICAgICAgICAgIHVybDonL25ld3MvZW50ZXJ0YWlubWVudC1hcnRzLTE3Njc5NDkwJ1xuICAgICAgICB9LFxuICAgICAgICAnYXNpYWJlYXRzJzoge1xuICAgICAgICAgICAgdGl0bGU6J0FzaWEgQmVhdHMnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy9lbnRlcnRhaW5tZW50LWFydHMtMjYwNDAxNDYnXG4gICAgICAgIH0sXG4gICAgICAgICdsYXRhbWJlYXRzJzoge1xuICAgICAgICAgICAgdGl0bGU6J0xhdEFtIEJlYXRzJyxcbiAgICAgICAgICAgIHVybDonL25ld3Mvd29ybGQtbGF0aW4tYW1lcmljYS0xOTUyMzc3MCdcbiAgICAgICAgfSxcbiAgICAgICAgJ21pZGRsZWVhc3RiZWF0cyc6IHsgLy9CQkNDT00tNjY2NCBMQVNUXG4gICAgICAgICAgICB0aXRsZTonTWlkZGxlIEVhc3QgQmVhdHMnLFxuICAgICAgICAgICAgdXJsOicvbmV3cy93b3JsZC1taWRkbGUtZWFzdC0zMDU1NTE1NCdcbiAgICAgICAgfSxcbiAgICAgICAgJ2J1c2luZXNzYnJhaW4nOiB7IC8vQkJDQ09NLTY3OTNcbiAgICAgICAgICAgIHRpdGxlOidCdXNpbmVzcyBCcmFpbicsXG4gICAgICAgICAgICB1cmw6Jy9uZXdzL2J1c2luZXNzLTMyMzM5NTc2J1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICBrZXl3b3JkUGFydHMgPSBrZXlWYWx1ZXMuZ2V0S2V5d29yZFBhcnRzKCk7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5d29yZHNba2V5d29yZF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBocmVmID0ga2V5d29yZHNba2V5d29yZF0udXJsO1xuICAgICAgICAgICAgdGl0bGUgPSBrZXl3b3Jkc1trZXl3b3JkXS50aXRsZTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXl3b3JkUGFydHMpIHtcbiAgICAgICAgICAgIGhyZWYgPSBrZXl3b3JkUGFydHMuaHJlZjtcbiAgICAgICAgICAgIHRpdGxlID0ga2V5d29yZFBhcnRzLnRpdGxlO1xuICAgICAgICB9XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIEJyYW5kaW5nIGlzIG9ubHkgcmVxdWlyZWQgb24gdGhlIE5ld3MgYW5kIFdvcmxkIFNlcnZpY2Ugc2l0ZXNcbiAgICAgKi9cbiAgICBpZiAoKHNlY3Rpb25zLmdldFNlY3Rpb25zKClbMF0gPT09ICduZXdzJyB8fCBzZWN0aW9ucy5nZXRTZWN0aW9ucygpWzBdID09PSAnd29ybGRzZXJ2aWNlJykgJiZcbiAgICAgICAgdHlwZW9mIHJlcXVpcmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJlcXVpcmVqcyhbJ21vZHVsZS9ib290c3RyYXAnLCAnbW9kdWxlL2luZGV4VGl0bGUnXSwgZnVuY3Rpb24obmV3cywgaW5kZXhUaXRsZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4VGl0bGVTdHJpbmcsXG4gICAgICAgICAgICAgICAgYWRUZXh0S2V5ID0gJ3Nwb25zb3JlZEJ5VGV4dCcsXG4gICAgICAgICAgICAgICAgYWRUZXh0ID0gQWRUZXh0LmdldFRleHQoYWRUZXh0S2V5KSxcbiAgICAgICAgICAgICAgICBhZEluZm9MaW5rID0gQWRUZXh0LmdldEluZm9VcmwoYWRUZXh0S2V5KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXhUaXRsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGluZGV4VGl0bGUuc2V0VGl0bGVIdG1sICE9PSAndW5kZWZpbmVkJyAmJiBpbmRleFRpdGxlLmdldEluZGV4VGl0bGUoKS5lbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhUaXRsZVN0cmluZyA9IChocmVmICYmIGluZGV4VGl0bGUuZ2V0SW5kZXhUaXRsZSgpLmVsZW1lbnQuZmluZCgnYScpLmxlbmd0aCA+PSAxKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAnPGEgaHJlZj1cIicgKyBocmVmICsgJ1wiPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2E+JyA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFRpdGxlLmdldEluZGV4VGl0bGUoKS5lbGVtZW50WzBdLnRleHRDb250ZW50O1xuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4VGl0bGUuc2V0VGl0bGVIdG1sKFxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYmJjY29tX2luZGV4X3RpdGxlXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhUaXRsZVN0cmluZyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9zcGFuPicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJzxhIGNsYXNzPVwiYmJjY29tX3RleHRcIiBocmVmPVwiJyArIGFkSW5mb0xpbmsgKyAnXCIgJyArICd0YWJpbmRleD1cIi0xXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRUZXh0ICtcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2E+J1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0VXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBocmVmO1xuICAgICAgICB9LFxuICAgICAgICBnZXRUaXRsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FkdmVydHMvYnJhbmRpbmcuanMiLCIvKipcbiAqIFRoaXMgbW9kdWxlIGlzIHJlc3BvbnNpYmxlIGZvciByZXNvbHZpbmcgdGhlIGFkdmVydCB0ZXh0IGFuZCBjb3JyZXNwb25kaW5nIGluZm8gVVJMIGZvciBlYWNoIHRleHQgdmFsdWUuXG4gKiBUaGUgYWN0dWFsIHN0cmluZ3MgYXJlIHJldHJpZXZlZCBmcm9tIHRoZSBsb2NhbGUgd2hpY2ggaXMgY29uZmlndXJlZCBvbiBhIHBhZ2UgYnkgcGFnZVxuICogYmFzaXMgYnkgY29uc3VtZXJzIG9mIGJiY2RvdGNvbS5cbiAqXG4gKiBJZiB3ZSBhcmUgYWRkaW5nIGEgbmV3IHRleHQgc3RyaW5nIG9yIGluZm8gVVJMIGluIHRoZSBmdXR1cmUsIHdlIHNob3VsZCBhZGQgYW4gZW50cnkgdG8gdGhlXG4gKiBBRF9URVhUX0tFWV9UT19VUkxfTE9DQUxFX0tFWV9NQVAgdG8gbWFwIHRoZSBhZCB0ZXh0IGFuZCBVUkwgY29ycmVjdGx5XG4gKlxuICogV2UgY2FuIGFkZCBvdmVycmlkZXMgdG8gdGhlIGFkIHRleHQgYmFzZWQgb24gdGhlIHBhZ2Ugc2VjdGlvbnMgLSBzZWUgU0VDVElPTl9PVkVSUklERVMgYmVsb3dcbiAqXG4gKi9cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBzZWN0aW9ucyA9IHJlcXVpcmUoJy4uL3NlY3Rpb25zJyk7XG52YXIgbG9jYWxlID0gcmVxdWlyZSgnLi4vbG9jYWxlJyk7XG5cbi8qKlxuICogT3ZlcnJpZGVzIGZvciB0aGUgYWR2ZXJ0IHRleHQgYmFzZWQgb24gc2VjdGlvbnMgJiBhZCB0ZXh0IGtleS5cbiAqXG4gKiBFZyBvbiBiYmMuY29tL3Nwb3J0L3VsdGltYXRlLXBlcmZvcm1lcnMvMjMwMDMyNzk/YWRzLWRlYnVnXG4gKiBzZWN0aW9ucy5nZXRTZWN0aW9ucygpID0gWydzcG9ydCcsICd1bGl0YW1hdGUtcGVyZm9ybWVycyddO1xuICpcbiAqIG92ZXJyaWRlcyA9IHtcbiAgICAgKiAgICdzcG9ydCc6IHtcbiAgICAgKiAgICAgJ3VsdGltYXRlLXBlcmZvcm1lcnMnOiB7XG4gICAgICogICAgICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAnZm9vJ1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfVxuICpcbiAqIFdpbGRjYXJkcyAoKikgY2FuIGJlIHVzZWQgdG8gbWVhbiB0aGlzIHNlY3Rpb24gb3IgYW55IGNoaWxkcmVuIHRoZXJlb2YuIFVzaW5nIHRoZVxuICogZXhhbXBsZSBkYXRhIGJlbG93LCB0aGF0IHdvdWxkIGFsc28gbWF0Y2ggaHR0cDovL3d3dy5iYmMuY29tL3Nwb3J0L3VsdGltYXRlLXBlcmZvcm1lcnMvcnVnYnlmYWN0c1xuICogd2hlcmUgc2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSA9IFsnc3BvcnQnLCAndWxpdGFtYXRlLXBlcmZvcm1lcnMnLCAncnVnYnlmYWN0cyddO1xuICpcbiAqIG92ZXJyaWRlc1dpdGhXaWxkY2FyZCA9IHtcbiAgICAgKiAgICdzcG9ydCc6IHtcbiAgICAgKiAgICAgJ3VsdGltYXRlLXBlcmZvcm1lcnMnOiB7XG4gICAgICogICAgICAgJyonOiB7XG4gICAgICogICAgICAgICBpbkFzc29jaWF0aW9uV2l0aFRleHQ6ICdmb28nXG4gICAgICogICAgICAgfVxuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfVxuICpcbiAqL1xudmFyIFNFQ1RJT05fT1ZFUlJJREVTID0ge1xuICAgICdzcG9ydCc6IHtcbiAgICAgICAgJ3VsdGltYXRlLXBlcmZvcm1lcnMnOiB7XG4gICAgICAgICAgICAnKic6IHtcbiAgICAgICAgICAgICAgICBpbkFzc29jaWF0aW9uV2l0aFRleHQ6ICdQYXJ0bmVyZWQgQ29udGVudCBQcmVzZW50ZWQgYnknXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdtb3ZlLWxpa2UtbmV2ZXItYmVmb3JlJzoge1xuICAgICAgICAgICAgJyonOiB7XG4gICAgICAgICAgICAgICAgaW5Bc3NvY2lhdGlvbldpdGhUZXh0OiAnUGFydG5lcmVkIENvbnRlbnQgUHJlc2VudGVkIGJ5J1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnaG9tZS1vZi10aGUtZW5nbGlzaC1wcmVtaWVyLWxlYWd1ZSc6IHtcbiAgICAgICAgICAgICcqJzoge1xuICAgICAgICAgICAgICAgIGluQXNzb2NpYXRpb25XaXRoVGV4dDogJ1BhcnRuZXJlZCBDb250ZW50IFByZXNlbnRlZCBieSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogTWFwIG9mIGFkVGV4dEtleXMgdG8gaW5mbyBVUkwgbG9jYWxlIGtleXMuIFRoaXMgYWxsb3dzIHVzIHRvIGhhdmUgZGlmZmVyZW50XG4gKiBpbmZvIFVSTHMgZm9yIGRpZmZlcmVudCBhZCB0ZXh0cy5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgQURfVEVYVF9LRVlfVE9fVVJMX0xPQ0FMRV9LRVlfTUFQID0ge1xuICAgIGFkdmVydGlzZW1lbnRUZXh0OiAnYWR2ZXJ0SW5mb1BhZ2VVcmwnLFxuICAgIGluQXNzb2NpYXRpb25XaXRoVGV4dDogJ2Fzc29jaWF0aW9uSW5mb1BhZ2VVcmwnLFxuICAgIHNwb25zb3JlZEJ5VGV4dDogJ2Fzc29jaWF0aW9uSW5mb1BhZ2VVcmwnLFxuICAgIGFkdmVydGlzaW5nUGFydG5lcnNUZXh0OiAnYXNzb2NpYXRpb25JbmZvUGFnZVVybCcsXG4gICAgYWRzQnlHb29nbGVUZXh0OiAnZ29vZ2xlQWRzUGFnZVVybCdcbn07XG5cbi8qKlxuICogV2hlbiB0aGVyZSBpcyBubyBtYXRjaCBpbiB0aGUgbWFwIGFib3ZlIGZvciBhIGdpdmVuIGFkIHRleHQga2V5LCB1c2UgdGhlIGJlbG93XG4gKiBrZXkgd2hlbiBsb29raW5nIHVwIHRoZSBhZCBpbmZvIFVSTCBpbiB0aGUgbG9jYWxlLlxuICpcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbnZhciBERUZBVUxUX0lORk9fVVJMX0xPQ0FMRV9LRVkgPSAnYWR2ZXJ0SW5mb1BhZ2VVcmwnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYWQgdGV4dCBmb3IgdGhlIGdpdmVuIGFkVGV4dEtleS4gSWYgdGhlIGFkVGV4dEtleSBpcyBpbnZhbGlkIGl0IHdpbGwgcmV0dXJuIHVuZGVmaW5lZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhZFRleHRLZXlcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfHVuZGVmaW5lZH1cbiAgICAgKi9cbiAgICBnZXRUZXh0OiBmdW5jdGlvbiAoYWRUZXh0S2V5KSB7XG4gICAgICAgIHZhciBzID0gdXRpbHMuY2xlYW5BcnJheShzZWN0aW9ucy5nZXRTZWN0aW9ucygpKTtcbiAgICAgICAgdmFyIG92ZXJyaWRlcyA9IFNFQ1RJT05fT1ZFUlJJREVTO1xuICAgICAgICB2YXIgb3ZlcnJpZGU7XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSBtYXRjaGluZyBvYmplY3QgZnJvbSB0aGUgZGF0YSBjb25maWcgYWJvdmUuXG4gICAgICAgIHZhciBpLCBuO1xuICAgICAgICBmb3IgKGkgPSAwLCBuID0gcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrID0gc1tpXTtcbiAgICAgICAgICAgIGlmIChvdmVycmlkZXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMgPSBvdmVycmlkZXNba107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFvdmVycmlkZXMuaGFzT3duUHJvcGVydHkoJyonKSkge1xuICAgICAgICAgICAgICAgIG92ZXJyaWRlcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgZm91bmQgYSBtYXRjaGluZyBvYmplY3QsIGV4dHJhY3QgdGhlIG92ZXJyaWRlIGlmIHByZXNlbnRcbiAgICAgICAgaWYgKG92ZXJyaWRlcyAmJiBvdmVycmlkZXMuaGFzT3duUHJvcGVydHkoYWRUZXh0S2V5KSkge1xuICAgICAgICAgICAgb3ZlcnJpZGUgPSBvdmVycmlkZXNbYWRUZXh0S2V5XTtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVycmlkZXMgJiYgb3ZlcnJpZGVzLmhhc093blByb3BlcnR5KCcqJykgJiYgb3ZlcnJpZGVzWycqJ10uaGFzT3duUHJvcGVydHkoYWRUZXh0S2V5KSkge1xuICAgICAgICAgICAgb3ZlcnJpZGUgPSBvdmVycmlkZXNbJyonXVthZFRleHRLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG92ZXJyaWRlIHx8IGxvY2FsZS5nZXQoYWRUZXh0S2V5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBpbmZvIGluZm8gVVJMIGZvciB0aGUgZ2l2ZW4gYWRUZXh0S2V5LiBJZiB0aGUgYWRUZXh0S2V5IGlzIGludmFsaWQgaXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYWRUZXh0S2V5XG4gICAgICogQHJldHVybnMge1N0cmluZ3x1bmRlZmluZWR9XG4gICAgICovXG4gICAgZ2V0SW5mb1VybDogZnVuY3Rpb24gKGFkVGV4dEtleSkge1xuICAgICAgICB2YXIgbG9jYWxlS2V5ID0gQURfVEVYVF9LRVlfVE9fVVJMX0xPQ0FMRV9LRVlfTUFQW2FkVGV4dEtleV0gfHwgREVGQVVMVF9JTkZPX1VSTF9MT0NBTEVfS0VZO1xuICAgICAgICByZXR1cm4gbG9jYWxlLmdldChsb2NhbGVLZXkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNlY3Rpb24gb3ZlcnJpZGVzLCB1c2VkIGZvciB1bml0IHRlc3RpbmdcbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGVzXG4gICAgICovXG4gICAgc2V0U2VjdGlvbk92ZXJyaWRlczogZnVuY3Rpb24gKG92ZXJyaWRlcykge1xuICAgICAgICBTRUNUSU9OX09WRVJSSURFUyA9IG92ZXJyaWRlcztcbiAgICB9XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFRleHQuanMiLCJpbXBvcnQgUHViU3ViIGZyb20gJ3B1YnN1Yic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICByZW5kZXJBZDogZnVuY3Rpb24gKGFkLCBhZHZlcnRUZXh0KSB7XG4gICAgICAgIHZhciBhZFRleHQsXG4gICAgICAgICAgICBhZEluZm8sXG4gICAgICAgICAgICBhZEVsZW1lbnQsXG4gICAgICAgICAgICBhZElkLFxuICAgICAgICAgICAgYWRTbG90SWQsXG4gICAgICAgICAgICBhZE5vZGU7XG5cbiAgICAgICAgaWYgKGFkdmVydFRleHQpIHtcbiAgICAgICAgICAgIGFkLnNldEFkVGV4dChhZHZlcnRUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBhZFRleHQgPSBhZC5nZXRBZFRleHQoKTtcbiAgICAgICAgYWRJZCA9IGFkLmdldEFkSWQoKTtcbiAgICAgICAgYWRTbG90SWQgPSAnYmJjY29tXycrYWRJZDtcbiAgICAgICAgYWROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYWRTbG90SWQpO1xuXG4gICAgICAgIFB1YlN1Yi50cmlnZ2VyKCdhZDpyZW5kZXInLCBhZElkKTtcbiAgICAgICAgaWYgKGFkVGV4dCkge1xuICAgICAgICAgICAgYWRJbmZvID0gYWQuZ2V0QWRJbmZvVXJsKCk7XG4gICAgICAgICAgICBhZEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgIGFkRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImJiY2NvbV90ZXh0XCIpO1xuICAgICAgICAgICAgYWRFbGVtZW50LnNldEF0dHJpYnV0ZShcImhyZWZcIiwgYWRJbmZvKTtcbiAgICAgICAgICAgIGFkRWxlbWVudC5pbm5lclRleHQgPSBhZFRleHQ7XG4gICAgICAgICAgICBpZihhZE5vZGUgJiYgYWROb2RlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JiY2NvbV90ZXh0JykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWROb2RlLnByZXBlbmQoYWRFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBQdWJTdWIub24oJ2Fkczppbml0aWFsaXNlZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KGFkU2xvdElkKTtcbiAgICAgICAgICAgICAgICBhZC5kaXNhYmxlU2NyZWVuUmVhZGVyRm9yQWRDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgUHViU3ViLnRyaWdnZXIoJ2FkOnJlbmRlcjpjb21wbGV0ZScsIGFkSWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZEFzeW5jUmVuZGVyZXIuanMiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYWRJZCBlZyBtcHUsIGxlYWRlcmJvYXJkXG4gICAgICovXG4gICAgY3JlYXRlQWQ6IGZ1bmN0aW9uIChhZElkKSB7XG4gICAgICAgIHJldHVybiBuZXcgYmJjZG90Y29tLmFkdmVydHMuYWQoYWRJZCk7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZEZhY3RvcnkuanMiLCJ2YXIgcHVic3ViID0gcmVxdWlyZSgncHVic3ViJyk7XG5cbnZhciBhZFRleHQgPVxuICAgICAgICAnPGEgY2xhc3M9XCJiYmNjb21fdGV4dFwiIGhyZWY9XCJ7YWRJbmZvfVwiPnthZFRleHR9PC9hPicsXG4gICAgYWRUZW1wbGF0ZSA9XG4gICAgICAgICc8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj4nICtcbiAgICAgICAgJ2JiY2RvdGNvbS5hZChcInthZElkfVwiKS5zZXRCYXNlQ29udGVudCgpOycgK1xuICAgICAgICAnZ29vZ2xldGFnLmRpc3BsYXkoXCJ7YWRJZH1cIik7JyArXG4gICAgICAgICc8L3NjcmlwdD4nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICByZW5kZXJBZDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIG91dCA9ICcnO1xuXG4gICAgICAgIHB1YnN1Yi50cmlnZ2VyKCdhZDpyZW5kZXInLCBkYXRhLmFkSWQpO1xuXG4gICAgICAgIGlmIChkYXRhLmFkVGV4dCkge1xuICAgICAgICAgICAgb3V0ID0gdGhpcy5zdWJzdGl0dXRlRGF0YShhZFRleHQsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSB0aGlzLnN1YnN0aXR1dGVEYXRhKGFkVGVtcGxhdGUsIGRhdGEpO1xuICAgICAgICBkb2N1bWVudC53cml0ZShvdXQpO1xuXG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfSxcbiAgICBzdWJzdGl0dXRlRGF0YTogZnVuY3Rpb24gKHRlbXBsYXRlLCBkYXRhKSB7XG4gICAgICAgIHZhciBhZEh0bWwgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtbXnt9XStcXH0vZywgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5LnJlcGxhY2UoL1t7fV0rL2csIFwiXCIpXSB8fCBrZXk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYWRIdG1sO1xuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZFJlbmRlcmVyLmpzIiwidmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcbnZhciBhZFRleHQgPSByZXF1aXJlKCdhZHZlcnRzL2FkVGV4dCcpO1xudmFyIGJyZWFrcG9pbnRzID0gcmVxdWlyZSgnYWR2ZXJ0cy9icmVha3BvaW50cycpO1xudmFyIGxheW91dCA9IHJlcXVpcmUoJ2FkdmVydHMvbGF5b3V0Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCd1dGlscycpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhZHZlcnRzOmFkc2Vuc2VSZW5kZXJlcicpO1xuXG52YXIgcHJvZHVjdFNldHRpbmdzID0ge1xuICAgIFwibmV3c1wiIDoge1xuICAgICAgICAvL1wiZmFsc2VcIjogeyAvL25ld3MgZnJvbnQgcGFnZVxuICAgICAgICAvLyAgICBcImRhdGFBZFNsb3RcIjogXCIxNTE5ODEyNzc2XCJcbiAgICAgICAgLy99LFxuICAgICAgICBcImRhdGFBZFNsb3RcIjogXCI2MDMxNDk0Nzc0XCJcbiAgICB9LFxuICAgIFwid2VhdGhlclwiIDoge1xuICAgICAgICBcImRhdGFBZFNsb3RcIjogXCI3Mjg3MTQ0Nzc2XCJcbiAgICB9LFxuICAgIFwid2VhdGhlci8wXCIgOiB7XG4gICAgICAgIFwiZGF0YUFkU2xvdFwiOiBcIjc5NDk5NjM1NTZcIlxuICAgIH0sXG4gICAgXCJzcG9ydFwiIDoge1xuICAgICAgICBcImRhdGFBZFNsb3RcIjogXCI0MzMzNjc4MzcxXCJcbiAgICB9LFxuICAgIFwid29ybGRzZXJ2aWNlXCIgOiB7XG4gICAgICAgIFwiYXJhYmljXCIgOiB7XG4gICAgICAgICAgICBcImRhdGFBZFNsb3RcIjogXCI1ODEwNDExNTc5XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJoaW5kaVwiIDoge1xuICAgICAgICAgICAgXCJkYXRhQWRTbG90XCI6IFwiNTEzMTc4MDM3NVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibXVuZG9cIiA6IHtcbiAgICAgICAgICAgIFwiZGF0YUFkU2xvdFwiOiBcIjI1OTcxMTYzNzhcIlxuICAgICAgICB9LFxuICAgICAgICBcInBvcnR1Z3Vlc2VcIiA6IHtcbiAgICAgICAgICAgIFwiZGF0YUFkU2xvdFwiOiBcIjEwMjc0OTQ3NzRcIlxuICAgICAgICB9LFxuICAgICAgICBcInR1cmtjZVwiIDoge1xuICAgICAgICAgICAgXCJkYXRhQWRTbG90XCI6IFwiMTEyMDM4MzE3NlwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIFwiZGVmYXVsdFwiIDoge1xuICAgICAgICBcImRhdGFBZFNsb3RcIjogXCIyNTA0MjI3OTc1XCJcbiAgICB9XG59O1xuXG52YXIgZ2V0U2V0dGluZ3MgPSBmdW5jdGlvbigpe1xuICAgIHZhciBzZWN0aW9uID0gc2VjdGlvbnMuZ2V0U2VjdGlvbigwKSxcbiAgICAgICAgc3ViX3NlY3Rpb24gPSBzZWN0aW9ucy5nZXRTZWN0aW9uKDEpLnRvU3RyaW5nKCksXG4gICAgICAgIHdpbmRvd0xvY2F0aW9uID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCk7XG5cbiAgICBpZigvKGFkc2Vuc2U9KShcXGR7MTB9KSQvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhyZWYpKSB7XG4gICAgICAgIHJldHVybiB7XCJkYXRhQWRTbG90XCIgOiBSZWdFeHAuJDJ9O1xuICAgIH1cblxuICAgIGlmKHByb2R1Y3RTZXR0aW5nc1tzZWN0aW9uXSkge1xuICAgICAgICBpZih3aW5kb3dMb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKCcvd2VhdGhlci8wJykgPT09IDApe1xuICAgICAgICAgICAgbG9nKCdBZHNlbnNlIGZvciAnLCBzZWN0aW9uLCBcIi8wID0gXCIsIHByb2R1Y3RTZXR0aW5nc1snd2VhdGhlci8wJ10pO1xuICAgICAgICAgICAgcmV0dXJuIHByb2R1Y3RTZXR0aW5nc1snd2VhdGhlci8wJ107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2R1Y3RTZXR0aW5nc1tzZWN0aW9uXVtzdWJfc2VjdGlvbl0pIHtcbiAgICAgICAgICAgIGxvZygnQWRzZW5zZSBmb3IgJywgc2VjdGlvbiwgXCIvXCIsIHN1Yl9zZWN0aW9uLCBcIiA9IFwiLCBwcm9kdWN0U2V0dGluZ3Nbc2VjdGlvbl1bc3ViX3NlY3Rpb25dLmRhdGFBZFNsb3QpO1xuICAgICAgICAgICAgcmV0dXJuIHByb2R1Y3RTZXR0aW5nc1tzZWN0aW9uXVtzdWJfc2VjdGlvbl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb2coJ0Fkc2Vuc2UgZm9yICcsIHNlY3Rpb24sIFwiID0gXCIsIHByb2R1Y3RTZXR0aW5nc1tzZWN0aW9uXS5kYXRhQWRTbG90KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9kdWN0U2V0dGluZ3Nbc2VjdGlvbl07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBsb2coJ05vIGFkc2Vuc2UgZGF0YSBmb3VuZCBmb3IgdGhpcyBwYWdlICgnLCBzZWN0aW9uLCBcIi9cIiwgc3ViX3NlY3Rpb24sIFwiKSwgdXNpbmcgZGVmYXVsdCBcIiwgcHJvZHVjdFNldHRpbmdzWydkZWZhdWx0J10uZGF0YUFkU2xvdCk7XG4gICAgICAgIHJldHVybiBwcm9kdWN0U2V0dGluZ3NbJ2RlZmF1bHQnXTtcbiAgICB9XG59O1xuXG52YXIgbG9hZEdvb2dsZUFkc2Vuc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWRTZW5zZVNjcmlwdDtcbiAgICBmdW5jdGlvbiBpbml0QWRzZW5zZSgpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYoYmJjZG90Y29tLmNvbmZpZy5pc05QQSgpICYmIGFkc2J5Z29vZ2xlKSB7XG4gICAgICAgICAgICAgICAgYWRzYnlnb29nbGUucmVxdWVzdE5vblBlcnNvbmFsaXplZEFkcyA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDYwMCk7XG4gICAgfVxuICAgIGlmKCB0eXBlb2Ygd2luZG93LmFkc2J5Z29vZ2xlID09PSAndW5kZWZpbmVkJyApe1xuICAgICAgICBhZFNlbnNlU2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgYWRTZW5zZVNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJhc3luY1wiLCBcImFzeW5jXCIpO1xuICAgICAgICBhZFNlbnNlU2NyaXB0LnNldEF0dHJpYnV0ZShcInNyY1wiLCAnLy9wYWdlYWQyLmdvb2dsZXN5bmRpY2F0aW9uLmNvbS9wYWdlYWQvanMvYWRzYnlnb29nbGUuanMnKTtcbiAgICAgICAgYWRTZW5zZVNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJvbmxvYWRcIiwgaW5pdEFkc2Vuc2UoKSk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWRTZW5zZVNjcmlwdCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVzZXQgPSBmdW5jdGlvbigpe1xuICAgIHZhciBmaXhlZFdpZHRoLFxuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IGxheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpLFxuICAgICAgICBhZHNlbnNlR3JvdXBzID0gW10sXG4gICAgICAgIG1heEdyb3VwO1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9hZHNlbnNlJykgfHwgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fYWRzZW5zZScpICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fYWRzZW5zZScpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpZnJhbWUnKS5sZW5ndGggPCAxKSApe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZpeGVkV2lkdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJjY29tX2Fkc2Vuc2UnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJylbMF0ud2lkdGg7XG4gICAgYWRzZW5zZUdyb3VwcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fYWRzZW5zZScpLnBhcmVudEVsZW1lbnQuaWQucmVwbGFjZSgnYmJjY29tX2Fkc2Vuc2VfJywnJykuc3BsaXQoJ18nKTtcbiAgICBtYXhHcm91cCA9IGFkc2Vuc2VHcm91cHNbYWRzZW5zZUdyb3Vwcy5sZW5ndGgtMV07XG4gICAgaWYgKChtYXhHcm91cCA9PSA1ICYmIGZpeGVkV2lkdGggPCBicmVha3BvaW50cy5nZXRHcm91cChjdXJyZW50R3JvdXBJZCkuZikgfHwgKGZpeGVkV2lkdGggPCBicmVha3BvaW50cy5nZXRHcm91cChjdXJyZW50R3JvdXBJZCkuZiAmJiBjdXJyZW50R3JvdXBJZCA8IDQpIHx8IChjdXJyZW50R3JvdXBJZCA+IDMgJiYgZml4ZWRXaWR0aCA8IDMwMSkpIHtcbiAgICAgICAgbG9nLmRlYnVnKCc9PT0gT3BlbmluZyBhZHNlbnNlIGZvciBjdXJyZW50IGxheW91dCA9PT0nKTtcbiAgICAgICAgdXRpbHMucmVtb3ZlVGFnQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9hZHNlbnNlJyksICdiYmNjb21fc2h1dCcpO1xuICAgICAgICB1dGlscy5hZGRUYWdDbGFzcyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJjY29tX2Fkc2Vuc2UnKSwgJ2JiY2NvbV92aXNpYmxlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmRlYnVnKCc9PT0gU2h1dHRpbmcgYWRzZW5zZSBmb3IgY3VycmVudCBsYXlvdXQgPT09Jyk7XG4gICAgICAgIHV0aWxzLnJlbW92ZVRhZ0NsYXNzKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fYWRzZW5zZScpLCAnYmJjY29tX3Zpc2libGUnKTtcbiAgICAgICAgdXRpbHMuYWRkVGFnQ2xhc3MoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JiY2NvbV9hZHNlbnNlJyksICdiYmNjb21fc2h1dCcpO1xuICAgIH1cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYmJjY29tX2Fkc2Vuc2UnKS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaWZyYW1lJylbMF0udGFiSW5kZXggPSBcIi0xXCI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBsb2FkR29vZ2xlQWRzZW5zZTogbG9hZEdvb2dsZUFkc2Vuc2UsXG4gICAgZ2V0U2V0dGluZ3M6IGdldFNldHRpbmdzLFxuICAgIHJlbmRlckFkOiBmdW5jdGlvbihhZElkLCBncm91cHMpIHtcbiAgICAgICAgdmFyIGFkU2Vuc2VFbGVtZW50LFxuICAgICAgICAgICAgYWRTZW5zZVJ1blNjcmlwdCxcbiAgICAgICAgICAgIHByb2R1Y3RTZXR0aW5ncyA9IGdldFNldHRpbmdzKCksXG4gICAgICAgICAgICBhZFRleHRLZXkgPSAnYWRzQnlHb29nbGVUZXh0JyxcbiAgICAgICAgICAgIGFkVGV4dFZhbHVlID0gYWRUZXh0LmdldFRleHQoYWRUZXh0S2V5KSxcbiAgICAgICAgICAgIGFkSW5mb1VybCA9IGFkVGV4dC5nZXRJbmZvVXJsKGFkVGV4dEtleSksXG4gICAgICAgICAgICBpc0Z1bGxXaWR0aCA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0V2lkdGggPCBicmVha3BvaW50cy5nZXRHcm91cCg0KS5zLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGggPSBsYXlvdXQuZ2V0Q3VycmVudEdyb3VwSWQoKSA8IDIgPyAxNiA6IDMyLFxuICAgICAgICAgICAgc2xvdElkID0gJ2JiY2NvbV8nK2FkSWQgKyAnXycgKyBncm91cHMuam9pbignXycpLFxuICAgICAgICAgICAgc2xvdFdpZHRoID0gaXNGdWxsV2lkdGggPyAod2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aCAtIG9mZnNldFdpZHRoKSsncHgnIDogTWF0aC5taW4oZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc2xvdElkKS5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoLCAzMDApKydweCcsXG4gICAgICAgICAgICBzbG90SGVpZ2h0ID0gbGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCkgPT09IDMgPyAnMzUwcHgnIDogJzQzMHB4JztcblxuICAgICAgICBpZiggdHlwZW9mIHdpbmRvdy5hZHNieWdvb2dsZSA9PT0gJ3VuZGVmaW5lZCcgKXtcbiAgICAgICAgICAgIGxvYWRHb29nbGVBZHNlbnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoIGdyb3Vwc1tncm91cHMubGVuZ3RoLTFdID09IDUgKXtcbiAgICAgICAgICAgIHNsb3RXaWR0aCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzbG90SWQpLnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGggLSBvZmZzZXRXaWR0aCkrJ3B4JztcbiAgICAgICAgICAgIHNsb3RIZWlnaHQgPSAnMTUwcHgnO1xuICAgICAgICB9XG4gICAgICAgIGFkU2Vuc2VFbGVtZW50ID1cbiAgICAgICAgICAgICc8aDM+PGEgaHJlZj1cIicrYWRJbmZvVXJsKydcIiB0YWJpbmRleD1cIi0xXCI+JythZFRleHRWYWx1ZSsnPC9hPjwvaDM+JytcbiAgICAgICAgICAgICc8aW5zIGNsYXNzPVwiYWRzYnlnb29nbGVcIiAnK1xuICAgICAgICAgICAgJ3N0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6JytzbG90V2lkdGgrJztoZWlnaHQ6JytzbG90SGVpZ2h0Kyc7bWF4LXdpZHRoOicrc2xvdFdpZHRoKyc7XCIgJytcbiAgICAgICAgICAgICdkYXRhLWFkLWNsaWVudD1cImNhLXB1Yi01MDg3OTYwNzMyNDIwNjA0XCIgJytcbiAgICAgICAgICAgICdkYXRhLWFkLXNsb3Q9Jytwcm9kdWN0U2V0dGluZ3MuZGF0YUFkU2xvdCsnPjwvaW5zPic7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNsb3RJZCkuY2xhc3NOYW1lICs9ICcgYmJjY29tX2Fkc2Vuc2Vfc2xvdCc7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzbG90SWQpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JiY2NvbV9hZHZlcnQnKVswXS5pZCA9ICdiYmNjb21fYWRzZW5zZSc7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzbG90SWQpLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JiY2NvbV9hZHZlcnQnKVswXS5pbm5lckhUTUwgPSBhZFNlbnNlRWxlbWVudDtcbiAgICAgICAgICAgIGFkU2Vuc2VSdW5TY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgYWRTZW5zZVJ1blNjcmlwdC5pbm5lckhUTUwgPSAnKGFkc2J5Z29vZ2xlID0gd2luZG93LmFkc2J5Z29vZ2xlIHx8IFtdKS5wdXNoKHt9KTsnO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhZFNlbnNlUnVuU2NyaXB0KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcbiAgICByZXNldDogcmVzZXRcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9hZHNlbnNlUmVuZGVyZXIuanMiLCIvKipcbiAqXG4gKiBOb3RlOiBUaGlzIGlzIGNhbGxlZCBpbiBzbG90LmpzIEFORCBjdXJyZW5jeVByb3ZpZGVycy5qc1xuICpcbiAqL1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xudmFyIHNlY3Rpb25zID0gcmVxdWlyZSgnc2VjdGlvbnMnKTtcblxuLyoqXG4gKiBNYXAgb2YgdGVtcGxhdGVzIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgb3V0YnJhaW4gd2lkZ2V0LiBUaGUga2V5IGlzIHRoZSBmaXJzdCBzZWN0aW9uXG4gKiBmcm9tIGJiY2RvdGNvbS5zZWN0aW9ucy4gSWYgd2UgYWRkIG91dGJyYWluIHRvIGEgbmV3IHByb2R1Y3QsIHdlIHdpbGwgbmVlZCB0byBhZGQgYVxuICogdGVtcGxhdGUgdG8gdGhpcyBtYXAgb3RoZXJ3aXNlIHRoZSBOZXdzIHRlbXBsYXRlIHdpbGwgYmUgdXNlZCBhcyBhIGRlZmF1bHQuXG4gKi9cbnZhciBwcm9kdWN0VGVtcGxhdGVzID0ge1xuICAgIG5ld3M6ICdiYmMuY29tL05ld3MnLFxuICAgIHNwb3J0OiAnYmJjLmNvbS9TcG9ydCcsXG4gICAgZmFsbGJhY2s6ICdiYmMuY29tL05ld3MnXG59O1xuXG52YXIgbG9hZFNjcmlwdENhbGxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzYW5pdGlzZURhdGFTcmMgKGhyZWYpIHtcbiAgICBpZiAoaHJlZi5tYXRjaCgvXihodHRwc3xodHRwKTpcXC9cXC8ocGFsfG18d3d3KS4qLmJiYy4oY29tfGNvLnVrKS8pKSB7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAgICAgICBocmVmLnJlcGxhY2UoLyhcXD98IykuKyQvLCAnJykgLy8gUmVtb3ZlIGV2ZXJ5dGhpbmcgYWZ0ZXIgPyBvciAjXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCgnaHR0cDovL3d3dy5iYmMuY29tL25ld3MnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSHRtbCAoaWQsIHRlbXBsYXRlKSB7XG4gICAgdmFyIHdpbmRvd0xvY2F0aW9uID0gY29uZmlnLmdldFdpbmRvd0xvY2F0aW9uKCk7XG4gICAgdmFyIHVybCA9IHNhbml0aXNlRGF0YVNyYyh3aW5kb3dMb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyhwYWx8bSkuc2FuZGJveC5kZXYvLCAnd3d3JykpO1xuXG4gICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiYmJjY29tX291dGJyYWluX2NvbnRhaW5lciBiYmNjb21fJyArIGlkICsgJ1wiPidcbiAgICAgICAgKyAnPGRpdiBjbGFzcz1cIk9VVEJSQUlOXCIgZGF0YS1zcmM9XCInICsgdXJsICsgJ1wiIGRhdGEtd2lkZ2V0LWlkPVwiJ1xuICAgICAgICArIGlkLnJlcGxhY2UoL291dGJyYWluXy8sICcnKS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICsgJ1wiIGRhdGEtb2ItdGVtcGxhdGU9XCInICsgdGVtcGxhdGUgKyAnXCI+PC9kaXY+J1xuICAgICAgICArICc8L2Rpdj4nO1xufVxuXG5mdW5jdGlvbiBsb2FkU2NyaXB0KHNyYykge1xuICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBhLnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuICAgIGEuYXN5bmMgPSB0cnVlO1xuICAgIGEuc3JjID0gc3JjO1xuICAgIHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2FuaXRpc2VEYXRhU3JjOiBzYW5pdGlzZURhdGFTcmMsXG4gICAgcmVuZGVyQWQ6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgcHJvZHVjdCA9IHNlY3Rpb25zLmdldFNlY3Rpb24oMCk7XG4gICAgICAgIHZhciB0ZW1wbGF0ZSA9IHByb2R1Y3RUZW1wbGF0ZXNbcHJvZHVjdF0gfHwgcHJvZHVjdFRlbXBsYXRlcy5mYWxsYmFjaztcbiAgICAgICAgdmFyIGVsSWQgPSAnYmJjY29tXycraWQ7XG4gICAgICAgIGlmICghY29uZmlnLmlzSUU3KCkgJiYgY29uZmlnLmlzT3V0YnJhaW5FbmFibGVkKCkpIHtcbiAgICAgICAgICAgIC8vIElFNyBjYW5ub3QgZG9jdW1lbnQud3JpdGUoKSB3aXRoaW4gYSBkb2N1bWVudC53cml0ZSgpIGFuZCBwbGFjZSBjb250ZW50cyBpbnRvIHRoZSA8ZGl2PlxuICAgICAgICAgICAgdmFyIGh0bWwgPSBnZW5lcmF0ZUh0bWwoaWQsIHRlbXBsYXRlKTtcbiAgICAgICAgICAgIGlmKCFsb2FkU2NyaXB0Q2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgbG9hZFNjcmlwdChcImh0dHBzOi8vd2lkZ2V0cy5vdXRicmFpbi5jb20vb3V0YnJhaW4uanNcIik7XG4gICAgICAgICAgICAgICAgbG9hZFNjcmlwdENhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxJZCkpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbElkKS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9vdXRicmFpblJlbmRlcmVyLmpzIiwidmFyIHV0aWxzID0gcmVxdWlyZSgndXRpbHMnKTtcbnZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBhZFJlZ2lzdGVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlZ2lzdGVyJyk7XG52YXIgbGF5b3V0ID0gcmVxdWlyZSgnYWR2ZXJ0cy9sYXlvdXQnKTtcbnZhciBhZFJlbmRlcmVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlbmRlcmVyJyk7XG52YXIgb3V0YnJhaW5SZW5kZXJlciA9IHJlcXVpcmUoJ2FkdmVydHMvb3V0YnJhaW5SZW5kZXJlcicpO1xudmFyIGFkc2Vuc2VSZW5kZXJlciA9IHJlcXVpcmUoJ2FkdmVydHMvYWRzZW5zZVJlbmRlcmVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2xvdCAoYWRJZCwgZ3JvdXBzLCBwcmVsb2FkLCBhZHZlcnRUZXh0LCBjdXJyZW50U2NyaXB0VGFnKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIGxvZyA9IHJlcXVpcmUoJ2xvZ2dlcicpKCdhZHZlcnRzOnNsb3QnKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGlmIChjb25maWcuaXNBY3RpdmUoJ2FkcycpICYmIHR5cGVvZiBhZElkID09PSAnc3RyaW5nJyAmJiBhZElkLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGdyb3VwcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciBzbG90Q29uZmlnLFxuICAgICAgICAgICAgICAgIHNjcmlwdFRhZ3MsXG4gICAgICAgICAgICAgICAgYWQgPSBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cElkID0gbGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCksXG4gICAgICAgICAgICAgICAgc2xvdERvbUlkID0gKHByZWxvYWQpID9cbiAgICAgICAgICAgICAgICAgICAgJ2JiY2NvbV8nICsgYWRJZCArICdfJyArIGdyb3Vwcy5qb2luKCdfJykgKyAnX3ByZWxvYWQnIDpcbiAgICAgICAgICAgICAgICAgICAgJ2JiY2NvbV8nICsgYWRJZCArICdfJyArIGdyb3Vwcy5qb2luKCdfJyksXG4gICAgICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzbG90RG9tSWQpLFxuICAgICAgICAgICAgICAgIGFkRG9tSWQgPSAnYmJjY29tXycgKyBhZElkO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGFkLmdldEFkSWQoKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBzbG90Q29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICBhZEluZm86IGFkLmdldEFkSW5mb1VybCgpLFxuICAgICAgICAgICAgICAgICAgICBhZFRleHQ6IGFkdmVydFRleHQgfHwgYWQuZ2V0QWRUZXh0KCksXG4gICAgICAgICAgICAgICAgICAgIGFkRG9tSWQ6IGFkRG9tSWQsXG4gICAgICAgICAgICAgICAgICAgIGFkSWQ6IGFkSWRcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghYWQuaGFzQW55R3JvdXBBbHJlYWR5QmVlblJlZ2lzdGVyZWQoZ3JvdXBzKSkge1xuICAgICAgICAgICAgICAgICAgICBhZC5yZWdpc3RlclNsb3RHcm91cHMoZ3JvdXBzKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqIExlZ2FjeSBhZCBzbG90cyB3aWxsIG5vdCBoYXZlIHRoZSBJRCBkZWZpbmVkIGluIHRoZSBtYXJrdXAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHRUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NyaXB0VGFnID0gKHR5cGVvZiBjdXJyZW50U2NyaXB0VGFnID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAxXS5pbm5lckhUTUwuaW5kZXhPZignYmJjZG90Y29tJykgPT09IC0xKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAyXSA6IHNjcmlwdFRhZ3Nbc2NyaXB0VGFncy5sZW5ndGggLSAxXSA6IGN1cnJlbnRTY3JpcHRUYWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdEVsZW1lbnQgPSB1dGlscy5nZXRQYXJlbnRFbGVtZW50QnlDbGFzcyhjdXJyZW50U2NyaXB0VGFnLCAnYmJjY29tX3Nsb3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2xvdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2cud2FybignXCJiYmNjb21fc2xvdFwiIGNsYXNzIG5vdCBmb3VuZCBmb3IgdGhpcyBzbG90IFwiJytzbG90RG9tSWQrJ1wiJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRSZWdpc3Rlci5zZXRDdXJyZW50QWRJZCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmlkID0gc2xvdERvbUlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qKiBFTkQgTGVnYWN5IGFkIHNsb3RzIHdpbGwgbm90IGhhdmUgdGhlIElEIGRlZmluZWQgaW4gdGhlIG1hcmt1cCAqL1xuXG4gICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmNsYXNzTmFtZSArPSAnIGJiY2NvbV8nICsgYWQuYWRUeXBlICsgJ19zbG90JztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXBzLmluZGV4T2YoY3VycmVudEdyb3VwSWQpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkIGNhbiBiZSByZW5kZXJlZCBiZWNhdXNlIHNsb3QgbWF0Y2hlcyBjdXJyZW50IGdyb3VwIGlkICh3aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkLnNldEN1cnJlbnRTbG90R3JvdXBzKGdyb3Vwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJlbG9hZCAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJlbG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkLnNldFByZWxvYWRlZCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGVsbCB0aGUgcmVnaXN0ZXIgdGhhdCB0aGlzIGFkIGlzIGN1cnJlbnRseSBiZWluZyBwcm9jZXNzZWQgKGZvciAuc2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkUmVnaXN0ZXIuc2V0Q3VycmVudEFkSWQoYWRJZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFzc2lnbiBhZERvbUlkIHRvIGVuYWJsZSBjb3B5aW5nIGFkIGFuZCBtb3ZpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RFbGVtZW50LmNoaWxkcmVuWzBdLmlkID0gYWREb21JZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgYWQuc2V0Q3VycmVudFNsb3RWaXNpYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbmRlciBhZCBpbiBIdG1sXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRJZC5pbmRleE9mKCdhZHNlbnNlJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHb29nbGUgQWRzZW5zZSBhZHZlcnQgKGVnIGFkc2Vuc2UsIGFkc2Vuc2VfbXB1KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZHNlbnNlUmVuZGVyZXIucmVuZGVyQWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRJZC5pbmRleE9mKCdvdXRicmFpbicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gT3V0YnJhaW4gLSBub3RlLCBUUl8xIGlzIGluamVjdGVkIGluIGN1cnJlbmN5UHJvdmlkZXJzLmpzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dGJyYWluUmVuZGVyZXIucmVuZGVyQWQoYWRJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YW5kYXJkIGFkdmVydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZFJlbmRlcmVyLnJlbmRlckFkKHNsb3RDb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRSZWdpc3Rlci5zZXRDdXJyZW50QWRJZChmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICB9XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9zbG90LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBhZHZlcnRUZXh0KSB7XG4gICAgdmFyIGFkLFxuICAgICAgICBzbG90LFxuICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50LFxuICAgICAgICBjdXJyZW50R3JvdXBJZCA9IGJiY2RvdGNvbS5hZHZlcnRzLmxheW91dC5nZXRDdXJyZW50R3JvdXBJZCgpO1xuXG4gICAgaWYgKHdpbmRvdy5iYmNkb3Rjb20gJiYgYmJjZG90Y29tLmFkICYmIGJiY2RvdGNvbS5pc0FjdGl2ZSAmJiBiYmNkb3Rjb20uaXNBY3RpdmUoJ2FkcycpKSB7XG4gICAgICAgIGlmIChiYmNkb3Rjb20uYWR2ZXJ0cy5hZEZpbHRlci5pc0xhenlMb2FkZWRTbG90KGFkSWQpKXtcbiAgICAgICAgICAgIGJiY2RvdGNvbS5sYXp5TG9hZEFkKGFkSWQsIGdyb3VwcywgYWR2ZXJ0VGV4dCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYWQgPSBiYmNkb3Rjb20uYWQoYWRJZCk7XG4gICAgICAgIGlmICh0eXBlb2YgYWQgIT09ICd1bmRlZmluZWQnICYmICFhZC5oYXNBbnlHcm91cEFscmVhZHlCZWVuUmVnaXN0ZXJlZChbZ3JvdXBzXSkpIHtcbiAgICAgICAgICAgIGFkLnJlZ2lzdGVyU2xvdEdyb3Vwcyhncm91cHMpO1xuICAgICAgICAgICAgaWYgKGdyb3Vwcy5pbmRleE9mKGN1cnJlbnRHcm91cElkKSA+PSAwKSB7XG5cbiAgICAgICAgICAgICAgICBhZC5zZXRDdXJyZW50U2xvdEdyb3Vwcyhncm91cHMpO1xuXG4gICAgICAgICAgICAgICAgc2xvdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiYmNjb21fJyArIGFkSWQgKyAnXycgKyBncm91cHMuam9pbignXycpKTtcbiAgICAgICAgICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50ID0gKHNsb3QuZmlyc3RFbGVtZW50Q2hpbGQgfHwgc2xvdC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdERvbUNoaWxkRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBzbG90RG9tQ2hpbGRFbGVtZW50LmlkID0gJ2JiY2NvbV8nICsgYWRJZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLnV0aWxzLmFkZFRhZ0NsYXNzKHNsb3QsICdiYmNjb21fJyArIGFkLmFkVHlwZSArICdfc2xvdCcpO1xuXG4gICAgICAgICAgICAgICAgYWQucmVuZGVySWZSZWFkeSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVuZGVyIGFkIGluIEh0bWxcbiAgICAgICAgICAgICAgICBpZiAoYWRJZC5pbmRleE9mKCdvdXRicmFpbicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE91dGJyYWluIC0gbm90ZSwgVFJfMSBpcyBpbmplY3RlZCBpbiBjdXJyZW5jeVByb3ZpZGVycy5qc1xuICAgICAgICAgICAgICAgICAgICAvLyBOb3QgQXN5bmMsIHdlIG5lZWQgdG8gY2FsbCBvcGVuIHRvIG1ha2UgdGhlbSB2aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5jaGVja1RoaXJkUGFydHlGaXJzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiYmNkb3Rjb20uYWR2ZXJ0cy5vdXRicmFpblJlbmRlcmVyLnJlbmRlckFkKGFkSWQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFuZGFyZCBhZHZlcnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJiY2RvdGNvbS5hZHZlcnRzLmFkQXN5bmNSZW5kZXJlci5yZW5kZXJBZChhZCwgYWR2ZXJ0VGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvYWR2ZXJ0cy9zbG90QXN5bmMuanMiLCJ2YXIgTG9nID0gcmVxdWlyZSgnbG9nZ2VyJykoJ2FkdmVydHM6c2xvdEluZmluaXRlJyk7XG52YXIgVGVtcGxhdGVGYWN0b3J5ID0gcmVxdWlyZSgndGVtcGxhdGVzL3RlbXBsYXRlRmFjdG9yeScpO1xuXG4vKipcbiAqIFJlbmRlcnMgYW4gYW4gdGVtcGxhdGUgYW5kIG9wdGlvbmFsbHkgd3JpdGVzIGl0IHRvIHRoZSBkb20gd2l0aGluICdlbGVtZW50J1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhZElkXG4gKiBAcGFyYW0ge251bWJlcltdfSBncm91cHNcbiAqIEBwYXJhbSB7RWxlbWVudH0gW2VsZW1lbnQ9XVxuICogQHBhcmFtIHtib29sfSBbcmVnaXN0ZXI9ZmFsc2VdXG4gKi9cbnZhciBTbG90SW5maW5pdGUgPSBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBlbGVtZW50LCByZWdpc3Rlcikge1xuICAgIExvZygnUmVuZGVyaW5nIEluZmluaXRlIFNsb3Q6ICcsIHtcbiAgICAgICAgYWRJZDogYWRJZCxcbiAgICAgICAgZ3JvdXBzOiBncm91cHMsXG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHJlZ2lzdGVyOiByZWdpc3RlclxuICAgIH0pO1xuXG4gICAgLy8gQ29tcG9zZSB0aGUgZ3JvdXAgY2xhc3MgbmFtZVxuICAgIHZhciBncm91cHNDbGFzcyA9IGdyb3Vwcy5qb2luKCdfJyksXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGU7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBSZW5kZXIgdGhlIHRlbXBsYXRlXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGUgPSBUZW1wbGF0ZUZhY3RvcnkuZ2V0VGVtcGxhdGUoJ2FkVGVtcGxhdGVzL2luZmluaXRlLXNsb3QnKS5yZW5kZXIoe1xuICAgICAgICAgICAgXCJhZElkXCI6IGFkSWQsXG4gICAgICAgICAgICBcImdyb3Vwc1wiOiBncm91cHMsXG4gICAgICAgICAgICBcImdyb3Vwc0NsYXNzXCI6IGdyb3Vwc0NsYXNzLFxuICAgICAgICAgICAgXCJyZWdpc3RlclwiOiByZWdpc3RlclxuICAgICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIExvZy5lcnJvcignRXJyb3IgcmVuZGVyaW5nIHRoZSB0ZW1wbGF0ZSEnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIC8vIFJldHVybiB0aGUgdGVtcGxhdGUgaWYgbm90IHJlbmRlcmluZyBpbnRvIERPTVxuICAgICAgICBMb2coJ1JldHVybmVkIHJlbmRlcmVkIHRlbXBsYXRlIGZvcjogJyArIGFkSWQpO1xuICAgICAgICByZXR1cm4gcmVuZGVyZWRUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICBMb2coJ0luc2VydGluZyByZW5kZXJlZCB0ZW1wbGF0ZSBpbnRvIERPTSBlbGVtZW50OiAnLCB7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHJlbmRlcmVkVGVtcGxhdGU6IHJlbmRlcmVkVGVtcGxhdGVcbiAgICB9KTtcbiAgICBUZW1wbGF0ZUZhY3RvcnkucmVuZGVySW50b0VsZW1lbnQoZWxlbWVudCwgcmVuZGVyZWRUZW1wbGF0ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNsb3RJbmZpbml0ZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9hZHZlcnRzL3Nsb3RJbmZpbml0ZS5qcyIsInZhciBMb2cgPSByZXF1aXJlKCdsb2dnZXInKSgndGVtcGxhdGVzOnRlbXBsYXRlRmFjdG9yeScpO1xuXG4vKipcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQWRkIHlvdSB0ZW1wbGF0ZSBuYW1lcyBoZXJlXG4gKiBAdHlwZSB7c3RyaW5nW119XG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqL1xuY29uc3QgQVZBSUxBQkxFX1RFTVBMQVRFUyA9IFtcbiAgICAnYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdCdcbl07XG5cbmZ1bmN0aW9uIFRlbXBsYXRlRmFjdG9yeSgpIHtcbiAgICB0aGlzLnRlbXBsYXRlcyA9IEFWQUlMQUJMRV9URU1QTEFURVMucmVkdWNlKChvYmplY3RNYXAsIHZhbHVlKSA9PiB7XG4gICAgICAgIG9iamVjdE1hcFt2YWx1ZV0gPSByZXF1aXJlKGAuLyR7dmFsdWV9Lm11c3RhY2hlYCk7XG4gICAgICAgIHJldHVybiBvYmplY3RNYXBcbiAgICB9LCB7fSlcbn1cblxuLyoqXG4gKiBHZXQgYSB0ZW1wbGF0ZVxuICpcbiAqIEBtZXRob2QgZ2V0VGVtcGxhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZW1wbGF0ZU5hbWUgLSBUaGUgVGVtcGxhdGUgdG8gcmV0cmlldmVcbiAqIEB0aHJvd3Mge0Vycm9yfSAtIFdoZW4gdGVtcGxhdGUgY2Fubm90IGJlIGZvdW5kLlxuICovXG5UZW1wbGF0ZUZhY3RvcnkucHJvdG90eXBlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKHRlbXBsYXRlTmFtZSkge1xuICAgIGlmICghdGhpcy50ZW1wbGF0ZXMuaGFzT3duUHJvcGVydHkodGVtcGxhdGVOYW1lKSkge1xuICAgICAgICBMb2cuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRlbXBsYXRlOiAnICsgdGVtcGxhdGVOYW1lKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB0ZW1wbGF0ZTogJyArIHRlbXBsYXRlTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzW3RlbXBsYXRlTmFtZV07XG59O1xuXG5UZW1wbGF0ZUZhY3RvcnkucHJvdG90eXBlLnJlbmRlckludG9FbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGh0bWwpIHtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWh0bWwpIHtcbiAgICAgICAgTG9nLmVycm9yKCdSZXF1aXJlIHBhcmFtZXRlciBub3Qgc3VwcGxpZWQnLCB7XG4gICAgICAgICAgICBlbGVtZW50OiBlbGVtZW50LFxuICAgICAgICAgICAgaHRtbDogaHRtbFxuICAgICAgICB9KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCBwYXJhbSBub3Qgc3VwcGxpZWQnKTtcbiAgICB9XG5cbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgdHJ5IHtcbiAgICAgICAgbm9kZVNjcmlwdFJlcGxhY2UoZWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBMb2cuZXJyb3IoJ0Vycm9yIHJlbmRlcmluZyB0ZW1wbGF0ZSBpbnRvIERPTTogJywgZSk7XG4gICAgfVxufTtcblxuLy8gQWRkIHNjcmlwdCBlbGVtZW50cyB0byBET01cbmZ1bmN0aW9uIG5vZGVTY3JpcHRSZXBsYWNlKG5vZGUpIHtcbiAgICBpZiAobm9kZVNjcmlwdElzKG5vZGUpID09PSB0cnVlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZVNjcmlwdENsb25lKG5vZGUpLCBub2RlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xuICAgICAgICB3aGlsZSAoaSA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgbm9kZVNjcmlwdFJlcGxhY2UoY2hpbGRyZW5baSsrXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gbm9kZVNjcmlwdElzKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lID09PSAnU0NSSVBUJztcbn1cblxuZnVuY3Rpb24gbm9kZVNjcmlwdENsb25lKG5vZGUpIHtcbiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBzY3JpcHQudGV4dCA9IG5vZGUuaW5uZXJIVE1MO1xuICAgIGZvciAodmFyIGkgPSBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZShub2RlLmF0dHJpYnV0ZXNbaV0ubmFtZSwgbm9kZS5hdHRyaWJ1dGVzW2ldLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjcmlwdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVGVtcGxhdGVGYWN0b3J5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL3RlbXBsYXRlcy90ZW1wbGF0ZUZhY3RvcnkuanMiLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWRUZW1wbGF0ZXMvaW5maW5pdGUtc2xvdC5tdXN0YWNoZVwiOiAyNzhcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0cmV0dXJuIG1hcFtyZXFdIHx8IChmdW5jdGlvbigpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIikgfSgpKTtcbn07XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjc3O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzIF5cXC5cXC8uKlxcLm11c3RhY2hlJFxuLy8gbW9kdWxlIGlkID0gMjc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBIID0gcmVxdWlyZShcImhvZ2FuLmpzL2xpYi90ZW1wbGF0ZVwiKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7IHZhciBUID0gbmV3IEguVGVtcGxhdGUoe2NvZGU6IGZ1bmN0aW9uIChjLHAsaSkgeyB2YXIgdD10aGlzO3QuYihpPWl8fFwiXCIpO3QuYihcIjxkaXYgaWQ9XFxcImJiY2NvbV9cIik7dC5iKHQudih0LmYoXCJhZElkXCIsYyxwLDApKSk7dC5iKFwiX1wiKTt0LmIodC52KHQuZihcImdyb3Vwc0NsYXNzXCIsYyxwLDApKSk7dC5iKFwiXFxcIiBjbGFzcz1cXFwiYmJjY29tX3Nsb3RcXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48ZGl2IGlkPVxcXCJiYmNjb21fXCIpO3QuYih0LnYodC5mKFwiYWRJZFwiLGMscCwwKSkpO3QuYihcIlxcXCIgY2xhc3M9XFxcImJiY2NvbV9hZHZlcnRcXFwiPlwiKTtpZih0LnModC5mKFwicmVnaXN0ZXJcIixjLHAsMSksYyxwLDAsMTQyLDM1MyxcInt7IH19XCIpKXt0LnJzKGMscCxmdW5jdGlvbihjLHAsdCl7dC5iKFwiPHNjcmlwdCB0eXBlPVxcXCJ0ZXh0L2phdmFzY3JpcHRcXFwiPi8qPCFbQ0RBVEFbKi9cIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgICAgICAgICAgICBpZiAod2luZG93LmJiY2RvdGNvbSAmJiBiYmNkb3Rjb20ucmVnaXN0ZXJBZCkge1wiKTt0LmIoXCJcXG5cIiArIGkpO3QuYihcIiAgICAgICAgICAgICAgICBiYmNkb3Rjb20ucmVnaXN0ZXJBZCgnXCIpO3QuYih0LnYodC5mKFwiYWRJZFwiLGMscCwwKSkpO3QuYihcIicsIFtcIik7dC5iKHQudih0LmYoXCJncm91cHNcIixjLHAsMCkpKTt0LmIoXCJdKTtcIik7dC5iKFwiXFxuXCIgKyBpKTt0LmIoXCIgICAgICAgICAgICB9XCIpO3QuYihcIlxcblwiICsgaSk7dC5iKFwiICAgICAgICAgICAgLypdXT4qLzwvc2NyaXB0PlwiKTt9KTtjLnBvcCgpO310LmIoXCI8L2Rpdj48L2Rpdj5cIik7cmV0dXJuIHQuZmwoKTsgfSxwYXJ0aWFsczoge30sIHN1YnM6IHsgIH19LCBcIjxkaXYgaWQ9XFxcImJiY2NvbV97e2FkSWR9fV97e2dyb3Vwc0NsYXNzfX1cXFwiIGNsYXNzPVxcXCJiYmNjb21fc2xvdFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjxkaXYgaWQ9XFxcImJiY2NvbV97e2FkSWR9fVxcXCIgY2xhc3M9XFxcImJiY2NvbV9hZHZlcnRcXFwiPnt7I3JlZ2lzdGVyfX08c2NyaXB0IHR5cGU9XFxcInRleHQvamF2YXNjcmlwdFxcXCI+Lyo8IVtDREFUQVsqL1xcbiAgICAgICAgICAgIGlmICh3aW5kb3cuYmJjZG90Y29tICYmIGJiY2RvdGNvbS5yZWdpc3RlckFkKSB7XFxuICAgICAgICAgICAgICAgIGJiY2RvdGNvbS5yZWdpc3RlckFkKCd7e2FkSWR9fScsIFt7e2dyb3Vwc319XSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC8qXV0+Ki88L3NjcmlwdD57ey9yZWdpc3Rlcn19PC9kaXY+PC9kaXY+XCIsIEgpO3JldHVybiBUOyB9KCk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL3Zhci9saWIvamVua2lucy93b3Jrc3BhY2UvYmJjZG90Y29tLWJ1aWxkLXRvLWludC9iYmNkb3Rjb20vd2ViYXBwL3N0YXRpYy12ZXJzaW9uZWQvc2NyaXB0L29yYi9zcmMvdGVtcGxhdGVzL2FkVGVtcGxhdGVzL2luZmluaXRlLXNsb3QubXVzdGFjaGVcbi8vIG1vZHVsZSBpZCA9IDI3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuICogIENvcHlyaWdodCAyMDExIFR3aXR0ZXIsIEluYy5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBIb2dhbiA9IHt9O1xuXG4oZnVuY3Rpb24gKEhvZ2FuKSB7XG4gIEhvZ2FuLlRlbXBsYXRlID0gZnVuY3Rpb24gKGNvZGVPYmosIHRleHQsIGNvbXBpbGVyLCBvcHRpb25zKSB7XG4gICAgY29kZU9iaiA9IGNvZGVPYmogfHwge307XG4gICAgdGhpcy5yID0gY29kZU9iai5jb2RlIHx8IHRoaXMucjtcbiAgICB0aGlzLmMgPSBjb21waWxlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMudGV4dCA9IHRleHQgfHwgJyc7XG4gICAgdGhpcy5wYXJ0aWFscyA9IGNvZGVPYmoucGFydGlhbHMgfHwge307XG4gICAgdGhpcy5zdWJzID0gY29kZU9iai5zdWJzIHx8IHt9O1xuICAgIHRoaXMuYnVmID0gJyc7XG4gIH1cblxuICBIb2dhbi5UZW1wbGF0ZS5wcm90b3R5cGUgPSB7XG4gICAgLy8gcmVuZGVyOiByZXBsYWNlZCBieSBnZW5lcmF0ZWQgY29kZS5cbiAgICByOiBmdW5jdGlvbiAoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkgeyByZXR1cm4gJyc7IH0sXG5cbiAgICAvLyB2YXJpYWJsZSBlc2NhcGluZ1xuICAgIHY6IGhvZ2FuRXNjYXBlLFxuXG4gICAgLy8gdHJpcGxlIHN0YWNoZVxuICAgIHQ6IGNvZXJjZVRvU3RyaW5nLFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucmkoW2NvbnRleHRdLCBwYXJ0aWFscyB8fCB7fSwgaW5kZW50KTtcbiAgICB9LFxuXG4gICAgLy8gcmVuZGVyIGludGVybmFsIC0tIGEgaG9vayBmb3Igb3ZlcnJpZGVzIHRoYXQgY2F0Y2hlcyBwYXJ0aWFscyB0b29cbiAgICByaTogZnVuY3Rpb24gKGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnIoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCk7XG4gICAgfSxcblxuICAgIC8vIGVuc3VyZVBhcnRpYWxcbiAgICBlcDogZnVuY3Rpb24oc3ltYm9sLCBwYXJ0aWFscykge1xuICAgICAgdmFyIHBhcnRpYWwgPSB0aGlzLnBhcnRpYWxzW3N5bWJvbF07XG5cbiAgICAgIC8vIGNoZWNrIHRvIHNlZSB0aGF0IGlmIHdlJ3ZlIGluc3RhbnRpYXRlZCB0aGlzIHBhcnRpYWwgYmVmb3JlXG4gICAgICB2YXIgdGVtcGxhdGUgPSBwYXJ0aWFsc1twYXJ0aWFsLm5hbWVdO1xuICAgICAgaWYgKHBhcnRpYWwuaW5zdGFuY2UgJiYgcGFydGlhbC5iYXNlID09IHRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiBwYXJ0aWFsLmluc3RhbmNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRlbXBsYXRlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICghdGhpcy5jKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY29tcGlsZXIgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0ZW1wbGF0ZSA9IHRoaXMuYy5jb21waWxlKHRlbXBsYXRlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSB1c2UgdGhpcyB0byBjaGVjayB3aGV0aGVyIHRoZSBwYXJ0aWFscyBkaWN0aW9uYXJ5IGhhcyBjaGFuZ2VkXG4gICAgICB0aGlzLnBhcnRpYWxzW3N5bWJvbF0uYmFzZSA9IHRlbXBsYXRlO1xuXG4gICAgICBpZiAocGFydGlhbC5zdWJzKSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBjb25zaWRlciBwYXJlbnQgdGVtcGxhdGUgbm93XG4gICAgICAgIGlmICghcGFydGlhbHMuc3RhY2tUZXh0KSBwYXJ0aWFscy5zdGFja1RleHQgPSB7fTtcbiAgICAgICAgZm9yIChrZXkgaW4gcGFydGlhbC5zdWJzKSB7XG4gICAgICAgICAgaWYgKCFwYXJ0aWFscy5zdGFja1RleHRba2V5XSkge1xuICAgICAgICAgICAgcGFydGlhbHMuc3RhY2tUZXh0W2tleV0gPSAodGhpcy5hY3RpdmVTdWIgIT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFscy5zdGFja1RleHRbdGhpcy5hY3RpdmVTdWJdKSA/IHBhcnRpYWxzLnN0YWNrVGV4dFt0aGlzLmFjdGl2ZVN1Yl0gOiB0aGlzLnRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlID0gY3JlYXRlU3BlY2lhbGl6ZWRQYXJ0aWFsKHRlbXBsYXRlLCBwYXJ0aWFsLnN1YnMsIHBhcnRpYWwucGFydGlhbHMsXG4gICAgICAgICAgdGhpcy5zdGFja1N1YnMsIHRoaXMuc3RhY2tQYXJ0aWFscywgcGFydGlhbHMuc3RhY2tUZXh0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbc3ltYm9sXS5pbnN0YW5jZSA9IHRlbXBsYXRlO1xuXG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfSxcblxuICAgIC8vIHRyaWVzIHRvIGZpbmQgYSBwYXJ0aWFsIGluIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZW5kZXIgaXRcbiAgICBycDogZnVuY3Rpb24oc3ltYm9sLCBjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KSB7XG4gICAgICB2YXIgcGFydGlhbCA9IHRoaXMuZXAoc3ltYm9sLCBwYXJ0aWFscyk7XG4gICAgICBpZiAoIXBhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFydGlhbC5yaShjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KTtcbiAgICB9LFxuXG4gICAgLy8gcmVuZGVyIGEgc2VjdGlvblxuICAgIHJzOiBmdW5jdGlvbihjb250ZXh0LCBwYXJ0aWFscywgc2VjdGlvbikge1xuICAgICAgdmFyIHRhaWwgPSBjb250ZXh0W2NvbnRleHQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmICghaXNBcnJheSh0YWlsKSkge1xuICAgICAgICBzZWN0aW9uKGNvbnRleHQsIHBhcnRpYWxzLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhaWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29udGV4dC5wdXNoKHRhaWxbaV0pO1xuICAgICAgICBzZWN0aW9uKGNvbnRleHQsIHBhcnRpYWxzLCB0aGlzKTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gbWF5YmUgc3RhcnQgYSBzZWN0aW9uXG4gICAgczogZnVuY3Rpb24odmFsLCBjdHgsIHBhcnRpYWxzLCBpbnZlcnRlZCwgc3RhcnQsIGVuZCwgdGFncykge1xuICAgICAgdmFyIHBhc3M7XG5cbiAgICAgIGlmIChpc0FycmF5KHZhbCkgJiYgdmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsID0gdGhpcy5tcyh2YWwsIGN0eCwgcGFydGlhbHMsIGludmVydGVkLCBzdGFydCwgZW5kLCB0YWdzKTtcbiAgICAgIH1cblxuICAgICAgcGFzcyA9ICEhdmFsO1xuXG4gICAgICBpZiAoIWludmVydGVkICYmIHBhc3MgJiYgY3R4KSB7XG4gICAgICAgIGN0eC5wdXNoKCh0eXBlb2YgdmFsID09ICdvYmplY3QnKSA/IHZhbCA6IGN0eFtjdHgubGVuZ3RoIC0gMV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFzcztcbiAgICB9LFxuXG4gICAgLy8gZmluZCB2YWx1ZXMgd2l0aCBkb3R0ZWQgbmFtZXNcbiAgICBkOiBmdW5jdGlvbihrZXksIGN0eCwgcGFydGlhbHMsIHJldHVybkZvdW5kKSB7XG4gICAgICB2YXIgZm91bmQsXG4gICAgICAgICAgbmFtZXMgPSBrZXkuc3BsaXQoJy4nKSxcbiAgICAgICAgICB2YWwgPSB0aGlzLmYobmFtZXNbMF0sIGN0eCwgcGFydGlhbHMsIHJldHVybkZvdW5kKSxcbiAgICAgICAgICBkb01vZGVsR2V0ID0gdGhpcy5vcHRpb25zLm1vZGVsR2V0LFxuICAgICAgICAgIGN4ID0gbnVsbDtcblxuICAgICAgaWYgKGtleSA9PT0gJy4nICYmIGlzQXJyYXkoY3R4W2N0eC5sZW5ndGggLSAyXSkpIHtcbiAgICAgICAgdmFsID0gY3R4W2N0eC5sZW5ndGggLSAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBmb3VuZCA9IGZpbmRJblNjb3BlKG5hbWVzW2ldLCB2YWwsIGRvTW9kZWxHZXQpO1xuICAgICAgICAgIGlmIChmb3VuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjeCA9IHZhbDtcbiAgICAgICAgICAgIHZhbCA9IGZvdW5kO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWwgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHJldHVybkZvdW5kICYmICF2YWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXJldHVybkZvdW5kICYmIHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjdHgucHVzaChjeCk7XG4gICAgICAgIHZhbCA9IHRoaXMubXYodmFsLCBjdHgsIHBhcnRpYWxzKTtcbiAgICAgICAgY3R4LnBvcCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsO1xuICAgIH0sXG5cbiAgICAvLyBmaW5kIHZhbHVlcyB3aXRoIG5vcm1hbCBuYW1lc1xuICAgIGY6IGZ1bmN0aW9uKGtleSwgY3R4LCBwYXJ0aWFscywgcmV0dXJuRm91bmQpIHtcbiAgICAgIHZhciB2YWwgPSBmYWxzZSxcbiAgICAgICAgICB2ID0gbnVsbCxcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlLFxuICAgICAgICAgIGRvTW9kZWxHZXQgPSB0aGlzLm9wdGlvbnMubW9kZWxHZXQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSBjdHgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdiA9IGN0eFtpXTtcbiAgICAgICAgdmFsID0gZmluZEluU2NvcGUoa2V5LCB2LCBkb01vZGVsR2V0KTtcbiAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIChyZXR1cm5Gb3VuZCkgPyBmYWxzZSA6IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmV0dXJuRm91bmQgJiYgdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbCA9IHRoaXMubXYodmFsLCBjdHgsIHBhcnRpYWxzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuXG4gICAgLy8gaGlnaGVyIG9yZGVyIHRlbXBsYXRlc1xuICAgIGxzOiBmdW5jdGlvbihmdW5jLCBjeCwgcGFydGlhbHMsIHRleHQsIHRhZ3MpIHtcbiAgICAgIHZhciBvbGRUYWdzID0gdGhpcy5vcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgICAgIHRoaXMub3B0aW9ucy5kZWxpbWl0ZXJzID0gdGFncztcbiAgICAgIHRoaXMuYih0aGlzLmN0KGNvZXJjZVRvU3RyaW5nKGZ1bmMuY2FsbChjeCwgdGV4dCkpLCBjeCwgcGFydGlhbHMpKTtcbiAgICAgIHRoaXMub3B0aW9ucy5kZWxpbWl0ZXJzID0gb2xkVGFncztcblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvLyBjb21waWxlIHRleHRcbiAgICBjdDogZnVuY3Rpb24odGV4dCwgY3gsIHBhcnRpYWxzKSB7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmRpc2FibGVMYW1iZGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMYW1iZGEgZmVhdHVyZXMgZGlzYWJsZWQuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jLmNvbXBpbGUodGV4dCwgdGhpcy5vcHRpb25zKS5yZW5kZXIoY3gsIHBhcnRpYWxzKTtcbiAgICB9LFxuXG4gICAgLy8gdGVtcGxhdGUgcmVzdWx0IGJ1ZmZlcmluZ1xuICAgIGI6IGZ1bmN0aW9uKHMpIHsgdGhpcy5idWYgKz0gczsgfSxcblxuICAgIGZsOiBmdW5jdGlvbigpIHsgdmFyIHIgPSB0aGlzLmJ1ZjsgdGhpcy5idWYgPSAnJzsgcmV0dXJuIHI7IH0sXG5cbiAgICAvLyBtZXRob2QgcmVwbGFjZSBzZWN0aW9uXG4gICAgbXM6IGZ1bmN0aW9uKGZ1bmMsIGN0eCwgcGFydGlhbHMsIGludmVydGVkLCBzdGFydCwgZW5kLCB0YWdzKSB7XG4gICAgICB2YXIgdGV4dFNvdXJjZSxcbiAgICAgICAgICBjeCA9IGN0eFtjdHgubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5jYWxsKGN4KTtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0U291cmNlID0gKHRoaXMuYWN0aXZlU3ViICYmIHRoaXMuc3Vic1RleHQgJiYgdGhpcy5zdWJzVGV4dFt0aGlzLmFjdGl2ZVN1Yl0pID8gdGhpcy5zdWJzVGV4dFt0aGlzLmFjdGl2ZVN1Yl0gOiB0aGlzLnRleHQ7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubHMocmVzdWx0LCBjeCwgcGFydGlhbHMsIHRleHRTb3VyY2Uuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpLCB0YWdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICAvLyBtZXRob2QgcmVwbGFjZSB2YXJpYWJsZVxuICAgIG12OiBmdW5jdGlvbihmdW5jLCBjdHgsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgY3ggPSBjdHhbY3R4Lmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuY2FsbChjeCk7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3QoY29lcmNlVG9TdHJpbmcocmVzdWx0LmNhbGwoY3gpKSwgY3gsIHBhcnRpYWxzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgc3ViOiBmdW5jdGlvbihuYW1lLCBjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KSB7XG4gICAgICB2YXIgZiA9IHRoaXMuc3Vic1tuYW1lXTtcbiAgICAgIGlmIChmKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlU3ViID0gbmFtZTtcbiAgICAgICAgZihjb250ZXh0LCBwYXJ0aWFscywgdGhpcywgaW5kZW50KTtcbiAgICAgICAgdGhpcy5hY3RpdmVTdWIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcblxuICAvL0ZpbmQgYSBrZXkgaW4gYW4gb2JqZWN0XG4gIGZ1bmN0aW9uIGZpbmRJblNjb3BlKGtleSwgc2NvcGUsIGRvTW9kZWxHZXQpIHtcbiAgICB2YXIgdmFsO1xuXG4gICAgaWYgKHNjb3BlICYmIHR5cGVvZiBzY29wZSA9PSAnb2JqZWN0Jykge1xuXG4gICAgICBpZiAoc2NvcGVba2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbCA9IHNjb3BlW2tleV07XG5cbiAgICAgIC8vIHRyeSBsb29rdXAgd2l0aCBnZXQgZm9yIGJhY2tib25lIG9yIHNpbWlsYXIgbW9kZWwgZGF0YVxuICAgICAgfSBlbHNlIGlmIChkb01vZGVsR2V0ICYmIHNjb3BlLmdldCAmJiB0eXBlb2Ygc2NvcGUuZ2V0ID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsID0gc2NvcGUuZ2V0KGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNwZWNpYWxpemVkUGFydGlhbChpbnN0YW5jZSwgc3VicywgcGFydGlhbHMsIHN0YWNrU3Vicywgc3RhY2tQYXJ0aWFscywgc3RhY2tUZXh0KSB7XG4gICAgZnVuY3Rpb24gUGFydGlhbFRlbXBsYXRlKCkge307XG4gICAgUGFydGlhbFRlbXBsYXRlLnByb3RvdHlwZSA9IGluc3RhbmNlO1xuICAgIGZ1bmN0aW9uIFN1YnN0aXR1dGlvbnMoKSB7fTtcbiAgICBTdWJzdGl0dXRpb25zLnByb3RvdHlwZSA9IGluc3RhbmNlLnN1YnM7XG4gICAgdmFyIGtleTtcbiAgICB2YXIgcGFydGlhbCA9IG5ldyBQYXJ0aWFsVGVtcGxhdGUoKTtcbiAgICBwYXJ0aWFsLnN1YnMgPSBuZXcgU3Vic3RpdHV0aW9ucygpO1xuICAgIHBhcnRpYWwuc3Vic1RleHQgPSB7fTsgIC8vaGVoZS4gc3Vic3RleHQuXG4gICAgcGFydGlhbC5idWYgPSAnJztcblxuICAgIHN0YWNrU3VicyA9IHN0YWNrU3VicyB8fCB7fTtcbiAgICBwYXJ0aWFsLnN0YWNrU3VicyA9IHN0YWNrU3VicztcbiAgICBwYXJ0aWFsLnN1YnNUZXh0ID0gc3RhY2tUZXh0O1xuICAgIGZvciAoa2V5IGluIHN1YnMpIHtcbiAgICAgIGlmICghc3RhY2tTdWJzW2tleV0pIHN0YWNrU3Vic1trZXldID0gc3Vic1trZXldO1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBzdGFja1N1YnMpIHtcbiAgICAgIHBhcnRpYWwuc3Vic1trZXldID0gc3RhY2tTdWJzW2tleV07XG4gICAgfVxuXG4gICAgc3RhY2tQYXJ0aWFscyA9IHN0YWNrUGFydGlhbHMgfHwge307XG4gICAgcGFydGlhbC5zdGFja1BhcnRpYWxzID0gc3RhY2tQYXJ0aWFscztcbiAgICBmb3IgKGtleSBpbiBwYXJ0aWFscykge1xuICAgICAgaWYgKCFzdGFja1BhcnRpYWxzW2tleV0pIHN0YWNrUGFydGlhbHNba2V5XSA9IHBhcnRpYWxzW2tleV07XG4gICAgfVxuICAgIGZvciAoa2V5IGluIHN0YWNrUGFydGlhbHMpIHtcbiAgICAgIHBhcnRpYWwucGFydGlhbHNba2V5XSA9IHN0YWNrUGFydGlhbHNba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFydGlhbDtcbiAgfVxuXG4gIHZhciByQW1wID0gLyYvZyxcbiAgICAgIHJMdCA9IC88L2csXG4gICAgICByR3QgPSAvPi9nLFxuICAgICAgckFwb3MgPSAvXFwnL2csXG4gICAgICByUXVvdCA9IC9cXFwiL2csXG4gICAgICBoQ2hhcnMgPSAvWyY8PlxcXCJcXCddLztcblxuICBmdW5jdGlvbiBjb2VyY2VUb1N0cmluZyh2YWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKCh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpID8gJycgOiB2YWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gaG9nYW5Fc2NhcGUoc3RyKSB7XG4gICAgc3RyID0gY29lcmNlVG9TdHJpbmcoc3RyKTtcbiAgICByZXR1cm4gaENoYXJzLnRlc3Qoc3RyKSA/XG4gICAgICBzdHJcbiAgICAgICAgLnJlcGxhY2UockFtcCwgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2Uockx0LCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKHJHdCwgJyZndDsnKVxuICAgICAgICAucmVwbGFjZShyQXBvcywgJyYjMzk7JylcbiAgICAgICAgLnJlcGxhY2UoclF1b3QsICcmcXVvdDsnKSA6XG4gICAgICBzdHI7XG4gIH1cblxuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24oYSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiBIb2dhbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS9+L2hvZ2FuLmpzL2xpYi90ZW1wbGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcbnZhciBhZFJlZ2lzdGVyID0gcmVxdWlyZSgnYWR2ZXJ0cy9hZFJlZ2lzdGVyJyk7XG52YXIgb3V0YnJhaW5SZW5kZXJlciA9IHJlcXVpcmUoJ2FkdmVydHMvb3V0YnJhaW5SZW5kZXJlcicpO1xuXG52YXIgbG9hZGVkID0gW107XG52YXIgaXNOaWVsc2VuTG9hZGVkSW50ZXJ2YWw7XG5cbnZhciBsb2FkTmllbHNlbkF1ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygbm9sX3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG5vbF90KHtjaWQ6IFwiYXUtYmJjXCIsIGNvbnRlbnQ6IFwiMFwiLCBzZXJ2ZXI6IFwic2VjdXJlLWF1XCJ9KS5yZWNvcmQoKS5wb3N0KCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaXNOaWVsc2VuTG9hZGVkSW50ZXJ2YWwpO1xuICAgIH1cbn07XG5cbnZhciBsb2FkTmllbHNlbk56ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2Ygbm9sX3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG5vbF90KHtjaWQ6IFwibnotYmJjXCIsIGNvbnRlbnQ6IFwiMFwiLCBzZXJ2ZXI6IFwic2VjdXJlLW56XCJ9KS5yZWNvcmQoKS5wb3N0KCk7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaXNOaWVsc2VuTG9hZGVkSW50ZXJ2YWwpO1xuICAgIH1cbn07XG5cbnZhciBsb2FkU2NyaXB0ID0gZnVuY3Rpb24gKHNyYykge1xuICAgIHZhciBzY3JpcHQsIGJvZHk7XG4gICAgLyogTG9hZCB0aGUgbGlicmFyeSwgYXN5bmNocm9ub3VzbHkuICovXG4gICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSBzcmM7XG4gICAgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgd3JpdGU6IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICBpZiAoY29uZmlnLmlzQW5hbHl0aWNzRW5hYmxlZCgpKSB7XG5cbiAgICAgICAgICAgIC8qIE5pZWxzZW4gKEFVKSBTaXRlQ2Vuc3VzIFY2LjAgKi9cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNBY3RpdmUoJ25pZWxzZW4tYXUnKSkge1xuICAgICAgICAgICAgICAgIC8qIENPUFlSSUdIVCAyMDA5IE5pZWxzZW4gT25saW5lICovXG4gICAgICAgICAgICAgICAgbG9hZFNjcmlwdCgnaHR0cHM6Ly9zZWN1cmUtYXUuaW1yd29ybGR3aWRlLmNvbS92NjAuanMnKTtcbiAgICAgICAgICAgICAgICBsb2FkZWQucHVzaCgnbmllbHNlbl9hdScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBOaWVsc2VuIChOWikgU2l0ZUNlbnN1cyBWNi4wICovXG4gICAgICAgICAgICBpZiAoY29uZmlnLmlzQWN0aXZlKCduaWVsc2VuLW56JykpIHtcbiAgICAgICAgICAgICAgICAvKiBDT1BZUklHSFQgMjAwOSBOaWVsc2VuIE9ubGluZSAqL1xuICAgICAgICAgICAgICAgIGxvYWRTY3JpcHQoJ2h0dHBzOi8vc2VjdXJlLW56Lmltcndvcmxkd2lkZS5jb20vdjYwLmpzJyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fbnonKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyogTmllbHNlbiAoVVMpIFNpdGVDZW5zdXMgVjYuMCAqL1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5pc0FjdGl2ZSgnbmllbHNlbi11cycpKSB7XG4gICAgICAgICAgICAgICAgLyogQ09QWVJJR0hUIDIwMTAgTmllbHNlbiBPbmxpbmUgKi9cbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBJbWFnZSgxLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZC5vbmVycm9yID0gZC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLm9uZXJyb3IgPSBkLm9ubG9hZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGQuc3JjID0gW1wiaHR0cHM6Ly9zZWN1cmUtdXMuaW1yd29ybGR3aWRlLmNvbS9jZ2ktYmluL20/Y2k9dXMtODA0Nzg5aCZhbXA7Y2c9MCZhbXA7Y2M9MSZhbXA7c2k9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUkkod2luZG93LmxvY2F0aW9uLmhyZWYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCImYW1wO3JwPVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJKGRvY3VtZW50LnJlZmVycmVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiJmFtcDt0cz1jb21wYWN0JmFtcDtybmQ9XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAobmV3IERhdGUoKSkuZ2V0VGltZSgpXS5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgICAgIGxvYWRlZC5wdXNoKCduaWVsc2VuX3VzJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIEVmZmVjdGl2ZSBNZWFzdXJlICovXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAgICAgICAgIGVtLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICAgICAgICBlbS5hc3luYyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZW0uc3JjID0gJ2h0dHBzOi8vbWUtc3NsLmVmZmVjdGl2ZW1lYXN1cmUubmV0L2VtLmpzJztcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gICAgICAgICAgICAgICAgcy5hcHBlbmRDaGlsZChlbSk7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgbG9hZGVkLnB1c2goJ2VmZmVjdGl2ZV9tZWFzdXJlJyk7XG5cbiAgICAgICAgICAgIC8qIE91dGJyYWluIFRyYWNraW5nICovXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFkUmVnaXN0ZXIuZ2V0QWQoJ291dGJyYWluX3RyXzEnKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBvdXRicmFpblJlbmRlcmVyLnJlbmRlckFkKCdvdXRicmFpbl90cl8xJyk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ291dGJyYWluJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHBvc3RXcml0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29uZmlnLmlzQWN0aXZlKCdhbmFseXRpY3MnKSkge1xuXG4gICAgICAgICAgICAvKiBOaWVsc2VuIChBVSkgU2l0ZUNlbnN1cyBWNi4wICovXG4gICAgICAgICAgICBpZiAoY29uZmlnLmlzQWN0aXZlKCduaWVsc2VuLWF1JykpIHtcbiAgICAgICAgICAgICAgICBpc05pZWxzZW5Mb2FkZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGxvYWROaWVsc2VuQXUsIDUwMCk7XG4gICAgICAgICAgICAgICAgbG9hZGVkLnB1c2goJ25pZWxzZW5fYXUtcG9zdFdyaXRlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qIE5pZWxzZW4gKE5aKSBTaXRlQ2Vuc3VzIFY2LjAgKi9cbiAgICAgICAgICAgIGlmIChjb25maWcuaXNBY3RpdmUoJ25pZWxzZW4tbnonKSkge1xuICAgICAgICAgICAgICAgIGlzTmllbHNlbkxvYWRlZEludGVydmFsID0gc2V0SW50ZXJ2YWwobG9hZE5pZWxzZW5OeiwgNTAwKTtcbiAgICAgICAgICAgICAgICBsb2FkZWQucHVzaCgnbmllbHNlbl9uei1wb3N0V3JpdGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGb3IgdGVzdGluZyBvbmx5LlxuICAgICAqL1xuICAgIGdldExvYWRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbG9hZGVkO1xuICAgIH0sXG4gICAgcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBsb2FkZWQgPSBbXTtcbiAgICB9XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2N1cnJlbmN5UHJvdmlkZXJzLmpzIiwiLypcbiAqIFRoaXMgbWFwcyBhIHNpbXBsZXIgQVBJIGFuZCBjaGVja3MgdGhlIG5lZWRlZCBvYmplY3RzIGV4aXRzXG4gKi9cbnZhciBhZDtcblxuaW1wb3J0IENvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0IHV0aWxzIGZyb20gJ3V0aWxzJztcbmltcG9ydCBsb2NhbGUgZnJvbSAnbG9jYWxlJztcbmltcG9ydCBTZWN0aW9ucyBmcm9tICdzZWN0aW9ucyc7XG5pbXBvcnQgUHJlZGljYXRlIGZyb20gJ3ByZWRpY2F0ZSc7XG5pbXBvcnQgc2xvdEFzeW5jIGZyb20gJ2FkdmVydHMvc2xvdEFzeW5jJztcbmltcG9ydCBzbG90SW5maW5pdGUgZnJvbSAnYWR2ZXJ0cy9zbG90SW5maW5pdGUnO1xuaW1wb3J0IGxheW91dCBmcm9tICdhZHZlcnRzL2xheW91dCc7XG5pbXBvcnQgc2xvdCBmcm9tICdhZHZlcnRzL3Nsb3QnO1xuaW1wb3J0IGFkUmVnaXN0ZXIgZnJvbSAnYWR2ZXJ0cy9hZFJlZ2lzdGVyJztcbmltcG9ydCBhZEZpbHRlciBmcm9tICdhZHZlcnRzL2FkRmlsdGVyJztcbmltcG9ydCBBZFVuaXQgZnJvbSAnYWR2ZXJ0cy9hZFVuaXQnO1xuaW1wb3J0IGFkU3VpdGVzIGZyb20gJ2FkdmVydHMvYWRTdWl0ZXMnO1xuaW1wb3J0IGtleVZhbHVlcyBmcm9tICdhZHZlcnRzL2tleVZhbHVlcyc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnYWR2ZXJ0cy9icmVha3BvaW50cyc7XG5pbXBvcnQgZGZwcFJlcXVlc3QgZnJvbSAnYWR2ZXJ0cy9kZnBwUmVxdWVzdCc7XG5pbXBvcnQge2dldEZlYXR1cmUsIGdldEZlYXR1cmVzfSBmcm9tICdjb21tb24vZmVhdHVyZVN3aXRjaCc7XG5cbnZhciBhbmFseXRpY3MgPSByZXF1aXJlKCdhbmFseXRpY3MnKTtcbnZhciBsb2cgPSByZXF1aXJlKCdsb2dnZXInKSgnYWR2ZXJ0czphZCcpO1xuXG52YXIgYXBpID0ge1xuICAgIHNsb3Q6IGZ1bmN0aW9uIChhZElkLCBncm91cHMsIHByZWxvYWQsIGFkdmVydFRleHQsIHN0dWJDdXJyZW50U2NyaXB0VGFnKSB7XG4gICAgICAgIGlmIChhZElkICYmIGdyb3Vwcykge1xuICAgICAgICAgICAgcmV0dXJuIHNsb3QoYWRJZCwgZ3JvdXBzLCBwcmVsb2FkLCBhZHZlcnRUZXh0LCBzdHViQ3VycmVudFNjcmlwdFRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHNsb3RBc3luYyAqL1xuICAgIGFzeW5jU2xvdDogc2xvdEFzeW5jLFxuICAgIHNsb3RBc3luYzogZnVuY3Rpb24gKGFkSWQsIGdyb3VwcywgcHJlbG9hZCwgYWR2ZXJ0VGV4dCkge1xuICAgICAgICBpZiAoYWRJZCAmJiBncm91cHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzbG90QXN5bmMoYWRJZCwgZ3JvdXBzLCBhZHZlcnRUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgYW4gYW4gdGVtcGxhdGUgYW5kIG9wdGlvbmFsbHkgd3JpdGVzIGl0IHRvIHRoZSBkb20gd2l0aGluICdlbGVtZW50J1xuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFkSWQgLSBBZCBTbG90IGVnICdtcHUnLCAnbmF0aXZlJ1xuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGdyb3VwcyAtIEdyb3VwcyB0aGF0IHRoZSBhZCBzaG91bGQgZGlzcGxheSBvblxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gW2VsZW1lbnQ9bnVsbF0gLSBET00gRWxlbWVudCB0byByZW5kZXIgdGVtcGxhdGUgaW5zaWRlXG4gICAgICogQHBhcmFtIHtib29sfSBbcmVnaXN0ZXI9ZmFsc2VdIC0gSW5jbHVkZSBKUyB0aGF0IHJlZ2lzdGVycyBhZCB3aXRoIGJiY2RvdGNvbSBtb2R1bGUgKERpc3BsYXkgQWQpXG4gICAgICovXG4gICAgc2xvdEluZmluaXRlOiBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBlbGVtZW50LCByZWdpc3Rlcikge1xuICAgICAgICByZXR1cm4gc2xvdEluZmluaXRlKGFkSWQsIGdyb3VwcywgZWxlbWVudCwgcmVnaXN0ZXIpO1xuICAgIH0sXG5cbiAgICBnZXRDdXJyZW50R3JvdXBJZDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbGF5b3V0LmdldEN1cnJlbnRHcm91cElkKCk7XG4gICAgfSxcblxuICAgIHJlY2VpdmVNZXNzYWdlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gRmlyc3QgdmFsaWRhdGUgdGhlIG9yaWdpblxuICAgICAgICB2YXIgcmUgPSAvKHd3d3xtKVxcLnswLDF9KHRlc3R8aW50fHN0YWdlKXswLDF9XFwuYmJjXFwuY29tJC87XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHJlLmV4ZWMoZXZlbnQub3JpZ2luKSA9PT0gbnVsbCAmJlxuICAgICAgICAgICAgZXZlbnQub3JpZ2luICE9PSBcImh0dHA6Ly9wYWwuc2FuZGJveC5kZXYuYmJjLmNvbVwiICYmXG4gICAgICAgICAgICBldmVudC5vcmlnaW4gIT09IFwiaHR0cDovL20uc2FuZGJveC5kZXYuYmJjLmNvbVwiXG4gICAgICAgICkge1xuICAgICAgICAgICAgLy8gTm90IGZyb20gYSB2YWxpZCBvcmlnaW4gLSBkbyBub3RpbmdcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZW4gY2hlY2sgdGhhdCB0aGUgZGF0YSBpcyB2YWxpZCBKU09OXG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIE5vdCB2YWxpZCBKU09OIC0gZG8gbm90aGluZ1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnNsb3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAvLyBDbG9zZSB0aGUgc2xvdCAmIHBvc3QgYmFjayBzdWNjZXNzXG4gICAgICAgICAgICBsb2coJ3JlY2VpdmVNZXNzYWdlIGFib3V0IHRvIGNhbGwgLmNsb3NlKCknKTtcbiAgICAgICAgICAgIGFkUmVnaXN0ZXIuZ2V0QWQoZGF0YS5zbG90KS5jbG9zZSgpO1xuICAgICAgICAgICAgZXZlbnQuc291cmNlLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHtzdWNjZXNzOiB0cnVlfSksICcqJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVnaXN0ZXJTbG90OiBmdW5jdGlvbiAoaWQsIGdyb3Vwcykge1xuICAgICAgICAvLyBUT0RPIC0gQWRkIGFiaWxpdHkgdG8gcmVnaXN0ZXIgc2xvdCB3aGVuIGFkIGhhcyBub3QgYmVlbiBwcmUgbG9hZGVkXG4gICAgICAgIHZhciBncm91cHNTdHJpbmcgPSBncm91cHMuam9pbignXycpLFxuICAgICAgICAgICAgYWQgPSBhZFJlZ2lzdGVyLnJlZ2lzdGVyQWQoaWQpO1xuICAgICAgICBpZiAoYWQuaXNQcmVsb2FkZWQoKSAmJiBpZCAmJiBncm91cHMpIHtcbiAgICAgICAgICAgIGxheW91dC5tb3ZlQWQoJ2JiY2NvbV8nICsgaWQgKyAnXycgKyBncm91cHNTdHJpbmcgKyAnX3ByZWxvYWQnLCAnYmJjY29tXycgKyBpZCArICdfJyArIGdyb3Vwc1N0cmluZyk7XG4gICAgICAgICAgICBhZFJlZ2lzdGVyLmdldEFkKGlkKS5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxheW91dC5yZXNldCgpO1xuICAgIH0sXG5cbiAgICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkID0gYWRSZWdpc3Rlci5nZXRDdXJyZW50QWQoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBhZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGFkLnNob3coKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gQ29uZmlnLmlzQWN0aXZlKGtleSk7XG4gICAgfSxcblxuICAgIHNldEFkS2V5VmFsdWU6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGtleVZhbHVlcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfSxcblxuICAgIHNldEFkVW5pdDogZnVuY3Rpb24gKHVuaXQpIHtcbiAgICAgICAgQWRVbml0LnNldEFkVW5pdCh1bml0KTtcbiAgICB9LFxuXG4gICAgc2V0TG9jYWxlOiBmdW5jdGlvbiAoZmllbGQsIHRleHQpIHtcbiAgICAgICAgbG9jYWxlLnNldChmaWVsZCwgdGV4dCk7XG4gICAgfSxcblxuICAgIGFkOiBmdW5jdGlvbiAoYWRJZCkge1xuICAgICAgICByZXR1cm4gYWRSZWdpc3Rlci5nZXRBZChhZElkKTtcbiAgICB9LFxuXG4gICAgc2V0R3JvdXBTdGFydFdpZHRoOiBmdW5jdGlvbiAoZ3JvdXAsIHdpZHRoKSB7XG4gICAgICAgIHJldHVybiBicmVha3BvaW50cy5zZXRHcm91cFN0YXJ0KGdyb3VwLCB3aWR0aCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbmZpZyBwYXNzZWQgZnJvbSBzZXJ2ZXItc2lkZSB0aGVuIGNvbmZpZyBmcm9tIGNsaWVudC1zaWRlIGlzIHBhc3NlZCBpbnRvIHRoaXMgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmYgYXJyYXl8b2JqZWN0IENvbmZpZ3VyYXRpb24gaXRlbXNcbiAgICAgKi9cbiAgICBzZXRDb25maWc6IENvbmZpZy5yZWh5ZHJhdGUuYmluZChDb25maWcpLFxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYWRzIGlzIHVzZWQgaW4gYXN5bmNocm9ub3VzIG1vZGUgdG8gYWQgYWRkaXRpb25hbCBhZHMgYWZ0ZXIgcGFnZSBsb2FkXG4gICAgICogVGhpcyBkaWZmZXJzIHRvIHJlZnJlc2hpbmcgYSBzbG90IHdpdGggYSBuZXcgYWRcbiAgICAgKlxuICAgICAqIFBhcmFtczpcbiAgICAgKiBhZElkIDxKU09OT2JqZWN0fHN0cmluZz5cbiAgICAgKiAgfCBNYXkgYmUgYSBKU09OIG9iamVjdCBlZyBgY29uZmlnW2lkXS5ncm91cHMgPSBbMSwyLDMsNF1gXG4gICAgICogIHwgTWF5IGJlIGEgSlNPTiBvYmplY3QgZWcgYGNvbmZpZ1tpZF0uZ3JvdXBzID0gWzEsMiwzLDRdYFxuICAgICAqICB8IG9yIGp1c3QgYSBzbG90IGlkIGVnIGxlYWRlcmJvYXJkLCBtcHUuXG4gICAgICpcbiAgICAgKiBncm91cHMgPGFycmF5PlxuICAgICAqICB8IEFycmF5IG9mIHBhZ2UgZ3JvdXAgbnVtYmVycyB0byByZXF1ZXN0IGFkcyBmb3IgZWcuIFsxLCAyLCAzLCA0XVxuICAgICAqICB8IElmIGRvbUlkIHdhcyBwYXNzZWQgYXMgYW4gb2JqZWN0IHRoZSBmaWVsZCBtYXkgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAgICAgKlxuICAgICAqIGtleVZhbHVlcyA8SlNPTk9iamVjdD5cbiAgICAgKiAgfCBMaXN0IG9mIGtleSB2YWx1ZSBwYWlycyB0byBiZSBwYXNzZWQgb24gZm9yIGluZGl2aWR1YWwgYWQgcmVxdWVzdHMuXG4gICAgICpcbiAgICAgKi9cbiAgICByZWdpc3RlckFkOiBmdW5jdGlvbiAoYWRJZCwgZ3JvdXBzLCBrZXlWYWx1ZXMpIHtcbiAgICAgICAgZGZwcFJlcXVlc3QucmVnaXN0ZXJBZChhZElkLCBncm91cHMsIGtleVZhbHVlcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgbGF6eUxvYWRBZDogZnVuY3Rpb24gKGFkSWQsIGdyb3Vwcykge1xuICAgICAgICBkZnBwUmVxdWVzdC5sYXp5TG9hZEFkKGFkSWQsIGdyb3Vwcyk7XG4gICAgfSxcblxuICAgIGdldEZlYXR1cmVzOiBnZXRGZWF0dXJlcyxcbiAgICBnZXRGZWF0dXJlOiBnZXRGZWF0dXJlLFxuXG4gICAgLyoqXG4gICAgICogUmVmcmVzaCBhZHMgaW4gc3luY2hyb25vdXMgbG9hZGVkIHBhZ2VzXG4gICAgICogVGhlcmUgaXMgYW4gYXN5bmMgdmVyc2lvbiBvZiByZWZyZXNoaW5nIGFkcyBpbiBkZnBwUmVxdWVzdC5qc1xuICAgICAqIFRPRE8gLSBSZW1vdmUgb25jZSB1c2luZyBhc3luYyB2ZXJzaW9uIG9mIEdQVFxuICAgICAqL1xuICAgIHJlZnJlc2hBZDogZnVuY3Rpb24gKGFkSWQsIHNpemUsIGFkdmVydFRleHQpIHtcblxuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGFkU3RyaW5nLFxuICAgICAgICAgICAgYWRJZFByZWZpeCA9ICdiYmNjb21fJyxcbiAgICAgICAgICAgIGtleVZhbHVlU3RyaW5nID0gJycsXG4gICAgICAgICAgICBrZXlWYWx1ZXMgPSBrZXlWYWx1ZXMuZ2V0QWxsKCksXG4gICAgICAgICAgICBhZCA9IGFkUmVnaXN0ZXIuZ2V0QWQoYWRJZCksXG4gICAgICAgICAgICBhZFNsb3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhZElkUHJlZml4ICsgYWRJZCksXG4gICAgICAgICAgICBhVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLFxuICAgICAgICAgICAgaUZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyksXG4gICAgICAgICAgICBhZEluZm8gPSBhZC5nZXRBZEluZm9VcmwoKSxcbiAgICAgICAgICAgIGFkVGV4dCA9IGFkLmdldEFkVGV4dCgpO1xuXG4gICAgICAgIGZvciAoaSBpbiBrZXlWYWx1ZXMpIHtcbiAgICAgICAgICAgIGlmIChrZXlWYWx1ZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICAgICAgICBrZXlWYWx1ZVN0cmluZyArPSAnOycgKyBpICsgJz0nICsga2V5VmFsdWVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYWRTdHJpbmcgPSAnaHR0cHM6Ly9hZC5kb3VibGVjbGljay5uZXQnICtcbiAgICAgICAgICAgIEFkVW5pdC5nZXQoKS5yZXBsYWNlKCcvNDgxNycsICcvTjQ4MTcvYWRpJykgK1xuICAgICAgICAgICAgJztzbG90PScgKyBhZElkICtcbiAgICAgICAgICAgICc7c3o9JyArIHNpemUgK1xuICAgICAgICAgICAga2V5VmFsdWVTdHJpbmcgK1xuICAgICAgICAgICAgJztvcmQ9JyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSgyLCAxNikgK1xuICAgICAgICAgICAgJzt0aWxlPTEnICtcbiAgICAgICAgICAgICc7aWZyYW1lPXllcz8nO1xuXG4gICAgICAgIGlGcmFtZS5zcmMgPSBhZFN0cmluZztcbiAgICAgICAgaUZyYW1lLndpZHRoID0gc2l6ZS5zcGxpdCgneCcpWzBdO1xuICAgICAgICBpRnJhbWUuaGVpZ2h0ID0gc2l6ZS5zcGxpdCgneCcpWzFdO1xuICAgICAgICBpRnJhbWUuc2Nyb2xsaW5nID0gJ25vJztcbiAgICAgICAgaUZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgICAgICAgaUZyYW1lLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cbiAgICAgICAgYVRhZy5pbm5lckhUTUwgPSBhZFRleHQ7XG4gICAgICAgIGFUYWcuaHJlZiA9IGFkSW5mbztcbiAgICAgICAgYVRhZy5jbGFzc05hbWUgPSAnYmJjY29tX3RleHQnO1xuXG4gICAgICAgIGFkU2xvdC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgYWRTbG90LnN0eWxlLndpZHRoID0gc2l6ZS5zcGxpdCgneCcpWzBdICsgJ3B4JztcbiAgICAgICAgYWRTbG90LmNsYXNzTmFtZSA9IGFkU2xvdC5jbGFzc05hbWUucmVwbGFjZSgnYmJjY29tX2Rpc3BsYXlfbm9uZScsICcnKTtcbiAgICAgICAgYWRTbG90LmFwcGVuZENoaWxkKGFUYWcpO1xuICAgICAgICBhZFNsb3QuYXBwZW5kQ2hpbGQoaUZyYW1lKTtcblxuICAgICAgICBhZFJlZ2lzdGVyLmdldEFkKGFkSWQpLm9wZW4oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQW5hbHl0aWNzIHRyYWNraW5nIGJ5IHRoaXJkLXBhcnR5IGFwcHMgKGVnIFZpZGVvIEV4cGVyaWVuY2UpXG4gICAgICovXG4gICAgdHJhY2tFdmVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOb09wXG4gICAgfSxcblxuICAgIGNoZWNrVGhpcmRQYXJ0eUZpcnN0OiBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoYXQpe1xuICAgICAgICB2YXIgYm91bmRDYWxsYmFjayA9IGNhbGxiYWNrLmJpbmQodGhhdCk7XG4gICAgICAgIHZhciBHRFBSX0NPVU5UUklFUyA9IFsnQVQnLCAnQkUnLCAnQkcnLCAnSFInLCAnQ1knLCAnQ1onLCAnREsnLCAnRUUnLCAnRkknLCAnRlInLCAnREUnLCAnR1InLCAnSFUnLCAnSUUnLCAnSVQnLCAnTFYnLCAnTFQnLCAnTFUnLCAnTVQnLCAnTkwnLCAnUEwnLCAnUFQnLCAnUk8nLCAnU0snLCAnU0knLCAnRVMnLCAnU0UnLCAnSVMnLCAnTEknLCAnTk8nLCAnQ0gnXTtcbiAgICAgICAgaWYgKCFiYmNkb3Rjb20uY29uZmlnLmlzVGhpcmRQYXJ0eURpc2FibGVkKCkgfHwgYmJjZG90Y29tLmNvbmZpZy5pc0VVKCkgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBib3VuZENhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93LmJiY3VzZXIgJiYgd2luZG93LmJiY3VzZXIuZ2V0Q291bnRyeSAmJiB0eXBlb2Yod2luZG93LmJiY3VzZXIuZ2V0Q291bnRyeSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHdpbmRvdy5iYmN1c2VyLmdldENvdW50cnkoKS50aGVuKGZ1bmN0aW9uKGNvdW50cnlDb2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlzRVUgPSBjb3VudHJ5Q29kZSA/IEdEUFJfQ09VTlRSSUVTLmluZGV4T2YoY291bnRyeUNvZGUudG9VcHBlckNhc2UoKSkgIT09IC0xIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgYmJjZG90Y29tLmNvbmZpZy5zZXRFVShpc0VVKTtcbiAgICAgICAgICAgICAgICBib3VuZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cub3JiICYmIHdpbmRvdy5vcmIuZmlnICYmIHR5cGVvZih3aW5kb3cub3JiLmZpZykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJiY2RvdGNvbS5jb25maWcuc2V0RVUod2luZG93Lm9yYi5maWcoJ2V1JykpO1xuICAgICAgICAgICAgYm91bmRDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlSW5pdDogZnVuY3Rpb24gKHBhcmFtcykge1xuXG4gICAgICAgIHZhciB3aW5kb3dEb2N1bWVudCA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogcGFyYW1zLmhlYWRsaW5lLFxuICAgICAgICAgICAgICAgIHJlZmVycmVyOiBwYXJhbXMucmVmZXJyZXIgfHwgJydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cmwgPSBwYXJhbXMudXJsIHx8ICcnLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gbmV3IFByZWRpY2F0ZSgpO1xuXG4gICAgICAgIC8vIFRPRE8gLSBTaG91bGQgbmV3IHRoZXNlIHVwIGluc3RlYWQgb2YgaGF2aW5nIHRvIHJlc2V0IHRoZW1cbiAgICAgICAgU2VjdGlvbnMucigpO1xuICAgICAgICBrZXlWYWx1ZXMucigpO1xuXG4gICAgICAgIGFwaS5zZXRDb25maWcocGFyYW1zKTtcblxuICAgICAgICBpZiAodHlwZW9mIHBhcmFtcy5oZWFkbGluZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBhcmFtcy5zdW1tYXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcHJlZGljYXRlLnNldChwYXJhbXMuaGVhZGxpbmUgKyAnICcgKyBwYXJhbXMuc3VtbWFyeSk7XG4gICAgICAgIH1cblxuICAgICAgICBTZWN0aW9ucy5idWlsZCh0cnVlLCB1cmwpO1xuXG4gICAgICAgIEFkVW5pdC5pbml0KGxheW91dC5nZXRDbGllbnRXaWR0aCgpLCB1bmRlZmluZWQsIFNlY3Rpb25zLmdldFNlY3Rpb25zKCdhZHZlcnQnKSwgU2VjdGlvbnMuZ2V0U2VjdGlvbnMoKSk7XG5cbiAgICAgICAga2V5VmFsdWVzLmluaXQoXG4gICAgICAgICAgICB1dGlscy5jcmVhdGVXaW5kb3dMb2NhdGlvbih1cmwpLFxuICAgICAgICAgICAgd2luZG93RG9jdW1lbnRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuYXNzZXRUeXBlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAga2V5VmFsdWVzLnNldCgnYXNzZXRfdHlwZScsIHBhcmFtcy5hc3NldFR5cGUpO1xuICAgICAgICB9XG5cbiAgICB9LFxuICAgIHJlc2V0UGFnZTogZnVuY3Rpb24gKHBhcmFtcykge1xuXG4gICAgICAgICAgICB2YXIgcmVmZXJyZXIgPSBDb25maWcuZ2V0V2luZG93TG9jYXRpb24oKS5ocmVmfHxcIlwiLFxuICAgICAgICAgICAgICAgIHdpbmRvd0xvY2F0aW9uPSB1dGlscy5jcmVhdGVXaW5kb3dMb2NhdGlvbihwYXJhbXMudXJsKSxcbiAgICAgICAgICAgICAgICBhZHNUb0Rpc3BsYXk7XG5cbiAgICAgICAgICAgIHZhciBkaXNhYmxlQWRVbml0ID0gcGFyYW1zLmRpc2FibGVBZFVuaXQgfHwgZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChDb25maWcuaXNBZHNFbmFibGVkKCkgJiYgKCFDb25maWcuaXNTcG9ydEFwcCgpIHx8IChDb25maWcuaXNTcG9ydEFwcCgpICYmIENvbmZpZy5pc0Fkc3BvcnRhcHBFbmFibGVkKCkpKSkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEtleVZhbHVlc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGtleVZhbHVlcy5yKCk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIERGUFAgUmVxdWVzdHNcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGRmcHBSZXF1ZXN0LnJlc2V0KCk7XG5cbiAgICAgICAgICAgICAgICBDb25maWcuaW5pdChiYmNkb3Rjb21Db25maWcsIGJiY2RvdGNvbS5kYXRhLCB3aW5kb3dMb2NhdGlvbiwge3RpdGxlOiBwYXJhbXMudGl0bGUsIGRlc2NyaXB0aW9uOiBwYXJhbXMuZGVzY3JpcHRpb24sIHJlZmVycmVyOiByZWZlcnJlcn0pO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogU2VjdGlvbnNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBTZWN0aW9ucy5idWlsZCh0cnVlKTtcblxuICAgICAgICAgICAgICAgIGlmKHBhcmFtcy5hZHNUb0Rpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRzVG9EaXNwbGF5ID0gYWRGaWx0ZXIuYnVpbGQocGFyYW1zLmFkc1RvRGlzcGxheSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogREZQUCBSZWdpc3RlciBhZHNcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoYWRzVG9EaXNwbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5iYmNkb3Rjb20uYWRzVG9EaXNwbGF5ID0gYWRzVG9EaXNwbGF5O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTAsbGVuPWFkc1RvRGlzcGxheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRSZWdpc3Rlci5yZWdpc3RlckFkKGFkc1RvRGlzcGxheVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBZCBFeGNsdXNpb25zXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgKG5ldyBQcmVkaWNhdGUoKSkuc2V0KHBhcmFtcy50aXRsZSArICcgJyArIHBhcmFtcy5kZXNjcmlwdGlvbik7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBZCBVbml0XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC8vIEZJWE1FXG4gICAgICAgICAgICAgICAgaWYoIWRpc2FibGVBZFVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgQWRVbml0LmluaXQobGF5b3V0LmdldENsaWVudFdpZHRoKCksIHRoaXMuc2VydmVyc2lkZUFkVW5pdHMydG85LCBTZWN0aW9ucy5nZXRTZWN0aW9ucygnYWR2ZXJ0JyksIFNlY3Rpb25zLmdldFNlY3Rpb25zKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogS2V5IFZhbHVlc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGtleVZhbHVlcy5pbml0KHdpbmRvd0xvY2F0aW9uLCB3aW5kb3cuZG9jdW1lbnQsIENvbmZpZy5nZXRUeXBlKCkpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zLmtleVZhbHVlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCBpbiBwYXJhbXMua2V5VmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmtleVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh4KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVZhbHVlcy5zZXQoeCwgcGFyYW1zLmtleVZhbHVlc1t4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGZwcFJlcXVlc3Quc2V0S2V5VmFsdWVzKCk7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBBZCBTdWl0ZXMgLSB1c2VkIHRvIGRpc3BsYXkgYSBjZXJ0YWluIHNldCBvZiBhZHMgYWxsIHRoZSB0aW1lIHVzaW5nID9hZHM9YmlnXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYWRTdWl0ZXMuaW5pdCh3aW5kb3dMb2NhdGlvbi5ocmVmKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoQ29uZmlnLmlzQW5hbHl0aWNzRW5hYmxlZCgpKXtcbiAgICAgICAgICAgICAgICBhbmFseXRpY3MucGFnZSgpO1xuICAgICAgICAgICAgfVxuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYXBpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC92YXIvbGliL2plbmtpbnMvd29ya3NwYWNlL2JiY2RvdGNvbS1idWlsZC10by1pbnQvYmJjZG90Y29tL3dlYmFwcC9zdGF0aWMtdmVyc2lvbmVkL3NjcmlwdC9vcmIvc3JjL2FwaS5qcyIsImltcG9ydCBDb25maWcgZnJvbSAnY29uZmlnJztcbmltcG9ydCBGZWF0dXJlIGZyb20gJy4vZmVhdHVyZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGZWF0dXJlKGZlYXR1cmVOYW1lID0gbnVsbCkge1xuXG4gICAgaWYgKGZlYXR1cmVOYW1lID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmVhdHVyZSh7fSwgcGFsRW52KTtcbiAgICB9XG4gICAgZmVhdHVyZU5hbWUgPSBmZWF0dXJlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgY29uc3QgZmVhdHVyZXNDb25maWcgPSBDb25maWcuZ2V0RmVhdHVyZXMoKTtcbiAgICBjb25zdCBwYWxFbnYgPSBDb25maWcuZ2V0UGFsRW52KCk7XG5cbiAgICBjb25zdCBmZWF0dXJlRGF0YSA9IChcbiAgICAgICAgZmVhdHVyZXNDb25maWcuaGFzT3duUHJvcGVydHkoZmVhdHVyZU5hbWUpXG4gICAgKSA/IE9iamVjdC5hc3NpZ24oe25hbWU6IGZlYXR1cmVOYW1lfSwgZmVhdHVyZXNDb25maWdbZmVhdHVyZU5hbWVdKSA6IHtuYW1lOiBmZWF0dXJlTmFtZX07XG5cbiAgICByZXR1cm4gbmV3IEZlYXR1cmUoZmVhdHVyZURhdGEsIHBhbEVudik7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZlYXR1cmVzKCkge1xuXG4gICAgY29uc3QgZmVhdHVyZXNDb25maWcgPSBDb25maWcuZ2V0RmVhdHVyZXMoKTtcbiAgICBjb25zdCBwYWxFbnYgPSBDb25maWcuZ2V0UGFsRW52KCk7XG4gICAgbGV0IGZlYXR1cmVzID0ge307XG5cbiAgICBmb3IgKHZhciBmZWF0dXJlTmFtZSBpbiBmZWF0dXJlc0NvbmZpZykge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAgKi9cbiAgICAgICAgaWYgKGZlYXR1cmVzQ29uZmlnLmhhc093blByb3BlcnR5KGZlYXR1cmVOYW1lKSkge1xuICAgICAgICAgICAgZmVhdHVyZXNbZmVhdHVyZU5hbWVdID0gZ2V0RmVhdHVyZShmZWF0dXJlTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZXM7XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb21tb24vZmVhdHVyZVN3aXRjaC9pbmRleC5qcyIsImltcG9ydCB7XG4gICAgUEFMX0VOVl9MSVZFLFxuICAgIFBBTF9FTlZfU1RBR0UsXG4gICAgUEFMX0VOVl9URVNULFxuICAgIFBBTF9FTlZfSU5ULFxuICAgIFBBTF9FTlZfU0FOREJPWFxufSBmcm9tICcuL2NvbnN0cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZlYXR1cmUge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWUgPSAndW5rbm93bi1mZWF0dXJlJyxcbiAgICAgICAgICAgIGVudnMgPSBbXSxcbiAgICAgICAgICAgIG9uID0gZmFsc2UsXG4gICAgICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgICAgICBvdmVycmlkZSA9IG51bGxcbiAgICAgICAgfSA9IHt9LFxuICAgICAgICBwYWxFbnYgPSBQQUxfRU5WX0xJVkVcbiAgICApIHtcblxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmVudnMgPSBlbnZzO1xuICAgICAgICB0aGlzLm9uID0gb247XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICAgICAgdGhpcy5wYWxFbnYgPSBwYWxFbnY7XG5cbiAgICB9XG5cbiAgICBnZXROYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgIH1cblxuICAgIGlzRW5hYmxlZChlbnZpcm9ubWVudCA9IHRoaXMucGFsRW52KSB7XG4gICAgICAgIGlmICh0aGlzLm92ZXJyaWRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vdmVycmlkZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpczo6aXNFbnZpcm9ubWVudEVuYWJsZWQoZW52aXJvbm1lbnQpICYmIHRoaXM6OmdldE9uKClcbiAgICB9XG5cbiAgICBnZXRPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zO1xuICAgIH1cblxuICAgIGdldE9wdGlvbihvcHRpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pID8gb3B0aW9uc1tvcHRpb25dIDogbnVsbDtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gaXNFbnZpcm9ubWVudEVuYWJsZWQoZW52aXJvbm1lbnQpIHtcbiAgICByZXR1cm4gdGhpcy5lbnZzLmluY2x1ZGVzKGVudmlyb25tZW50KSB8fCB0aGlzLmVudnMubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiBnZXRPbigpIHtcbiAgICByZXR1cm4gdGhpcy5vbjtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9jb21tb24vZmVhdHVyZVN3aXRjaC9mZWF0dXJlLmpzIiwiLypcblN0aWNreUFkdmVydC5qc1xuPT09PT09PT09PT09PT09XG5cblNlYXJjaGVzIHRoZSBkb20gZm9yIHRoZSBnaXZlbiBlbGVtZW50cyBwYXNzZWQgdGhyb3VnaCB0aGUgZXhwb3NlZCBhZGRFbGVtZW50KCkgbWV0aG9kXG5hbmQgbWFrZXMgdGhlbSBzdGljayB0byB0aGUgdG9wIG9mIHNjcmVlbiBvbiBzY3JvbGwgZm9yIHRoZSBkaXN0YW5jZShweCkgZGVmaW5lZCBpbiB0aGVcbm9wdGlvbnMgb2JqZWN0LlxuXG5BUElcbj09PVxuYWRkKDxzdHJpbmc+IGtleSwgPERPTUVsZW1lbnQ+IGVsZW1lbnQsIDxKU09OT2JqZWN0PiBvcHRpb25zKVxuICB8IE1ha2VzIGFuIGVsZW1lbnQgc3RpY2t5IHdpdGggdGhlIHByb3ZpZGVkIG9wdGlvbnMuIEl0IGlzIGFkZGVkIHRvIHRoZSBsaXN0ZW5lciB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXG5cbnJlbW92ZSg8c3RyaW5nPiBrZXkpXG4gIHwgUmVtb3ZlIHN0aWNraW5lc3MgZnJvbSBlbGVtZW50LlxuXG5saXN0KClcbiAgfCBMaXN0IGFsbCBlbGVtZW50cyB0aGF0IGFyZSBjdXJyZW50bHkgc3RpY2t5LlxuXG5PcHRpb25zIGNvbmZpZ3VyYXRpb25cbj09PT09PT09PT09PT09PT09PT09PVxub2Zmc2V0LmZyb206IFs8c3RyaW5nPiBDU1NzZWxlY3RvciwgPHN0cmluZz4gKHRvcHxib3R0b20pXVxuICB8IENhbGN1bGF0ZXMgdGhlIHRyYXZlbCBkaXN0YW5jZSAqRlJPTSogZWl0aGVyIHRoZSB0b3Agb3IgYm90dG9tIG9mIHRoZSBzZWxlY3RlZCBlbGVtZW50LlxuICB8IEJvdGggdmFsdWVzIG11c3QgYWx3YXlzIGJlIHBhc3NlZC5cblxub2Zmc2V0LnRvOiBbPHN0cmluZz4gQ1NTc2VsZWN0b3IsIDxzdHJpbmc+ICh0b3B8Ym90dG9tKV1cbiAgfCBDYWxjdWxhdGVzIHRoZSB0cmF2ZWwgZGlzdGFuY2UgKlRPKiBlaXRoZXIgdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnQuXG4gIHwgQm90aCB2YWx1ZXMgbXVzdCBhbHdheXMgYmUgcGFzc2VkLlxuXG5vZmZzZXRUeXBlOiA8c3RyaW5nPiAoaW5jbHVkZXxleGNsdWRlKVxuICB8IE9mZnNldFR5cGUgJ2luY2x1ZGUnIHdpbGwgc3VidHJhY3QgdGhlIHN0aWNraWVkIGVsZW1lbnRzIGhlaWdodCBmcm9tIHRoZSB0cmF2ZWwgZGlzdGFuY2UsXG4gIHwgZXhsdWRlIHdpbGwgbm90LlxuXG5hcHBseVRvOiA8c3RyaW5nPiAocGFyZW50KVxuICB8IFRoaXMgd2lsbCBhcHBseSB0aGUgc3RpY2tpbmVzcyB0byB0aGUgcGFyZW50IG9mIHRoZSBhY3R1YWwgYWQgY29udGFpbmVyLiBUaGlzIG1pZ2h0IGJlXG4gIHwgbmVjZXNzYXJ5IGZvciBzb21lIGFkcyB0aGF0IHJlcXVpcmUgYSBmdWxsIHNlY3Rpb24gdG8gYmVjb21lIHN0aWNreS5cbiAgfCBlZy4gbGVhZGVyYm9hcmQgb24gd3docC5cblxuaGVpZ2h0TGltaXQ6IDxpbnRlZ2VyPlxuICB8IEFueSBhZCB0aGF0IGV4Y2VlZHMgdGhpcyBoZWlnaHQgd2lsbCBub3QgYmUgbWFkZSBzdGlja3kuXG5cbnBhcmFsbGF4OiA8Ym9vbGVhbj5cbiAgfCBNYWtlcyB0aGUgZWZmZWN0IHBhcmFsbGF4IGluc3RlYWQgb2Ygc3RpY2t5ICpOT1QgV09SS0lORypcbiovXG5cbmNvbnN0IFN0aWNreVN0dWZmID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCBzdGlja2llZEVsZW1lbnRzID0ge307XG5cbiAgY29uc3QgYWRkID0gZnVuY3Rpb24oa2V5LCBlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgLy8gbWFrZSBzdXJlIGFkIGhlaWdodCBtZWV0cyBoZWlnaHQgbGltaXRcbiAgICBpZihlbGVtZW50LmNsaWVudEhlaWdodCA+IG9wdGlvbnMuaGVpZ2h0TGltaXQpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGlja2llZEVsZW1lbnRzW2tleV0gPSBtYWtlU3RpY2t5KGVsZW1lbnQsIG9wdGlvbnMpO1xuICB9O1xuXG4gIGNvbnN0IHJlbW92ZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIGRlbGV0ZSBzdGlja2llZEVsZW1lbnRzW2tleV07XG4gIH07XG5cbiAgY29uc3QgbGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzdGlja2llZEVsZW1lbnRzO1xuICB9O1xuXG4gIGNvbnN0IHRyaWdnZXJSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RpY2tpZWRFbGVtZW50cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgc3RpY2tpZWRFbGVtZW50c1trZXldLnRyaWdnZXJSZXNpemUoKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzdGFydFNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHNjcm9sbFRvcCA9IDA7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgc2Nyb2xsVG9wID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgT2JqZWN0LmtleXMoc3RpY2tpZWRFbGVtZW50cykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBzdGlja2llZEVsZW1lbnRzW2tleV0udXBkYXRlKHNjcm9sbFRvcCk7XG4gICAgICB9KTtcbiAgICB9LCBmYWxzZSk7XG4gIH07XG5cbiAgY29uc3Qgc3RhcnRSZXNpemVMaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCByZXNpemVUaW1lciA9IG51bGw7XG4gICAgbGV0IHdpZHRoID0gd2luZG93Lm91dGVyV2lkdGg7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZihlLnRhcmdldC5vdXRlcldpZHRoID09PSB3aWR0aCkgcmV0dXJuO1xuICAgICAgd2lkdGggPSBlLnRhcmdldC5vdXRlcldpZHRoO1xuXG4gICAgICBpZighcmVzaXplVGltZXIpIHtcbiAgICAgICAgdHJpZ2dlclJlc2l6ZSgpO1xuICAgICAgfTtcbiAgICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lcik7XG4gICAgICByZXNpemVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZXNpemVUaW1lciA9IG51bGw7XG4gICAgICAgIHRyaWdnZXJSZXNpemUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgc3RhcnRPcmllbnRhdGlvbkxpc3RlbmVyID0gZnVuY3Rpb24oKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHN0aWNraWVkRWxlbWVudHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICBzdGlja2llZEVsZW1lbnRzW2tleV0udHJpZ2dlclJlc2l6ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGluaXQgPSAoZnVuY3Rpb24oKSB7XG4gICAgc3RhcnRTY3JvbGxMaXN0ZW5lcigpO1xuICAgIHN0YXJ0UmVzaXplTGlzdGVuZXIoKTtcbiAgICBzdGFydE9yaWVudGF0aW9uTGlzdGVuZXIoKTtcbiAgfSkoKTtcblxuICByZXR1cm4geyBhZGQsIHJlbW92ZSwgbGlzdCB9O1xufSkoKTtcblxuLy8gV3JhcCByZWZlcmVuY2UgdG8gZWxlbWVudHMgaW4gYSBjbG9zdXJlIHRvIHN0b3JlIGl0J3MgY3VycmVudCBzdGF0ZVxuY29uc3QgbWFrZVN0aWNreSA9IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgY29uc3QgQUJPVkUgPSAwLCBPVkVSID0gMSwgQkVMT1cgPSAyO1xuXG4gIC8vIEFwcGx5IHN0aWNreSBkaXJlY3RseSB0byBhZCBvciB0byBpdHMgcGFyZW50LiBUaGlzIGlzIHRvIG9ubHkgYmUgdXNlZCB3aGVuIHRoZSBhZCBuZWVkcyB0byBiZSBvdXQgb2YgdGhlIHBhZ2UgZmxvdyBlZy4gbGVhZGVyYm9hcmRcbiAgbGV0IHRhcmdldCA9IG9wdGlvbnMuYXBwbHlUbyA9PT0gJ3BhcmVudCcgPyBlbGVtZW50LnBhcmVudEVsZW1lbnQgOiBlbGVtZW50O1xuICBsZXQgX3N0YXRlID0gQUJPVkU7ICAgICAgICAgICAgIC8vIEN1cnJlbnQgc3RhdGUgdXNlZCB0byBrbm93IHdoYXQgdHJhbnNpdGlvbiBjb21pbmcgZnJvbSBbMDogc3RhcnQsIDE6IHRyYXZlbCwgMjogZW5kXVxuICBsZXQgX2luaXRpYWxUb3AgPSBudWxsOyAgICAgICAgIC8vIEluaXRpYWwgdG9wIG9mIHRoZSBlbGVtZW50IG9uIHBhZ2UgbG9hZFxuICBsZXQgX3RyYXZlbCA9IG51bGw7ICAgICAgICAgICAgIC8vIFRoZSBjYWxjdWxhdGVkIG9mZnNldCAodHJhdmVsIGRpc3RhbmNlKSB0byBiZSB1c2VkIGluIGNhbGN1bGF0aW9uc1xuICBsZXQgX2xlZnQgPSBudWxsOyAgICAgICAgICAgICAgIC8vIExlZnQgcG9zaXRpb24gb2YgdGhlIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50XG4gIGxldCB3YWl0aW5nRm9yRnJhbWUgPSBmYWxzZTtcbiAgbGV0IHNjcm9sbFRvcCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcblxuICAvLyBTdGF0ZXNcbiAgY29uc3Qgc2V0U3RhdGUgPSBmdW5jdGlvbihzdGF0ZSkge1xuICAgIGlmKHN0YXRlID4gQkVMT1cgfHwgc3RhdGUgPCBBQk9WRSkgcmV0dXJuO1xuICAgIF9zdGF0ZSA9IHN0YXRlO1xuICAgIHN3aXRjaChzdGF0ZSkge1xuICAgICAgY2FzZSBBQk9WRTpcbiAgICAgICAgcmVuZGVyKHNldFN0eWxlc0Fib3ZlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE9WRVI6XG4gICAgICAgICFvcHRpb25zLnBhcmFsbGF4XG4gICAgICAgICAgPyByZW5kZXIoc2V0U3R5bGVzT3ZlcilcbiAgICAgICAgICA6IHJlbmRlcihzZXRTdHlsZXNQYXJhbGxheCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBCRUxPVzpcbiAgICAgICAgcmVuZGVyKHNldFN0eWxlc0JlbG93KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIC8vIFN0eWxlc1xuICBjb25zdCBzZXRTdHlsZXNBYm92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRhcmdldC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgdGFyZ2V0LnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgdGFyZ2V0LnN0eWxlLnRvcCA9ICcwJztcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KVwiO1xuICB9O1xuXG4gIGNvbnN0IHNldFN0eWxlc092ZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0YXJnZXQuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIHRhcmdldC5zdHlsZS5sZWZ0ID0gYCR7X2xlZnR9cHhgO1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpXCI7XG4gICAgdGFyZ2V0LnN0eWxlLnpJbmRleCA9ICcxMDAnO1xuICAgIHRhcmdldC5zdHlsZS50b3AgPSAwO1xuICB9O1xuXG4gIGNvbnN0IHNldFN0eWxlc0JlbG93ID0gZnVuY3Rpb24oKSB7XG4gICAgdGFyZ2V0LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB0YXJnZXQuc3R5bGUudG9wID0gYCR7X3RyYXZlbH1weGA7XG4gICAgdGFyZ2V0LnN0eWxlLmxlZnQgPSBgNTAlYDtcbiAgICB0YXJnZXQuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZCgtNTAlLCAwcHgsIDBweClcIjtcbiAgICB0YXJnZXQuc3R5bGUuekluZGV4ID0gJzEwMCc7XG4gIH07XG5cbiAgY29uc3Qgc2V0U3R5bGVzUGFyYWxsYXggPSBmdW5jdGlvbigpIHtcbiAgICB0YXJnZXQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIHRhcmdldC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LCAke2dldFBhcmFsbGF4KCl9cHgsIDBweClgO1xuICAgIHRhcmdldC5zdHlsZS5sZWZ0ID0gYCR7X2xlZnR9cHhgO1xuICB9O1xuXG4gIGNvbnN0IHNldFdyYXBwZXJTdHlsZSA9IGZ1bmN0aW9uKGFkKSB7XG4gICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7dGFyZ2V0Lm9mZnNldEhlaWdodH1weGA7XG4gICAgdGFyZ2V0LnBhcmVudEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVZhcmlhYmxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIF9pbml0aWFsVG9wID0gZ2V0SW5pdGlhbFRvcCgpO1xuICAgIF90cmF2ZWwgPSBjYWxjVHJhdmVsKCk7XG4gICAgX2xlZnQgPSBnZXRMZWZ0KCk7XG4gIH07XG5cbiAgY29uc3QgZ2V0TGVmdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KTtcbiAgfTtcblxuICBjb25zdCBnZXRJbml0aWFsVG9wID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gIH07XG5cbiAgY29uc3QgY2FsY1RyYXZlbCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChvcHRpb25zLm9mZnNldC5mcm9tWzBdICYmIG9wdGlvbnMub2Zmc2V0LnRvWzBdKSB7XG4gICAgICBjb25zdCBmcm9tRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob3B0aW9ucy5vZmZzZXQuZnJvbVswXSk7XG4gICAgICBjb25zdCB0b0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMub2Zmc2V0LnRvWzBdKTtcbiAgICAgIGxldCBmcm9tID0gZnJvbUVsZW1lbnQub2Zmc2V0VG9wO1xuICAgICAgbGV0IHRvID0gdG9FbGVtZW50Lm9mZnNldFRvcDtcblxuICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0LmZyb21bMV0gPT09ICdib3R0b20nKSB7XG4gICAgICAgIGZyb20gKz0gZnJvbUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0LnRvWzFdID09PSAnYm90dG9tJykge1xuICAgICAgICB0byArPSB0b0VsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub2Zmc2V0VHlwZSA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHRvIC09IHRhcmdldC5vZmZzZXRIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5wYXJhbGxheCkge1xuICAgICAgICB0byArPSB0YXJnZXQub2Zmc2V0SGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG8gLSBmcm9tO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB0cmlnZ2VyUmVzaXplID0gZnVuY3Rpb24oKSB7XG4gICAgc2V0U3R5bGVzQWJvdmUoKTtcbiAgICB1cGRhdGVWYXJpYWJsZXMoKTtcbiAgICB1cGRhdGUod2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgfTtcblxuICBjb25zdCBnZXRQYXJhbGxheCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKHNjcm9sbFRvcCAtICgoZWxlbWVudC5jbGllbnRIZWlnaHQgLyBfdHJhdmVsKSAqIHNjcm9sbFRvcCkpO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlciA9IGZ1bmN0aW9uKHNldFBvc2l0aW9uKSB7XG4gICAgaWYoIXdhaXRpbmdGb3JGcmFtZSkge1xuICAgICAgd2FpdGluZ0ZvckZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRQb3NpdGlvbigpO1xuICAgICAgICB3YWl0aW5nRm9yRnJhbWUgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1cGRhdGUgPSBmdW5jdGlvbihfc2Nyb2xsVG9wKSB7XG4gICAgc2Nyb2xsVG9wID0gX3Njcm9sbFRvcDtcbiAgICBzd2l0Y2godHJ1ZSkge1xuICAgICAgY2FzZSAoX2luaXRpYWxUb3AgPiBzY3JvbGxUb3ApOlxuICAgICAgICBzZXRTdGF0ZShBQk9WRSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAoc2Nyb2xsVG9wID49IF9pbml0aWFsVG9wICYmICBzY3JvbGxUb3AgPD0gX2luaXRpYWxUb3ArX3RyYXZlbCk6XG4gICAgICAgIHNldFN0YXRlKE9WRVIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgKF9pbml0aWFsVG9wK190cmF2ZWwgPCBzY3JvbGxUb3ApOlxuICAgICAgICBzZXRTdGF0ZShCRUxPVyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBpbml0ID0gKGZ1bmN0aW9uKCkge1xuICAgIHNldFdyYXBwZXJTdHlsZSgpO1xuICAgIHVwZGF0ZVZhcmlhYmxlcygpO1xuICB9KSgpO1xuXG4gIHJldHVybiB7IHVwZGF0ZSwgdHJpZ2dlclJlc2l6ZSB9O1xufTtcblxuY29uc3Qgc3RpY2t5QWR2ZXJ0ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHsgLi4uU3RpY2t5U3R1ZmYgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gc3RpY2t5QWR2ZXJ0O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvb3JiL3NyYy9zdGlja3lBZHZlcnQuanMiLCIvKiBDb3B5cmlnaHQgKGMpIDIwMTYgY29tU2NvcmUsIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBCeSB1c2luZyB0aGlzIHNvZnR3YXJlLCB5b3UgYXJlIGFncmVlaW5nIHRvIGJlIGJvdW5kIGJ5IHRoZVxuICogdGVybXMgb2YgdGhlc2UgcG9saWNpZXM6IGh0dHA6Ly93d3cuY29tc2NvcmUuY29tL0Fib3V0X2NvbVNjb3JlL1ByaXZhY3lfUG9saWN5XG4gKi9cbiFmdW5jdGlvbihhLGIpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD8oYihhLm5zXz1hLm5zX3x8e30pLGRlZmluZShbXSxmdW5jdGlvbigpe3JldHVybiBhLm5zX30pKTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1iKHt9KTpiKGEubnNfPWEubnNffHx7fSl9KHRoaXMsZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7YS5uc189YTt2YXIgYj1ifHx7fTtiLmluZGV4T2Y9ZnVuY3Rpb24oYSxiKXt2YXIgYz0tMTtyZXR1cm4gdGhpcy5mb3JFYWNoKGIsZnVuY3Rpb24oYixkKXtiPT1hJiYoYz1kKX0pLGN9LGIuZm9yRWFjaD1mdW5jdGlvbihhLGIsYyl7dHJ5e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGIpaWYoYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgYz9jOm51bGwsXCJudW1iZXJcIiE9dHlwZW9mIGEubGVuZ3RofHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYVswXSl7dmFyIGQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEuX19wcm90b19fO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJighZHx8ZCYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuX19wcm90b19fW2VdKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgYVtlXSYmYi5jYWxsKGMsYVtlXSxlKX1lbHNlIGZvcih2YXIgZj0wLGc9YS5sZW5ndGg7ZjxnO2YrKyliLmNhbGwoYyxhW2ZdLGYpfWNhdGNoKGgpe319O3ZhciBiPWJ8fHt9O2IucGFyc2VCb29sZWFuPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI9Ynx8ITEsYT9cIjBcIiE9YTpifSxiLnBhcnNlSW50ZWdlcj1mdW5jdGlvbihhLGIpe3JldHVybiBudWxsPT1hfHxpc05hTihhKT9ifHwwOnBhcnNlSW50KGEpfSxiLnBhcnNlTG9uZz1mdW5jdGlvbihhLGIpe3ZhciBjPU51bWJlcihhKTtyZXR1cm4gbnVsbD09YXx8aXNOYU4oYyk/Ynx8MDpjfSxiLnRvU3RyaW5nPWZ1bmN0aW9uKGEpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBhKXJldHVyblwidW5kZWZpbmVkXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpcmV0dXJuIGE7aWYoYSBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBhLmpvaW4oXCIsXCIpO3ZhciBiPVwiXCI7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGIrPWMrXCI6XCIrYVtjXStcIjtcIik7cmV0dXJuIGJ8fGEudG9TdHJpbmcoKX07dmFyIGI9Ynx8e307Yi5maWx0ZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz17fTtmb3IodmFyIGQgaW4gYiliLmhhc093blByb3BlcnR5KGQpJiZhKGJbZF0pJiYoY1tkXT1iW2RdKTtyZXR1cm4gY30sYi5leHRlbmQ9ZnVuY3Rpb24oYSl7dmFyIGIsYz1hcmd1bWVudHMubGVuZ3RoO2E9YXx8e307Zm9yKHZhciBkPTE7ZDxjO2QrKylpZihiPWFyZ3VtZW50c1tkXSlmb3IodmFyIGUgaW4gYiliLmhhc093blByb3BlcnR5KGUpJiYoYVtlXT1iW2VdKTtyZXR1cm4gYX07dmFyIGI9Ynx8e307Yi5jbG9uZU9iamVjdD1mdW5jdGlvbihhKXtpZihudWxsPT1hfHxcIm9iamVjdFwiIT10eXBlb2YgYSlyZXR1cm4gYTt2YXIgYj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt9ZnVuY3Rpb24gYihiKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgYj8oYS5wcm90b3R5cGU9YixuZXcgYSk6Yn1mdW5jdGlvbiBjKGEpe2Zvcih2YXIgYiBpbiBhKWEuaGFzT3duUHJvcGVydHkoYikmJih0aGlzW2JdPWFbYl0pfWZ1bmN0aW9uIGQoKXt0aGlzLmNvcGllZE9iamVjdHM9W107dmFyIGE9dGhpczt0aGlzLnJlY3Vyc2l2ZURlZXBDb3B5PWZ1bmN0aW9uKGIpe3JldHVybiBhLmRlZXBDb3B5KGIpfSx0aGlzLmRlcHRoPTB9ZnVuY3Rpb24gZShhLGIpe3ZhciBjPW5ldyBkO3JldHVybiBiJiYoYy5tYXhEZXB0aD1iKSxjLmRlZXBDb3B5KGEpfWZ1bmN0aW9uIGYoYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93JiZ3aW5kb3cuTm9kZT9hIGluc3RhbmNlb2YgTm9kZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmE9PT1kb2N1bWVudHx8XCJudW1iZXJcIj09dHlwZW9mIGEubm9kZVR5cGUmJmEuYXR0cmlidXRlcyYmYS5jaGlsZE5vZGVzJiZhLmNsb25lTm9kZX12YXIgZz1bXTtyZXR1cm4gYy5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmMsY2FuQ29weTpmdW5jdGlvbigpe3JldHVybiExfSxjcmVhdGU6ZnVuY3Rpb24oYSl7fSxwb3B1bGF0ZTpmdW5jdGlvbihhLGIsYyl7fX0sZC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmQsbWF4RGVwdGg6MjU2LGNhY2hlUmVzdWx0OmZ1bmN0aW9uKGEsYil7dGhpcy5jb3BpZWRPYmplY3RzLnB1c2goW2EsYl0pfSxnZXRDYWNoZWRSZXN1bHQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuY29waWVkT2JqZWN0cyxjPWIubGVuZ3RoLGQ9MDtkPGM7ZCsrKWlmKGJbZF1bMF09PT1hKXJldHVybiBiW2RdWzFdfSxkZWVwQ29weTpmdW5jdGlvbihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtpZihcIm9iamVjdFwiIT10eXBlb2YgYSlyZXR1cm4gYTt2YXIgYj10aGlzLmdldENhY2hlZFJlc3VsdChhKTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz0wO2M8Zy5sZW5ndGg7YysrKXt2YXIgZD1nW2NdO2lmKGQuY2FuQ29weShhKSlyZXR1cm4gdGhpcy5hcHBseURlZXBDb3BpZXIoZCxhKX10aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gY2xvbmUgdGhlIGZvbGxvd2luZyBvYmplY3QgXCIrYSl9LGFwcGx5RGVlcENvcGllcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuY3JlYXRlKGIpO2lmKHRoaXMuY2FjaGVSZXN1bHQoYixjKSx0aGlzLmRlcHRoKyssdGhpcy5kZXB0aD50aGlzLm1heERlcHRoKXRocm93IG5ldyBFcnJvcihcIk1heGltdW0gcmVjdXJzaW9uIGRlcHRoIGV4Y2VlZGVkLlwiKTtyZXR1cm4gYS5wb3B1bGF0ZSh0aGlzLnJlY3Vyc2l2ZURlZXBDb3B5LGIsYyksdGhpcy5kZXB0aC0tLGN9fSxlLkRlZXBDb3BpZXI9YyxlLmRlZXBDb3BpZXJzPWcsZS5yZWdpc3Rlcj1mdW5jdGlvbihhKXthIGluc3RhbmNlb2YgY3x8KGE9bmV3IGMoYSkpLGcudW5zaGlmdChhKX0sZS5yZWdpc3Rlcih7Y2FuQ29weTpmdW5jdGlvbigpe3JldHVybiEwfSxjcmVhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBhLmNvbnN0cnVjdG9yP2IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpOnt9fSxwb3B1bGF0ZTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YShiW2RdKSk7cmV0dXJuIGN9fSksZS5yZWdpc3Rlcih7Y2FuQ29weTpmdW5jdGlvbihhKXtyZXR1cm4gYSBpbnN0YW5jZW9mIEFycmF5fSxjcmVhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBhLmNvbnN0cnVjdG9yfSxwb3B1bGF0ZTpmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspYy5wdXNoKGEoYltkXSkpO3JldHVybiBjfX0pLGUucmVnaXN0ZXIoe2NhbkNvcHk6ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW5zdGFuY2VvZiBEYXRlfSxjcmVhdGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBEYXRlKGEpfX0pLGUucmVnaXN0ZXIoe2NhbkNvcHk6ZnVuY3Rpb24oYSl7cmV0dXJuIGYoYSl9LGNyZWF0ZTpmdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmE9PT1kb2N1bWVudD9kb2N1bWVudDphLmNsb25lTm9kZSghMSl9LHBvcHVsYXRlOmZ1bmN0aW9uKGEsYixjKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJmI9PT1kb2N1bWVudClyZXR1cm4gZG9jdW1lbnQ7aWYoYi5jaGlsZE5vZGVzJiZiLmNoaWxkTm9kZXMubGVuZ3RoKWZvcih2YXIgZD0wO2Q8Yi5jaGlsZE5vZGVzLmxlbmd0aDtkKyspe3ZhciBlPWEoYi5jaGlsZE5vZGVzW2RdKTtjLmFwcGVuZENoaWxkKGUpfX19KSx7ZGVlcENvcHk6ZX19KCk7cmV0dXJuIGIuZGVlcENvcHkoYSl9O3ZhciBiPWJ8fHt9O2IuZ2V0TmFtZXNwYWNlPWZ1bmN0aW9uKCl7cmV0dXJuIGEubnNffHxhfSxiLnVpZD1mdW5jdGlvbigpe3ZhciBhPTE7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlK1wiX1wiK2ErK319KCksYi5pc0VtcHR5PWZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hfHxudWxsPT09YXx8XCJcIj09PWF8fGEgaW5zdGFuY2VvZiBBcnJheSYmMD09PWEubGVuZ3RofSxiLmlzTm90RW1wdHk9ZnVuY3Rpb24oYSl7cmV0dXJuIXRoaXMuaXNFbXB0eShhKX0sYi5zYWZlR2V0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI9dGhpcy5leGlzdHMoYik/YjpcIlwiLHRoaXMuZXhpc3RzKGEpP2E6Yn0sYi5pc1RydWU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGEmJihcInN0cmluZ1wiPT10eXBlb2YgYT8oYT1hLnRvTG93ZXJDYXNlKCksXCJ0cnVlXCI9PT1hfHxcIjFcIj09PWF8fFwib25cIj09PWEpOiEhYSl9LGIucmVnaW9uTWF0Y2hlcz1mdW5jdGlvbihhLGIsYyxkLGUpe2lmKGI8MHx8ZDwwfHxiK2U+YS5sZW5ndGh8fGQrZT5jLmxlbmd0aClyZXR1cm4hMTtmb3IoOy0tZT49MDspe3ZhciBmPWEuY2hhckF0KGIrKyksZz1jLmNoYXJBdChkKyspO2lmKGYhPWcpcmV0dXJuITF9cmV0dXJuITB9LGIuZXhpc3RzPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBhJiZudWxsIT1hfSwhZnVuY3Rpb24oKXt2YXIgYT1bXSxjPSExLGQ9ITAsZT0xZTM7Yi5vblN5c3RlbUNsb2NrSnVtcD1mdW5jdGlvbihiLGYpe2EucHVzaChiKSxjfHwoYz0hMCxlPWZ8fGUsZD0rbmV3IERhdGUsc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXt2YXIgYj1kK2UsYz0rbmV3IERhdGU7ZD1jO3ZhciBmPWMtYjtpZihNYXRoLmFicyhmKT5lKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7KytnKWFbZ10oZj4wKX0sZSkpfX0oKTt2YXIgYj1ifHx7fTtiLmhhc1BhZ2VWaXNpYmlsaXR5QVBJU3VwcG9ydD1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudClyZXR1cm4hMTt2YXIgYT0hMTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQuaGlkZGVuP2E9ITA6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbj9hPSEwOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC5tc0hpZGRlbj9hPSEwOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihhPSEwKSxmdW5jdGlvbigpe3JldHVybiBhfX0oKSxiLmdldFBhZ2VWaXNpYmlsaXR5QVBJPWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXJldHVybiBudWxsO3ZhciBhLGIsYztcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQuaGlkZGVuPyhhPVwiaGlkZGVuXCIsYj1cInZpc2liaWxpdHljaGFuZ2VcIixjPVwidmlzaWJpbGl0eVN0YXRlXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4/KGE9XCJtb3pIaWRkZW5cIixiPVwibW96dmlzaWJpbGl0eWNoYW5nZVwiLGM9XCJtb3pWaXNpYmlsaXR5U3RhdGVcIik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50Lm1zSGlkZGVuPyhhPVwibXNIaWRkZW5cIixiPVwibXN2aXNpYmlsaXR5Y2hhbmdlXCIsYz1cIm1zVmlzaWJpbGl0eVN0YXRlXCIpOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4mJihhPVwid2Via2l0SGlkZGVuXCIsYj1cIndlYmtpdHZpc2liaWxpdHljaGFuZ2VcIixjPVwid2Via2l0VmlzaWJpbGl0eVN0YXRlXCIpO3ZhciBkPXtoaWRkZW46YSx2aXNpYmlsaXR5Q2hhbmdlOmIsc3RhdGU6Y307cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGR9fSgpLGIuaXNUYWJJbkJhY2tncm91bmQ9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZG9jdW1lbnQpcmV0dXJuIG51bGw7dmFyIGE9Yi5nZXRQYWdlVmlzaWJpbGl0eUFQSSgpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudFthLmhpZGRlbl19fSgpLGIuZ2V0QnJvd3Nlck5hbWU9ZnVuY3Rpb24oKXtpZighbmF2aWdhdG9yKXJldHVyblwiXCI7dmFyIGEsYixjPW5hdmlnYXRvci51c2VyQWdlbnR8fFwiXCIsZD1uYXZpZ2F0b3IuYXBwTmFtZXx8XCJcIjtyZXR1cm4oYj1jLmluZGV4T2YoXCJPcGVyYVwiKSkhPS0xfHwoYj1jLmluZGV4T2YoXCJPUFIvXCIpKSE9LTE/ZD1cIk9wZXJhXCI6KGI9Yy5pbmRleE9mKFwiQW5kcm9pZFwiKSkhPS0xP2Q9XCJBbmRyb2lkXCI6KGI9Yy5pbmRleE9mKFwiQ2hyb21lXCIpKSE9LTE/ZD1cIkNocm9tZVwiOihiPWMuaW5kZXhPZihcIlNhZmFyaVwiKSkhPS0xP2Q9XCJTYWZhcmlcIjooYj1jLmluZGV4T2YoXCJGaXJlZm94XCIpKSE9LTE/ZD1cIkZpcmVmb3hcIjooYj1jLmluZGV4T2YoXCJJRU1vYmlsZVwiKSkhPS0xP2Q9XCJJbnRlcm5ldCBFeHBsb3JlciBNb2JpbGVcIjpcIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiPT1kfHxcIk5ldHNjYXBlXCI9PWQ/ZD1cIkludGVybmV0IEV4cGxvcmVyXCI6KGE9Yy5sYXN0SW5kZXhPZihcIiBcIikrMSk8KGI9Yy5sYXN0SW5kZXhPZihcIi9cIikpPyhkPWMuc3Vic3RyaW5nKGEsYiksZC50b0xvd2VyQ2FzZSgpPT1kLnRvVXBwZXJDYXNlKCkmJihkPW5hdmlnYXRvci5hcHBOYW1lKSk6ZD1cInVua25vd25cIixkfSxiLmdldEJyb3dzZXJGdWxsVmVyc2lvbj1mdW5jdGlvbigpe2lmKCFuYXZpZ2F0b3IpcmV0dXJuXCJcIjt2YXIgYSxiLGMsZCxlPW5hdmlnYXRvci51c2VyQWdlbnR8fFwiXCIsZj1uYXZpZ2F0b3IuYXBwTmFtZXx8XCJcIixnPW5hdmlnYXRvci5hcHBWZXJzaW9uP1wiXCIrcGFyc2VGbG9hdChuYXZpZ2F0b3IuYXBwVmVyc2lvbik6XCJcIjtyZXR1cm4oYj1lLmluZGV4T2YoXCJPcGVyYVwiKSkhPS0xPyhnPWUuc3Vic3RyaW5nKGIrNiksKGI9ZS5pbmRleE9mKFwiVmVyc2lvblwiKSkhPS0xJiYoZz1lLnN1YnN0cmluZyhiKzgpKSk6KGI9ZS5pbmRleE9mKFwiT1BSL1wiKSkhPS0xP2c9ZS5zdWJzdHJpbmcoYis0KTooYj1lLmluZGV4T2YoXCJBbmRyb2lkXCIpKSE9LTE/Zz1lLnN1YnN0cmluZyhiKzExKTooYj1lLmluZGV4T2YoXCJDaHJvbWVcIikpIT0tMT9nPWUuc3Vic3RyaW5nKGIrNyk6KGI9ZS5pbmRleE9mKFwiU2FmYXJpXCIpKSE9LTE/KGc9ZS5zdWJzdHJpbmcoYis3KSwoYj1lLmluZGV4T2YoXCJWZXJzaW9uXCIpKSE9LTEmJihnPWUuc3Vic3RyaW5nKGIrOCkpKTooYj1lLmluZGV4T2YoXCJGaXJlZm94XCIpKSE9LTE/Zz1lLnN1YnN0cmluZyhiKzgpOlwiTWljcm9zb2Z0IEludGVybmV0IEV4cGxvcmVyXCI9PWY/KGQ9bmV3IFJlZ0V4cChcIk1TSUUgKFswLTldezEsfVsuMC05XXswLH0pXCIpLG51bGwhPWQuZXhlYyhlKSYmKGc9cGFyc2VGbG9hdChSZWdFeHAuJDEpKSk6XCJOZXRzY2FwZVwiPT1mPyhkPW5ldyBSZWdFeHAoXCJUcmlkZW50Ly4qcnY6KFswLTldezEsfVsuMC05XXswLH0pXCIpLG51bGwhPWQuZXhlYyhlKSYmKGc9cGFyc2VGbG9hdChSZWdFeHAuJDEpKSk6Zz1lLmxhc3RJbmRleE9mKFwiIFwiKSsxPChiPWUubGFzdEluZGV4T2YoXCIvXCIpKT9lLnN1YnN0cmluZyhiKzEpOlwidW5rbm93blwiLGc9Zy50b1N0cmluZygpLChjPWcuaW5kZXhPZihcIjtcIikpIT0tMSYmKGc9Zy5zdWJzdHJpbmcoMCxjKSksKGM9Zy5pbmRleE9mKFwiIFwiKSkhPS0xJiYoZz1nLnN1YnN0cmluZygwLGMpKSwoYz1nLmluZGV4T2YoXCIpXCIpKSE9LTEmJihnPWcuc3Vic3RyaW5nKDAsYykpLGE9cGFyc2VJbnQoXCJcIitnLDEwKSxpc05hTihhKSYmKGc9XCJcIitwYXJzZUZsb2F0KG5hdmlnYXRvci5hcHBWZXJzaW9uKSksZ30sYi5icm93c2VyQWNjZXB0c0xhcmdlVVJMcz1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fChudWxsIT09d2luZG93LkFjdGl2ZVhPYmplY3QsITApfSxiLmlzQnJvd3Nlcj1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudH0sYi5pc1dlYlNlY3VyZT1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCYmbnVsbCE9ZG9jdW1lbnQmJlwic1wiPT09ZG9jdW1lbnQubG9jYXRpb24uaHJlZi5jaGFyQXQoNCl9O3ZhciBjPWZ1bmN0aW9uKCl7dmFyIGE9MWU0O3JldHVybiBmdW5jdGlvbihiLGMpe2Z1bmN0aW9uIGQoYSl7YT1hfHxbXTt2YXIgYz1baCwrbmV3IERhdGVdO3JldHVybiBiJiZjLnB1c2goYiksYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKSxjPWMuY29uY2F0KGEpfWZ1bmN0aW9uIGUoYSl7dmFyIGIsZCxlO2lmKFwiYm9vbGVhblwiPT10eXBlb2YgY3x8IWMpcmV0dXJuISFjO2lmKGU9YS5qb2luKFwiIFwiKSxjIGluc3RhbmNlb2YgQXJyYXkmJmMubGVuZ3RoPjApe2ZvcihiPTA7YjxjLmxlbmd0aDsrK2IpaWYoZD1jW2JdLGQgaW5zdGFuY2VvZiBSZWdFeHAmJmQudGVzdChlKSlyZXR1cm4hMDtyZXR1cm4hMX1pZihcIm9iamVjdFwiPT10eXBlb2YgYyl7dmFyIGY9ITE7aWYoYy5oaWRlIGluc3RhbmNlb2YgQXJyYXkpZm9yKGI9MDtiPGMuaGlkZS5sZW5ndGg7KytiKWlmKGQ9Yy5oaWRlW2JdLGQgaW5zdGFuY2VvZiBSZWdFeHAmJmQudGVzdChlKSl7Zj0hMDticmVha31pZihjLnNob3cgaW5zdGFuY2VvZiBBcnJheSlmb3IoYj0wO2I8Yy5zaG93Lmxlbmd0aDsrK2IpaWYoZD1jLnNob3dbYl0sZCBpbnN0YW5jZW9mIFJlZ0V4cCYmZC50ZXN0KGUpKXJldHVybiEwO3JldHVybiFmJiYhYy5zaG93fXJldHVybiEwfWZ1bmN0aW9uIGYoYil7dmFyIGQ9aS5sZW5ndGg7KGQ+YXx8YyYmYy5tYXgmJmQ+Yy5tYXgpJiYoaT1pLnNsaWNlKC1NYXRoLmZsb29yKGMubWF4LzIpKSxpLnB1c2goXCJQcmV2aW91cyBsb2dzOiBcIitkKSksaS5wdXNoKGIpfXZhciBnPXRoaXMsaD1cImNvbVNjb3JlXCIsaT1bXTtnLmxvZz1mdW5jdGlvbigpe3ZhciBhPWQoYXJndW1lbnRzKTtmKGEpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBjb25zb2xlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBjb25zb2xlLmxvZyYmZShhKSYmY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSxhKX0sZy53YXJuPWZ1bmN0aW9uKCl7dmFyIGE9ZChhcmd1bWVudHMpO2YoYSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGNvbnNvbGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGNvbnNvbGUud2FybiYmZShhKSYmY29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsYSl9LGcuZXJyb3I9ZnVuY3Rpb24oKXt2YXIgYT1kKGFyZ3VtZW50cyk7ZihhKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgY29uc29sZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgY29uc29sZS5lcnJvciYmZShhKSYmY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLGEpfSxnLmFwaUNhbGw9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtcIkFQSSBjYWxsIHRvOlwiLGFdLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7KytjKWIucHVzaChcImFyZ1wiK2MrXCI6XCIsYXJndW1lbnRzW2NdKTt0aGlzLmxvZy5hcHBseSh0aGlzLGIpfSxnLmluZm9Mb2c9ZnVuY3Rpb24oKXt2YXIgYT1bXCJUcmFjZSBsb2c6XCJdO2EucHVzaC5hcHBseShhLEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpLHRoaXMubG9nLmFwcGx5KHRoaXMsYSl9LGcuZGVwcmVjYXRpb249ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXCJEZXByZWNhdGVkIEFQSTpcIixhLFwiaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSBldmVudHVhbGx5IHJlbW92ZWQuXCJdO2ImJmMucHVzaChcIlVzZVwiLGIsXCJpbnN0ZWFkLlwiKSx0aGlzLndhcm4uYXBwbHkodGhpcyxjKX0sZy5nZXRMb2dIaXN0b3J5PWZ1bmN0aW9uKCl7cmV0dXJuIGl9fX0oKTtyZXR1cm4gYS5TdHJlYW1pbmdBbmFseXRpY3M9YS5TdHJlYW1pbmdBbmFseXRpY3N8fGZ1bmN0aW9uKCl7dmFyIGE9ZnVuY3Rpb24oKXt2YXIgYT1cImNzX1wiO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBsb2NhbFN0b3JhZ2U/bG9jYWxTdG9yYWdlOm51bGw7Yi5leHRlbmQodGhpcyx7Z2V0OmZ1bmN0aW9uKGIpe3JldHVybiBjJiZjLmdldEl0ZW0oYStiKX0sc2V0OmZ1bmN0aW9uKGIsZCl7YyYmYy5zZXRJdGVtKGErYixkKX0saGFzOmZ1bmN0aW9uKGIpe3JldHVybiBjJiZjLmdldEl0ZW0oYStiKX0scmVtb3ZlOmZ1bmN0aW9uKGIpe2MmJmMucmVtb3ZlSXRlbShhK2IpfSxjbGVhcjpmdW5jdGlvbigpe2Zvcih2YXIgYj0wO2MmJmI8Yy5sZW5ndGg7KytiKXt2YXIgZD1jLmtleShiKTtkLnN1YnN0cigwLGEubGVuZ3RoKT09PWEmJmMucmVtb3ZlSXRlbShkKX19fSl9fSgpLGQ9ZnVuY3Rpb24oYSxiKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgSW1hZ2UpcmV0dXJuIHZvaWQoXCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9iJiZzZXRUaW1lb3V0KGIsMCk6YiYmYigpKTt2YXIgYz1uZXcgSW1hZ2U7Yy5vbmxvYWQ9ZnVuY3Rpb24oKXtiJiZiKDIwMCksYz1udWxsfSxjLm9uZXJyb3I9ZnVuY3Rpb24oKXtiJiZiKCksYz1udWxsfSxjLnNyYz1hfSxlPWZ1bmN0aW9uKGEsYixjKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P2MmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtjKDIwMCl9LDApOmMmJmMoMjAwKX0sZj1mdW5jdGlvbigpe3JldHVybntkaXI6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sYXBwZW5kOmZ1bmN0aW9uKGEsYixjKXt9LHdyaXRlOmZ1bmN0aW9uKGEsYixjKXt9LGRlbGV0ZUZpbGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX0scmVhZDpmdW5jdGlvbigpe3JldHVybiBudWxsfX19KCksZz1mdW5jdGlvbigpe3JldHVybntQTEFURk9STTpcImdlbmVyaWNcIixodHRwR2V0OmQsaHR0cFBvc3Q6ZSxTdG9yYWdlOmEsSU86ZixvbkRhdGFGZXRjaDpmdW5jdGlvbihhKXthKCl9LGdldENyb3NzUHVibGlzaGVySWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZ2V0QXBwTmFtZTpmdW5jdGlvbigpe3JldHVybiBoLlVOS05PV05fVkFMVUV9LGdldEFwcFZlcnNpb246ZnVuY3Rpb24oKXtyZXR1cm4gaC5VTktOT1dOX1ZBTFVFfSxnZXRWaXNpdG9ySWQ6ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGUrfn4oMWUzKk1hdGgucmFuZG9tKCkpfSxnZXRWaXNpdG9ySWRTdWZmaXg6ZnVuY3Rpb24oKXtyZXR1cm5cIjcyXCJ9LGdldERldmljZU1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJuIGguVU5LTk9XTl9WQUxVRX0sZ2V0UGxhdGZvcm1WZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGguVU5LTk9XTl9WQUxVRX0sZ2V0UGxhdGZvcm1OYW1lOmZ1bmN0aW9uKCl7cmV0dXJuXCJqc1wifSxnZXRSdW50aW1lTmFtZTpmdW5jdGlvbigpe3JldHVybiBoLlVOS05PV05fVkFMVUV9LGdldFJ1bnRpbWVWZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGguVU5LTk9XTl9WQUxVRX0sZ2V0RGlzcGxheVJlc29sdXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gaC5VTktOT1dOX1JFU09MVVRJT059LGdldEFwcGxpY2F0aW9uUmVzb2x1dGlvbjpmdW5jdGlvbigpe3JldHVybiBoLlVOS05PV05fUkVTT0xVVElPTn0sZ2V0TGFuZ3VhZ2U6ZnVuY3Rpb24oKXtyZXR1cm4gaC5VTktOT1dOX1ZBTFVFfSxnZXRQYWNrYWdlTmFtZTpmdW5jdGlvbigpe3JldHVybiBudWxsfSxpc0Nvbm5lY3Rpb25BdmFpbGFibGU6ZnVuY3Rpb24oKXtyZXR1cm4hMH0saXNDb21wYXRpYmxlOmZ1bmN0aW9uKCl7cmV0dXJuITB9LGF1dG9TZWxlY3Q6ZnVuY3Rpb24oKXt9LHNldFBsYXRmb3JtQVBJOmZ1bmN0aW9uKCl7fSxpc0Nyb3NzUHVibGlzaGVySWRDaGFuZ2VkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHNldFRpbWVvdXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gc2V0VGltZW91dChhLGIpfSxjbGVhclRpbWVvdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGNsZWFyVGltZW91dChhKX0sZ2V0RGV2aWNlQXJjaGl0ZWN0dXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGguVU5LTk9XTl9WQUxVRX0sZ2V0Q29ubmVjdGlvblR5cGU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5VTktOT1dOX1ZBTFVFfSxnZXREZXZpY2VKYWlsQnJva2VuRmxhZzpmdW5jdGlvbigpe3JldHVybiBoLlVOS05PV05fVkFMVUV9LGlzQ29ubmVjdGlvblNlY3VyZTpmdW5jdGlvbigpe3JldHVybiExfSxwcm9jZXNzTWVhc3VyZW1lbnRMYWJlbHM6ZnVuY3Rpb24oKXt9fX0oKSxoPXtVTktOT1dOX1ZBTFVFOlwidW5rbm93blwiLFVOS05PV05fUkVTT0xVVElPTjpcIjB4MFwifTtiLmpzb25PYmplY3RUb1N0cmluZ0RpY3Rpb25hcnk9ZnVuY3Rpb24oYSl7dmFyIGI9e307Zm9yKHZhciBjIGluIGEpe3ZhciBkPWFbY107bnVsbD09PWR8fHZvaWQgMD09PWQ/YltjXT1kOmJbY109YVtjXStcIlwifXJldHVybiBifSxiLmdldEtleXM9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdO2ZvcihjIGluIGEpYiYmIWIudGVzdChjKXx8IWEuaGFzT3duUHJvcGVydHkoYyl8fChkW2QubGVuZ3RoXT1jKTtyZXR1cm4gZH0sYi5maXhFdmVudFRpbWU9ZnVuY3Rpb24oYSl7aWYoYS5uc190cylyZXR1cm4gcGFyc2VJbnQoYS5uc190cyk7dmFyIGI9K25ldyBEYXRlO3JldHVybiBhLm5zX3RzPWIrXCJcIixifSxiLmlzQnJvd3Nlcj1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudH0sYi5hZGROZXdQbGF5YmFja0ludGVydmFsPWZ1bmN0aW9uKGEsYyxkLGUpe3ZhciBmPXt9O2lmKCEoZD49YykpcmV0dXJuIGIuY2xvbmVPYmplY3QoYSk7aWYoZi5zdGFydD1jLGYuZW5kPWQsMD09YS5sZW5ndGgpcmV0dXJuIGEucHVzaChmKSxiLmNsb25lT2JqZWN0KGEpO3ZhciBnO2ZvcihnPTA7ZzxhLmxlbmd0aDtnKyspaWYoZi5zdGFydD49YVtnXS5zdGFydCYmZi5lbmQ8PWFbZ10uZW5kKXJldHVybiBiLmNsb25lT2JqZWN0KGEpO3ZhciBoLGk9ITE7Zm9yKGg9MDtoPGEubGVuZ3RoO2grKylpZihoKzE9PT1hLmxlbmd0aCYmZi5zdGFydD49YVtoXS5zdGFydHx8Zi5zdGFydD49YVtoXS5zdGFydCYmZi5zdGFydDxhW2grMV0uc3RhcnQpe2Euc3BsaWNlKGgrMSwwLGYpLGk9ITA7YnJlYWt9aXx8YS5zcGxpY2UoMCwwLGYpO3ZhciBqPVthWzBdXTtmb3IoZz0xO2c8YS5sZW5ndGg7ZysrKWpbai5sZW5ndGgtMV0uZW5kK2U8YVtnXS5zdGFydD9qLnB1c2goYVtnXSk6altqLmxlbmd0aC0xXS5lbmQ8YVtnXS5lbmQmJihqW2oubGVuZ3RoLTFdLmVuZD1hW2ddLmVuZCk7cmV0dXJuIGIuY2xvbmVPYmplY3Qoail9LGIuc3RhdGVUb1N0cmluZz1mdW5jdGlvbihhKXt2YXIgYj1ILkludGVybmFsU3RhdGVzO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmJbY109PWEpcmV0dXJuIGN9O3ZhciBpPWZ1bmN0aW9uKCl7dmFyIGE9W1wicGxheVwiLFwicGF1c2VcIixcInBhdXNlLW9uLWJ1ZmZlcmluZ1wiLFwiZW5kXCIsXCJidWZmZXJcIixcImJ1ZmZlci1zdG9wXCIsXCJrZWVwLWFsaXZlXCIsXCJoYlwiLFwiY3VzdG9tXCIsXCJsb2FkXCIsXCJzdGFydFwiLFwic2tzdGFydFwiLFwiYWRza2lwXCIsXCJjdGFcIixcImVycm9yXCIsXCJ0cmFuc1wiLFwiZHJtZmFcIixcImRybWFwXCIsXCJkcm1kZVwiLFwiYml0cnRcIixcInBsYXlydFwiLFwidm9sdW1lXCIsXCJ3aW5kb3dcIixcImF1ZGlvXCIsXCJ2aWRlb1wiLFwic3Vic1wiLFwiY2RuXCJdO3JldHVybntQTEFZOjAsUEFVU0U6MSxQQVVTRV9PTl9CVUZGRVJJTkc6MixFTkQ6MyxCVUZGRVI6NCxCVUZGRVJfU1RPUDo1LEtFRVBBTElWRTo2LEhFQVJUQkVBVDo3LENVU1RPTTo4LExPQUQ6OSxFTkdBR0U6MTAsU0VFS19TVEFSVDoxMSxBRF9TS0lQOjEyLENUQToxMyxFUlJPUjoxNCxUUkFOU0ZFUjoxNSxEUk1fRkFJTEVEOjE2LERSTV9BUFBST1ZFRDoxNyxEUk1fREVOSUVEOjE4LEJJVF9SQVRFOjE5LFBMQVlCQUNLX1JBVEU6MjAsVk9MVU1FOjIxLFdJTkRPV19TVEFURToyMixBVURJTzoyMyxWSURFTzoyNCxTVUJTOjI1LENETjoyNix0b1N0cmluZzpmdW5jdGlvbihiKXtyZXR1cm4gYVtiXX19fSgpLGo9ZnVuY3Rpb24oKXtyZXR1cm57SURMRTowLFBMQVlCQUNLX05PVF9TVEFSVEVEOjEsUExBWUlORzoyLFBBVVNFRDozLEJVRkZFUklOR19CRUZPUkVfUExBWUJBQ0s6NCxCVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLOjUsQlVGRkVSSU5HX0RVUklOR19TRUVLSU5HOjYsQlVGRkVSSU5HX0RVUklOR19QQVVTRTo3LFNFRUtJTkdfQkVGT1JFX1BMQVlCQUNLOjgsU0VFS0lOR19EVVJJTkdfUExBWUJBQ0s6OSxTRUVLSU5HX0RVUklOR19CVUZGRVJJTkc6MTAsU0VFS0lOR19EVVJJTkdfUEFVU0U6MTEsUEFVU0VEX0RVUklOR19CVUZGRVJJTkc6MTJ9fSgpLGs9ZnVuY3Rpb24oKXt2YXIgYT1bXCJjXCIsXCJzXCIsXCJyXCJdO3JldHVybntTSU5HTEVfQ0xJUDowLFNFR01FTlRFRDoxLFJFRFVDRUQ6Mix0b1N0cmluZzpmdW5jdGlvbihiKXtyZXR1cm4gYVtiXX19fSgpLGw9e1NUUkVBTUlOR0FOQUxZVElDU19WRVJTSU9OOlwiNi4wLjAuMTYxMjAxXCIsTU9ERUxfVkVSU0lPTjpcIjUuN1wiLExPR19OQU1FU1BBQ0U6XCJTVEFcIixERUZBVUxUX1BMQVlFUk5BTUU6XCJqc19hcGlcIixERUZBVUxUX0hFQVJUQkVBVF9JTlRFUlZBTDpbe3BsYXlpbmd0aW1lOjZlNCxpbnRlcnZhbDoxZTR9LHtwbGF5aW5ndGltZTpudWxsLGludGVydmFsOjZlNH1dLERFRkFVTFRfS0VFUF9BTElWRV9JTlRFUlZBTDoxMmU1LERFRkFVTFRfUEFVU0VEX09OX0JVRkZFUklOR19JTlRFUlZBTDo1MDAsQzFfVkFMVUU6XCIxOVwiLEMxMF9WQUxVRTpcImpzXCIsTlNfQVBfQzEyTV9WQUxVRTpcIjFcIixOU19OQ19WQUxVRTpcIjFcIixQQUdFX05BTUVfTEFCRUw6XCJuYW1lXCIsUkVTVFJJQ1RFRF9VUkxfTEVOR1RIX0xJTUlUOjIwNDgsVVJMX0xFTkdUSF9MSU1JVDo0MDk2LFRIUk9UVExJTkdfREVMQVk6NTAwLElOVEVSVkFMX01FUkdFX1RPTEVSQU5DRTo1MDAsU1lTVEVNX0NMT0NLX0pVTVBfREVURUNUSU9OX0RFRkFVTFRfSU5URVJWQUw6MWUzLFNZU1RFTV9DTE9DS19KVU1QX0RFVEVDVElPTl9NSU5JTVVNX0lOVEVSVkFMOjUwMCxTVEFOREFSRF9NRVRBREFUQV9MQUJFTFM6W1wibnNfc3Rfc3RcIixcIm5zX3N0X2NpXCIsXCJuc19zdF9wclwiLFwibnNfc3Rfc25cIixcIm5zX3N0X2VuXCIsXCJuc19zdF9lcFwiLFwibnNfc3RfdHlcIixcIm5zX3N0X2N0XCIsXCJuc19zdF9saVwiLFwibnNfc3RfYWRcIixcIm5zX3N0X2JuXCIsXCJuc19zdF90YlwiLFwibnNfc3RfYW5cIixcIm5zX3N0X3RhXCIsXCJuc19zdF9wdVwiLFwiYzNcIixcImM0XCIsXCJjNlwiXSxMQUJFTFNfT1JERVI6W1wiYzFcIixcImMyXCIsXCJjYTJcIixcImNiMlwiLFwiY2MyXCIsXCJjZDJcIixcIm5zX3NpdGVcIixcImNhX25zX3NpdGVcIixcImNiX25zX3NpdGVcIixcImNjX25zX3NpdGVcIixcImNkX25zX3NpdGVcIixcIm5zX3ZzaXRlXCIsXCJjYV9uc192c2l0ZVwiLFwiY2JfbnNfdnNpdGVcIixcImNjX25zX3ZzaXRlXCIsXCJjZF9uc192c2l0ZVwiLFwibnNfYWxpYXNcIixcImNhX25zX2FsaWFzXCIsXCJjYl9uc19hbGlhc1wiLFwiY2NfbnNfYWxpYXNcIixcImNkX25zX2FsaWFzXCIsXCJuc19hcF9hblwiLFwiY2FfbnNfYXBfYW5cIixcImNiX25zX2FwX2FuXCIsXCJjY19uc19hcF9hblwiLFwiY2RfbnNfYXBfYW5cIixcIm5zX2FwX3BuXCIsXCJuc19hcF9wdlwiLFwiYzEyXCIsXCJjYTEyXCIsXCJjYjEyXCIsXCJjYzEyXCIsXCJjZDEyXCIsXCJuc19ha1wiLFwibnNfYXBfaHdcIixcIm5hbWVcIixcIm5zX2FwX25pXCIsXCJuc19hcF9lY1wiLFwibnNfYXBfZXZcIixcIm5zX2FwX2RldmljZVwiLFwibnNfYXBfaWRcIixcIm5zX2FwX2NzZlwiLFwibnNfYXBfYmlcIixcIm5zX2FwX3BmbVwiLFwibnNfYXBfcGZ2XCIsXCJuc19hcF92ZXJcIixcImNhX25zX2FwX3ZlclwiLFwiY2JfbnNfYXBfdmVyXCIsXCJjY19uc19hcF92ZXJcIixcImNkX25zX2FwX3ZlclwiLFwibnNfYXBfc3ZcIixcIm5zX2FwX2N2XCIsXCJuc19hcF9zbXZcIixcIm5zX3R5cGVcIixcImNhX25zX3R5cGVcIixcImNiX25zX3R5cGVcIixcImNjX25zX3R5cGVcIixcImNkX25zX3R5cGVcIixcIm5zX3JhZGlvXCIsXCJuc19uY1wiLFwiY3NfcGFydG5lclwiLFwiY3NfeGNpZFwiLFwiY3NfaW1waWRcIixcIm5zX2FwX3VpXCIsXCJjYV9uc19hcF91aVwiLFwiY2JfbnNfYXBfdWlcIixcImNjX25zX2FwX3VpXCIsXCJjZF9uc19hcF91aVwiLFwibnNfYXBfZ3NcIixcIm5zX3N0X3N2XCIsXCJuc19zdF9wdlwiLFwibnNfc3Rfc212XCIsXCJuc19zdF9pdFwiLFwibnNfc3RfaWRcIixcIm5zX3N0X2VjXCIsXCJuc19zdF9zcFwiLFwibnNfc3Rfc2NcIixcIm5zX3N0X3BzcVwiLFwibnNfc3RfYXNxXCIsXCJuc19zdF9zcVwiLFwibnNfc3RfcHBjXCIsXCJuc19zdF9hcGNcIixcIm5zX3N0X3NwY1wiLFwibnNfc3RfY25cIixcIm5zX3N0X2V2XCIsXCJuc19zdF9wb1wiLFwibnNfc3RfY2xcIixcIm5zX3N0X2VsXCIsXCJuc19zdF9zbFwiLFwibnNfc3RfcGJcIixcIm5zX3N0X2hjXCIsXCJuc19zdF9tcFwiLFwiY2FfbnNfc3RfbXBcIixcImNiX25zX3N0X21wXCIsXCJjY19uc19zdF9tcFwiLFwiY2RfbnNfc3RfbXBcIixcIm5zX3N0X212XCIsXCJjYV9uc19zdF9tdlwiLFwiY2JfbnNfc3RfbXZcIixcImNjX25zX3N0X212XCIsXCJjZF9uc19zdF9tdlwiLFwibnNfc3RfcG5cIixcIm5zX3N0X3RwXCIsXCJuc19zdF9hZFwiLFwibnNfc3RfbGlcIixcIm5zX3N0X2NpXCIsXCJuc19zdF9zaVwiLFwibnNfc3RfcHRcIixcIm5zX3N0X2RwdFwiLFwibnNfc3RfaXB0XCIsXCJuc19zdF9ldFwiLFwibnNfc3RfZGV0XCIsXCJuc19zdF91cGNcIixcIm5zX3N0X2R1cGNcIixcIm5zX3N0X2l1cGNcIixcIm5zX3N0X3VwYVwiLFwibnNfc3RfZHVwYVwiLFwibnNfc3RfaXVwYVwiLFwibnNfc3RfbHBjXCIsXCJuc19zdF9kbHBjXCIsXCJuc19zdF9scGFcIixcIm5zX3N0X2RscGFcIixcIm5zX3N0X3BhXCIsXCJuc19zdF9pZVwiLFwibnNfYXBfamJcIixcIm5zX2FwX2V0XCIsXCJuc19hcF9yZXNcIixcIm5zX2FwX3NkXCIsXCJuc19hcF9wb1wiLFwibnNfYXBfb3RcIixcIm5zX2FwX2MxMm1cIixcImNzX2MxMnVcIixcImNhX2NzX2MxMnVcIixcImNiX2NzX2MxMnVcIixcImNjX2NzX2MxMnVcIixcImNkX2NzX2MxMnVcIixcIm5zX2FwX2luc3RhbGxcIixcIm5zX2FwX3VwZGF0ZWRcIixcIm5zX2FwX2xhc3RydW5cIixcIm5zX2FwX2NzXCIsXCJuc19hcF9ydW5zXCIsXCJuc19hcF91c2FnZVwiLFwibnNfYXBfZmdcIixcIm5zX2FwX2Z0XCIsXCJuc19hcF9kZnRcIixcIm5zX2FwX2J0XCIsXCJuc19hcF9kYnRcIixcIm5zX2FwX2RpdFwiLFwibnNfYXBfYXNcIixcIm5zX2FwX2Rhc1wiLFwibnNfYXBfaXRcIixcIm5zX2FwX3VjXCIsXCJuc19hcF9hdXNcIixcIm5zX2FwX2RhdXNcIixcIm5zX2FwX3VzXCIsXCJuc19hcF9kdXNcIixcIm5zX2FwX3V0XCIsXCJuc19hcF9vY1wiLFwibnNfYXBfdXhjXCIsXCJuc19hcF91eHNcIixcIm5zX2FwX2xhbmdcIixcIm5zX2FwX2FyXCIsXCJuc19hcF9taXNzXCIsXCJuc190c1wiLFwibnNfYXBfY2ZnXCIsXCJuc19zdF9jYVwiLFwibnNfc3RfY3BcIixcIm5zX3N0X2VyXCIsXCJjYV9uc19zdF9lclwiLFwiY2JfbnNfc3RfZXJcIixcImNjX25zX3N0X2VyXCIsXCJjZF9uc19zdF9lclwiLFwibnNfc3RfcGVcIixcIm5zX3N0X3VpXCIsXCJjYV9uc19zdF91aVwiLFwiY2JfbnNfc3RfdWlcIixcImNjX25zX3N0X3VpXCIsXCJjZF9uc19zdF91aVwiLFwibnNfc3RfYmNcIixcIm5zX3N0X2RiY1wiLFwibnNfc3RfYnRcIixcIm5zX3N0X2RidFwiLFwibnNfc3RfYnBcIixcIm5zX3N0X2x0XCIsXCJuc19zdF9za2NcIixcIm5zX3N0X2Rza2NcIixcIm5zX3N0X3NrYVwiLFwibnNfc3RfZHNrYVwiLFwibnNfc3Rfc2tkXCIsXCJuc19zdF9za3RcIixcIm5zX3N0X2Rza3RcIixcIm5zX3N0X3BjXCIsXCJuc19zdF9kcGNcIixcIm5zX3N0X3BwXCIsXCJuc19zdF9iclwiLFwibnNfc3RfcGJyXCIsXCJuc19zdF9ydFwiLFwibnNfc3RfcHJ0XCIsXCJuc19zdF91YlwiLFwibnNfc3Rfdm9cIixcIm5zX3N0X3B2b1wiLFwibnNfc3Rfd3NcIixcIm5zX3N0X3B3c1wiLFwibnNfc3Rfa2lcIixcIm5zX3N0X3JwXCIsXCJuc19zdF9iblwiLFwibnNfc3RfdGJcIixcIm5zX3N0X2FuXCIsXCJuc19zdF90YVwiLFwibnNfc3RfcGxcIixcIm5zX3N0X3ByXCIsXCJuc19zdF9zblwiLFwibnNfc3RfZW5cIixcIm5zX3N0X2VwXCIsXCJuc19zdF9zclwiLFwibnNfc3RfdHlcIixcIm5zX3N0X2N0XCIsXCJuc19zdF9jc1wiLFwibnNfc3RfZ2VcIixcIm5zX3N0X3N0XCIsXCJuc19zdF9zdGNcIixcIm5zX3N0X2NlXCIsXCJuc19zdF9pYVwiLFwibnNfc3RfZHRcIixcIm5zX3N0X2RkdFwiLFwibnNfc3RfdGR0XCIsXCJuc19zdF90bVwiLFwibnNfc3RfZHRtXCIsXCJuc19zdF90dG1cIixcIm5zX3N0X2RlXCIsXCJuc19zdF9wdVwiLFwibnNfc3RfdGlcIixcIm5zX3N0X2N1XCIsXCJuc19zdF9mZWVcIixcIm5zX3N0X2Z0XCIsXCJuc19zdF9hdFwiLFwibnNfc3RfcGF0XCIsXCJuc19zdF92dFwiLFwibnNfc3RfcHZ0XCIsXCJuc19zdF90dFwiLFwibnNfc3RfcHR0XCIsXCJuc19zdF9jZG5cIixcIm5zX3N0X3BjZG5cIixcIm5zX3N0X2FtaVwiLFwibnNfc3RfYW10XCIsXCJuc19zdF9hbXNcIixcIm5zX2FwX2kxXCIsXCJuc19hcF9pMlwiLFwibnNfYXBfaTNcIixcIm5zX2FwX2k0XCIsXCJuc19hcF9pNVwiLFwibnNfYXBfaTZcIixcIm5zX2FwX3JlZmVycmVyXCIsXCJuc19jbGlkXCIsXCJuc19jYW1wYWlnblwiLFwibnNfc291cmNlXCIsXCJuc19tY2hhbm5lbFwiLFwibnNfbGlua25hbWVcIixcIm5zX2ZlZVwiLFwiZ2NsaWRcIixcInV0bV9jYW1wYWlnblwiLFwidXRtX3NvdXJjZVwiLFwidXRtX21lZGl1bVwiLFwidXRtX3Rlcm1cIixcInV0bV9jb250ZW50XCIsXCJuc19lY29tbWVyY2VcIixcIm5zX2VjX3N2XCIsXCJuc19jbGllbnRfaWRcIixcIm5zX29yZGVyX2lkXCIsXCJuc19lY19jdXJcIixcIm5zX29yZGVybGluZV9pZFwiLFwibnNfb3JkZXJsaW5lc1wiLFwibnNfcHJvZF9pZFwiLFwibnNfcXR5XCIsXCJuc19wcm9kX3ByaWNlXCIsXCJuc19wcm9kX2dycFwiLFwibnNfYnJhbmRcIixcIm5zX3Nob3BcIixcIm5zX2NhdGVnb3J5XCIsXCJjYXRlZ29yeVwiLFwibnNfY1wiLFwibnNfc2VhcmNoX3Rlcm1cIixcIm5zX3NlYXJjaF9yZXN1bHRcIixcIm5zX21fZXhwXCIsXCJuc19tX2Noc1wiLFwiYzNcIixcImNhM1wiLFwiY2IzXCIsXCJjYzNcIixcImNkM1wiLFwiYzRcIixcImNhNFwiLFwiY2I0XCIsXCJjYzRcIixcImNkNFwiLFwiYzVcIixcImNhNVwiLFwiY2I1XCIsXCJjYzVcIixcImNkNVwiLFwiYzZcIixcImNhNlwiLFwiY2I2XCIsXCJjYzZcIixcImNkNlwiLFwiYzEwXCIsXCJjMTFcIixcImMxM1wiLFwiYzE0XCIsXCJjMTVcIixcImMxNlwiLFwiYzdcIixcImM4XCIsXCJjOVwiLFwibnNfYXBfZXJcIixcIm5zX3N0X2FtY1wiXX0sbT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXtmdW5jdGlvbiBhKCl7Zj17fSxmLm5zX3N0X2NsPVwiMFwiLGYubnNfc3RfcG49XCIxXCIsZi5uc19zdF90cD1cIjBcIixmLm5zX3N0X2NuPVwiMVwiLGYubnNfc3Rfc2tkPVwiMFwiLGYubnNfc3RfY2k9XCIwXCIsZi5jMz1cIipudWxsXCIsZi5jND1cIipudWxsXCIsZi5jNj1cIipudWxsXCIsZi5uc19zdF9zdD1cIipudWxsXCIsZi5uc19zdF9wdT1cIipudWxsXCIsZi5uc19zdF9wcj1cIipudWxsXCIsZi5uc19zdF9lcD1cIipudWxsXCIsZi5uc19zdF9zbj1cIipudWxsXCIsZi5uc19zdF9lbj1cIipudWxsXCIsZi5uc19zdF9jdD1cIipudWxsXCIsZz17fSxlPSExLGQ9ITEsYz1oLlVOS05PV05fVkFMVUUsaT0hMCxqPTAsaz1OYU4scD0wLG49MCxtPU5hTixxPTAscj1OYU4sdD0wLHM9MCxvPTAsdz1OYU4sdT1bXSx2PVtdLHg9MCx5PTAsej0wLEE9MCxCPTAsQz0wLEQ9MCxFPU5hTixGPTAsRz0wLEg9MCxJPSExLEo9TmFOLE49ITEsTT0wLFE9MCxLPTAsTD0wLE89MCxQPTAsUz0wLFQ9MCxVPTAsVj0wLFc9MCxYPTAsWT0wLFo9MCwkPTAsUj0hMX12YXIgYyxkLGUsZixnLGksaixrLG0sbixvLHAscSxyLHMsdCx1LHYsdyx4LHkseixBLEIsQyxELEUsRixHLEgsSSxKLEssTCxNLE4sTyxQLFEsUixTLFQsVSxWLFcsWCxZLFosJCxfPXRoaXMsYWE9bC5JTlRFUlZBTF9NRVJHRV9UT0xFUkFOQ0U7Yi5leHRlbmQodGhpcyx7Z2V0SGFzaDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXRIYXNoOmZ1bmN0aW9uKGEpe2M9YX0sc2V0UGxheWJhY2tJbnRlcnZhbE1lcmdlVG9sZXJhbmNlOmZ1bmN0aW9uKGEpe2FhPWF9LGdldFBsYXliYWNrSW50ZXJ2YWxNZXJnZVRvbGVyYW5jZTpmdW5jdGlvbigpe3JldHVybiBhYX0sc2V0SW50ZXJuYWxMYWJlbDpmdW5jdGlvbihhLGIpe2ZbYV09Yn0sZ2V0SW50ZXJuYWxMYWJlbDpmdW5jdGlvbihhKXtyZXR1cm4gZlthXX0saGFzSW50ZXJuYWxMYWJlbDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9ZlthXX0sc2V0TGFiZWxzOmZ1bmN0aW9uKGEpe2EmJmIuZXh0ZW5kKGcsYSl9LGdldExhYmVsczpmdW5jdGlvbigpe3JldHVybiBnfSxzZXRMYWJlbDpmdW5jdGlvbihhLGIpe2dbYV09Yn0sZ2V0TGFiZWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGdbYV19LGhhc0xhYmVsOmZ1bmN0aW9uKGEpe3JldHVybiBhIGluIGd9LGdldENsaXBOdW1iZXI6ZnVuY3Rpb24oKXtyZXR1cm4gcGFyc2VJbnQoXy5nZXRJbnRlcm5hbExhYmVsKFwibnNfc3RfY25cIikpfSxzZXRDbGlwTnVtYmVyOmZ1bmN0aW9uKGEpe18uc2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X2NuXCIsYStcIlwiKX0sZ2V0UGFydE51bWJlcjpmdW5jdGlvbigpe3JldHVybiBfLmhhc0xhYmVsKFwibnNfc3RfcG5cIik/cGFyc2VJbnQoXy5nZXRMYWJlbChcIm5zX3N0X3BuXCIpKTpwYXJzZUludChfLmdldEludGVybmFsTGFiZWwoXCJuc19zdF9wblwiKSl9LGNyZWF0ZUxhYmVsczpmdW5jdGlvbihhLGMpe3ZhciBkPWF8fHt9LGg9Yi5pc0VtcHR5KGQubnNfc3RfcHQpP18uZ2V0UGxheWJhY2tUaW1lKCk6cGFyc2VJbnQoZC5uc19zdF9wdCk7ZC5uc19zdF9wdD1oKyhpc05hTihrKT8wOmMtaykrXCJcIixkLm5zX3N0X2RwdD1oKyhpc05hTihrKT8wOmMtayktbitcIlwiLGQubnNfc3RfaXB0PWgrKGlzTmFOKGspPzA6Yy1rKS1vK1wiXCI7dmFyIGk9Yi5pc0VtcHR5KGQubnNfc3RfZXQpP18uZ2V0RWxhcHNlZFRpbWUoKTpwYXJzZUludChkLm5zX3N0X2V0KTtkLm5zX3N0X2V0PWkrKGlzTmFOKHIpPzA6Yy1yKStcIlwiLGQubnNfc3RfZGV0PWkrKGlzTmFOKHIpPzA6Yy1yKS1zK1wiXCI7dmFyIGo9Yi5pc0VtcHR5KGQubnNfc3RfYnQpP18uZ2V0QnVmZmVyaW5nVGltZSgpOnBhcnNlSW50KGQubnNfc3RfYnQpO2QubnNfc3RfYnQ9aitcIlwiLGQubnNfc3RfZGJ0PWorKGlzTmFOKEUpPzA6Yy1FKS1GK1wiXCI7Zm9yKHZhciBsLG09cGFyc2VJbnQoZC5uc19zdF9wbykscD1iLmFkZE5ld1BsYXliYWNrSW50ZXJ2YWwoYi5jbG9uZU9iamVjdChfLmdldFNlZ21lbnRQbGF5YmFja0ludGVydmFscygpKSx3LG0sYWEpLHE9Yi5hZGROZXdQbGF5YmFja0ludGVydmFsKGIuY2xvbmVPYmplY3QoXy5nZXRBc3NldFBsYXliYWNrSW50ZXJ2YWxzKCkpLHcsbSxhYSksdD0wLHU9MCx2PTA7djxwLmxlbmd0aDt2KyspbD1NYXRoLmFicyhwW3ZdLmVuZC1wW3ZdLnN0YXJ0KSx0Kz1sLGw+dSYmKHU9bCk7dmFyIEQ9MCxHPTA7Zm9yKHY9MCxsO3Y8cS5sZW5ndGg7disrKWw9TWF0aC5hYnMocVt2XS5lbmQtcVt2XS5zdGFydCksRCs9bCxsPkcmJihHPWwpO2QubnNfc3RfdXBjPXQrXCJcIixkLm5zX3N0X2R1cGM9dC14K1wiXCIsZC5uc19zdF9pdXBjPXQteStcIlwiLHQ+eT9kLm5zX3N0X2l1cGM9dC15K1wiXCI6ZC5uc19zdF9pdXBjPVwiMFwiLGQubnNfc3RfbHBjPXUrXCJcIixkLm5zX3N0X2RscGM9dS16K1wiXCIsZC5uc19zdF91cGE9RCtcIlwiLGQubnNfc3RfZHVwYT1ELUErXCJcIixEPkI/ZC5uc19zdF9pdXBhPUQtQitcIlwiOmQubnNfc3RfaXVwYT1cIjBcIixkLm5zX3N0X2xwYT1HK1wiXCIsZC5uc19zdF9kbHBhPUctQytcIlwiO3ZhciBJPWIuaXNFbXB0eShkLm5zX3N0X3BjKT9fLmdldFBhdXNlcygpOnBhcnNlSW50KGQubnNfc3RfcGMpO2QubnNfc3RfcGM9SStcIlwiLGQubnNfc3RfZHBjPUktVCtcIlwiO3ZhciBKPWIuaXNFbXB0eShkLm5zX3N0X3NrYyk/Xy5nZXRTZWVrcygpOnBhcnNlSW50KGQubnNfc3Rfc2tjKTtkLm5zX3N0X3NrYz1KK1wiXCIsZC5uc19zdF9kc2tjPUotVitcIlwiO3ZhciBLPWIuaXNFbXB0eShkLm5zX3N0X2JjKT9fLmdldEJ1ZmZlcnMoKTpwYXJzZUludChkLm5zX3N0X2JjKTtkLm5zX3N0X2JjPUsrXCJcIixkLm5zX3N0X2RiYz1LLUgrXCJcIjt2YXIgTT1iLmlzRW1wdHkoZC5uc19zdF9za3QpP18uZ2V0U2Vla2luZ1RpbWUoKTpwYXJzZUludChkLm5zX3N0X3NrdCk7ZC5uc19zdF9za3Q9TStcIlwiLGQubnNfc3RfZHNrdD1NLUwrXCJcIjt2YXIgTj1iLmlzRW1wdHkoZC5uc19zdF9za2EpP18uZ2V0U2Vla2luZ0Ftb3VudCgpOnBhcnNlSW50KGQubnNfc3Rfc2thKTtyZXR1cm4gZC5uc19zdF9za2E9TitcIlwiLGQubnNfc3RfZHNrYT1OLVArXCJcIixlJiYoZC5uc19zdF9zcGM9VytcIlwiLGQubnNfc3RfYXBjPVgrXCJcIixkLm5zX3N0X3NxPVkrXCJcIixkLm5zX3N0X2FzcT1aK1wiXCIpLGV8fDAhPSQ/ZC5uc19zdF9zYz0kK1wiXCI6ZC5uc19zdF9zYz1cIjFcIixiLmV4dGVuZChkLGYsZyksZH0sdXBkYXRlRGVsdGFMYWJlbHM6ZnVuY3Rpb24oYSl7bj1wYXJzZUludChhLm5zX3N0X3B0KSxzPXBhcnNlSW50KGEubnNfc3RfZXQpLEY9cGFyc2VJbnQoYS5uc19zdF9idCkseD1wYXJzZUludChhLm5zX3N0X3VwYyksej1wYXJzZUludChhLm5zX3N0X2xwYyksQT1wYXJzZUludChhLm5zX3N0X3VwYSksQz1wYXJzZUludChhLm5zX3N0X2xwYSksVD1wYXJzZUludChhLm5zX3N0X3BjKSxWPXBhcnNlSW50KGEubnNfc3Rfc2tjKSxIPXBhcnNlSW50KGEubnNfc3RfYmMpLEw9cGFyc2VJbnQoYS5uc19zdF9za3QpLFA9cGFyc2VJbnQoYS5uc19zdF9za2EpLF8uc2V0U2Vla2luZ0RpcmVjdGlvbigwKX0sdXBkYXRlSW5kZXBlbmRlbnRMYWJlbHM6ZnVuY3Rpb24oYSl7bz1wYXJzZUludChhLm5zX3N0X3B0KSx5PXBhcnNlSW50KGEubnNfc3RfdXBjKSxCPXBhcnNlSW50KGEubnNfc3RfdXBhKX0sZ2V0VmlkZW9UcmFjazpmdW5jdGlvbigpe3JldHVybiBfLmdldEludGVybmFsTGFiZWwoXCJuc19zdF92dFwiKX0sc2V0VmlkZW9UcmFjazpmdW5jdGlvbihhKXtfLnNldEludGVybmFsTGFiZWwoXCJuc19zdF92dFwiLGErXCJcIil9LGdldEF1ZGlvVHJhY2s6ZnVuY3Rpb24oKXtyZXR1cm4gXy5nZXRJbnRlcm5hbExhYmVsKFwibnNfc3RfYXRcIil9LHNldEF1ZGlvVHJhY2s6ZnVuY3Rpb24oYSl7Xy5zZXRJbnRlcm5hbExhYmVsKFwibnNfc3RfYXRcIixhK1wiXCIpfSxnZXRTdWJ0aXRsZVRyYWNrOmZ1bmN0aW9uKCl7cmV0dXJuIF8uZ2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X3R0XCIpfSxzZXRTdWJ0aXRsZVRyYWNrOmZ1bmN0aW9uKGEpe18uc2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X3R0XCIsYStcIlwiKX0sZ2V0Q0ROOmZ1bmN0aW9uKCl7cmV0dXJuIF8uZ2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X2NkblwiKX0sc2V0Q0ROOmZ1bmN0aW9uKGEpe18uc2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X2NkblwiLGErXCJcIil9LGdldFNlZ21lbnRQbGF5YmFja0ludGVydmFsczpmdW5jdGlvbigpe3JldHVybiB1fSxzZXRBc3NldFBsYXliYWNrSW50ZXJ2YWxzOmZ1bmN0aW9uKGEpe3U9YX0sZ2V0QXNzZXRQbGF5YmFja0ludGVydmFsczpmdW5jdGlvbigpe3JldHVybiB2fSxpbmNyZW1lbnRQYXVzZXM6ZnVuY3Rpb24oKXtTKyt9LGluY3JlbWVudFNlZWtzOmZ1bmN0aW9uKCl7VSsrfSxpbmNyZW1lbnRQbGF5Q291bnRlcjpmdW5jdGlvbigpe1krK30sZ2V0UGxheUNvdW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gWX0sZ2V0QnVmZmVyaW5nVGltZTpmdW5jdGlvbigpe3JldHVybiBEfSxzZXRCdWZmZXJpbmdUaW1lOmZ1bmN0aW9uKGEpe0Q9YX0sYWRkQnVmZmVyaW5nVGltZTpmdW5jdGlvbihhKXtpZighaXNOYU4oRSkpe3ZhciBiPV8uZ2V0QnVmZmVyaW5nVGltZSgpO2IrPWEtRSxfLnNldEJ1ZmZlcmluZ1RpbWUoYiksRT1OYU59fSxzZXRQbGF5YmFja1N0YXJ0UG9zaXRpb246ZnVuY3Rpb24oYSl7dz1wYXJzZUludChhKX0sZ2V0UGxheWJhY2tTdGFydFBvc2l0aW9uOmZ1bmN0aW9uKCl7cmV0dXJuIHd9LGFkZEludGVydmFsOmZ1bmN0aW9uKGEpe2lzTmFOKHcpfHxpc05hTihhKXx8KHU9Yi5hZGROZXdQbGF5YmFja0ludGVydmFsKHUsdyxhLGFhKSx2PWIuYWRkTmV3UGxheWJhY2tJbnRlcnZhbCh2LHcsYSxhYSksdz1OYU4pfSxnZXRFbGFwc2VkVGltZTpmdW5jdGlvbigpe3JldHVybiBxfSxzZXRFbGFwc2VkVGltZTpmdW5jdGlvbihhKXtxPWF9LGFkZEVsYXBzZWRUaW1lOmZ1bmN0aW9uKGEpe2lmKCFpc05hTihyKSl7dmFyIGI9Xy5nZXRFbGFwc2VkVGltZSgpO2IrPWEtcixfLnNldEVsYXBzZWRUaW1lKGIpLHI9TmFOfX0sZ2V0RWxhcHNlZFRpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiByfSxzZXRFbGFwc2VkVGltZXN0YW1wOmZ1bmN0aW9uKGEpe3I9YX0sYWRkUGxheWJhY2tUaW1lOmZ1bmN0aW9uKGEpe2lmKCFpc05hTihrKSl7dmFyIGI9Xy5nZXRQbGF5YmFja1RpbWUoKTtiKz1hLWssXy5zZXRQbGF5YmFja1RpbWUoYiksaz1OYU59fSxnZXRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gan0sZ2V0RXhwZWN0ZWRQbGF5YmFja1Bvc2l0aW9uOmZ1bmN0aW9uKGEpe3JldHVybiBpc05hTihrKT9wOnArKGEtayl9LHNldFBsYXliYWNrVGltZU9mZnNldDpmdW5jdGlvbihhKXtwPWF9LGdldFBsYXliYWNrVGltZU9mZnNldDpmdW5jdGlvbigpe3JldHVybiBwfSxzZXRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oYSl7aj1hfSxnZXRQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiBrfSxzZXRQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbihhKXtrPWF9LHNldFByZXZpb3VzUGxheWJhY2tUaW1lOmZ1bmN0aW9uKGEpe249YX0sc2V0UHJldmlvdXNQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbihhKXttPWF9LGdldEJ1ZmZlcmluZ1RpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiBFfSxzZXRCdWZmZXJpbmdUaW1lc3RhbXA6ZnVuY3Rpb24oYSl7RT1hfSxnZXRQYXVzZXM6ZnVuY3Rpb24oKXtyZXR1cm4gU30sc2V0UGF1c2VzOmZ1bmN0aW9uKGEpe1M9YX0sZ2V0U2Vla3M6ZnVuY3Rpb24oKXtyZXR1cm4gVX0sc2V0U2Vla3M6ZnVuY3Rpb24oYSl7VT1hfSxzZXRTZWVraW5nOmZ1bmN0aW9uKGEpe0k9YX0saXNTZWVraW5nOmZ1bmN0aW9uKCl7cmV0dXJuIEl9LHNldENvbGxlY3RpbmdTZWVraW5nVGltZTpmdW5jdGlvbihhKXtOPWF9LGlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lOmZ1bmN0aW9uKCl7cmV0dXJuIE59LHNldEFzc2V0U3RhcnRlZDpmdW5jdGlvbihhKXtkPWF9LGlzQXNzZXRTdGFydGVkOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFBsYXliYWNrU3RhcnRlZDpmdW5jdGlvbihhKXtlPWF9LGlzUGxheWJhY2tTdGFydGVkOmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldFNlZWtpbmdUaW1lc3RhbXA6ZnVuY3Rpb24oYSl7Sj1hfSxnZXRTZWVraW5nVGltZXN0YW1wOmZ1bmN0aW9uKCl7cmV0dXJuIEp9LGFkZFNlZWtpbmdUaW1lOmZ1bmN0aW9uKGEpe2lmKCFpc05hTihKKSl7dmFyIGI9Xy5nZXRTZWVraW5nVGltZSgpO2IrPWEtSixfLnNldFNlZWtpbmdUaW1lKGIpLEo9TmFOfX0sZ2V0U2Vla2luZ1RpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gS30sc2V0U2Vla2luZ1RpbWU6ZnVuY3Rpb24oYSl7Sz1hfSxzZXRTZWVraW5nVGltZUJlZm9yZUVuZDpmdW5jdGlvbihhKXtRPWF9LGdldFNlZWtpbmdUaW1lQmVmb3JlRW5kOmZ1bmN0aW9uKCl7cmV0dXJuIFF9LHNldFNlZWtTdGFydFBvc2l0aW9uOmZ1bmN0aW9uKGEpe009YX0sZ2V0U2Vla1N0YXJ0UG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gTX0sc2V0U2Vla2luZ0Ftb3VudDpmdW5jdGlvbihhKXtPPWF9LGdldFNlZWtpbmdBbW91bnQ6ZnVuY3Rpb24oKXtyZXR1cm4gT30sYWRkU2Vla2luZ0Ftb3VudDpmdW5jdGlvbihhKXt2YXIgYj1fLmdldFNlZWtpbmdBbW91bnQoKTtiKz1NYXRoLmFicyhhLU0pLF8uc2V0U2Vla2luZ0Ftb3VudChiKTt2YXIgYztNPT1hP2M9MDpNPmE/Yz0tMTpNPGEmJihjPTEpLF8uc2V0U2Vla2luZ0RpcmVjdGlvbihjKSxNPTB9LGdldFNlZWtpbmdEaXJlY3Rpb246ZnVuY3Rpb24oKXtyZXR1cm4gcGFyc2VJbnQoXy5nZXRJbnRlcm5hbExhYmVsKFwibnNfc3Rfc2tkXCIpKX0sc2V0U2Vla2luZ0RpcmVjdGlvbjpmdW5jdGlvbihhKXtfLnNldEludGVybmFsTGFiZWwoXCJuc19zdF9za2RcIixhK1wiXCIpfSxyZXNldEFzc2V0TGlmZWN5Y2xlTGFiZWxzOmZ1bmN0aW9uKCl7aj0wLG49MCxvPTAsRD0wLEY9MCxHPTAsSD0wLFM9MCxUPTAsWT0wLHY9W10sQT0wLEI9MCxDPTAscT0wLHM9MCxLPTAsTD0wLE89MCxQPTAsVT0wLFY9MH0saW5jcmVtZW50U2VnbWVudFBsYXliYWNrQ291bnRlcjpmdW5jdGlvbigpe1crK30saW5jcmVtZW50QXNzZXRMb2FkQ291bnRlcjpmdW5jdGlvbigpeyQrK30saW5jcmVtZW50QXNzZXRQbGF5YmFja0NvdW50ZXI6ZnVuY3Rpb24oKXtYKyt9LGdldFByZXZpb3VzVW5pcXVlUGxheWJhY2tJbnRlcnZhbDpmdW5jdGlvbigpe3JldHVybiB4fSxzZXRQcmV2aW91c1VuaXF1ZVBsYXliYWNrSW50ZXJ2YWw6ZnVuY3Rpb24oYSl7eD1hfSxnZXRQcmV2aW91c0V2ZW50SW5kZXBlbmRlbnRVbmlxdWVQbGF5YmFja0ludGVydmFsOmZ1bmN0aW9uKCl7cmV0dXJuIHl9LHNldFByZXZpb3VzRXZlbnRJbmRlcGVuZGVudFVuaXF1ZVBsYXliYWNrSW50ZXJ2YWw6ZnVuY3Rpb24oYSl7eT1hfSxzZXRQcmV2aW91c0xvbmdlc3RQbGF5YmFja0ludGVydmFsOmZ1bmN0aW9uKGEpe3o9YX0sZ2V0UHJldmlvdXNMb25nZXN0UGxheWJhY2tJbnRlcnZhbDpmdW5jdGlvbigpe3JldHVybiB6fSxyZXNldEFzc2V0UGxheWJhY2tJbnRlcnZhbHM6ZnVuY3Rpb24oKXt2PVtdLEE9MCxCPTAsQz0wfSxzZXRTZWdtZW50UGxheWJhY2tDb3VudGVyOmZ1bmN0aW9uKGEpe1c9YX0sc2V0QXNzZXRMb2FkQ291bnRlcjpmdW5jdGlvbihhKXskPWF9LHNldEFzc2V0UGxheWJhY2tDb3VudGVyOmZ1bmN0aW9uKGEpe1g9YX0sc2V0TG93ZXN0UGFydE51bWJlclBsYXllZDpmdW5jdGlvbihhKXt0PWF9LGdldFNlZ21lbnRQbGF5YmFja0NvdW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gV30sZ2V0QXNzZXRMb2FkQ291bnRlcjpmdW5jdGlvbigpe3JldHVybiAkfSxnZXRBc3NldFBsYXliYWNrQ291bnRlcjpmdW5jdGlvbigpe3JldHVybiBYfSxnZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkOmZ1bmN0aW9uKCl7cmV0dXJuIHR9LGdldEJ1ZmZlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gR30saW5jcmVtZW50QnVmZmVyQ291bnQ6ZnVuY3Rpb24oKXtHKyt9LGdldFByZXZpb3VzQnVmZmVyaW5nVGltZTpmdW5jdGlvbigpe3JldHVybiBGfSxzZXRQbGF5U2VxdWVuY2VDb3VudGVyOmZ1bmN0aW9uKGEpe1o9YX0saW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcjpmdW5jdGlvbigpe1orK30sZ2V0UGxheVNlcXVlbmNlQ291bnRlcjpmdW5jdGlvbigpe3JldHVybiBafSxpc1BsYXliYWNrU2Vzc2lvbkxvb3Bpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gUn0sc2V0UGxheWJhY2tTZXNzaW9uTG9vcGluZzpmdW5jdGlvbihhKXtSPWF9LGVuYWJsZUF1dG9DYWxjdWxhdGVQb3NpdGlvbnM6ZnVuY3Rpb24oYSl7aT0hIWF9LGlzQXV0b0NhbGN1bGF0ZVBvc2l0aW9uc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX19KSxhKCl9cmV0dXJuIGEucmVzZXRBc3NldD1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWEuZ2V0TGFiZWxzKCksZT17fSxmPTA7YyYmZjxjLmxlbmd0aDsrK2YpZC5oYXNPd25Qcm9wZXJ0eShjW2ZdKSYmKGVbY1tmXV09ZFtjW2ZdXSk7Yi5zZXRMYWJlbHMoZSksYi5zZXRQbGF5YmFja0ludGVydmFsTWVyZ2VUb2xlcmFuY2UoYS5nZXRQbGF5YmFja0ludGVydmFsTWVyZ2VUb2xlcmFuY2UoKSl9LGF9KCksbj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSl7ZnVuY3Rpb24gYygpe2Q9bmV3IG0saD17fSxoLm5zX3N0X2lkPStuZXcgRGF0ZStcIlwiLGs9e30sZT1OYU4sZj0wLGc9TmFOLG89e30scD0wLG49ITEscT0hMSxyPTAsdD0wLHM9MCx1PTEsdj0wLHc9W119dmFyIGQsZSxmLGcsaCxrLG4sbyxwLHEscixzLHQsdSx2LHcseD10aGlzO2IuZXh0ZW5kKHRoaXMse3Jlc2V0QXNzZXQ6ZnVuY3Rpb24oKXt2YXIgYT1kO2Q9bmV3IG0sbS5yZXNldEFzc2V0KGEsZCl9LGhhc2hFeGlzdHM6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPW9bYV19LHN0b3JlSGFzaDpmdW5jdGlvbihhKXtvW2FdPXt9fSxyZW1vdmVIYXNoOmZ1bmN0aW9uKGEpe2RlbGV0ZSBvW2FdfSxzdG9yZUFzc2V0UGxheWJhY2tDb3VudGVyczpmdW5jdGlvbigpe2Zvcih2YXIgYSBpbiBvKWlmKG8uaGFzT3duUHJvcGVydHkoYSkmJm9bYV0uY2xpcE51bWJlcj09PWQuZ2V0Q2xpcE51bWJlcigpKXtiLmV4dGVuZChvW2FdLHtzZWdtZW50UGxheWJhY2tDb3VudGVyOmQuZ2V0U2VnbWVudFBsYXliYWNrQ291bnRlcigpLGFzc2V0TG9hZENvdW50ZXI6ZC5nZXRBc3NldExvYWRDb3VudGVyKCksYXNzZXRQbGF5YmFja0NvdW50ZXI6ZC5nZXRBc3NldFBsYXliYWNrQ291bnRlcigpLGxvd2VzdFBhcnROdW1iZXJQbGF5ZWQ6ZC5nZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKCksc2Vla2luZzpkLmlzU2Vla2luZygpLHNlZWtpbmdUaW1lQmVmb3JlRW5kOmQuZ2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQoKSxzZWVraW5nU3RhcnRQb3NpdGlvbjpkLmdldFNlZWtTdGFydFBvc2l0aW9uKCksc2VnbWVudFBsYXliYWNrSW50ZXJ2YWxzOmQuZ2V0U2VnbWVudFBsYXliYWNrSW50ZXJ2YWxzKCksdmlkZW9UcmFjazpkLmdldFZpZGVvVHJhY2soKSxhdWRpb1RyYWNrOmQuZ2V0QXVkaW9UcmFjaygpLHN1YnRpdGxlVHJhY2s6ZC5nZXRTdWJ0aXRsZVRyYWNrKCksY2RuOmQuZ2V0Q0ROKCkscGxheVNlcXVlbmNlQ291bnRlcjpkLmdldFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxwcmV2aW91c1VuaXF1ZVBsYXliYWNrSW50ZXJ2YWw6ZC5nZXRQcmV2aW91c1VuaXF1ZVBsYXliYWNrSW50ZXJ2YWwoKSxwcmV2aW91c0V2ZW50SW5kZXBlbmRlbnRVbmlxdWVQbGF5YmFja0ludGVydmFsOmQuZ2V0UHJldmlvdXNFdmVudEluZGVwZW5kZW50VW5pcXVlUGxheWJhY2tJbnRlcnZhbCgpLHByZXZpb3VzTG9uZ2VzdFBsYXliYWNrSW50ZXJ2YWw6ZC5nZXRQcmV2aW91c0xvbmdlc3RQbGF5YmFja0ludGVydmFsKCl9KTticmVha319LGdldFN0b3JlZEFzc2V0UmVnaXN0ZXJzOmZ1bmN0aW9uKGEpe3JldHVybiBvW2FdfSxnZXRDbGlwTnVtYmVyOmZ1bmN0aW9uKGEpe3JldHVybiBvW2FdLmNsaXBOdW1iZXJ9LGdldE1heENsaXBOdW1iZXI6ZnVuY3Rpb24oKXtyZXR1cm4gcH0sc3RvcmVDbGlwTnVtYmVyOmZ1bmN0aW9uKGEsYil7b1thXS5jbGlwTnVtYmVyPWIsYj5wJiYocD1iKX0sc2V0TGFiZWxzOmZ1bmN0aW9uKGEpe251bGwhPWEmJmIuZXh0ZW5kKGssYSl9LGdldExhYmVsczpmdW5jdGlvbigpe3JldHVybiBrfSxzZXRMYWJlbDpmdW5jdGlvbihhLGIpe3ZhciBjPXt9O2NbYV09Yix4LnNldExhYmVscyhjKX0sZ2V0TGFiZWw6ZnVuY3Rpb24oYSl7cmV0dXJuIGtbYV19LGdldEFzc2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGR9LGFkZEludGVybmFsRXJyb3JGbGFnOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wO2I8dy5sZW5ndGg7KytiKWlmKHdbYl09PWEpcmV0dXJuO3cucHVzaChhKX0sY3JlYXRlTGFiZWxzOmZ1bmN0aW9uKGMsZSl7dmFyIGY9Y3x8e30saT1iLmlzRW1wdHkoZi5uc19zdF9wYSk/eC5nZXRQbGF5YmFja1RpbWUoKTpwYXJzZUludChmLm5zX3N0X3BhKTtyZXR1cm4gZi5uc19zdF9wYT1pKyhpc05hTihnKT8wOmUtZykrXCJcIixmLm5zX3N0X3BwPXQrXCJcIixmLm5zX3N0X3NwPXUrXCJcIixmLm5zX3N0X2JwPXYrXCJcIixxfHwoZi5uc19zdF9wYj1udWxsIT1mLm5zX3N0X3BiP2YubnNfc3RfcGI6XCIxXCIpLGQuaXNQbGF5YmFja1N0YXJ0ZWQoKSYmKGYubnNfc3RfcHBjPXIrXCJcIixmLm5zX3N0X3BzcT1zK1wiXCIpLHcubGVuZ3RoPjAmJihmLm5zX3N0X2llPShmLm5zX3N0X2llP2YubnNfc3RfaWUrXCI7XCI6XCJcIikrdy5qb2luKFwiO1wiKSksYi5leHRlbmQoZixoLGspLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5jcmVhdGVMYWJlbHMoZixlKSxmfSxpbmNyZW1lbnRQbGF5Q291bnRlcjpmdW5jdGlvbigpe3UrK30saW5jcmVtZW50UGF1c2VzOmZ1bmN0aW9uKCl7dCsrfSxhZGRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oYSl7aWYoIWlzTmFOKGcpKXt2YXIgYj14LmdldFBsYXliYWNrVGltZSgpO2IrPWEtZyx4LnNldFBsYXliYWNrVGltZShiKSxnPU5hTn19LGFkZEJ1ZmZlcmluZ1RpbWU6ZnVuY3Rpb24oYSl7aWYoIWlzTmFOKGUpKXt2YXIgYj14LmdldEJ1ZmZlcmluZ1RpbWUoKTtiKz1hLWUseC5zZXRCdWZmZXJpbmdUaW1lKGIpLGU9TmFOfX0sZ2V0QnVmZmVyaW5nVGltZTpmdW5jdGlvbigpe3JldHVybiB2fSxzZXRCdWZmZXJpbmdUaW1lOmZ1bmN0aW9uKGEpe3Y9YX0sZ2V0UGxheWJhY2tUaW1lOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldEJ1ZmZlcmluZ1RpbWVzdGFtcDpmdW5jdGlvbihhKXtlPWF9LGdldEJ1ZmZlcmluZ1RpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXRQbGF5YmFja1RpbWU6ZnVuY3Rpb24oYSl7Zj1hfSxzZXRQbGF5YmFja1RpbWVzdGFtcDpmdW5jdGlvbihhKXtnPWF9LGdldFBsYXliYWNrVGltZXN0YW1wOmZ1bmN0aW9uKCl7cmV0dXJuIGd9LGdldFBhdXNlczpmdW5jdGlvbigpe3JldHVybiB0fSxzZXRQYXVzZXM6ZnVuY3Rpb24oYSl7dD1hfSxpc1BsYXliYWNrU2Vzc2lvblN0YXJ0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0UGxheWJhY2tTZXNzaW9uU3RhcnRlZDpmdW5jdGlvbihhKXtuPWF9LGdldFBsYXliYWNrQ291bnRlcjpmdW5jdGlvbigpe3JldHVybiByfSxpbmNyZW1lbnRQbGF5YmFja0NvdW50ZXI6ZnVuY3Rpb24oKXtyKyt9LHNldEZpcnN0RXZlbnRTZW50OmZ1bmN0aW9uKGEpe3E9YX0sc2V0UGxheVNlcXVlbmNlQ291bnRlcjpmdW5jdGlvbihhKXtzPWF9LGluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXI6ZnVuY3Rpb24oKXtzKyt9LGdldFBsYXliYWNrU2Vzc2lvbklEOmZ1bmN0aW9uKCl7cmV0dXJuIGgubnNfc3RfaWR9LHNldEFzc2V0OmZ1bmN0aW9uKGMsZCl7YS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcInNldEFzc2V0XCIsYyxkKSxjPWIuanNvbk9iamVjdFRvU3RyaW5nRGljdGlvbmFyeShjKTt2YXIgZT1hLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpO2lmKGUhPWouSURMRSl7YS5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIkVuZGluZyB0aGUgY3VycmVudCBDbGlwLiBJdCB3YXMgaW4gc3RhdGU6XCIsYi5zdGF0ZVRvU3RyaW5nKGUpKTt2YXIgZj17fTthLmdldFN0YUNvcmUoKS5uZXdFdmVudChpLkVORCxiLmZpeEV2ZW50VGltZShmKSxmKX12YXIgZz1cIlwiLGg9MDtpZihudWxsIT1jLm5zX3N0X2NuKWc9Yy5uc19zdF9jbjtlbHNlIGZvcih2YXIgaz0wO2s8bC5TVEFOREFSRF9NRVRBREFUQV9MQUJFTFMubGVuZ3RoO2srKyljW2wuU1RBTkRBUkRfTUVUQURBVEFfTEFCRUxTW2tdXSYmKGcrPWwuU1RBTkRBUkRfTUVUQURBVEFfTEFCRUxTW2tdK1wiOlwiK2NbbC5TVEFOREFSRF9NRVRBREFUQV9MQUJFTFNba11dK1wiO1wiKTt2YXIgbT14LG49bS5nZXRBc3NldCgpO24uaXNBc3NldFN0YXJ0ZWQoKT8obS5oYXNoRXhpc3RzKG4uZ2V0SGFzaCgpKXx8KG0uc3RvcmVIYXNoKG4uZ2V0SGFzaCgpKSxtLnN0b3JlQ2xpcE51bWJlcihuLmdldEhhc2goKSxuLmdldENsaXBOdW1iZXIoKSkpLG0uc3RvcmVBc3NldFBsYXliYWNrQ291bnRlcnMoKSxoPW0uaGFzaEV4aXN0cyhnKT9tLmdldENsaXBOdW1iZXIoZyk6Yi5leGlzdHMoYy5uc19zdF9jbik/cGFyc2VJbnQoYy5uc19zdF9jbik6bS5nZXRNYXhDbGlwTnVtYmVyKCkrMSk6aD1tLmhhc2hFeGlzdHMoZyk/bS5nZXRDbGlwTnVtYmVyKGcpOm4uZ2V0Q2xpcE51bWJlcigpLG0ucmVzZXRBc3NldCgpLG49bS5nZXRBc3NldCgpLG4uc2V0SGFzaChnKSxuLnNldENsaXBOdW1iZXIoaCksbi5zZXRMYWJlbHMoYyk7dmFyIG89bS5nZXRTdG9yZWRBc3NldFJlZ2lzdGVycyhnKTtvJiYobi5zZXRBc3NldFN0YXJ0ZWQoITApLG4uc2V0U2VnbWVudFBsYXliYWNrQ291bnRlcihvLnNlZ21lbnRQbGF5YmFja0NvdW50ZXIpLG4uc2V0QXNzZXRMb2FkQ291bnRlcihvLmFzc2V0TG9hZENvdW50ZXIpLG4uc2V0QXNzZXRQbGF5YmFja0NvdW50ZXIoby5hc3NldFBsYXliYWNrQ291bnRlciksbi5zZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKG8ubG93ZXN0UGFydE51bWJlclBsYXllZCksbi5zZXRTZWVraW5nKG8uc2Vla2luZyksbi5zZXRTZWVraW5nVGltZUJlZm9yZUVuZChvLnNlZWtpbmdUaW1lQmVmb3JlRW5kKSxuLnNldFNlZWtTdGFydFBvc2l0aW9uKG8uc2Vla2luZ1N0YXJ0UG9zaXRpb24pLG4uc2V0QXNzZXRQbGF5YmFja0ludGVydmFscyhvLnNlZ21lbnRQbGF5YmFja0ludGVydmFscyksby52aWRlb1RyYWNrJiZuLnNldFZpZGVvVHJhY2soby52aWRlb1RyYWNrKSxvLmF1ZGlvVHJhY2smJm4uc2V0QXVkaW9UcmFjayhvLmF1ZGlvVHJhY2spLG8uc3VidGl0bGVUcmFjayYmbi5zZXRTdWJ0aXRsZVRyYWNrKG8uc3VidGl0bGVUcmFjayksby5jZG4mJm4uc2V0Q0ROKG8uY2RuKSxuLnNldFBsYXlTZXF1ZW5jZUNvdW50ZXIoby5wbGF5U2VxdWVuY2VDb3VudGVyKSxuLnNldFByZXZpb3VzVW5pcXVlUGxheWJhY2tJbnRlcnZhbChvLnByZXZpb3VzVW5pcXVlUGxheWJhY2tJbnRlcnZhbCksbi5zZXRQcmV2aW91c0V2ZW50SW5kZXBlbmRlbnRVbmlxdWVQbGF5YmFja0ludGVydmFsKG8ucHJldmlvdXNFdmVudEluZGVwZW5kZW50VW5pcXVlUGxheWJhY2tJbnRlcnZhbCksbi5zZXRQcmV2aW91c0xvbmdlc3RQbGF5YmFja0ludGVydmFsKG8ucHJldmlvdXNMb25nZXN0UGxheWJhY2tJbnRlcnZhbCkpLG4uaW5jcmVtZW50QXNzZXRMb2FkQ291bnRlcigpLG4uaXNBc3NldFN0YXJ0ZWQoKSYmZCYmbS5pbmNyZW1lbnRQbGF5Q291bnRlcigpLGQmJihtLnNldFBsYXlTZXF1ZW5jZUNvdW50ZXIoMCksbi5zZXRQbGF5YmFja1Nlc3Npb25Mb29waW5nKCEwKSksIWIuZXhpc3RzKGMubnNfc3RfdHApJiZiLmV4aXN0cyhjLm5zX3N0X2FkKSYmYi5pc05vdEVtcHR5KGMubnNfc3RfYWQpJiZcIjBcIiE9PWMubnNfc3RfYWQmJm4uc2V0SW50ZXJuYWxMYWJlbChcIm5zX3N0X3RwXCIsXCIxXCIpO1xufX0pLGMoKX1yZXR1cm4gYS5yZXNldFBsYXliYWNrU2Vzc2lvbj1mdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWIuZ2V0QXNzZXQoKSxlPWIuZ2V0TGFiZWxzKCksZj17fSxnPTA7YyYmZzxjLmxlbmd0aDtnKyspZS5oYXNPd25Qcm9wZXJ0eShjW2ddKSYmKGZbY1tnXV09ZVtjW2ddXSk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRMYWJlbHMoZiksbS5yZXNldEFzc2V0KGQsYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLGMpfSxhfSgpLG89ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYygpe2U9MX1mdW5jdGlvbiBkKGMpe2Y9Yi5leHRlbmQoe30sYyk7dmFyIGQ9YS5nZXRTdGFDb3JlKCkuZ2V0TGl2ZUVuZHBvaW50VVJMKCk7aWYoYS5nZXRBcHBDb3JlKCkpe2lmKGEuZ2V0U3RhQ29yZSgpLmlzUHJvcGVybHlJbml0aWFsaXplZCgpKXt2YXIgZT1hLmdldFN0YUNvcmUoKS5nZXRFeHBvcnRzKCkuZXQ7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgYS5nZXRBcHBDb3JlKCkuZ2V0TWVhc3VyZW1lbnREaXNwYXRjaGVyKXt2YXIgZz1hLmdldEFwcENvcmUoKS5nZXRNZWFzdXJlbWVudERpc3BhdGNoZXIoKTtnLnNlbmQoZS5ISURERU4sYyxkKX1lbHNle3ZhciBoPWEuZ2V0U3RhQ29yZSgpLmdldEV4cG9ydHMoKS5hbSxpPWgubmV3QXBwbGljYXRpb25NZWFzdXJlbWVudChhLmdldEFwcENvcmUoKSxlLkhJRERFTixjLGQpO2EuZ2V0QXBwQ29yZSgpLmdldFF1ZXVlKCkub2ZmZXIoaSl9fX1lbHNlIGQmJmEuZ2V0U3RhQ29yZSgpLmdldFBsYXRmb3JtQVBJKCkuaHR0cEdldChhLmdldFN0YUNvcmUoKS5wcmVwYXJlVXJsKGQsYykpfXZhciBlLGYsZz10aGlzLGg9W107Yi5leHRlbmQodGhpcyx7bmV3RXZlbnQ6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTA7YjxoLmxlbmd0aDsrK2IpaFtiXShhLmV2ZW50TGFiZWxzKTtkKGEuZXZlbnRMYWJlbHMpLGEuZXZlbnRUeXBlIT1pLkhFQVJUQkVBVCYmZy5pbmNyZW1lbnRFdmVudENvdW50ZXIoKX0sYWRkTWVhc3VyZW1lbnRMaXN0ZW5lcjpmdW5jdGlvbihhKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiZoLnB1c2goYSl9LHJlbW92ZU1lYXN1cmVtZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPU5hTixjPTA7YzxoLmxlbmd0aDsrK2MpaWYoaFtjXT09YSl7Yj1jO2JyZWFrfWlzTmFOKGIpfHxoLnNwbGljZShiLDEpfSxnZXRFdmVudENvdW50ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZX0saW5jcmVtZW50RXZlbnRDb3VudGVyOmZ1bmN0aW9uKCl7ZSsrfSxzZXRFdmVudENvdW50ZXI6ZnVuY3Rpb24oYSl7ZT1hfSxnZXRNZWFzdXJlbWVudFNuYXBzaG90OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9fSksYygpfX0oKSxwPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGMoKXtnPTAsaD0wfWZ1bmN0aW9uIGQoKXtoKys7dmFyIGM9e30sZD1iLmZpeEV2ZW50VGltZShjKTtjLm5zX3N0X2hjPWEuZ2V0SGVhcnRiZWF0KCkuZ2V0Q291bnQoKStcIlwiO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLkhFQVJUQkVBVCxjLGQpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpLGc9MCxqLnJlc3VtZSgpfWZ1bmN0aW9uIGUoKXtudWxsIT1mJiYoYS5nZXRTdGFDb3JlKCkuZ2V0UGxhdGZvcm1BUEkoKS5jbGVhclRpbWVvdXQoZiksZj1udWxsKX12YXIgZixnLGgsaj10aGlzLGs9bC5ERUZBVUxUX0hFQVJUQkVBVF9JTlRFUlZBTDtiLmV4dGVuZCh0aGlzLHtnZXRDb3VudDpmdW5jdGlvbigpe3JldHVybiBofSxzZXRJbnRlcnZhbHM6ZnVuY3Rpb24oYSl7az1hfSxnZXRJbnRlcnZhbDpmdW5jdGlvbihhKXt2YXIgYj0wO2lmKG51bGwhPWspZm9yKHZhciBjPTA7YzxrLmxlbmd0aDtjKyspe3ZhciBkPWtbY10sZT1kLnBsYXlpbmd0aW1lO2lmKCFlfHxhPGUpe2I9ZC5pbnRlcnZhbDticmVha319cmV0dXJuIGJ9LGdldEludGVydmFsczpmdW5jdGlvbigpe3JldHVybiBrfSxyZXN1bWU6ZnVuY3Rpb24oKXtlKCk7dmFyIGI9ai5nZXRJbnRlcnZhbChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGxheWJhY2tUaW1lKCkrKCtuZXcgRGF0ZS1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGxheWJhY2tUaW1lc3RhbXAoKSkpO2lmKGI+MCl7dmFyIGM9Zz4wP2c6YjtmPWEuZ2V0U3RhQ29yZSgpLmdldFBsYXRmb3JtQVBJKCkuc2V0VGltZW91dChkLGMpfWc9MH0scGF1c2U6ZnVuY3Rpb24oKXtlKCk7dmFyIGI9ai5nZXRJbnRlcnZhbChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGxheWJhY2tUaW1lKCkrKCtuZXcgRGF0ZS1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGxheWJhY2tUaW1lc3RhbXAoKSkpO2c9Yi0oYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFBsYXliYWNrVGltZSgpKygrbmV3IERhdGUtYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFBsYXliYWNrVGltZXN0YW1wKCkpKSVifX0pLGMoKX19KCkscT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtmdW5jdGlvbiBjKCl7fWZ1bmN0aW9uIGQoKXt2YXIgYz17fSxkPWIuZml4RXZlbnRUaW1lKGMpO2EuZ2V0U3RhQ29yZSgpLm5ld1BzZXVkb0V2ZW50KGkuS0VFUEFMSVZFLGQsYyksZy5zdGFydCgpfWZ1bmN0aW9uIGUoKXtudWxsIT1mJiYoYS5nZXRTdGFDb3JlKCkuZ2V0UGxhdGZvcm1BUEkoKS5jbGVhclRpbWVvdXQoZiksZj1udWxsKX12YXIgZixnPXRoaXMsaD1sLkRFRkFVTFRfS0VFUF9BTElWRV9JTlRFUlZBTDtiLmV4dGVuZChnLHtzdGFydDpmdW5jdGlvbigpe2UoKSxmPWEuZ2V0U3RhQ29yZSgpLmdldFBsYXRmb3JtQVBJKCkuc2V0VGltZW91dChkLGgpfSxzdG9wOmUsc2V0SW50ZXJ2YWw6ZnVuY3Rpb24oYSl7aD1hfSxnZXRJbnRlcnZhbDpmdW5jdGlvbigpe3JldHVybiBofX0pLGMoKX19KCkscj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtmdW5jdGlvbiBjKCl7Zj1qLklETEUsZT1udWxsLGQ9TmFOfXZhciBkLGUsZixnPXRoaXM7Yi5leHRlbmQoZyx7ZXZlbnRUeXBlVG9TdGF0ZTpmdW5jdGlvbihhKXtpZihmPT1qLklETEUpe2lmKGE9PWkuUExBWSlyZXR1cm4gai5QTEFZSU5HO2lmKGE9PWkuU0VFS19TVEFSVClyZXR1cm4gai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSztpZihhPT1pLkJVRkZFUilyZXR1cm4gai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLfWVsc2UgaWYoZj09ai5QTEFZQkFDS19OT1RfU1RBUlRFRCl7aWYoYT09aS5QTEFZKXJldHVybiBqLlBMQVlJTkc7aWYoYT09aS5TRUVLX1NUQVJUKXJldHVybiBqLlNFRUtJTkdfQkVGT1JFX1BMQVlCQUNLO2lmKGE9PWkuQlVGRkVSKXJldHVybiBqLkJVRkZFUklOR19CRUZPUkVfUExBWUJBQ0s7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUClyZXR1cm4gai5JRExFfWVsc2UgaWYoZj09ai5QTEFZSU5HKXtpZihhPT1pLkVORHx8YT09aS5BRF9TS0lQKXJldHVybiBqLklETEU7aWYoYT09aS5CVUZGRVIpcmV0dXJuIGouQlVGRkVSSU5HX0RVUklOR19QTEFZQkFDSztpZihhPT1pLlBBVVNFKXJldHVybiBqLlBBVVNFRDtpZihhPT1pLlNFRUtfU1RBUlQpcmV0dXJuIGouU0VFS0lOR19EVVJJTkdfUExBWUJBQ0t9ZWxzZSBpZihmPT1qLlBBVVNFRCl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUClyZXR1cm4gai5JRExFO2lmKGE9PWkuQlVGRkVSKXJldHVybiBqLkJVRkZFUklOR19EVVJJTkdfUEFVU0U7aWYoYT09aS5QTEFZKXJldHVybiBqLlBMQVlJTkc7aWYoYT09aS5TRUVLX1NUQVJUKXJldHVybiBqLlNFRUtJTkdfRFVSSU5HX1BBVVNFfWVsc2UgaWYoZj09ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLKXtpZihhPT1pLkVORHx8YT09aS5BRF9TS0lQKXJldHVybiBqLklETEU7aWYoYT09aS5QQVVTRXx8YT09aS5CVUZGRVJfU1RPUClyZXR1cm4gai5QTEFZQkFDS19OT1RfU1RBUlRFRDtpZihhPT1pLlBMQVkpcmV0dXJuIGouUExBWUlORztpZihhPT1pLlNFRUtfU1RBUlQpcmV0dXJuIGouU0VFS0lOR19CRUZPUkVfUExBWUJBQ0t9ZWxzZSBpZihmPT1qLkJVRkZFUklOR19EVVJJTkdfUExBWUJBQ0spe2lmKGE9PWkuRU5EfHxhPT1pLkFEX1NLSVApcmV0dXJuIGouSURMRTtpZihhPT1pLlBMQVl8fGE9PWkuQlVGRkVSX1NUT1ApcmV0dXJuIGouUExBWUlORztpZihhPT1pLlBBVVNFX09OX0JVRkZFUklORylyZXR1cm4gai5QQVVTRURfRFVSSU5HX0JVRkZFUklORztpZihhPT1pLlNFRUtfU1RBUlQpcmV0dXJuIGouU0VFS0lOR19EVVJJTkdfQlVGRkVSSU5HO2lmKGE9PWkuUEFVU0UpcmV0dXJuIGouUEFVU0VEfWVsc2UgaWYoZj09ai5CVUZGRVJJTkdfRFVSSU5HX1NFRUtJTkcpe2lmKGE9PWkuRU5EfHxhPT1pLkFEX1NLSVApcmV0dXJuIGouSURMRTtpZihhPT1pLlBMQVkpcmV0dXJuIGouUExBWUlORztpZihhPT1pLkJVRkZFUl9TVE9QKXJldHVybiBqLlNFRUtJTkdfRFVSSU5HX1BMQVlCQUNLO2lmKGE9PWkuUEFVU0UpcmV0dXJuIGouUEFVU0VEfWVsc2UgaWYoZj09ai5CVUZGRVJJTkdfRFVSSU5HX1BBVVNFKXtpZihhPT1pLkVORHx8YT09aS5BRF9TS0lQKXJldHVybiBqLklETEU7aWYoYT09aS5QTEFZKXJldHVybiBqLlBMQVlJTkc7aWYoYT09aS5TRUVLX1NUQVJUKXJldHVybiBqLlNFRUtJTkdfRFVSSU5HX1BBVVNFO2lmKGE9PWkuQlVGRkVSX1NUT1B8fGE9PWkuUEFVU0UpcmV0dXJuIGouUEFVU0VEfWVsc2UgaWYoZj09ai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUClyZXR1cm4gai5JRExFO2lmKGE9PWkuUEFVU0UpcmV0dXJuIGouUExBWUJBQ0tfTk9UX1NUQVJURUQ7aWYoYT09aS5QTEFZKXJldHVybiBqLlBMQVlJTkc7aWYoYT09aS5CVUZGRVIpcmV0dXJuIGouQlVGRkVSSU5HX0JFRk9SRV9QTEFZQkFDS31lbHNlIGlmKGY9PWouU0VFS0lOR19EVVJJTkdfUExBWUJBQ0spe2lmKGE9PWkuRU5EfHxhPT1pLkFEX1NLSVApcmV0dXJuIGouSURMRTtpZihhPT1pLlBMQVkpcmV0dXJuIGouUExBWUlORztpZihhPT1pLlBBVVNFKXJldHVybiBqLlBBVVNFRDtpZihhPT1pLkJVRkZFUilyZXR1cm4gai5CVUZGRVJJTkdfRFVSSU5HX1NFRUtJTkd9ZWxzZSBpZihmPT1qLlNFRUtJTkdfRFVSSU5HX0JVRkZFUklORyl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUClyZXR1cm4gai5JRExFO2lmKGE9PWkuUExBWSlyZXR1cm4gai5QTEFZSU5HO2lmKGE9PWkuUEFVU0V8fGE9PWkuQlVGRkVSX1NUT1ApcmV0dXJuIGouUEFVU0VEO2lmKGE9PWkuQlVGRkVSKXJldHVybiBqLkJVRkZFUklOR19EVVJJTkdfU0VFS0lOR31lbHNlIGlmKGY9PWouU0VFS0lOR19EVVJJTkdfUEFVU0Upe2lmKGE9PWkuRU5EfHxhPT1pLkFEX1NLSVApcmV0dXJuIGouSURMRTtpZihhPT1pLlBMQVkpcmV0dXJuIGouUExBWUlORztpZihhPT1pLlBBVVNFfHxhPT1pLkJVRkZFUl9TVE9QKXJldHVybiBqLlBBVVNFRDtpZihhPT1pLkJVRkZFUilyZXR1cm4gai5CVUZGRVJJTkdfRFVSSU5HX1BBVVNFfWVsc2UgaWYoZj09ai5QQVVTRURfRFVSSU5HX0JVRkZFUklORyl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUClyZXR1cm4gai5JRExFO2lmKGE9PWkuU0VFS19TVEFSVClyZXR1cm4gai5TRUVLSU5HX0RVUklOR19CVUZGRVJJTkc7aWYoYT09aS5QQVVTRSlyZXR1cm4gai5QQVVTRUQ7aWYoYT09aS5QTEFZfHxhPT1pLkJVRkZFUl9TVE9QKXJldHVybiBqLlBMQVlJTkd9cmV0dXJuIG51bGx9LGdldEN1cnJlbnRTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmfSxuZXdFdmVudDpmdW5jdGlvbihhLGIpe3ZhciBjPWcuZXZlbnRUeXBlVG9TdGF0ZShhKTtmIT1jJiYoZT1mLGY9YyxkPWIpfSxnZXRQcmV2aW91c1N0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGV9LGdldExhc3RTdGF0ZUNoYW5nZVRpbWVzdGFtcDpmdW5jdGlvbigpe3JldHVybiBkfX0pLGMoKX19KCkscz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz10aGlzO2IuZXh0ZW5kKGMse29uU2Vla1N0YXJ0V2hlblBhdXNlZE9yQnVmZmVyaW5nRHVyaW5nUGF1c2U6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCk/YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCl8fChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCEwKSk6YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFNlZWtzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpfHwoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVrU3RhcnRQb3NpdGlvbihkKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpfSxvbkJ1ZmZlcldoZW5TZWVraW5nT3JQYXVzZWQ6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldEJ1ZmZlcmluZ1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0QnVmZmVyaW5nVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKX0sb25QbGF5V2hlblNlZWtpbmdEdXJpbmdCdWZmZXJpbmdPclNlZWtpbmdEdXJpbmdQYXVzZTpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQbGF5U2VxdWVuY2VDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nQW1vdW50KGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0UG9zaXRpb24oZCksYS5nZXRIZWFydGJlYXQoKS5yZXN1bWUoKSxhLmdldEtlZXBBbGl2ZSgpLnN0YXJ0KCk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuUExBWSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX0sb25CdWZmZXJTdG9wV2hlbkJ1ZmZlcmluZ0R1cmluZ1NlZWtpbmdPckJ1ZmZlcmluZ0R1cmluZ1BhdXNlOmZ1bmN0aW9uKGIsYyl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKX0sb25QYXVzZVdoZW5TZWVraW5nRHVyaW5nUGxheWJhY2tPclNlZWtpbmdEdXJpbmdQYXVzZTpmdW5jdGlvbihiLGMpe2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKX0sb25FbmRPckFkU2tpcFdoZW5TZWVraW5nRHVyaW5nQnVmZmVyaW5nT3JTZWVraW5nRHVyaW5nUGF1c2U6ZnVuY3Rpb24oYyxkKXthLmdldFN0YUNvcmUoKS5yZXNldEhlYXJ0YmVhdCgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShjKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5FTkQsZCxjKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiZhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZUJlZm9yZUVuZChjLWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRTZWVraW5nVGltZXN0YW1wKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnN0b3JlQXNzZXRQbGF5YmFja0NvdW50ZXJzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRMaWZlY3ljbGVMYWJlbHMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCExKSxkLmhhc093blByb3BlcnR5KFwibnNfc3RfcGVcIikmJmIucGFyc2VCb29sZWFuKGQubnNfc3RfcGUsITEpJiZhLmdldFN0YUNvcmUoKS5yZXNldFBsYXliYWNrU2Vzc2lvbigpfSxvbkJ1ZmZlclN0b3BXaGVuU2Vla2luZ0R1cmluZ0J1ZmZlcmluZ09yU2Vla2luZ0R1cmluZ1BhdXNlOmZ1bmN0aW9uKGIsYyl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiZhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpfSxvbkJ1ZmZlclN0b3BPck9uUGxheVdoZW5CdWZmZXJpbmdEdXJpbmdQbGF5YmFjazpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0U3RhQ29yZSgpLnN0b3BQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5U2VxdWVuY2VDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRQb3NpdGlvbihkKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYiksYS5nZXRIZWFydGJlYXQoKS5yZXN1bWUoKSxhLmdldEtlZXBBbGl2ZSgpLnN0YXJ0KCl9fSl9fSgpLHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztiLmV4dGVuZChjLHtvbkVuZE9yQWRTa2lwOmZ1bmN0aW9uKGMsZCl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZUJlZm9yZUVuZChjLWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRTZWVraW5nVGltZXN0YW1wKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5yZXNldEFzc2V0TGlmZWN5Y2xlTGFiZWxzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRlZCghMSksZC5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3BlXCIpJiZiLnBhcnNlQm9vbGVhbihkLm5zX3N0X3BlLCExKSYmYS5nZXRTdGFDb3JlKCkucmVzZXRQbGF5YmFja1Nlc3Npb24oKX0sb25CdWZmZXJTdG9wOmZ1bmN0aW9uKGIsYyl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpfSxvblNlZWtTdGFydDpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCk/YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCl8fChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCEwKSk6YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFNlZWtzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpfHwoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVrU3RhcnRQb3NpdGlvbihkKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKSl9LG9uUGF1c2U6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiZhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSl9LG9uUGxheTpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCEwKSwoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzUGxheWJhY2tTZXNzaW9uTG9vcGluZygpfHwwPT1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldFBsYXliYWNrQ291bnRlcigpKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGxheWJhY2tDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU2Vzc2lvbkxvb3BpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2VnbWVudFBsYXliYWNrQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQbGF5Q291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0UG9zaXRpb24oZCksKDA9PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKCl8fGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRQYXJ0TnVtYmVyKCk8PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKCkpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldExvd2VzdFBhcnROdW1iZXJQbGF5ZWQoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFBhcnROdW1iZXIoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudEFzc2V0UGxheWJhY2tDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXlTZXF1ZW5jZUNvdW50ZXIoMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRQbGF5YmFja0ludGVydmFscygpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0U3RhQ29yZSgpLmlzTG9hZGluZ1RpbWVTZW50KCl8fChjLm5zX3N0X2x0PWEuZ2V0U3RhQ29yZSgpLmdldExvYWRUaW1lT2Zmc2V0KCkrYi1hLmdldFN0YUNvcmUoKS5nZXRJbml0VGltZXN0YW1wKCkrXCJcIixhLmdldFN0YUNvcmUoKS5zZXRMb2FkaW5nVGltZVNlbnQoITApKSxhLmdldEhlYXJ0YmVhdCgpLnJlc3VtZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RhcnQoKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QTEFZLGMsYik7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpfX0pfX0oKSx1PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5leHRlbmQoYyx7b25FbmRBbmRTa2lwOmZ1bmN0aW9uKGMsZCl7YS5nZXRTdGFDb3JlKCkucmVzZXRIZWFydGJlYXQoKSxhLmdldEtlZXBBbGl2ZSgpLnN0b3AoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGMpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLkVORCxkLGMpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc0NvbGxlY3RpbmdTZWVraW5nVGltZSgpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lQmVmb3JlRW5kKGMtYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFNlZWtpbmdUaW1lc3RhbXAoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc3RvcmVBc3NldFBsYXliYWNrQ291bnRlcnMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkucmVzZXRBc3NldExpZmVjeWNsZUxhYmVscygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0ZWQoITEpLGQuaGFzT3duUHJvcGVydHkoXCJuc19zdF9wZVwiKSYmYi5wYXJzZUJvb2xlYW4oZC5uc19zdF9wZSwhMSkmJmEuZ2V0U3RhQ29yZSgpLnJlc2V0UGxheWJhY2tTZXNzaW9uKCl9LG9uUGF1c2U6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpfSxvblBsYXk6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQbGF5Q291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRQb3NpdGlvbihkKSxhLmdldEhlYXJ0YmVhdCgpLnJlc3VtZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RhcnQoKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QTEFZLGMsYik7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpfX0pfX0oKSx2PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5leHRlbmQoYyx7b25QYXVzZU9uQnVmZmVyaW5nOmZ1bmN0aW9uKGIsYyl7cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRTdGFDb3JlKCkuc3RvcFBhdXNlZE9uQnVmZmVyaW5nVGltZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGF1c2VzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBhdXNlcygpO3ZhciBkPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBBVVNFLGMsYik7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGQuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhkLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0QnVmZmVyaW5nVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoYil9LG9uRW5kT3JBZFNraXA6ZnVuY3Rpb24oYyxkKXtwYXJzZUludChkLm5zX3N0X3BvKTthLmdldFN0YUNvcmUoKS5zdG9wUGF1c2VkT25CdWZmZXJpbmdUaW1lcigpLGEuZ2V0U3RhQ29yZSgpLnJlc2V0SGVhcnRiZWF0KCksYS5nZXRLZWVwQWxpdmUoKS5zdG9wKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShjKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5FTkQsZCxjKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRMaWZlY3ljbGVMYWJlbHMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCExKSxkLmhhc093blByb3BlcnR5KFwibnNfc3RfcGVcIikmJmIucGFyc2VCb29sZWFuKGQubnNfc3RfcGUsITEpJiZhLmdldFN0YUNvcmUoKS5yZXNldFBsYXliYWNrU2Vzc2lvbigpfSxvblNlZWtTdGFydDpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0U3RhQ29yZSgpLnN0b3BQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKCksYS5nZXRIZWFydGJlYXQoKS5wYXVzZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFNlZWtzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVrU3RhcnRQb3NpdGlvbihkKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBhdXNlcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQYXVzZXMoKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QQVVTRSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX0sb25QYXVzZTpmdW5jdGlvbihiLGMpe3BhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0U3RhQ29yZSgpLnN0b3BQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBhdXNlcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQYXVzZXMoKTt2YXIgZD1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QQVVTRSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhkLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZC5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChkKX19KX19KCksdz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz10aGlzO2IuZXh0ZW5kKGMse29uRW5kT3JBZFNraXA6ZnVuY3Rpb24oYyxkKXthLmdldFN0YUNvcmUoKS5yZXNldEhlYXJ0YmVhdCgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0U3RhQ29yZSgpLnN0b3BQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShjKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5FTkQsZCxjKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiZhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZUJlZm9yZUVuZChjLWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRTZWVraW5nVGltZXN0YW1wKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnN0b3JlQXNzZXRQbGF5YmFja0NvdW50ZXJzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRMaWZlY3ljbGVMYWJlbHMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCExKSxkLmhhc093blByb3BlcnR5KFwibnNfc3RfcGVcIikmJmIucGFyc2VCb29sZWFuKGQubnNfc3RfcGUsITEpJiZhLmdldFN0YUNvcmUoKS5yZXNldFBsYXliYWNrU2Vzc2lvbigpfSxvblBhdXNlOmZ1bmN0aW9uKGIsYyl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGF1c2VzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBhdXNlcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKX0sb25QbGF5OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5U2VxdWVuY2VDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nQW1vdW50KGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0UG9zaXRpb24oZCksYS5nZXRIZWFydGJlYXQoKS5yZXN1bWUoKSxhLmdldEtlZXBBbGl2ZSgpLnN0YXJ0KCk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuUExBWSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX19KX19KCkseD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz10aGlzO2IuZXh0ZW5kKGMse29uQnVmZmVyOmZ1bmN0aW9uKGIsYyl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1Nlc3Npb25TdGFydGVkKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0QXNzZXRTdGFydGVkKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZShhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEJ1ZmZlcmluZ1RpbWVzdGFtcChiKX0sb25TZWVrU3RhcnQ6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrU2Vzc2lvblN0YXJ0ZWQoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRBc3NldFN0YXJ0ZWQoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRTZWVraW5nVGltZUJlZm9yZUVuZCgpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2Vla3MoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZyghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtTdGFydFBvc2l0aW9uKGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZXN0YW1wKGIpfSxvblBsYXk6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrU2Vzc2lvblN0YXJ0ZWQoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRBc3NldFN0YXJ0ZWQoITApLChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNQbGF5YmFja1Nlc3Npb25Mb29waW5nKCl8fDA9PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0UGxheWJhY2tDb3VudGVyKCkpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5YmFja0NvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTZXNzaW9uTG9vcGluZyghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZShhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2VnbWVudFBsYXliYWNrQ291bnRlcigpLCgwPT1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0TG93ZXN0UGFydE51bWJlclBsYXllZCgpfHxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGFydE51bWJlcigpPD1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0TG93ZXN0UGFydE51bWJlclBsYXllZCgpKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRQYXJ0TnVtYmVyKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRBc3NldFBsYXliYWNrQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5U2VxdWVuY2VDb3VudGVyKDApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5yZXNldEFzc2V0UGxheWJhY2tJbnRlcnZhbHMoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydFBvc2l0aW9uKGQpLGEuZ2V0U3RhQ29yZSgpLmlzTG9hZGluZ1RpbWVTZW50KCl8fChjLm5zX3N0X2x0PWEuZ2V0U3RhQ29yZSgpLmdldExvYWRUaW1lT2Zmc2V0KCkrYi1hLmdldFN0YUNvcmUoKS5nZXRJbml0VGltZXN0YW1wKCkrXCJcIixhLmdldFN0YUNvcmUoKS5zZXRMb2FkaW5nVGltZVNlbnQoITApKSxhLmdldEhlYXJ0YmVhdCgpLnJlc3VtZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RhcnQoKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QTEFZLGMsYik7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpfX0pfX0oKSx5PWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5leHRlbmQoYyx7b25FbmRPckFkU2tpcDpmdW5jdGlvbihjLGQpe2EuZ2V0U3RhQ29yZSgpLnJlc2V0SGVhcnRiZWF0KCksYS5nZXRLZWVwQWxpdmUoKS5zdG9wKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGMpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLkVORCxkLGMpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc0NvbGxlY3RpbmdTZWVraW5nVGltZSgpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lQmVmb3JlRW5kKGMtYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFNlZWtpbmdUaW1lc3RhbXAoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnN0b3JlQXNzZXRQbGF5YmFja0NvdW50ZXJzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRMaWZlY3ljbGVMYWJlbHMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCExKSxkLmhhc093blByb3BlcnR5KFwibnNfc3RfcGVcIikmJmIucGFyc2VCb29sZWFuKGQubnNfc3RfcGUsITEpJiZhLmdldFN0YUNvcmUoKS5yZXNldFBsYXliYWNrU2Vzc2lvbigpfSxvblBsYXk6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydFBvc2l0aW9uKGQpLGEuZ2V0SGVhcnRiZWF0KCkucmVzdW1lKCksYS5nZXRLZWVwQWxpdmUoKS5zdGFydCgpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBMQVksYyxiKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSl9fSl9fSgpLHo9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztiLmV4dGVuZChjLHtvbkVuZE9yQWRTa2lwOmZ1bmN0aW9uKGMsZCl7YS5nZXRTdGFDb3JlKCkucmVzZXRIZWFydGJlYXQoKSxhLmdldEtlZXBBbGl2ZSgpLnN0b3AoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQoYy1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0U2Vla2luZ1RpbWVzdGFtcCgpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuRU5ELGQsYyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5yZXNldEFzc2V0TGlmZWN5Y2xlTGFiZWxzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRlZCghMSksZC5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3BlXCIpJiZiLnBhcnNlQm9vbGVhbihkLm5zX3N0X3BlLCExKSYmYS5nZXRTdGFDb3JlKCkucmVzZXRQbGF5YmFja1Nlc3Npb24oKX0sb25CdWZmZXJTdG9wOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydFBvc2l0aW9uKGQpLGEuZ2V0SGVhcnRiZWF0KCkucmVzdW1lKCksYS5nZXRLZWVwQWxpdmUoKS5zdGFydCgpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBMQVksYyxiKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSl9LG9uU2Vla1N0YXJ0OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRCdWZmZXJpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKT9hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKXx8KGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITApKTphLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2Vla3MoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCl8fChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZyghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtTdGFydFBvc2l0aW9uKGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZXN0YW1wKGIpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYil9LG9uUGF1c2U6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpfSxvblBsYXk6ZnVuY3Rpb24oYixjKXt2YXIgZD1wYXJzZUludChjLm5zX3N0X3BvKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkQnVmZmVyaW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxcbmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydFBvc2l0aW9uKGQpLGEuZ2V0SGVhcnRiZWF0KCkucmVzdW1lKCksYS5nZXRLZWVwQWxpdmUoKS5zdGFydCgpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBMQVksYyxiKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSl9fSl9fSgpLEE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztiLmV4dGVuZChjLHtvbkVuZE9yQWRTa2lwOmZ1bmN0aW9uKGMsZCl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiZhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZUJlZm9yZUVuZChjLWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRTZWVraW5nVGltZXN0YW1wKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnN0b3JlQXNzZXRQbGF5YmFja0NvdW50ZXJzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRMaWZlY3ljbGVMYWJlbHMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCExKSxkLmhhc093blByb3BlcnR5KFwibnNfc3RfcGVcIikmJmIucGFyc2VCb29sZWFuKGQubnNfc3RfcGUsITEpJiZhLmdldFN0YUNvcmUoKS5yZXNldFBsYXliYWNrU2Vzc2lvbigpfSxvblNlZWtTdGFydDpmdW5jdGlvbihiLGMpe3ZhciBkPXBhcnNlSW50KGMubnNfc3RfcG8pO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKT9hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChiKTphLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2Vla3MoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCl8fChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZyghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtTdGFydFBvc2l0aW9uKGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nVGltZXN0YW1wKGIpKX0sb25QbGF5OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrU2Vzc2lvblN0YXJ0ZWQoITApLChhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNQbGF5YmFja1Nlc3Npb25Mb29waW5nKCl8fDA9PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0UGxheWJhY2tDb3VudGVyKCkpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5YmFja0NvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTZXNzaW9uTG9vcGluZyghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0ZWQoITApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRTZWdtZW50UGxheWJhY2tDb3VudGVyKCksKDA9PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKCl8fGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRQYXJ0TnVtYmVyKCk8PWEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKCkpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldExvd2VzdFBhcnROdW1iZXJQbGF5ZWQoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFBhcnROdW1iZXIoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudEFzc2V0UGxheWJhY2tDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXlTZXF1ZW5jZUNvdW50ZXIoMCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnJlc2V0QXNzZXRQbGF5YmFja0ludGVydmFscygpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheVNlcXVlbmNlQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQbGF5Q291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0UG9zaXRpb24oZCksYS5nZXRTdGFDb3JlKCkuaXNMb2FkaW5nVGltZVNlbnQoKXx8KGMubnNfc3RfbHQ9YS5nZXRTdGFDb3JlKCkuZ2V0TG9hZFRpbWVPZmZzZXQoKStiLWEuZ2V0U3RhQ29yZSgpLmdldEluaXRUaW1lc3RhbXAoKStcIlwiLGEuZ2V0U3RhQ29yZSgpLnNldExvYWRpbmdUaW1lU2VudCghMCkpLGEuZ2V0SGVhcnRiZWF0KCkucmVzdW1lKCksYS5nZXRLZWVwQWxpdmUoKS5zdGFydCgpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBMQVksYyxiKTthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQoZSl9LG9uQnVmZmVyOmZ1bmN0aW9uKCl7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoZXZlbnRUaW1lc3RhbXApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoZXZlbnRUaW1lc3RhbXApfX0pfX0oKSxCPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPXRoaXM7Yi5leHRlbmQoYyx7b25FbmRPckFkU2tpcDpmdW5jdGlvbihjLGQpe3ZhciBlPXBhcnNlSW50KGQubnNfc3RfcG8pO2EuZ2V0U3RhQ29yZSgpLnJlc2V0SGVhcnRiZWF0KCksYS5nZXRLZWVwQWxpdmUoKS5zdG9wKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRQbGF5YmFja1RpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFBsYXliYWNrVGltZShjKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEludGVydmFsKGUpO3ZhciBmPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLkVORCxkLGMpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhmLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZi5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChmKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkucmVzZXRBc3NldExpZmVjeWNsZUxhYmVscygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0ZWQoITEpLGQuaGFzT3duUHJvcGVydHkoXCJuc19zdF9wZVwiKSYmYi5wYXJzZUJvb2xlYW4oZC5uc19zdF9wZSwhMSkmJmEuZ2V0U3RhQ29yZSgpLnJlc2V0UGxheWJhY2tTZXNzaW9uKCl9LG9uQnVmZmVyOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRIZWFydGJlYXQoKS5wYXVzZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkUGxheWJhY2tUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRQbGF5YmFja1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEludGVydmFsKGQpLGEuZ2V0U3RhQ29yZSgpLmlzUGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQoKSYmYS5nZXRTdGFDb3JlKCkuc3RhcnRQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKGIsYyksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudEJ1ZmZlckNvdW50KCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEJ1ZmZlcmluZ1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYil9LG9uU2Vla1N0YXJ0OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRIZWFydGJlYXQoKS5wYXVzZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkUGxheWJhY2tUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRQbGF5YmFja1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEludGVydmFsKGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRTZWVrcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla1N0YXJ0UG9zaXRpb24oZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaW5jcmVtZW50UGF1c2VzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBhdXNlcygpO3ZhciBlPWEuZ2V0U3RhQ29yZSgpLmNyZWF0ZUxhYmVscyhpLlBBVVNFLGMsYik7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpfSxvblBhdXNlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRIZWFydGJlYXQoKS5wYXVzZSgpLGEuZ2V0S2VlcEFsaXZlKCkuc3RvcCgpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkUGxheWJhY2tUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRQbGF5YmFja1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEludGVydmFsKGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRFbGFwc2VkVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBhdXNlcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQYXVzZXMoKTt2YXIgZT1hLmdldFN0YUNvcmUoKS5jcmVhdGVMYWJlbHMoaS5QQVVTRSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX19KX19KCksQz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz10aGlzO2IuZXh0ZW5kKGMse29uRW5kT3JBZFNraXA6ZnVuY3Rpb24oYyxkKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc0NvbGxlY3RpbmdTZWVraW5nVGltZSgpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lQmVmb3JlRW5kKGMtYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFNlZWtpbmdUaW1lc3RhbXAoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc3RvcmVBc3NldFBsYXliYWNrQ291bnRlcnMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkucmVzZXRBc3NldExpZmVjeWNsZUxhYmVscygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1N0YXJ0ZWQoITEpLGQuaGFzT3duUHJvcGVydHkoXCJuc19zdF9wZVwiKSYmYi5wYXJzZUJvb2xlYW4oZC5uc19zdF9wZSwhMSkmJmEuZ2V0U3RhQ29yZSgpLnJlc2V0UGxheWJhY2tTZXNzaW9uKCl9LG9uUGF1c2U6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc0NvbGxlY3RpbmdTZWVraW5nVGltZSgpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITEpKX0sb25QbGF5OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzU2Vla2luZygpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkU2Vla2luZ1RpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldENvbGxlY3RpbmdTZWVraW5nVGltZSghMSkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nQW1vdW50KGQpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRTZWVraW5nKCExKSksKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1BsYXliYWNrU2Vzc2lvbkxvb3BpbmcoKXx8MD09YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRQbGF5YmFja0NvdW50ZXIoKSkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBsYXliYWNrQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1Nlc3Npb25Mb29waW5nKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5U2VxdWVuY2VDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydGVkKCEwKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50U2VnbWVudFBsYXliYWNrQ291bnRlcigpLCgwPT1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0TG93ZXN0UGFydE51bWJlclBsYXllZCgpfHxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0UGFydE51bWJlcigpPD1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0TG93ZXN0UGFydE51bWJlclBsYXllZCgpKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRMb3dlc3RQYXJ0TnVtYmVyUGxheWVkKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRQYXJ0TnVtYmVyKCkpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRBc3NldFBsYXliYWNrQ291bnRlcigpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5U2VxdWVuY2VDb3VudGVyKDApLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5yZXNldEFzc2V0UGxheWJhY2tJbnRlcnZhbHMoKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRQb3NpdGlvbihkKSxhLmdldFN0YUNvcmUoKS5pc0xvYWRpbmdUaW1lU2VudCgpfHwoYy5uc19zdF9sdD1hLmdldFN0YUNvcmUoKS5nZXRMb2FkVGltZU9mZnNldCgpK2ItYS5nZXRTdGFDb3JlKCkuZ2V0SW5pdFRpbWVzdGFtcCgpK1wiXCIsYS5nZXRTdGFDb3JlKCkuc2V0TG9hZGluZ1RpbWVTZW50KCEwKSksYS5nZXRIZWFydGJlYXQoKS5yZXN1bWUoKSxhLmdldEtlZXBBbGl2ZSgpLnN0YXJ0KCk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuUExBWSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX19KX19KCksRD1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYz10aGlzO2IuZXh0ZW5kKGMse29uUGF1c2U6ZnVuY3Rpb24oYixjKXthLmdldFBsYXliYWNrU2Vzc2lvbigpLmluY3JlbWVudFBhdXNlcygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pbmNyZW1lbnRQYXVzZXMoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJmEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc0NvbGxlY3RpbmdTZWVraW5nVGltZSgpJiYoYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdUaW1lKGIpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRDb2xsZWN0aW5nU2Vla2luZ1RpbWUoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYil9fSl9fSgpLEU9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7dmFyIGM9dGhpcztiLmV4dGVuZChjLHtvbkVuZE9yQWRTa2lwOmZ1bmN0aW9uKGMsZCl7cGFyc2VJbnQoZC5uc19zdF9wbyk7YS5nZXRTdGFDb3JlKCkucmVzZXRIZWFydGJlYXQoKSxhLmdldEtlZXBBbGl2ZSgpLnN0b3AoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYyk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuRU5ELGQsYyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZURlbHRhTGFiZWxzKGUuZXZlbnRMYWJlbHMpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVJbmRlcGVuZGVudExhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldEV2ZW50TWFuYWdlcigpLm5ld0V2ZW50KGUpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5pc1NlZWtpbmcoKSYmYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQ29sbGVjdGluZ1NlZWtpbmdUaW1lKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVCZWZvcmVFbmQoYy1hLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuZ2V0U2Vla2luZ1RpbWVzdGFtcCgpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zdG9yZUFzc2V0UGxheWJhY2tDb3VudGVycygpLGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5yZXNldEFzc2V0TGlmZWN5Y2xlTGFiZWxzKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRlZCghMSksZC5oYXNPd25Qcm9wZXJ0eShcIm5zX3N0X3BlXCIpJiZiLnBhcnNlQm9vbGVhbihkLm5zX3N0X3BlLCExKSYmYS5nZXRTdGFDb3JlKCkucmVzZXRQbGF5YmFja1Nlc3Npb24oKX0sb25QbGF5OmZ1bmN0aW9uKGIsYyl7dmFyIGQ9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5nZXRQbGF5YmFja1Nlc3Npb24oKS5pbmNyZW1lbnRQbGF5U2VxdWVuY2VDb3VudGVyKCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmluY3JlbWVudFBsYXlTZXF1ZW5jZUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaW5jcmVtZW50UGxheUNvdW50ZXIoKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNTZWVraW5nKCkmJihhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNDb2xsZWN0aW5nU2Vla2luZ1RpbWUoKSYmKGEuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5hZGRTZWVraW5nVGltZShiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0Q29sbGVjdGluZ1NlZWtpbmdUaW1lKCExKSksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFNlZWtpbmdBbW91bnQoZCksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmcoITEpKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuYWRkRWxhcHNlZFRpbWUoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEVsYXBzZWRUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChiKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYiksYS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrU3RhcnRQb3NpdGlvbihkKSxhLmdldFN0YUNvcmUoKS5pc0xvYWRpbmdUaW1lU2VudCgpfHwoYy5uc19zdF9sdD1hLmdldFN0YUNvcmUoKS5nZXRMb2FkVGltZU9mZnNldCgpK2ItYS5nZXRTdGFDb3JlKCkuZ2V0SW5pdFRpbWVzdGFtcCgpK1wiXCIsYS5nZXRTdGFDb3JlKCkuc2V0TG9hZGluZ1RpbWVTZW50KCEwKSksYS5nZXRIZWFydGJlYXQoKS5yZXN1bWUoKSxhLmdldEtlZXBBbGl2ZSgpLnN0YXJ0KCk7dmFyIGU9YS5nZXRTdGFDb3JlKCkuY3JlYXRlTGFiZWxzKGkuUExBWSxjLGIpO2EuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS51cGRhdGVEZWx0YUxhYmVscyhlLmV2ZW50TGFiZWxzKSxhLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlSW5kZXBlbmRlbnRMYWJlbHMoZS5ldmVudExhYmVscyksYS5nZXRFdmVudE1hbmFnZXIoKS5uZXdFdmVudChlKX19KX19KCksRj1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXtmdW5jdGlvbiBkKCl7aWYoRj1uZXcgRyhlYSksYi5nZXROYW1lc3BhY2UoKS5jb21TY29yZT8oZmE9Yi5nZXROYW1lc3BhY2UoKS5jb21TY29yZS5leHBvcnRzLEYuc2V0QXBwQ29yZShmYS5jKCkpKTpGLnNldEFwcENvcmUobnVsbCksYS5wdWJsaXNoZXJJZCl7ZWEuc2V0TGFiZWwoXCJjMlwiLGEucHVibGlzaGVySWQpO3ZhciBkPWEuc2VjdXJlOyFkJiZGLmdldEFwcENvcmUoKT9kPUYuZ2V0QXBwQ29yZSgpLmlzU2VjdXJlKCk6IWQmJmIuaXNCcm93c2VyKCkmJihkPWIuaXNXZWJTZWN1cmUoKSk7dmFyIGU9KGQ/XCJodHRwczovL3NiXCI6XCJodHRwOi8vYlwiKStcIi5zY29yZWNhcmRyZXNlYXJjaC5jb20vcD9jMT0yXCI7ZWEuc2V0TGl2ZUVuZHBvaW50VVJMKGUpfWEubGl2ZUVuZHBvaW50VVJMJiZlYS5zZXRMaXZlRW5kcG9pbnRVUkwoYS5saXZlRW5kcG9pbnRVUkwpLEYuc2V0S2VlcEFsaXZlKG5ldyBxKEYpKSxGLnNldEhlYXJ0YmVhdChuZXcgcChGKSksRi5zZXRFdmVudE1hbmFnZXIobmV3IG8oRikpLEYuc2V0U3RhdGVNYWNoaW5lKG5ldyByKSxGLnNldExvZ2dpbmcobmV3IGMobC5MT0dfTkFNRVNQQUNFLGEuZGVidWcpKSxGLnNldFBsYXliYWNrU2Vzc2lvbihuZXcgbihGKSksSD1uZXcgeChGKSxJPW5ldyB5KEYpLEo9bmV3IEEoRiksSz1uZXcgQihGKSxMPW5ldyB0KEYpLE09bmV3IHYoRiksTj1uZXcgdyhGKSxPPW5ldyB1KEYpLFA9bmV3IHooRiksUT1uZXcgQyhGKSxSPW5ldyBEKEYpLFM9bmV3IEUoRiksVD1uZXcgcyhGKSxVPSExLFY9MCxXPStuZXcgRGF0ZSxZPSEwLCQ9ITEsYWE9W10sYS5zeXN0ZW1DbG9ja0p1bXBEZXRlY3Rpb24mJmVhLmVuYWJsZVN5c3RlbUNsb2NrSnVtcHNEZXRlY3Rpb24ocGFyc2VJbnQoYS5zeXN0ZW1DbG9ja0p1bXBEZXRlY3Rpb25JbnRlcnZhbCkpfWZ1bmN0aW9uIGUoYSl7dmFyIGI9Ri5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKTtpZihiPT1qLklETEV8fGI9PWouUExBWUJBQ0tfTk9UX1NUQVJURUR8fGI9PWouQlVGRkVSSU5HX0JFRk9SRV9QTEFZQkFDS3x8Yj09ai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyl7aWYoYT09aS5QTEFZKXJldHVybiEwfWVsc2UgaWYoYj09ai5QTEFZSU5HKXtpZihhPT1pLkVORHx8YT09aS5BRF9TS0lQfHxhPT1pLlNFRUtfU1RBUlR8fGE9PWkuUEFVU0UpcmV0dXJuITB9ZWxzZSBpZihiPT1qLlBBVVNFRHx8Yj09ai5CVUZGRVJJTkdfRFVSSU5HX1BBVVNFfHxiPT1qLlNFRUtJTkdfRFVSSU5HX1BMQVlCQUNLfHxiPT1qLlNFRUtJTkdfRFVSSU5HX0JVRkZFUklOR3x8Yj09ai5TRUVLSU5HX0RVUklOR19QQVVTRSl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUHx8YT09aS5QTEFZKXJldHVybiEwfWVsc2UgaWYoYj09ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLKXtpZihhPT1pLlBBVVNFX09OX0JVRkZFUklOR3x8YT09aS5FTkR8fGE9PWkuQURfU0tJUHx8YT09aS5TRUVLX1NUQVJUfHxhPT1pLlBBVVNFfHxhPT1pLlBMQVkpcmV0dXJuITB9ZWxzZSBpZihiPT1qLkJVRkZFUklOR19EVVJJTkdfU0VFS0lORyl7aWYoYT09aS5FTkR8fGE9PWkuQURfU0tJUHx8YT09aS5QQVVTRXx8YT09aS5QTEFZKXJldHVybiEwfWVsc2UgaWYoYj09ai5QQVVTRURfRFVSSU5HX0JVRkZFUklORyYmKGE9PWkuRU5EfHxhPT1pLkFEX1NLSVB8fGE9PWkuQlVGRkVSX1NUT1B8fGE9PWkuUExBWSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihhLGIsYyl7dmFyIGQ9Ri5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKTthPT1pLkFEX1NLSVAmJiFjLmhhc093blByb3BlcnR5KFwibnNfc3RfdWlcIikmJmUoYSk/Yy5uc19zdF91aT1cInNraXBcIjphPT1pLlNFRUtfU1RBUlQmJiFjLmhhc093blByb3BlcnR5KFwibnNfc3RfdWlcIikmJmUoYSkmJihjLm5zX3N0X3VpPVwic2Vla1wiKSxkPT1qLklETEU/YT09aS5CVUZGRVI/SC5vbkJ1ZmZlcihiLGMpOmE9PWkuU0VFS19TVEFSVD9ILm9uU2Vla1N0YXJ0KGIsYyk6YT09aS5QTEFZJiZILm9uUGxheShiLGMpOmQ9PWouUExBWUJBQ0tfTk9UX1NUQVJURUQ/YT09aS5FTkR8fGE9PWkuQURfU0tJUD9KLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlNFRUtfU1RBUlQ/Si5vblNlZWtTdGFydChiLGMpOmE9PWkuUExBWT9KLm9uUGxheShiLGMpOmE9PWkuQlVGRkVSJiZKLm9uQnVmZmVyKGIsYyk6ZD09ai5QTEFZSU5HP2E9PWkuRU5EfHxhPT1pLkFEX1NLSVA/Sy5vbkVuZE9yQWRTa2lwKGIsYyk6YT09aS5CVUZGRVI/Sy5vbkJ1ZmZlcihiLGMpOmE9PWkuU0VFS19TVEFSVD9LLm9uU2Vla1N0YXJ0KGIsYyk6YT09aS5QQVVTRSYmSy5vblBhdXNlKGIsYyk6ZD09ai5QQVVTRUQ/YT09aS5FTkR8fGE9PWkuQURfU0tJUD9JLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlBMQVk/SS5vblBsYXkoYixjKTphPT1pLkJVRkZFUj9ULm9uQnVmZmVyV2hlblNlZWtpbmdPclBhdXNlZChiLGMpOmE9PWkuU0VFS19TVEFSVCYmVC5vblNlZWtTdGFydFdoZW5QYXVzZWRPckJ1ZmZlcmluZ0R1cmluZ1BhdXNlKGIsYyk6ZD09ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLP2E9PWkuRU5EfHxhPT1pLkFEX1NLSVA/TC5vbkVuZE9yQWRTa2lwKGIsYyk6YT09aS5CVUZGRVJfU1RPUD9MLm9uQnVmZmVyU3RvcChiLGMpOmE9PWkuU0VFS19TVEFSVD9MLm9uU2Vla1N0YXJ0KGIsYyk6YT09aS5QQVVTRT9MLm9uUGF1c2UoYixjKTphPT1pLlBMQVkmJkwub25QbGF5KGIsYyk6ZD09ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLP2E9PWkuUEFVU0VfT05fQlVGRkVSSU5HP00ub25QYXVzZU9uQnVmZmVyaW5nKGIsYyk6YT09aS5CVUZGRVJfU1RPUD9ULm9uQnVmZmVyU3RvcE9yT25QbGF5V2hlbkJ1ZmZlcmluZ0R1cmluZ1BsYXliYWNrKGIsYyk6YT09aS5FTkR8fGE9PWkuQURfU0tJUD9NLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlNFRUtfU1RBUlQ/TS5vblNlZWtTdGFydChiLGMpOmE9PWkuUEFVU0U/TS5vblBhdXNlKGIsYyk6YT09aS5QTEFZJiZULm9uQnVmZmVyU3RvcE9yT25QbGF5V2hlbkJ1ZmZlcmluZ0R1cmluZ1BsYXliYWNrKGIsYyk6ZD09ai5CVUZGRVJJTkdfRFVSSU5HX1NFRUtJTkc/YT09aS5FTkR8fGE9PWkuQURfU0tJUD9OLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlBBVVNFP04ub25QYXVzZShiLGMpOmE9PWkuUExBWT9OLm9uUGxheShiLGMpOmE9PWkuQlVGRkVSX1NUT1AmJlQub25CdWZmZXJTdG9wV2hlbkJ1ZmZlcmluZ0R1cmluZ1NlZWtpbmdPckJ1ZmZlcmluZ0R1cmluZ1BhdXNlKGIsYyk6ZD09ai5CVUZGRVJJTkdfRFVSSU5HX1BBVVNFP2E9PWkuRU5EfHxhPT1pLkFEX1NLSVA/Ty5vbkVuZEFuZFNraXAoYixjKTphPT1pLlBBVVNFP08ub25QYXVzZShiLGMpOmE9PWkuUExBWT9PLm9uUGxheShiLGMpOmE9PWkuU0VFS19TVEFSVD9ULm9uU2Vla1N0YXJ0V2hlblBhdXNlZE9yQnVmZmVyaW5nRHVyaW5nUGF1c2UoYixjKTphPT1pLkJVRkZFUl9TVE9QJiZULm9uQnVmZmVyU3RvcFdoZW5CdWZmZXJpbmdEdXJpbmdTZWVraW5nT3JCdWZmZXJpbmdEdXJpbmdQYXVzZShiLGMpOmQ9PWouU0VFS0lOR19CRUZPUkVfUExBWUJBQ0s/YT09aS5FTkR8fGE9PWkuQURfU0tJUD9RLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlBBVVNFP1Eub25QYXVzZShiLGMpOmE9PWkuUExBWT9RLm9uUGxheShiLGMpOmE9PWkuQlVGRkVSJiZULm9uQnVmZmVyV2hlblNlZWtpbmdPclBhdXNlZChiLGMpOmQ9PWouU0VFS0lOR19EVVJJTkdfUExBWUJBQ0s/YT09aS5FTkR8fGE9PWkuQURfU0tJUD9TLm9uRW5kT3JBZFNraXAoYixjKTphPT1pLlBMQVk/Uy5vblBsYXkoYixjKTphPT1pLkJVRkZFUj9ULm9uQnVmZmVyV2hlblNlZWtpbmdPclBhdXNlZChiLGMpOmE9PWkuUEFVU0UmJlQub25QYXVzZVdoZW5TZWVraW5nRHVyaW5nUGxheWJhY2tPclNlZWtpbmdEdXJpbmdQYXVzZShiLGMpOmQ9PWouU0VFS0lOR19EVVJJTkdfQlVGRkVSSU5HP2E9PWkuUEFVU0U/Ui5vblBhdXNlKGIsYyk6YT09aS5CVUZGRVI/VC5vbkJ1ZmZlcldoZW5TZWVraW5nT3JQYXVzZWQoYixjKTphPT1pLlBMQVk/VC5vblBsYXlXaGVuU2Vla2luZ0R1cmluZ0J1ZmZlcmluZ09yU2Vla2luZ0R1cmluZ1BhdXNlKGIsYyk6YT09aS5FTkR8fGE9PWkuQURfU0tJUD9ULm9uRW5kT3JBZFNraXBXaGVuU2Vla2luZ0R1cmluZ0J1ZmZlcmluZ09yU2Vla2luZ0R1cmluZ1BhdXNlKGIsYyk6YT09aS5CVUZGRVJfU1RPUCYmVC5vbkJ1ZmZlclN0b3BXaGVuU2Vla2luZ0R1cmluZ0J1ZmZlcmluZ09yU2Vla2luZ0R1cmluZ1BhdXNlKGIsYyk6ZD09ai5QQVVTRURfRFVSSU5HX0JVRkZFUklORz9hPT1pLkVORHx8YT09aS5BRF9TS0lQP1Aub25FbmRPckFkU2tpcChiLGMpOmE9PWkuQlVGRkVSX1NUT1A/UC5vbkJ1ZmZlclN0b3AoYixjKTphPT1pLlNFRUtfU1RBUlQ/UC5vblNlZWtTdGFydChiLGMpOmE9PWkuUEFVU0U/UC5vblBhdXNlKGIsYyk6YT09aS5QTEFZJiZQLm9uUGxheShiLGMpOmQ9PWouU0VFS0lOR19EVVJJTkdfUEFVU0UmJihhPT1pLkJVRkZFUj9ULm9uQnVmZmVyV2hlblNlZWtpbmdPclBhdXNlZChiLGMpOmE9PWkuUExBWT9ULm9uUGxheVdoZW5TZWVraW5nRHVyaW5nQnVmZmVyaW5nT3JTZWVraW5nRHVyaW5nUGF1c2UoYixjKTphPT1pLlBBVVNFP1Qub25QYXVzZVdoZW5TZWVraW5nRHVyaW5nUGxheWJhY2tPclNlZWtpbmdEdXJpbmdQYXVzZShiLGMpOmE9PWkuRU5EfHxhPT1pLkFEX1NLSVA/VC5vbkVuZE9yQWRTa2lwV2hlblNlZWtpbmdEdXJpbmdCdWZmZXJpbmdPclNlZWtpbmdEdXJpbmdQYXVzZShiLGMpOmE9PWkuQlVGRkVSX1NUT1AmJlQub25CdWZmZXJTdG9wV2hlblNlZWtpbmdEdXJpbmdCdWZmZXJpbmdPclNlZWtpbmdEdXJpbmdQYXVzZShiLGMpKSxlKGEpJiZGLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldEZpcnN0RXZlbnRTZW50KCEwKX1mdW5jdGlvbiBtKGEsYyl7Zm9yKHZhciBkLGU9a2EuZW5jb2RlVVJJQ29tcG9uZW50fHxlc2NhcGUsZj1bXSxnPWwuTEFCRUxTX09SREVSLGg9YS5zcGxpdChcIj9cIiksaT1oWzBdLGo9aFsxXSxrPWouc3BsaXQoXCImXCIpLG09MCxuPWsubGVuZ3RoO208bjttKyspe3ZhciBvPWtbbV0uc3BsaXQoXCI9XCIpLHA9dW5lc2NhcGUob1swXSkscT11bmVzY2FwZShvWzFdKTtwJiYoY1twXT1xKX1mb3IodmFyIHI9e30scz0wLHQ9Zy5sZW5ndGg7czx0O3MrKyl7dmFyIHU9Z1tzXTtpZihjLmhhc093blByb3BlcnR5KHUpKXt2YXIgdj1jW3VdO1widW5kZWZpbmVkXCIhPXR5cGVvZiB2JiZudWxsIT12JiYoclt1XT0hMCxmLnB1c2goZSh1KStcIj1cIitlKGNbdV0pKSl9fWZvcih2YXIgdyBpbiBjKWlmKGMuaGFzT3duUHJvcGVydHkodykpe2lmKHJbd10pY29udGludWU7dmFyIHg9Y1t3XTtcInVuZGVmaW5lZFwiIT10eXBlb2YgeCYmbnVsbCE9eCYmZi5wdXNoKGUodykrXCI9XCIrZShjW3ddKSl9ZD1pK1wiP1wiK2Yuam9pbihcIiZcIiksZD1kKyhkLmluZGV4T2YoXCImYzg9XCIpPDA/XCImYzg9XCIrZShsYS50aXRsZSk6XCJcIikrKGQuaW5kZXhPZihcIiZjNz1cIik8MD9cIiZjNz1cIitlKGxhLlVSTCk6XCJcIikrKGQuaW5kZXhPZihcIiZjOT1cIik8MD9cIiZjOT1cIitlKGxhLnJlZmVycmVyKTpcIlwiKTt2YXIgeT1iLmJyb3dzZXJBY2NlcHRzTGFyZ2VVUkxzKCk/bC5VUkxfTEVOR1RIX0xJTUlUOmwuUkVTVFJJQ1RFRF9VUkxfTEVOR1RIX0xJTUlUO2lmKGQubGVuZ3RoPnkmJmQuaW5kZXhPZihcIiZcIik+MCl7dmFyIHo9ZC5zdWJzdHIoMCx5LTgpLmxhc3RJbmRleE9mKFwiJlwiKTtkPShkLnN1YnN0cmluZygwLHopK1wiJm5zX2N1dD1cIitlKGQuc3Vic3RyaW5nKHorMSkpKS5zdWJzdHIoMCx5KX1yZXR1cm4gZH12YXIgRixILEksSixLLEwsTSxOLE8sUCxRLFIsUyxULFUsVixXLFgsWSxaLCQsXyxhYSxiYSxjYSxkYSxlYT10aGlzLGZhPXt9LGdhPWwuREVGQVVMVF9QQVVTRURfT05fQlVGRkVSSU5HX0lOVEVSVkFMLGhhPWwuVEhST1RUTElOR19ERUxBWSxpYT17fSxqYT0hMTtiLmV4dGVuZChlYSx7Z2V0Q29uZmlndXJhdGlvbjpmdW5jdGlvbigpe3JldHVybiBhfHx7fX0sZW5hYmxlU3lzdGVtQ2xvY2tKdW1wc0RldGVjdGlvbjpmdW5jdGlvbihhKXsoYTxsLlNZU1RFTV9DTE9DS19KVU1QX0RFVEVDVElPTl9NSU5JTVVNX0lOVEVSVkFMfHwhYSkmJihhPWwuU1lTVEVNX0NMT0NLX0pVTVBfREVURUNUSU9OX0RFRkFVTFRfSU5URVJWQUwpLGIub25TeXN0ZW1DbG9ja0p1bXAoZnVuY3Rpb24oYSl7ZGE9YSxqYT0hMH0sYSl9LGNyZWF0ZUxhYmVsczpmdW5jdGlvbihhLGMsZCl7dmFyIGU9ITE7aWYoYT09aS5IRUFSVEJFQVQpe3ZhciBmPWlzTmFOKFgpP1c6WDtYPWQsKGQ8Znx8amEpJiYoZT0hMCxqYT0hMSxkPGY/KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkSW50ZXJuYWxFcnJvckZsYWcoXCIxXCIpLEYuZ2V0TG9nZ2luZygpLmluZm9Mb2coXCJTeXN0ZW0gY2xvY2sganVtcCBkZXRlY3RlZFwiLFwidG8gdGhlIGZhciBwYXN0XCIpKTpkYT8oRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRJbnRlcm5hbEVycm9yRmxhZyhcIjNcIiksRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIlN5c3RlbSBjbG9jayBqdW1wIGRldGVjdGVkXCIsXCJ0byB0aGUgZnV0dXJlXCIpKTooRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRJbnRlcm5hbEVycm9yRmxhZyhcIjJcIiksRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIlN5c3RlbSBjbG9jayBqdW1wIGRldGVjdGVkXCIsXCJ0byB0aGUgbmVhciBwYXN0XCIpKSxkPWYpfXZhciBnPXt9O2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBkb2N1bWVudCl7dmFyIGg9ZG9jdW1lbnQ7Zy5jNz1oLlVSTCxnLmM4PWgudGl0bGUsZy5jOT1oLnJlZmVycmVyfXJldHVybiBnLm5zX3RzPStuZXcgRGF0ZStcIlwiLGcubnNfc3RfZXY9aS50b1N0cmluZyhhKSxnLm5zX3N0X21wPWwuREVGQVVMVF9QTEFZRVJOQU1FLGcubnNfc3RfbXY9bC5TVFJFQU1JTkdBTkFMWVRJQ1NfVkVSU0lPTixnLm5zX3N0X3ViPVwiMFwiLGcubnNfc3RfYnI9XCIwXCIsZy5uc19zdF9wbj1cIjFcIixnLm5zX3N0X3RwPVwiMFwiLGcubnNfc3RfaXQ9ay50b1N0cmluZyhrLlNJTkdMRV9DTElQKSxnLm5zX3N0X3N2PWwuU1RSRUFNSU5HQU5BTFlUSUNTX1ZFUlNJT04sZy5uc19zdF9zbXY9bC5NT0RFTF9WRVJTSU9OLGcubnNfdHlwZT1cImhpZGRlblwiLGcubnNfc3RfZWM9Ri5nZXRFdmVudE1hbmFnZXIoKS5nZXRFdmVudENvdW50ZXIoKStcIlwiLGcubnNfc3Rfa2k9Ri5nZXRLZWVwQWxpdmUoKS5nZXRJbnRlcnZhbCgpK1wiXCIsRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQXV0b0NhbGN1bGF0ZVBvc2l0aW9uc0VuYWJsZWQoKT9nLm5zX3N0X3BvPUYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRFeHBlY3RlZFBsYXliYWNrUG9zaXRpb24oZCkrXCJcIjpnLm5zX3N0X3BvPWNhK1wiXCIsY2E9cGFyc2VJbnQoZy5uc19zdF9wbyksYi5leHRlbmQoZyxlYS5nZXRMYWJlbHMoKSksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5jcmVhdGVMYWJlbHMoZyxkKSxiLmV4dGVuZChnLGMpLGUmJihGLmdldFBsYXliYWNrU2Vzc2lvbigpLnNldFBsYXliYWNrVGltZXN0YW1wKFgtcGFyc2VJbnQoZy5uc19zdF9wdCkpLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1RpbWVzdGFtcChYLXBhcnNlSW50KGcubnNfc3RfcHQpKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChYLXBhcnNlSW50KGcubnNfc3RfZXQpKSxGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpPT1qLkJVRkZFUklOR19EVVJJTkdfUExBWUJBQ0smJkYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoWC1wYXJzZUludChnLm5zX3N0X2JwKSkpLHtldmVudFR5cGU6YSxldmVudExhYmVsczpnfX0sbmV3RXZlbnQ6ZnVuY3Rpb24oYSxjLGQsZSl7ZWEuc3RvcERlbGF5ZWRUcmFuc2l0aW9uVGltZXIoKTt2YXIgZz1GLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpLGg9Ri5nZXRTdGF0ZU1hY2hpbmUoKS5ldmVudFR5cGVUb1N0YXRlKGEpO2lmKG51bGw9PWh8fGg9PWcpcmV0dXJuIHZvaWQgRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIklnbm9yZWQgZXZlbnQ6XCIsaS50b1N0cmluZyhhKSxcImR1cmluZyBzdGF0ZVwiLGIuc3RhdGVUb1N0cmluZyhnKSxkKTtpZihlYS5pc1Rocm90dGxpbmdFbmFibGVkKCkmJihnPT1qLlBMQVlJTkd8fGc9PWouUEFVU0VEKSYmKGg9PWouUExBWUlOR3x8aD09ai5QQVVTRUQpJiYhZSl7Ri5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIlRocm90dGxlZCBldmVudDpcIixpLnRvU3RyaW5nKGEpLFwiZHVyaW5nIHN0YXRlXCIsYi5zdGF0ZVRvU3RyaW5nKGcpLGQsZWEuZ2V0VGhyb3R0bGluZ0RlbGF5KCksXCJtc1wiKTt2YXIgaz1mdW5jdGlvbihhLGIsZCl7cmV0dXJuIGZ1bmN0aW9uKCl7ZWEubmV3RXZlbnQoYSxjLGQsITApfX0oYSxoLGQpO3JldHVybiB2b2lkKF89Ri5nZXRQbGF0Zm9ybUFQSSgpLnNldFRpbWVvdXQoayxlYS5nZXRUaHJvdHRsaW5nRGVsYXkoKSkpfXZhciBsPWlzTmFOKFgpP1c6WDtYPWM7dmFyIG09ITE7KGM8bHx8amEpJiYobT0hMCxqYT0hMSxjPGw/KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkSW50ZXJuYWxFcnJvckZsYWcoXCIxXCIpLEYuZ2V0TG9nZ2luZygpLmluZm9Mb2coXCJTeXN0ZW0gY2xvY2sganVtcCBkZXRlY3RlZFwiLFwidG8gdGhlIGZhciBwYXN0XCIpKTpkYT8oRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRJbnRlcm5hbEVycm9yRmxhZyhcIjNcIiksRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIlN5c3RlbSBjbG9jayBqdW1wIGRldGVjdGVkXCIsXCJ0byB0aGUgZnV0dXJlXCIpKTooRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5hZGRJbnRlcm5hbEVycm9yRmxhZyhcIjJcIiksRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIlN5c3RlbSBjbG9jayBqdW1wIGRldGVjdGVkXCIsXCJ0byB0aGUgbmVhciBwYXN0XCIpKSxjPWwpLGQubnNfc3RfcG98fChGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaXNBdXRvQ2FsY3VsYXRlUG9zaXRpb25zRW5hYmxlZCgpP0YuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCk9PWouSURMRT9kLm5zX3N0X3BvPVwiMFwiOmQubnNfc3RfcG89Ri5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldEV4cGVjdGVkUGxheWJhY2tQb3NpdGlvbihjKStcIlwiOmQubnNfc3RfcG89Y2ErXCJcIiksY2E9cGFyc2VJbnQoZC5uc19zdF9wbyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrVGltZU9mZnNldChwYXJzZUludChkLm5zX3N0X3BvKSksZihhLGMsZCk7dmFyIG49MDtpc05hTihGLmdldFN0YXRlTWFjaGluZSgpLmdldExhc3RTdGF0ZUNoYW5nZVRpbWVzdGFtcCgpKXx8KG49Yy1GLmdldFN0YXRlTWFjaGluZSgpLmdldExhc3RTdGF0ZUNoYW5nZVRpbWVzdGFtcCgpKSxGLmdldFN0YXRlTWFjaGluZSgpLm5ld0V2ZW50KGEsYyksbSYmKGghPWouSURMRSYmaCE9ai5QTEFZQkFDS19OT1RfU1RBUlRFRCYmaCE9ai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyYmaCE9ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLJiZGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChYKSxoIT1qLkJVRkZFUklOR19CRUZPUkVfUExBWUJBQ0smJmghPWouQlVGRkVSSU5HX0RVUklOR19QQVVTRSYmaCE9ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLJiZoIT1qLkJVRkZFUklOR19EVVJJTkdfU0VFS0lORyYmaCE9ai5QQVVTRURfRFVSSU5HX0JVRkZFUklOR3x8KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0QnVmZmVyaW5nVGltZXN0YW1wKFgpLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoWCkpLGghPWouUExBWUlORyYmaCE9ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLfHwoRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChYKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoWCkpLGghPWouU0VFS0lOR19CRUZPUkVfUExBWUJBQ0smJmghPWouU0VFS0lOR19EVVJJTkdfQlVGRkVSSU5HJiZoIT1qLlNFRUtJTkdfRFVSSU5HX1BBVVNFJiZoIT1qLlNFRUtJTkdfRFVSSU5HX1BMQVlCQUNLJiZoIT1qLkJVRkZFUklOR19EVVJJTkdfU0VFS0lOR3x8Ri5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFNlZWtpbmdUaW1lc3RhbXAoWCkpLEYuZ2V0TG9nZ2luZygpLmxvZyhcIlRyYW5zaXRpb24gZnJvbVwiLGIuc3RhdGVUb1N0cmluZyhnKSxcInRvXCIsYi5zdGF0ZVRvU3RyaW5nKGgpLFwiZHVlIHRvIGV2ZW50OlwiLGkudG9TdHJpbmcoYSkpO2Zvcih2YXIgbz0wLHA9YWEubGVuZ3RoO288cDtvKyspYWFbb10oZyxoLGQsbil9LG5ld1BzZXVkb0V2ZW50OmZ1bmN0aW9uKGEsYyxkKXtpZigoYT09aS5MT0FEfHxhPT1pLkVOR0FHRSkmJkYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouSURMRSlyZXR1cm4gdm9pZCBGLmdldExvZ2dpbmcoKS5pbmZvTG9nKFwiSWdub3JlZCBwc2V1ZG8tZXZlbnQ6XCIsaS50b1N0cmluZyhhKSxcImR1cmluZyBzdGF0ZVwiLGIuc3RhdGVUb1N0cmluZyhGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpKSxkKTthPT1pLkVSUk9SJiZudWxsPT1kLm5zX3N0X2VyJiYoZC5uc19zdF9lcj1oLlVOS05PV05fVkFMVUUpLGE9PWkuVFJBTlNGRVImJm51bGw9PWQubnNfc3RfcnAmJihkLm5zX3N0X3JwPWguVU5LTk9XTl9WQUxVRSk7dmFyIGUsZixnLGs9ITAsbD0hMTtzd2l0Y2goYSl7Y2FzZSBpLkJJVF9SQVRFOmU9XCJuc19zdF9iclwiLGY9XCJuc19zdF9wYnJcIixsPSEwO2JyZWFrO2Nhc2UgaS5QTEFZQkFDS19SQVRFOmU9XCJuc19zdF9ydFwiLGY9XCJuc19zdF9wcnRcIixsPSEwO2JyZWFrO2Nhc2UgaS5WT0xVTUU6ZT1cIm5zX3N0X3ZvXCIsZj1cIm5zX3N0X3B2b1wiLGw9ITA7YnJlYWs7Y2FzZSBpLldJTkRPV19TVEFURTplPVwibnNfc3Rfd3NcIixmPVwibnNfc3RfcHdzXCIsbD0hMDticmVhaztjYXNlIGkuQVVESU86ZT1cIm5zX3N0X2F0XCIsZj1cIm5zX3N0X3BhdFwiLGw9ITE7YnJlYWs7Y2FzZSBpLlZJREVPOmU9XCJuc19zdF92dFwiLGY9XCJuc19zdF9wdnRcIixsPSExO2JyZWFrO2Nhc2UgaS5TVUJTOmU9XCJuc19zdF90dFwiLGY9XCJuc19zdF9wdHRcIixsPSExO2JyZWFrO2Nhc2UgaS5DRE46ZT1cIm5zX3N0X2NkblwiLGY9XCJuc19zdF9wY2RuXCIsbD0hMTticmVhaztkZWZhdWx0Oms9ITF9aWYoayYmZC5oYXNPd25Qcm9wZXJ0eShlKSYmKGw/KGVhLmdldExhYmVscygpLmhhc093blByb3BlcnR5KGUpJiYoZz1lYS5nZXRMYWJlbHMoKVtlXSxkW2ZdPWcpLGVhLnNldExhYmVsKGUsZFtlXSkpOihGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuaGFzSW50ZXJuYWxMYWJlbChlKSYmKGc9Ri5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldEludGVybmFsTGFiZWwoZSksZFtmXT1nKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0SW50ZXJuYWxMYWJlbChlLGRbZV0pKSksayYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5QTEFZSU5HJiZGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLkJVRkZFUklOR19EVVJJTkdfUExBWUJBQ0spcmV0dXJuIHZvaWQgRi5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIk5vIG1lYXN1cmVtZW50IHNlbmQgZm9yIHRoZSBwc2V1ZG8tZXZlbnQ6XCIsaS50b1N0cmluZyhhKSxcImR1cmluZyBzdGF0ZVwiLGIuc3RhdGVUb1N0cmluZyhGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpKSxkKTt2YXIgbT1pc05hTihYKT9XOlg7WD1jO3ZhciBuPSExOyhjPG18fGphKSYmKG49ITAsamE9ITEsYzxtPyhGLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEludGVybmFsRXJyb3JGbGFnKFwiMVwiKSxGLmdldExvZ2dpbmcoKS5pbmZvTG9nKFwiU3lzdGVtIGNsb2NrIGp1bXAgZGV0ZWN0ZWRcIixcInRvIHRoZSBmYXIgcGFzdFwiKSk6ZGE/KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkSW50ZXJuYWxFcnJvckZsYWcoXCIzXCIpLEYuZ2V0TG9nZ2luZygpLmluZm9Mb2coXCJTeXN0ZW0gY2xvY2sganVtcCBkZXRlY3RlZFwiLFwidG8gdGhlIGZ1dHVyZVwiKSk6KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkSW50ZXJuYWxFcnJvckZsYWcoXCIyXCIpLEYuZ2V0TG9nZ2luZygpLmluZm9Mb2coXCJTeXN0ZW0gY2xvY2sganVtcCBkZXRlY3RlZFwiLFwidG8gdGhlIG5lYXIgcGFzdFwiKSksYz1tKSxkLm5zX3N0X3BvfHwoRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmlzQXV0b0NhbGN1bGF0ZVBvc2l0aW9uc0VuYWJsZWQoKT9kLm5zX3N0X3BvPUYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5nZXRFeHBlY3RlZFBsYXliYWNrUG9zaXRpb24oYykrXCJcIjpkLm5zX3N0X3BvPWNhK1wiXCIpLGNhPXBhcnNlSW50KGQubnNfc3RfcG8pLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRQbGF5YmFja1RpbWVPZmZzZXQocGFyc2VJbnQoZC5uc19zdF9wbykpLEYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouSURMRSYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5QTEFZQkFDS19OT1RfU1RBUlRFRCYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLJiYoRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEVsYXBzZWRUaW1lKGMpLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRFbGFwc2VkVGltZXN0YW1wKGMpKSxGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLlBMQVlJTkcmJkYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouQlVGRkVSSU5HX0RVUklOR19QTEFZQkFDS3x8KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuYWRkUGxheWJhY2tUaW1lKGMpLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZFBsYXliYWNrVGltZShjKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoYyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEludGVydmFsKHBhcnNlSW50KGQubnNfc3RfcG8pKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tTdGFydFBvc2l0aW9uKHBhcnNlSW50KGQubnNfc3RfcG8pKSksRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLJiZGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLkJVRkZFUklOR19EVVJJTkdfUEFVU0UmJkYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouQlVGRkVSSU5HX0RVUklOR19QTEFZQkFDSyYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfRFVSSU5HX1NFRUtJTkd8fChGLmdldFBsYXliYWNrU2Vzc2lvbigpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoYyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmFkZEJ1ZmZlcmluZ1RpbWUoYyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldEJ1ZmZlcmluZ1RpbWVzdGFtcChjKSk7dmFyIG89ZWEuY3JlYXRlTGFiZWxzKGEsZCxjKTtGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkudXBkYXRlRGVsdGFMYWJlbHMoby5ldmVudExhYmVscyksRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnVwZGF0ZUluZGVwZW5kZW50TGFiZWxzKG8uZXZlbnRMYWJlbHMpLEYuZ2V0RXZlbnRNYW5hZ2VyKCkubmV3RXZlbnQobyksbiYmKEYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouUExBWUlORyYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLfHwoRi5nZXRQbGF5YmFja1Nlc3Npb24oKS5zZXRQbGF5YmFja1RpbWVzdGFtcChYKSxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0UGxheWJhY2tUaW1lc3RhbXAoWCkpLEYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouSURMRSYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5QTEFZQkFDS19OT1RfU1RBUlRFRCYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5TRUVLSU5HX0JFRk9SRV9QTEFZQkFDSyYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfQkVGT1JFX1BMQVlCQUNLJiZGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0RWxhcHNlZFRpbWVzdGFtcChYKSxGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLkJVRkZFUklOR19CRUZPUkVfUExBWUJBQ0smJkYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCkhPWouQlVGRkVSSU5HX0RVUklOR19QQVVTRSYmRi5nZXRTdGF0ZU1hY2hpbmUoKS5nZXRDdXJyZW50U3RhdGUoKSE9ai5CVUZGRVJJTkdfRFVSSU5HX1BMQVlCQUNLJiZGLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLkJVRkZFUklOR19EVVJJTkdfU0VFS0lOR3x8KEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0QnVmZmVyaW5nVGltZXN0YW1wKFgpLEYuZ2V0UGxheWJhY2tTZXNzaW9uKCkuZ2V0QXNzZXQoKS5zZXRCdWZmZXJpbmdUaW1lc3RhbXAoWCkpLG5ld1N0YXRlIT1qLlNFRUtJTkdfQkVGT1JFX1BMQVlCQUNLJiZuZXdTdGF0ZSE9ai5TRUVLSU5HX0RVUklOR19CVUZGRVJJTkcmJm5ld1N0YXRlIT1qLlNFRUtJTkdfRFVSSU5HX1BBVVNFJiZuZXdTdGF0ZSE9ai5TRUVLSU5HX0RVUklOR19QTEFZQkFDSyYmbmV3U3RhdGUhPWouQlVGRkVSSU5HX0RVUklOR19TRUVLSU5HfHxGLmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0U2Vla2luZ1RpbWVzdGFtcChYKSl9LGdldFN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEYuZ2V0U3RhdGVNYWNoaW5lKCkuZ2V0Q3VycmVudFN0YXRlKCl9LGFkZExpc3RlbmVyOmZ1bmN0aW9uKGEpe2FhLnB1c2goYSl9LHJlbW92ZUxpc3RlbmVyOmZ1bmN0aW9uKGEpe2FhLnNwbGljZShiLmluZGV4T2YoYSxhYSksMSl9LGdldExhYmVsOmZ1bmN0aW9uKGEpe3JldHVybiBpYVthXX0sZ2V0TGFiZWxzOmZ1bmN0aW9uKCl7cmV0dXJuIGlhfSxzZXRMYWJlbDpmdW5jdGlvbihhLGIpe251bGw9PWI/ZGVsZXRlIGlhW2FdOmlhW2FdPWJ9LHNldExhYmVsczpmdW5jdGlvbihhKXtmb3IodmFyIGIgaW4gYSlhLmhhc093blByb3BlcnR5KGIpJiZlYS5zZXRMYWJlbChiLGFbYl0pfSxnZXRQbGF0Zm9ybUFQSTpmdW5jdGlvbigpe3JldHVybiBGLmdldEFwcENvcmUoKT9GLmdldEFwcENvcmUoKS5nZXRQbGF0Zm9ybUFQSSgpOmd9LGdldEV4cG9ydHM6ZnVuY3Rpb24oKXtyZXR1cm4gZmF9LGlzUHJvcGVybHlJbml0aWFsaXplZDpmdW5jdGlvbigpe3ZhciBhPUYuZ2V0QXBwQ29yZSgpLmdldEFwcENvbnRleHQoKSxiPUYuZ2V0QXBwQ29yZSgpLmdldFNhbHQoKSxjPUYuZ2V0QXBwQ29yZSgpLmdldFBpeGVsVVJMKCk7cmV0dXJuIGEmJmMmJmJ9LHNldFRocm90dGxpbmdEZWxheTpmdW5jdGlvbihhKXtoYT1hfSxnZXRUaHJvdHRsaW5nRGVsYXk6ZnVuY3Rpb24oKXtyZXR1cm4gaGF9LGlzVGhyb3R0bGluZ0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gJH0sc2V0VGhyb3R0bGluZ0VuYWJsZWQ6ZnVuY3Rpb24oYSl7JD1hfSxpc0xvYWRpbmdUaW1lU2VudDpmdW5jdGlvbigpe3JldHVybiBVfSxzZXRMb2FkaW5nVGltZVNlbnQ6ZnVuY3Rpb24oYSl7VT1hfSxnZXRMb2FkVGltZU9mZnNldDpmdW5jdGlvbigpe3JldHVybiBWfSxzZXRMb2FkVGltZU9mZnNldDpmdW5jdGlvbihhKXtWPWF9LGdldEluaXRUaW1lc3RhbXA6ZnVuY3Rpb24oKXtyZXR1cm4gV30sc2V0UGF1c2VPbkJ1ZmZlcmluZ0ludGVydmFsOmZ1bmN0aW9uKGEpe2dhPWF9LGdldFBhdXNlT25CdWZmZXJpbmdJbnRlcnZhbDpmdW5jdGlvbigpe3JldHVybiBnYX0saXNQYXVzZU9uQnVmZmVyaW5nRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBZfSxzZXRQYXVzZU9uQnVmZmVyaW5nRW5hYmxlZDpmdW5jdGlvbihhKXtZPWF9LHN0YXJ0UGF1c2VkT25CdWZmZXJpbmdUaW1lcjpmdW5jdGlvbihhLGMpe2VhLnN0b3BQYXVzZWRPbkJ1ZmZlcmluZ1RpbWVyKCksWj1lYS5nZXRQbGF0Zm9ybUFQSSgpLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt2YXIgYT17fSxkPWIuZml4RXZlbnRUaW1lKGEpLGU9cGFyc2VJbnQoYy5uc19zdF9wbyk7YS5uc19zdF9wbz1lK1wiXCIsZWEubmV3RXZlbnQoaS5QQVVTRV9PTl9CVUZGRVJJTkcsZCxhKX0sZ2EpfSxzdG9wUGF1c2VkT25CdWZmZXJpbmdUaW1lcjpmdW5jdGlvbigpe251bGwhPVomJihlYS5nZXRQbGF0Zm9ybUFQSSgpLmNsZWFyVGltZW91dChaKSxaPW51bGwpfSxzdG9wRGVsYXllZFRyYW5zaXRpb25UaW1lcjpmdW5jdGlvbigpe18mJihlYS5nZXRQbGF0Zm9ybUFQSSgpLmNsZWFyVGltZW91dChfKSxfPW51bGwpfSxzZXRMaXZlRW5kcG9pbnRVUkw6ZnVuY3Rpb24oYSl7aWYobnVsbD09YXx8MD09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9ZGVjb2RlVVJJQ29tcG9uZW50fHx1bmVzY2FwZSxjPWEuaW5kZXhPZihcIj9cIik7aWYoYz49MCl7aWYoYzxhLmxlbmd0aC0xKXtmb3IodmFyIGQ9YS5zdWJzdHJpbmcoYysxKS5zcGxpdChcIiZcIiksZT0wLGY9ZC5sZW5ndGg7ZTxmO2UrKyl7dmFyIGc9ZFtlXSxoPWcuc3BsaXQoXCI9XCIpOzI9PWgubGVuZ3RoP2VhLnNldExhYmVsKGhbMF0sYihoWzFdKSk6MT09aC5sZW5ndGgmJmVhLnNldExhYmVsKGwuUEFHRV9OQU1FX0xBQkVMLGIoaFswXSkpfWE9YS5zdWJzdHJpbmcoMCxjKzEpfX1lbHNlIGErPVwiP1wiO3JldHVybiBiYT1hfSxnZXRMaXZlRW5kcG9pbnRVUkw6ZnVuY3Rpb24oKXtyZXR1cm4gYmE/YmE6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5zX3AmJlwic3RyaW5nXCI9PXR5cGVvZiBuc19wLnNyYz9iYT1uc19wLnNyYy5yZXBsYWNlKC8mYW1wOy8sXCImXCIpLnJlcGxhY2UoLyZuc19fdD1cXGQrLyxcIlwiKTpcInN0cmluZ1wiPT10eXBlb2YgbnNfcGl4ZWxVcmw/YmE9bnNfcGl4ZWxVcmwucmVwbGFjZSgvJmFtcDsvLFwiJlwiKS5yZXBsYWNlKC8mbnNfX3Q9XFxkKy8sXCJcIik6bnVsbH0sZ2V0U3RhU006ZnVuY3Rpb24oKXtyZXR1cm4gRn0scmVzZXRQbGF5YmFja1Nlc3Npb246ZnVuY3Rpb24oYSl7dmFyIGI9Ri5nZXRQbGF5YmFja1Nlc3Npb24oKTtGLnNldFBsYXliYWNrU2Vzc2lvbihuZXcgbihGKSksbi5yZXNldFBsYXliYWNrU2Vzc2lvbihGLGIsYSl9LHJlc2V0SGVhcnRiZWF0OmZ1bmN0aW9uKCl7Ri5nZXRIZWFydGJlYXQoKS5wYXVzZSgpO3ZhciBhPUYuZ2V0SGVhcnRiZWF0KCkuZ2V0SW50ZXJ2YWxzKCk7Ri5zZXRIZWFydGJlYXQobmV3IHAoRikpLEYuZ2V0SGVhcnRiZWF0KCkuc2V0SW50ZXJ2YWxzKGEpfX0pO3ZhciBrYSxsYTtiLmlzQnJvd3NlcigpPyhrYT13aW5kb3csbGE9ZG9jdW1lbnQpOihrYT17fSxsYT17bG9jYXRpb246e2hyZWY6XCJcIn0sdGl0bGU6XCJcIixVUkw6XCJcIixyZWZlcnJlcjpcIlwiLGNvb2tpZTpcIlwifSksYi5leHRlbmQoZWEse3ByZXBhcmVVcmw6bX0pLGQoKX19KCksRz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhKXt2YXIgYyxkLGUsZixnLGgsaSxqPXRoaXM7Yi5leHRlbmQoaix7Z2V0QXBwQ29yZTpmdW5jdGlvbigpe3JldHVybiBjfSxnZXRTdGFDb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIGF9LGdldEV2ZW50TWFuYWdlcjpmdW5jdGlvbigpe3JldHVybiBkfSxnZXRTdGF0ZU1hY2hpbmU6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sZ2V0SGVhcnRiZWF0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LGdldEtlZXBBbGl2ZTpmdW5jdGlvbigpe3JldHVybiBnfSxnZXRQbGF5YmFja1Nlc3Npb246ZnVuY3Rpb24oKXtyZXR1cm4gaH0sZ2V0TG9nZ2luZzpmdW5jdGlvbigpe3JldHVybiBpfSxzZXRBcHBDb3JlOmZ1bmN0aW9uKGEpe2M9YX0sc2V0S2VlcEFsaXZlOmZ1bmN0aW9uKGEpe2c9YX0sc2V0SGVhcnRiZWF0OmZ1bmN0aW9uKGEpe2Y9YX0sc2V0RXZlbnRNYW5hZ2VyOmZ1bmN0aW9uKGEpe2Q9YX0sc2V0U3RhdGVNYWNoaW5lOmZ1bmN0aW9uKGEpe2U9YX0sc2V0UGxheWJhY2tTZXNzaW9uOmZ1bmN0aW9uKGEpe2g9YX0sc2V0TG9nZ2luZzpmdW5jdGlvbihhKXtpPWF9fSl9fSgpLEg9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYygpe2E9Yi5leHRlbmQoe30sYSksZj1uZXcgRihhKSxmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmxvZyhcIk5ldyBTdHJlYW1pbmdBbmFseXRpY3MgaW5zdGFuY2Ugd2l0aCBjb25maWd1cmF0aW9uXCIsYSl9ZnVuY3Rpb24gZChhKXt2YXIgYyxkO2lmKGM9XCJvYmplY3RcIj09dHlwZW9mIGFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJvYmplY3RcIj09dHlwZW9mIGFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06e30sZD1cIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIm51bWJlclwiPT10eXBlb2YgYXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpOYU4saS50b1N0cmluZyhhKSl7Yz1iLmpzb25PYmplY3RUb1N0cmluZ0RpY3Rpb25hcnkoYyk7dmFyIGU9Yi5maXhFdmVudFRpbWUoYyk7Yy5uc19zdF9wb3x8aXNOYU4oZCl8fChjLm5zX3N0X3BvPWIucGFyc2VJbnRlZ2VyKGQsMCkrXCJcIiksYT09aS5QTEFZfHxhPT1pLlBBVVNFfHxhPT1pLkJVRkZFUnx8YT09aS5FTkR8fGE9PWkuU0VFS19TVEFSVHx8YT09aS5BRF9TS0lQfHxhPT1pLkJVRkZFUl9TVE9QP2YubmV3RXZlbnQoYSxlLGMpOmYubmV3UHNldWRvRXZlbnQoYSxlLGMpfX1mdW5jdGlvbiBlKCl7aCYmZi5nZXRTdGFTTSgpLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpIT1qLklETEUmJmcubm90aWZ5RW5kKCl9dmFyIGYsZz10aGlzLGg9ITA7Yi5leHRlbmQodGhpcyx7aXNQcm9wZXJseUluaXRpYWxpemVkOmZ1bmN0aW9uKCl7cmV0dXJuIGYuaXNQcm9wZXJseUluaXRpYWxpemVkKCl9LHJlc2V0OmZ1bmN0aW9uKGEpe2QoaS5FTkQpO3ZhciBiPWY7Yi5nZXRTdGFTTSgpLmdldEtlZXBBbGl2ZSgpLnN0b3AoKSxiLmdldFN0YVNNKCkuZ2V0SGVhcnRiZWF0KCkucGF1c2UoKSxmPW5ldyBGKGIuZ2V0Q29uZmlndXJhdGlvbigpKSxuLnJlc2V0UGxheWJhY2tTZXNzaW9uKGYuZ2V0U3RhU00oKSxiLmdldFN0YVNNKCkuZ2V0UGxheWJhY2tTZXNzaW9uKCksYSl9LHNldFBhdXNlT25CdWZmZXJpbmdJbnRlcnZhbDpmdW5jdGlvbihhKXtmLnNldFBhdXNlT25CdWZmZXJpbmdJbnRlcnZhbChhKX0sZ2V0UGF1c2VPbkJ1ZmZlcmluZ0ludGVydmFsOmZ1bmN0aW9uKCl7cmV0dXJuIGYuZ2V0UGF1c2VPbkJ1ZmZlcmluZ0ludGVydmFsKCl9LHNldEtlZXBBbGl2ZUludGVydmFsOmZ1bmN0aW9uKGEpe2YuZ2V0U3RhU00oKS5nZXRLZWVwQWxpdmUoKS5zZXRJbnRlcnZhbChhKTtcbn0sZ2V0S2VlcEFsaXZlSW50ZXJ2YWw6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRTdGFTTSgpLmdldEtlZXBBbGl2ZSgpLmdldEludGVydmFsKCl9LHNldEhlYXJ0YmVhdEludGVydmFsczpmdW5jdGlvbihhKXtmLmdldFN0YVNNKCkuZ2V0SGVhcnRiZWF0KCkuc2V0SW50ZXJ2YWxzKGEpfSxub3RpZnlQbGF5OmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5UGxheVwiLGEsYiksZChpLlBMQVksYSxiKX0sbm90aWZ5UGF1c2U6ZnVuY3Rpb24oYSxiKXtmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlQYXVzZVwiLGEsYiksZChpLlBBVVNFLGEsYil9LG5vdGlmeUVuZDpmdW5jdGlvbihhLGIpe2YuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUVuZFwiLGEsYiksZChpLkVORCxhLGIpfSxub3RpZnlCdWZmZXJTdGFydDpmdW5jdGlvbihhLGIpe2YuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUJ1ZmZlclN0YXJ0XCIsYSxiKSxkKGkuQlVGRkVSLGEsYil9LG5vdGlmeUJ1ZmZlclN0b3A6ZnVuY3Rpb24oYSxiKXtmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlCdWZmZXJTdG9wXCIsYSxiKSxkKGkuQlVGRkVSX1NUT1AsYSxiKX0sbm90aWZ5TG9hZDpmdW5jdGlvbihhLGIpe2YuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUxvYWRcIixhLGIpLGQoaS5MT0FELGEsYil9LG5vdGlmeUVuZ2FnZTpmdW5jdGlvbihhLGIpe2YuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUVuZ2FnZVwiLGEsYiksZChpLkVOR0FHRSxhLGIpfSxub3RpZnlTZWVrU3RhcnQ6ZnVuY3Rpb24oYSxiKXtmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlTZWVrU3RhcnRcIixhLGIpLGQoaS5TRUVLX1NUQVJULGEsYil9LG5vdGlmeVNraXBBZDpmdW5jdGlvbihhLGIpe2YuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeVNraXBBZFwiLGEsYiksZChpLkFEX1NLSVAsYSxiKX0sbm90aWZ5Q2FsbFRvQWN0aW9uOmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5Q2FsbFRvQWN0aW9uXCIsYSxiKSxkKGkuQ1RBLGEsYil9LG5vdGlmeUVycm9yOmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5RXJyb3JcIixhLGIpLGQoaS5FUlJPUixhLGIpfSxub3RpZnlUcmFuc2ZlclBsYXliYWNrOmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5VHJhbnNmZXJQbGF5YmFja1wiLGEsYiksZChpLlRSQU5TRkVSLGEsYil9LG5vdGlmeURybUZhaWw6ZnVuY3Rpb24oYSxiKXtmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlEcm1GYWlsXCIsYSxiKSxkKGkuRFJNX0ZBSUxFRCxhLGIpfSxub3RpZnlEcm1BcHByb3ZlOmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5RHJtQXBwcm92ZVwiLGEsYiksZChpLkRSTV9BUFBST1ZFRCxhLGIpfSxub3RpZnlEcm1EZW55OmZ1bmN0aW9uKGEsYil7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5RHJtRGVueVwiLGEsYiksZChpLkRSTV9ERU5JRUQsYSxiKX0sbm90aWZ5Q2hhbmdlQml0cmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoZi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5Q2hhbmdlQml0cmF0ZVwiLGEsYixjKSxudWxsIT1hKXt2YXIgZT1jfHx7fTtlLm5zX3N0X2JyPWErXCJcIixkKGkuQklUX1JBVEUsZSxiKX19LG5vdGlmeUNoYW5nZVBsYXliYWNrUmF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoZi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5Q2hhbmdlUGxheWJhY2tSYXRlXCIsYSxiLGMpLG51bGwhPWEpe3ZhciBlPWN8fHt9O2UubnNfc3RfcnQ9YStcIlwiLGQoaS5QTEFZQkFDS19SQVRFLGUsYil9fSxub3RpZnlDaGFuZ2VWb2x1bWU6ZnVuY3Rpb24oYSxiLGMpe2lmKGYuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUNoYW5nZVZvbHVtZVwiLGEsYixjKSxudWxsIT1hKXt2YXIgZT1jfHx7fTtlLm5zX3N0X3ZvPWErXCJcIixkKGkuVk9MVU1FLGUsYil9fSxub3RpZnlDaGFuZ2VXaW5kb3dTdGF0ZTpmdW5jdGlvbihhLGIsYyl7aWYoZi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5Q2hhbmdlV2luZG93U3RhdGVcIixhLGIsYyksbnVsbCE9YSl7dmFyIGU9Y3x8e307ZS5uc19zdF93cz1hK1wiXCIsZChpLldJTkRPV19TVEFURSxlLGIpfX0sbm90aWZ5Q2hhbmdlQXVkaW9UcmFjazpmdW5jdGlvbihhLGIsYyl7aWYoZi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwibm90aWZ5Q2hhbmdlQXVkaW9UcmFja1wiLGEsYixjKSxudWxsIT1hKXt2YXIgZT1jfHx7fTtlLm5zX3N0X2F0PWErXCJcIixkKGkuQVVESU8sZSxiKX19LG5vdGlmeUNoYW5nZVZpZGVvVHJhY2s6ZnVuY3Rpb24oYSxiLGMpe2lmKGYuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUNoYW5nZVZpZGVvVHJhY2tcIixhLGIsYyksbnVsbCE9YSl7dmFyIGU9Y3x8e307ZS5uc19zdF92dD1hK1wiXCIsZChpLlZJREVPLGUsYil9fSxub3RpZnlDaGFuZ2VTdWJ0aXRsZVRyYWNrOmZ1bmN0aW9uKGEsYixjKXtpZihmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlDaGFuZ2VTdWJ0aXRsZVRyYWNrXCIsYSxiLGMpLG51bGwhPWEpe3ZhciBlPWN8fHt9O2UubnNfc3RfdHQ9YStcIlwiLGQoaS5TVUJTLGUsYil9fSxub3RpZnlDaGFuZ2VDZG46ZnVuY3Rpb24oYSxiLGMpe2lmKGYuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuYXBpQ2FsbChcIm5vdGlmeUNoYW5nZUNkblwiLGEsYixjKSxudWxsIT1hKXt2YXIgZT1jfHx7fTtlLm5zX3N0X2Nkbj1hK1wiXCIsZChpLkNETixlLGIpfX0sbm90aWZ5Q3VzdG9tRXZlbnQ6ZnVuY3Rpb24oYSxiKXtmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmFwaUNhbGwoXCJub3RpZnlDdXN0b21FdmVudFwiLGEsYiksZChpLkNVU1RPTSxhLGIpfSxnZXRMYWJlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRMYWJlbHMoKX0sZ2V0U3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRTdGFTTSgpLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpfSxzZXRMYWJlbHM6ZnVuY3Rpb24oYSl7Zi5zZXRMYWJlbHMoYSl9LGdldExhYmVsOmZ1bmN0aW9uKGEpe3JldHVybiBmLmdldExhYmVsKGEpfSxzZXRMYWJlbDpmdW5jdGlvbihhLGIpe2Yuc2V0TGFiZWwoYSxiKX0sZ2V0TG9hZFRpbWVPZmZzZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRMb2FkVGltZU9mZnNldCgpfSxzZXRMb2FkVGltZU9mZnNldDpmdW5jdGlvbihhKXtmLnNldExvYWRUaW1lT2Zmc2V0KGEpfSxzZXRMaXZlRW5kcG9pbnRVUkw6ZnVuY3Rpb24oYSl7cmV0dXJuIGYuc2V0TGl2ZUVuZHBvaW50VVJMKGEpfSxnZXRMaXZlRW5kcG9pbnRVUkw6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRMaXZlRW5kcG9pbnRVUkwoKX0saXNQYXVzZU9uQnVmZmVyaW5nRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBmLmlzUGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQoKX0sc2V0UGF1c2VPbkJ1ZmZlcmluZ0VuYWJsZWQ6ZnVuY3Rpb24oYSl7Zi5zZXRQYXVzZU9uQnVmZmVyaW5nRW5hYmxlZChhKX0saXNUaHJvdHRsaW5nRW5hYmxlZDpmdW5jdGlvbigpe3JldHVybiBmLmlzVGhyb3R0bGluZ0VuYWJsZWQoKX0sc2V0VGhyb3R0bGluZ0VuYWJsZWQ6ZnVuY3Rpb24oYSl7Zi5zZXRUaHJvdHRsaW5nRW5hYmxlZChhKX0sc2V0VGhyb3R0bGluZ0RlbGF5OmZ1bmN0aW9uKGEpe2Yuc2V0VGhyb3R0bGluZ0RlbGF5KGEpfSxnZXRUaHJvdHRsaW5nRGVsYXk6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRUaHJvdHRsaW5nRGVsYXkoKX0sc2V0UGxheWJhY2tJbnRlcnZhbE1lcmdlVG9sZXJhbmNlOmZ1bmN0aW9uKGEpe2YuZ2V0U3RhU00oKS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLnNldFBsYXliYWNrSW50ZXJ2YWxNZXJnZVRvbGVyYW5jZShhKX0sZ2V0UGxheWJhY2tJbnRlcnZhbE1lcmdlVG9sZXJhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIGYuZ2V0U3RhU00oKS5nZXRQbGF5YmFja1Nlc3Npb24oKS5nZXRBc3NldCgpLmdldFBsYXliYWNrSW50ZXJ2YWxNZXJnZVRvbGVyYW5jZSgpfSxjcmVhdGVQbGF5YmFja1Nlc3Npb246ZnVuY3Rpb24oYSl7Zi5nZXRTdGFTTSgpLmdldExvZ2dpbmcoKS5hcGlDYWxsKFwiY3JlYXRlUGxheWJhY2tTZXNzaW9uXCIsYSksYT1iLmpzb25PYmplY3RUb1N0cmluZ0RpY3Rpb25hcnkoYSk7dmFyIGM9Zi5nZXRTdGFTTSgpLmdldFN0YXRlTWFjaGluZSgpLmdldEN1cnJlbnRTdGF0ZSgpO2MhPWouSURMRSYmKGYuZ2V0U3RhU00oKS5nZXRMb2dnaW5nKCkuaW5mb0xvZyhcIkVuZGluZyB0aGUgY3VycmVudCBDbGlwLiBJdCB3YXMgaW4gc3RhdGU6XCIsYi5zdGF0ZVRvU3RyaW5nKGMpKSxnLm5vdGlmeUVuZCgpKSxmLmdldFN0YVNNKCkuZ2V0UGxheWJhY2tTZXNzaW9uKCkuaXNQbGF5YmFja1Nlc3Npb25TdGFydGVkKCkmJmYucmVzZXRQbGF5YmFja1Nlc3Npb24oKSxmLmdldFN0YVNNKCkuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0TGFiZWxzKGEpfSxnZXRWZXJzaW9uOmZ1bmN0aW9uKCl7cmV0dXJuIGwuU1RSRUFNSU5HQU5BTFlUSUNTX1ZFUlNJT059LGFkZExpc3RlbmVyOmZ1bmN0aW9uKGEpe2YuYWRkTGlzdGVuZXIoYSl9LHJlbW92ZUxpc3RlbmVyOmZ1bmN0aW9uKGEpe2YucmVtb3ZlTGlzdGVuZXIoYSl9LGFkZE1lYXN1cmVtZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSl7Zi5nZXRTdGFTTSgpLmdldEV2ZW50TWFuYWdlcigpLmFkZE1lYXN1cmVtZW50TGlzdGVuZXIoYSl9LHJlbW92ZU1lYXN1cmVtZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSl7Zi5nZXRTdGFTTSgpLmdldEV2ZW50TWFuYWdlcigpLnJlbW92ZU1lYXN1cmVtZW50TGlzdGVuZXIoYSl9LGdldFBsYXliYWNrU2Vzc2lvbjpmdW5jdGlvbigpe3JldHVybiBmLmdldFN0YVNNKCkuZ2V0UGxheWJhY2tTZXNzaW9uKCl9LHNldEV4aXRFbmRFdmVudEVuYWJsZWQ6ZnVuY3Rpb24oYSl7aD1hfSxpc0V4aXRFbmRFdmVudEVuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sZ2V0UGxhdGZvcm1BUEk6ZnVuY3Rpb24oKXtyZXR1cm4gZi5nZXRQbGF0Zm9ybUFQSSgpfSxfZ2V0TG9nSGlzdG9yeTpmdW5jdGlvbigpe3JldHVybiBmLmdldFN0YVNNKCkuZ2V0TG9nZ2luZygpLmdldExvZ0hpc3RvcnkoKX19KSxiLmlzQnJvd3NlcigpJiYod2luZG93LmFkZEV2ZW50TGlzdGVuZXI/KHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsZSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixlKSk6d2luZG93LmF0dGFjaEV2ZW50JiYod2luZG93LmF0dGFjaEV2ZW50KFwib25iZWZvcmV1bmxvYWRcIixlKSx3aW5kb3cuYXR0YWNoRXZlbnQoXCJvbnVubG9hZFwiLGUpKSksYygpfX0oKTtyZXR1cm4gSC5QbGF5ZXJFdmVudHM9aSxILkludGVybmFsU3RhdGVzPWosSC5JbXBsZW1lbnRhdGlvblR5cGU9ayxILkNvbnN0YW50cz1sLEh9KCksYS5SZWR1Y2VkUmVxdWlyZW1lbnRzU3RyZWFtaW5nQW5hbHl0aWNzPWEuUmVkdWNlZFJlcXVpcmVtZW50c1N0cmVhbWluZ0FuYWx5dGljc3x8ZnVuY3Rpb24oKXt2YXIgZD17TG9uZ0Zvcm1PbkRlbWFuZDpcIjEyXCIsU2hvcnRGb3JtT25EZW1hbmQ6XCIxMVwiLExpdmU6XCIxM1wiLFVzZXJHZW5lcmF0ZWRMb25nRm9ybU9uRGVtYW5kOlwiMjJcIixVc2VyR2VuZXJhdGVkU2hvcnRGb3JtT25EZW1hbmQ6XCIyMVwiLFVzZXJHZW5lcmF0ZWRMaXZlOlwiMjNcIixCdW1wZXI6XCI5OVwiLE90aGVyOlwiMDBcIn0sZT17TGluZWFyT25EZW1hbmRQcmVSb2xsOlwiMTFcIixMaW5lYXJPbkRlbWFuZE1pZFJvbGw6XCIxMlwiLExpbmVhck9uRGVtYW5kUG9zdFJvbGw6XCIxM1wiLExpbmVhckxpdmU6XCIyMVwiLEJyYW5kZWRPbkRlbWFuZFByZVJvbGw6XCIzMVwiLEJyYW5kZWRPbkRlbWFuZE1pZFJvbGw6XCIzMlwiLEJyYW5kZWRPbkRlbWFuZFBvc3RSb2xsOlwiMzNcIixCcmFuZGVkT25EZW1hbmRDb250ZW50OlwiMzRcIixCcmFuZGVkT25EZW1hbmRMaXZlOlwiMzVcIixPdGhlcjpcIjAwXCJ9LGY9YS5TdHJlYW1pbmdBbmFseXRpY3MsZz1hLlN0cmVhbWluZ0FuYWx5dGljcy5JbnRlcm5hbFN0YXRlc3x8bnVsbCxoPWEuU3RyZWFtaW5nQW5hbHl0aWNzLkltcGxlbWVudGF0aW9uVHlwZXx8bnVsbCxpPW51bGwhPWEuU3RyZWFtaW5nQW5hbHl0aWNzLkludGVybmFsU3RhdGVzJiZudWxsIT1hLlN0cmVhbWluZ0FuYWx5dGljcy5JbXBsZW1lbnRhdGlvblR5cGUsaj1hLlN0cmVhbWluZ0FuYWx5dGljcy5Db25zdGFudHMsaz1mdW5jdGlvbihhKXtmdW5jdGlvbiBrKCl7aSYmKGIuZXhpc3RzKGEpJiYoYS5jdXN0b21lckMyfHxhLnB1Ymxpc2hlcklkKXx8Yi5nZXROYW1lc3BhY2UoKS5jb21TY29yZT90PW5ldyBmKGEpOncuZXJyb3IoXCJDYW5ub3QgaW5zdGFudGlhdGUgU3RyZWFtaW5nQW5hbHl0aWNzXCIsXCJUaGUgcHJvcGVydHkgcHVibGlzaGVySWQgd2FzIG5vdCBwcm92aWRlZCAob3IgaW5jb3JyZWN0bHkgcHJvdmlkZWQpIGluIHRoZSBTdHJlYW1pbmdBbmFseXRpY3MgY29uZmlndXJhdGlvbi5cIiksdCYmdC5zZXRMYWJlbChcIm5zX3N0X2l0XCIsaC50b1N0cmluZyhoLlJFRFVDRUQpKSl9ZnVuY3Rpb24gbChhKXtmb3IodmFyIGIgaW4gai5TVEFOREFSRF9NRVRBREFUQV9MQUJFTFMpaWYoai5TVEFOREFSRF9NRVRBREFUQV9MQUJFTFMuaGFzT3duUHJvcGVydHkoYikmJiFtKGouU1RBTkRBUkRfTUVUQURBVEFfTEFCRUxTW2JdLHEsYSkpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gbShhLGMsZCl7cmV0dXJuISEoYi5leGlzdHMoYSkmJmIuZXhpc3RzKGMpJiZiLmV4aXN0cyhkKSYmKGMuaGFzT3duUHJvcGVydHkoYSkmJmQuaGFzT3duUHJvcGVydHkoYSkmJmNbYV09PT1kW2FdfHwhYy5oYXNPd25Qcm9wZXJ0eShhKSYmIWQuaGFzT3duUHJvcGVydHkoYSkpKX1mdW5jdGlvbiBuKGEpe3QuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0QXNzZXQoYSkscT1hLHQubm90aWZ5UGxheSgpfWZ1bmN0aW9uIG8oYSl7dmFyIGI9YXx8e307Yi5uc19zdF9hZD1cIjFcIixiLm5zX3N0X2FuPSsrcitcIlwiLHQuZ2V0UGxheWJhY2tTZXNzaW9uKCkuc2V0QXNzZXQoYiksdC5ub3RpZnlQbGF5KCkscz0hMX1mdW5jdGlvbiBwKGEsYil7dj09dS5Ob25lJiYodj1iKSxzJiZ2PT1iJiZsKGEpPyh0LmdldFBsYXliYWNrU2Vzc2lvbigpLmdldEFzc2V0KCkuc2V0TGFiZWxzKGEpLHQuZ2V0U3RhdGUoKSE9Zy5QTEFZSU5HJiZ0Lm5vdGlmeVBsYXkoKSk6bihhKSxzPSEwLHY9Yn12YXIgcT1udWxsLHI9MCxzPSExLHQ9bnVsbCx1PXtOb25lOjAsQXVkaW9Db250ZW50OjEsVmlkZW9Db250ZW50OjJ9LHY9dS5Ob25lLHc9bmV3IGMoXCJUVFNUQVwiLChhfHx7fSkuZGVidWcpO2IuZXh0ZW5kKHRoaXMse3BsYXlWaWRlb0FkdmVydGlzZW1lbnQ6ZnVuY3Rpb24oYSxjKXtpZih0KXt3LmFwaUNhbGwoXCJwbGF5VmlkZW9BZHZlcnRpc2VtZW50XCIsYSxjKTt2YXIgZD17bnNfc3RfY3Q6XCJ2YVwifTtjP2QubnNfc3RfY3Q9XCJ2YVwiK2M6dy53YXJuKFwiQ2FsbGluZyAncGxheVZpZGVvQWR2ZXJ0aXNlbWVudCcgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBtZWRpYSB0eXBlIGFzIGEgc2Vjb25kIHBhcmFtZXRlci5cIiksYyE9ZS5MaW5lYXJMaXZlJiZjIT1lLkJyYW5kZWRPbkRlbWFuZExpdmV8fChkLm5zX3N0X2xpPVwiMVwiKSxhJiZiLmV4dGVuZChkLGEpLG8oZCl9fSxwbGF5QXVkaW9BZHZlcnRpc2VtZW50OmZ1bmN0aW9uKGEsYyl7aWYodCl7dy5hcGlDYWxsKFwicGxheUF1ZGlvQWR2ZXJ0aXNlbWVudFwiLGEsYyk7dmFyIGQ9e25zX3N0X2N0OlwiYWFcIn07Yz9kLm5zX3N0X2N0PVwiYWFcIitjOncud2FybihcIkNhbGxpbmcgJ3BsYXlBdWRpb0FkdmVydGlzZW1lbnQnIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgbWVkaWEgdHlwZSBhcyBhIHNlY29uZCBwYXJhbWV0ZXIuXCIpLGMhPWUuTGluZWFyTGl2ZSYmYyE9ZS5CcmFuZGVkT25EZW1hbmRMaXZlfHwoZC5uc19zdF9saT1cIjFcIiksYSYmYi5leHRlbmQoZCxhKSxvKGQpfX0scGxheVZpZGVvQ29udGVudFBhcnQ6ZnVuY3Rpb24oYSxjKXtpZih0KXt3LmFwaUNhbGwoXCJwbGF5VmlkZW9Db250ZW50UGFydFwiLGEsYyk7dmFyIGU9e25zX3N0X2N0OlwidmNcIn07Yz9lLm5zX3N0X2N0PVwidmNcIitjOncud2FybihcIkNhbGxpbmcgJ3BsYXlWaWRlb0NvbnRlbnRQYXJ0JyB3aXRob3V0IHNwZWNpZnlpbmcgdGhlIG1lZGlhIHR5cGUgYXMgYSBzZWNvbmQgcGFyYW1ldGVyLlwiKSxjIT1kLkxpdmUmJmMhPWQuVXNlckdlbmVyYXRlZExpdmV8fChlLm5zX3N0X2xpPVwiMVwiKSxhJiZiLmV4dGVuZChlLGEpLHAoZSx1LlZpZGVvQ29udGVudCl9fSxwbGF5QXVkaW9Db250ZW50UGFydDpmdW5jdGlvbihhLGMpe2lmKHQpe3cuYXBpQ2FsbChcInBsYXlBdWRpb0NvbnRlbnRQYXJ0XCIsYSxjKTt2YXIgZT17bnNfc3RfY3Q6XCJhY1wifTtjP2UubnNfc3RfY3Q9XCJhY1wiK2M6dy53YXJuKFwiQ2FsbGluZyAncGxheUF1ZGlvQ29udGVudFBhcnQnIHdpdGhvdXQgc3BlY2lmeWluZyB0aGUgbWVkaWEgdHlwZSBhcyBhIHNlY29uZCBwYXJhbWV0ZXIuXCIpLGMhPWQuTGl2ZSYmYyE9ZC5Vc2VyR2VuZXJhdGVkTGl2ZXx8KGUubnNfc3RfbGk9XCIxXCIpLGEmJmIuZXh0ZW5kKGUsYSkscChlLHUuQXVkaW9Db250ZW50KX19LHN0b3A6ZnVuY3Rpb24oKXt0JiYody5hcGlDYWxsKFwic3RvcFwiKSx0Lm5vdGlmeVBhdXNlKCkpfX0pLGsoKX07cmV0dXJuIGsuQ29udGVudFR5cGU9ZCxrLkFkVHlwZT1lLGt9KCksYX0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAvdmFyL2xpYi9qZW5raW5zL3dvcmtzcGFjZS9iYmNkb3Rjb20tYnVpbGQtdG8taW50L2JiY2RvdGNvbS93ZWJhcHAvc3RhdGljLXZlcnNpb25lZC9zY3JpcHQvdmVuZG9yL2NvbXNjb3JlL2NvbXNjb3JlLnN0cmVhbWluZy5taW4uanMiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMjg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=